; ModuleID = 'sjeng.ll'
source_filename = "llvm-link"
target datalayout = "e-m:e-p270:32:32-p271:32:32-p272:64:64-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-pc-linux-gnu"

%struct.ECacheType = type { i32, i32, i32 }
%struct._IO_FILE = type { i32, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, i8*, %struct._IO_marker*, %struct._IO_FILE*, i32, i32, i64, i16, i8, [1 x i8], i8*, i64, %struct._IO_codecvt*, %struct._IO_wide_data*, %struct._IO_FILE*, i8*, i64, i32, [20 x i8] }
%struct._IO_marker = type opaque
%struct._IO_codecvt = type opaque
%struct._IO_wide_data = type opaque
%struct.move_s = type { i32, i32, i32, i32, i32, i32 }
%struct.see_data = type { i32, i32 }
%struct.move_x = type { i32, i32, i32, i32 }
%struct.TType = type { i8, i8, i8, i8, i16, i32, i32, i32 }
%struct.QTType = type { i8, i8, i16, i32, i32, i32 }
%struct.node = type { i8, i8, i8, i8, i32, i32, %struct.node**, %struct.node*, %struct.move_s }

@calc_attackers.rook_o = internal constant [4 x i32] [i32 12, i32 -12, i32 1, i32 -1], align 16
@calc_attackers.bishop_o = internal constant [4 x i32] [i32 11, i32 -11, i32 13, i32 -13], align 16
@calc_attackers.knight_o = internal constant [8 x i32] [i32 10, i32 -10, i32 14, i32 -14, i32 23, i32 -23, i32 25, i32 -25], align 16
@is_attacked.bishop_o = internal constant [4 x i32] [i32 11, i32 -11, i32 13, i32 -13], align 16
@is_attacked.knight_o = internal constant [8 x i32] [i32 10, i32 -10, i32 14, i32 -14, i32 23, i32 -23, i32 25, i32 -25], align 16
@is_attacked.rook_o = internal constant [4 x i32] [i32 12, i32 -12, i32 1, i32 -1], align 16
@nk_attacked.bishop_o = internal constant [4 x i32] [i32 11, i32 -11, i32 13, i32 -13], align 16
@nk_attacked.knight_o = internal constant [8 x i32] [i32 10, i32 -10, i32 14, i32 -14, i32 23, i32 -23, i32 25, i32 -25], align 16
@nk_attacked.rook_o = internal constant [4 x i32] [i32 12, i32 -12, i32 1, i32 -1], align 16
@holding = dso_local global [2 x [16 x i32]] zeroinitializer, align 16
@hold_hash = dso_local global i32 0, align 4
@white_hand_eval = dso_local global i32 0, align 4
@black_hand_eval = dso_local global i32 0, align 4
@num_holding = dso_local global [2 x i32] zeroinitializer, align 4
@userealholdings = dso_local global i32 0, align 4
@realholdings = dso_local global [255 x i8] zeroinitializer, align 16
@drop_piece = dso_local global i32 0, align 4
@__const.SwitchColor.t = private unnamed_addr constant [13 x i32] [i32 0, i32 2, i32 1, i32 4, i32 3, i32 0, i32 0, i32 8, i32 7, i32 10, i32 9, i32 12, i32 11], align 16
@__const.SwitchPromoted.t = private unnamed_addr constant [13 x i32] [i32 0, i32 2, i32 1, i32 2, i32 1, i32 0, i32 0, i32 2, i32 1, i32 2, i32 1, i32 2, i32 1], align 16
@.str = private unnamed_addr constant [36 x i8] c"WP: %d WR: %d WB: %d WN: %d WQ: %d\0A\00", align 1
@.str.1 = private unnamed_addr constant [36 x i8] c"BP: %d BR: %d BB: %d BN: %d BQ: %d\0A\00", align 1
@ECache = dso_local global %struct.ECacheType* null, align 8
@ECacheProbes = dso_local global i32 0, align 4
@ECacheHits = dso_local global i32 0, align 4
@.str.3 = private unnamed_addr constant [34 x i8] c"Out of memory allocating ECache.\0A\00", align 1
@setup_epd_line.rankoffsets = internal global [8 x i32] [i32 110, i32 98, i32 86, i32 74, i32 62, i32 50, i32 38, i32 26], align 16
@.str.4 = private unnamed_addr constant [3 x i8] c"bm\00", align 1
@.str.1.5 = private unnamed_addr constant [3 x i8] c"am\00", align 1
@.str.2 = private unnamed_addr constant [34 x i8] c"No best-move or avoid-move found!\00", align 1
@.str.3.6 = private unnamed_addr constant [25 x i8] c"\0AName of EPD testsuite: \00", align 1
@stdin = external dso_local global %struct._IO_FILE*, align 8
@.str.4.7 = private unnamed_addr constant [21 x i8] c"\0ATime per move (s): \00", align 1
@.str.5 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.6 = private unnamed_addr constant [2 x i8] c"r\00", align 1
@stdout = external dso_local global %struct._IO_FILE*, align 8
@.str.7 = private unnamed_addr constant [29 x i8] c"\0ANodes: %i (%0.2f%% qnodes)\0A\00", align 1
@.str.8 = private unnamed_addr constant [54 x i8] c"ECacheProbes : %u   ECacheHits : %u   HitRate : %f%%\0A\00", align 1
@.str.9 = private unnamed_addr constant [60 x i8] c"TTStores : %u TTProbes : %u   TTHits : %u   HitRate : %f%%\0A\00", align 1
@.str.10 = private unnamed_addr constant [51 x i8] c"NTries : %u  NCuts : %u  CutRate : %f%%  TExt: %u\0A\00", align 1
@.str.11 = private unnamed_addr constant [61 x i8] c"Check extensions: %u  Razor drops : %u  Razor Material : %u\0A\00", align 1
@.str.12 = private unnamed_addr constant [22 x i8] c"Move ordering : %f%%\0A\00", align 1
@.str.13 = private unnamed_addr constant [47 x i8] c"Material score: %d  Eval : %d  MaxPosDiff: %d\0A\00", align 1
@.str.14 = private unnamed_addr constant [17 x i8] c"Solution found.\0A\00", align 1
@.str.15 = private unnamed_addr constant [21 x i8] c"Solution not found.\0A\00", align 1
@.str.16 = private unnamed_addr constant [15 x i8] c"Solved: %d/%d\0A\00", align 1
@.str.17 = private unnamed_addr constant [9 x i8] c"EPD: %s\0A\00", align 1
@.str.18 = private unnamed_addr constant [21 x i8] c"Searching to %d ply\0A\00", align 1
@std_material = dso_local global [14 x i32] [i32 0, i32 100, i32 -100, i32 310, i32 -310, i32 4000, i32 -4000, i32 500, i32 -500, i32 900, i32 -900, i32 325, i32 -325, i32 0], align 16
@zh_material = dso_local global [14 x i32] [i32 0, i32 100, i32 -100, i32 210, i32 -210, i32 4000, i32 -4000, i32 250, i32 -250, i32 450, i32 -450, i32 230, i32 -230, i32 0], align 16
@suicide_material = dso_local global [14 x i32] [i32 0, i32 15, i32 -15, i32 150, i32 -150, i32 500, i32 -500, i32 150, i32 -150, i32 50, i32 -50, i32 0, i32 0, i32 0], align 16
@losers_material = dso_local global [14 x i32] [i32 0, i32 80, i32 -80, i32 320, i32 -320, i32 1000, i32 -1000, i32 350, i32 -350, i32 400, i32 -400, i32 270, i32 -270, i32 0], align 16
@material = dso_local global [14 x i32] zeroinitializer, align 16
@Xfile = dso_local constant <{ [118 x i32], [26 x i32] }> <{ [118 x i32] [i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 0, i32 0, i32 0, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 0, i32 0, i32 0, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 0, i32 0, i32 0, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 0, i32 0, i32 0, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 0, i32 0, i32 0, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 0, i32 0, i32 0, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 0, i32 0, i32 0, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8], [26 x i32] zeroinitializer }>, align 16
@Xrank = dso_local constant <{ [118 x i32], [26 x i32] }> <{ [118 x i32] [i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 0, i32 0, i32 0, i32 0, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 0, i32 0, i32 0, i32 0, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 3, i32 0, i32 0, i32 0, i32 0, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 4, i32 0, i32 0, i32 0, i32 0, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 5, i32 0, i32 0, i32 0, i32 0, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 6, i32 0, i32 0, i32 0, i32 0, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 7, i32 0, i32 0, i32 0, i32 0, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8, i32 8], [26 x i32] zeroinitializer }>, align 16
@Xdiagl = dso_local constant <{ [118 x i32], [26 x i32] }> <{ [118 x i32] [i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8, i32 0, i32 0, i32 0, i32 0, i32 9, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 0, i32 0, i32 0, i32 0, i32 10, i32 9, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 0, i32 0, i32 0, i32 0, i32 11, i32 10, i32 9, i32 1, i32 2, i32 3, i32 4, i32 5, i32 0, i32 0, i32 0, i32 0, i32 12, i32 11, i32 10, i32 9, i32 1, i32 2, i32 3, i32 4, i32 0, i32 0, i32 0, i32 0, i32 13, i32 12, i32 11, i32 10, i32 9, i32 1, i32 2, i32 3, i32 0, i32 0, i32 0, i32 0, i32 14, i32 13, i32 12, i32 11, i32 10, i32 9, i32 1, i32 2, i32 0, i32 0, i32 0, i32 0, i32 15, i32 14, i32 13, i32 12, i32 11, i32 10, i32 9, i32 1], [26 x i32] zeroinitializer }>, align 16
@Xdiagr = dso_local constant <{ [118 x i32], [26 x i32] }> <{ [118 x i32] [i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 15, i32 14, i32 13, i32 12, i32 11, i32 10, i32 9, i32 1, i32 0, i32 0, i32 0, i32 0, i32 14, i32 13, i32 12, i32 11, i32 10, i32 9, i32 1, i32 2, i32 0, i32 0, i32 0, i32 0, i32 13, i32 12, i32 11, i32 10, i32 9, i32 1, i32 2, i32 3, i32 0, i32 0, i32 0, i32 0, i32 12, i32 11, i32 10, i32 9, i32 1, i32 2, i32 3, i32 4, i32 0, i32 0, i32 0, i32 0, i32 11, i32 10, i32 9, i32 1, i32 2, i32 3, i32 4, i32 5, i32 0, i32 0, i32 0, i32 0, i32 10, i32 9, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 0, i32 0, i32 0, i32 0, i32 9, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 0, i32 0, i32 0, i32 0, i32 1, i32 2, i32 3, i32 4, i32 5, i32 6, i32 7, i32 8], [26 x i32] zeroinitializer }>, align 16
@sqcolor = dso_local constant <{ [118 x i32], [26 x i32] }> <{ [118 x i32] [i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1, i32 0, i32 1], [26 x i32] zeroinitializer }>, align 16
@pcsqbishop = dso_local constant <{ [118 x i32], [26 x i32] }> <{ [118 x i32] [i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -5, i32 -5, i32 -10, i32 -5, i32 -5, i32 -10, i32 -5, i32 -5, i32 0, i32 0, i32 0, i32 0, i32 -5, i32 10, i32 5, i32 10, i32 10, i32 5, i32 10, i32 -5, i32 0, i32 0, i32 0, i32 0, i32 -5, i32 5, i32 6, i32 15, i32 15, i32 6, i32 5, i32 -5, i32 0, i32 0, i32 0, i32 0, i32 -5, i32 3, i32 15, i32 10, i32 10, i32 15, i32 3, i32 -5, i32 0, i32 0, i32 0, i32 0, i32 -5, i32 3, i32 15, i32 10, i32 10, i32 15, i32 3, i32 -5, i32 0, i32 0, i32 0, i32 0, i32 -5, i32 5, i32 6, i32 15, i32 15, i32 6, i32 5, i32 -5, i32 0, i32 0, i32 0, i32 0, i32 -5, i32 10, i32 5, i32 10, i32 10, i32 5, i32 10, i32 -5, i32 0, i32 0, i32 0, i32 0, i32 -5, i32 -5, i32 -10, i32 -5, i32 -5, i32 -10, i32 -5, i32 -5], [26 x i32] zeroinitializer }>, align 16
@black_knight = dso_local constant <{ [118 x i32], [26 x i32] }> <{ [118 x i32] [i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -20, i32 -10, i32 -10, i32 -10, i32 -10, i32 -10, i32 -10, i32 -20, i32 0, i32 0, i32 0, i32 0, i32 -10, i32 15, i32 25, i32 25, i32 25, i32 25, i32 15, i32 -10, i32 0, i32 0, i32 0, i32 0, i32 -10, i32 15, i32 25, i32 35, i32 35, i32 35, i32 15, i32 -10, i32 0, i32 0, i32 0, i32 0, i32 -10, i32 10, i32 25, i32 20, i32 25, i32 25, i32 10, i32 -10, i32 0, i32 0, i32 0, i32 0, i32 -10, i32 0, i32 20, i32 20, i32 20, i32 20, i32 0, i32 -10, i32 0, i32 0, i32 0, i32 0, i32 -10, i32 0, i32 15, i32 15, i32 15, i32 15, i32 0, i32 -10, i32 0, i32 0, i32 0, i32 0, i32 -10, i32 0, i32 0, i32 3, i32 3, i32 0, i32 0, i32 -10, i32 0, i32 0, i32 0, i32 0, i32 -20, i32 -35, i32 -10, i32 -10, i32 -10, i32 -10, i32 -35, i32 -20], [26 x i32] zeroinitializer }>, align 16
@white_knight = dso_local constant <{ [118 x i32], [26 x i32] }> <{ [118 x i32] [i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -20, i32 -35, i32 -10, i32 -10, i32 -10, i32 -10, i32 -35, i32 -20, i32 0, i32 0, i32 0, i32 0, i32 -10, i32 0, i32 0, i32 3, i32 3, i32 0, i32 0, i32 -10, i32 0, i32 0, i32 0, i32 0, i32 -10, i32 0, i32 15, i32 15, i32 15, i32 15, i32 0, i32 -10, i32 0, i32 0, i32 0, i32 0, i32 -10, i32 0, i32 20, i32 20, i32 20, i32 20, i32 0, i32 -10, i32 0, i32 0, i32 0, i32 0, i32 -10, i32 10, i32 25, i32 20, i32 25, i32 25, i32 10, i32 -10, i32 0, i32 0, i32 0, i32 0, i32 -10, i32 15, i32 25, i32 35, i32 35, i32 35, i32 15, i32 -10, i32 0, i32 0, i32 0, i32 0, i32 -10, i32 15, i32 25, i32 25, i32 25, i32 25, i32 15, i32 -10, i32 0, i32 0, i32 0, i32 0, i32 -20, i32 -10, i32 -10, i32 -10, i32 -10, i32 -10, i32 -10, i32 -20], [26 x i32] zeroinitializer }>, align 16
@white_pawn = dso_local constant <{ [106 x i32], [38 x i32] }> <{ [106 x i32] [i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 25, i32 25, i32 35, i32 5, i32 5, i32 50, i32 45, i32 30, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 7, i32 7, i32 5, i32 5, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 14, i32 14, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 10, i32 20, i32 20, i32 10, i32 5, i32 5, i32 0, i32 0, i32 0, i32 0, i32 12, i32 18, i32 18, i32 27, i32 27, i32 18, i32 18, i32 18, i32 0, i32 0, i32 0, i32 0, i32 25, i32 30, i32 30, i32 35, i32 35, i32 35, i32 30, i32 25], [38 x i32] zeroinitializer }>, align 16
@black_pawn = dso_local constant <{ [106 x i32], [38 x i32] }> <{ [106 x i32] [i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 30, i32 30, i32 30, i32 35, i32 35, i32 35, i32 30, i32 25, i32 0, i32 0, i32 0, i32 0, i32 12, i32 18, i32 18, i32 27, i32 27, i32 18, i32 18, i32 18, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 10, i32 20, i32 20, i32 10, i32 5, i32 5, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 14, i32 14, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 7, i32 7, i32 5, i32 5, i32 0, i32 0, i32 0, i32 0, i32 0, i32 25, i32 25, i32 35, i32 5, i32 5, i32 50, i32 45, i32 30], [38 x i32] zeroinitializer }>, align 16
@white_king = dso_local constant <{ [118 x i32], [26 x i32] }> <{ [118 x i32] [i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -100, i32 7, i32 4, i32 0, i32 10, i32 4, i32 7, i32 -100, i32 0, i32 0, i32 0, i32 0, i32 -250, i32 -200, i32 -150, i32 -100, i32 -100, i32 -150, i32 -200, i32 -250, i32 0, i32 0, i32 0, i32 0, i32 -350, i32 -300, i32 -300, i32 -250, i32 -250, i32 -300, i32 -300, i32 -350, i32 0, i32 0, i32 0, i32 0, i32 -400, i32 -400, i32 -400, i32 -350, i32 -350, i32 -400, i32 -400, i32 -400, i32 0, i32 0, i32 0, i32 0, i32 -450, i32 -450, i32 -450, i32 -450, i32 -450, i32 -450, i32 -450, i32 -450, i32 0, i32 0, i32 0, i32 0, i32 -500, i32 -500, i32 -500, i32 -500, i32 -500, i32 -500, i32 -500, i32 -500, i32 0, i32 0, i32 0, i32 0, i32 -500, i32 -500, i32 -500, i32 -500, i32 -500, i32 -500, i32 -500, i32 -500, i32 0, i32 0, i32 0, i32 0, i32 -500, i32 -500, i32 -500, i32 -500, i32 -500, i32 -500, i32 -500, i32 -500], [26 x i32] zeroinitializer }>, align 16
@black_king = dso_local constant <{ [118 x i32], [26 x i32] }> <{ [118 x i32] [i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -500, i32 -500, i32 -500, i32 -500, i32 -500, i32 -500, i32 -500, i32 -500, i32 0, i32 0, i32 0, i32 0, i32 -500, i32 -500, i32 -500, i32 -500, i32 -500, i32 -500, i32 -500, i32 -500, i32 0, i32 0, i32 0, i32 0, i32 -500, i32 -500, i32 -500, i32 -500, i32 -500, i32 -500, i32 -500, i32 -500, i32 0, i32 0, i32 0, i32 0, i32 -450, i32 -450, i32 -450, i32 -450, i32 -450, i32 -450, i32 -450, i32 -450, i32 0, i32 0, i32 0, i32 0, i32 -400, i32 -400, i32 -400, i32 -350, i32 -350, i32 -400, i32 -400, i32 -400, i32 0, i32 0, i32 0, i32 0, i32 -350, i32 -300, i32 -300, i32 -250, i32 -250, i32 -300, i32 -300, i32 -350, i32 0, i32 0, i32 0, i32 0, i32 -250, i32 -200, i32 -150, i32 -100, i32 -100, i32 -150, i32 -200, i32 -250, i32 0, i32 0, i32 0, i32 0, i32 -100, i32 7, i32 4, i32 0, i32 10, i32 4, i32 7, i32 -100], [26 x i32] zeroinitializer }>, align 16
@black_queen = dso_local constant <{ [114 x i32], [30 x i32] }> <{ [114 x i32] [i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 5, i32 5, i32 5, i32 10, i32 10, i32 5, i32 5, i32 5, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 3, i32 3, i32 3, i32 3, i32 3, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -30, i32 -30, i32 -30, i32 -30, i32 -30, i32 -30, i32 -30, i32 -30, i32 0, i32 0, i32 0, i32 0, i32 -60, i32 -40, i32 -40, i32 -60, i32 -60, i32 -40, i32 -40, i32 -60, i32 0, i32 0, i32 0, i32 0, i32 -40, i32 -40, i32 -40, i32 -40, i32 -40, i32 -40, i32 -40, i32 -40, i32 0, i32 0, i32 0, i32 0, i32 -15, i32 -15, i32 -15, i32 -10, i32 -10, i32 -15, i32 -15, i32 -15, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 7, i32 10, i32 5, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 5], [30 x i32] zeroinitializer }>, align 16
@white_queen = dso_local constant <{ [118 x i32], [26 x i32] }> <{ [118 x i32] [i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 5, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 7, i32 10, i32 5, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -15, i32 -15, i32 -15, i32 -10, i32 -10, i32 -15, i32 -15, i32 -15, i32 0, i32 0, i32 0, i32 0, i32 -40, i32 -40, i32 -40, i32 -40, i32 -40, i32 -40, i32 -40, i32 -40, i32 0, i32 0, i32 0, i32 0, i32 -60, i32 -40, i32 -40, i32 -60, i32 -60, i32 -40, i32 -40, i32 -60, i32 0, i32 0, i32 0, i32 0, i32 -30, i32 -30, i32 -30, i32 -30, i32 -30, i32 -30, i32 -30, i32 -30, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 3, i32 3, i32 3, i32 3, i32 3, i32 0, i32 0, i32 0, i32 0, i32 0, i32 5, i32 5, i32 5, i32 10, i32 10, i32 5, i32 5, i32 5], [26 x i32] zeroinitializer }>, align 16
@black_rook = dso_local constant <{ [118 x i32], [26 x i32] }> <{ [118 x i32] [i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 10, i32 15, i32 20, i32 25, i32 25, i32 20, i32 15, i32 10, i32 0, i32 0, i32 0, i32 0, i32 0, i32 10, i32 15, i32 20, i32 20, i32 15, i32 10, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -20, i32 -20, i32 -20, i32 -20, i32 -20, i32 -20, i32 -20, i32 -20, i32 0, i32 0, i32 0, i32 0, i32 -20, i32 -20, i32 -20, i32 -30, i32 -30, i32 -20, i32 -20, i32 -20, i32 0, i32 0, i32 0, i32 0, i32 -20, i32 -20, i32 -20, i32 -20, i32 -20, i32 -20, i32 -20, i32 -20, i32 0, i32 0, i32 0, i32 0, i32 -15, i32 -15, i32 -15, i32 -10, i32 -10, i32 -15, i32 -15, i32 -15, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 7, i32 10, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2], [26 x i32] zeroinitializer }>, align 16
@white_rook = dso_local constant <{ [118 x i32], [26 x i32] }> <{ [118 x i32] [i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 7, i32 10, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -15, i32 -15, i32 -15, i32 -10, i32 -10, i32 -15, i32 -15, i32 -15, i32 0, i32 0, i32 0, i32 0, i32 -20, i32 -20, i32 -20, i32 -20, i32 -20, i32 -20, i32 -20, i32 -20, i32 0, i32 0, i32 0, i32 0, i32 -20, i32 -20, i32 -20, i32 -30, i32 -30, i32 -20, i32 -20, i32 -20, i32 0, i32 0, i32 0, i32 0, i32 -20, i32 -20, i32 -20, i32 -20, i32 -20, i32 -20, i32 -20, i32 -20, i32 0, i32 0, i32 0, i32 0, i32 0, i32 10, i32 15, i32 20, i32 20, i32 15, i32 10, i32 0, i32 0, i32 0, i32 0, i32 0, i32 10, i32 15, i32 20, i32 25, i32 25, i32 20, i32 15, i32 10], [26 x i32] zeroinitializer }>, align 16
@upscale = dso_local constant [64 x i32] [i32 26, i32 27, i32 28, i32 29, i32 30, i32 31, i32 32, i32 33, i32 38, i32 39, i32 40, i32 41, i32 42, i32 43, i32 44, i32 45, i32 50, i32 51, i32 52, i32 53, i32 54, i32 55, i32 56, i32 57, i32 62, i32 63, i32 64, i32 65, i32 66, i32 67, i32 68, i32 69, i32 74, i32 75, i32 76, i32 77, i32 78, i32 79, i32 80, i32 81, i32 86, i32 87, i32 88, i32 89, i32 90, i32 91, i32 92, i32 93, i32 98, i32 99, i32 100, i32 101, i32 102, i32 103, i32 104, i32 105, i32 110, i32 111, i32 112, i32 113, i32 114, i32 115, i32 116, i32 117], align 16
@pre_p_tropism = dso_local global [9 x i32] [i32 9999, i32 40, i32 20, i32 10, i32 3, i32 1, i32 1, i32 0, i32 9999], align 16
@pre_r_tropism = dso_local global [9 x i32] [i32 9999, i32 50, i32 40, i32 15, i32 5, i32 1, i32 1, i32 0, i32 9999], align 16
@pre_n_tropism = dso_local global [9 x i32] [i32 9999, i32 50, i32 70, i32 35, i32 10, i32 2, i32 1, i32 0, i32 9999], align 16
@pre_q_tropism = dso_local global [9 x i32] [i32 9999, i32 100, i32 60, i32 20, i32 5, i32 2, i32 0, i32 0, i32 9999], align 16
@pre_b_tropism = dso_local global [9 x i32] [i32 9999, i32 50, i32 25, i32 15, i32 5, i32 2, i32 2, i32 2, i32 9999], align 16
@ksafety_scaled = dso_local global [15 x [9 x i32]] [[9 x i32] [i32 -5, i32 5, i32 10, i32 15, i32 50, i32 80, i32 150, i32 150, i32 150], [9 x i32] [i32 -5, i32 15, i32 20, i32 25, i32 70, i32 150, i32 200, i32 200, i32 200], [9 x i32] [i32 -5, i32 15, i32 30, i32 30, i32 100, i32 200, i32 300, i32 300, i32 300], [9 x i32] [i32 -10, i32 20, i32 40, i32 40, i32 100, i32 200, i32 300, i32 300, i32 400], [9 x i32] [i32 -10, i32 30, i32 50, i32 80, i32 150, i32 300, i32 400, i32 400, i32 500], [9 x i32] [i32 -10, i32 35, i32 60, i32 100, i32 200, i32 250, i32 400, i32 400, i32 500], [9 x i32] [i32 -10, i32 40, i32 70, i32 110, i32 210, i32 300, i32 500, i32 500, i32 600], [9 x i32] [i32 -10, i32 45, i32 75, i32 125, i32 215, i32 300, i32 500, i32 600, i32 700], [9 x i32] [i32 -10, i32 60, i32 90, i32 130, i32 240, i32 350, i32 500, i32 600, i32 700], [9 x i32] [i32 -15, i32 60, i32 95, i32 145, i32 260, i32 350, i32 500, i32 600, i32 700], [9 x i32] [i32 -15, i32 60, i32 100, i32 150, i32 270, i32 350, i32 500, i32 600, i32 700], [9 x i32] [i32 -15, i32 60, i32 110, i32 160, i32 280, i32 400, i32 600, i32 700, i32 800], [9 x i32] [i32 -20, i32 70, i32 115, i32 165, i32 290, i32 400, i32 600, i32 700, i32 800], [9 x i32] [i32 -20, i32 80, i32 120, i32 170, i32 300, i32 450, i32 700, i32 800, i32 900], [9 x i32] [i32 -20, i32 80, i32 125, i32 175, i32 310, i32 450, i32 700, i32 800, i32 900]], align 16
@p_tropism = dso_local global [144 x [144 x i8]] zeroinitializer, align 16
@b_tropism = dso_local global [144 x [144 x i8]] zeroinitializer, align 16
@n_tropism = dso_local global [144 x [144 x i8]] zeroinitializer, align 16
@r_tropism = dso_local global [144 x [144 x i8]] zeroinitializer, align 16
@q_tropism = dso_local global [144 x [144 x i8]] zeroinitializer, align 16
@Material = dso_local global i32 0, align 4
@lcentral = internal global <{ [118 x i32], [26 x i32] }> <{ [118 x i32] [i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -20, i32 -15, i32 -15, i32 -15, i32 -15, i32 -15, i32 -15, i32 -20, i32 0, i32 0, i32 0, i32 0, i32 -15, i32 0, i32 3, i32 5, i32 5, i32 3, i32 0, i32 -15, i32 0, i32 0, i32 0, i32 0, i32 -15, i32 0, i32 15, i32 15, i32 15, i32 15, i32 0, i32 -15, i32 0, i32 0, i32 0, i32 0, i32 -15, i32 0, i32 15, i32 30, i32 30, i32 15, i32 0, i32 -15, i32 0, i32 0, i32 0, i32 0, i32 -15, i32 0, i32 15, i32 30, i32 30, i32 15, i32 0, i32 -15, i32 0, i32 0, i32 0, i32 0, i32 -15, i32 0, i32 15, i32 15, i32 15, i32 15, i32 0, i32 -15, i32 0, i32 0, i32 0, i32 0, i32 -15, i32 0, i32 3, i32 5, i32 5, i32 3, i32 0, i32 -15, i32 0, i32 0, i32 0, i32 0, i32 -20, i32 -15, i32 -15, i32 -15, i32 -15, i32 -15, i32 -15, i32 -20], [26 x i32] zeroinitializer }>, align 16
@l_king_mobility.king_o = internal constant [8 x i32] [i32 13, i32 12, i32 11, i32 1, i32 -1, i32 -11, i32 -12, i32 -13], align 16
@l_knight_mobility.knight_o = internal constant [8 x i32] [i32 10, i32 -10, i32 14, i32 -14, i32 23, i32 -23, i32 25, i32 -25], align 16
@kingcap = dso_local global i32 0, align 4
@numb_moves = dso_local global i32 0, align 4
@fcaptures = dso_local global i32 0, align 4
@gfrom = dso_local global i32 0, align 4
@total_moves = dso_local global i32 0, align 4
@total_movegens = dso_local global i32 0, align 4
@genfor = internal global %struct.move_s* null, align 8
@f_in_check.knight_o = internal constant [8 x i32] [i32 10, i32 -10, i32 14, i32 -14, i32 23, i32 -23, i32 25, i32 -25], align 16
@extended_in_check.knight_o = internal constant [8 x i32] [i32 10, i32 -10, i32 14, i32 -14, i32 23, i32 -23, i32 25, i32 -25], align 16
@std_p_tropism = dso_local constant [8 x i32] [i32 9999, i32 15, i32 10, i32 7, i32 2, i32 0, i32 0, i32 0], align 16
@std_own_p_tropism = dso_local constant [8 x i32] [i32 9999, i32 30, i32 10, i32 2, i32 0, i32 0, i32 0, i32 0], align 16
@std_r_tropism = dso_local constant <{ i32, i32, i32, i32, i32, i32, [10 x i32] }> <{ i32 9999, i32 0, i32 15, i32 5, i32 2, i32 1, [10 x i32] zeroinitializer }>, align 16
@std_n_tropism = dso_local constant [8 x i32] [i32 9999, i32 14, i32 9, i32 6, i32 1, i32 0, i32 0, i32 0], align 16
@std_q_tropism = dso_local constant [8 x i32] [i32 9999, i32 200, i32 50, i32 15, i32 3, i32 2, i32 1, i32 0], align 16
@std_b_tropism = dso_local constant [8 x i32] [i32 9999, i32 12, i32 7, i32 5, i32 0, i32 0, i32 0, i32 0], align 16
@distance = dso_local global [144 x [144 x i32]] zeroinitializer, align 16
@king_locs = dso_local global [2 x i32] zeroinitializer, align 4
@rookdistance = dso_local global [144 x [144 x i32]] zeroinitializer, align 16
@wmat = dso_local global i32 0, align 4
@bmat = dso_local global i32 0, align 4
@maxposdiff = dso_local global i32 0, align 4
@bishop_mobility.dir = internal constant [4 x i32] [i32 -13, i32 -11, i32 11, i32 13], align 16
@rook_mobility.dir = internal constant [4 x i32] [i32 -1, i32 1, i32 12, i32 -12], align 16
@Rook.square_d1 = internal constant [2 x i32] [i32 29, i32 113], align 4
@sbishop = internal global <{ [118 x i32], [26 x i32] }> <{ [118 x i32] [i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 0, i32 0, i32 0, i32 0, i32 -2, i32 8, i32 5, i32 5, i32 5, i32 5, i32 8, i32 -2, i32 0, i32 0, i32 0, i32 0, i32 -2, i32 3, i32 3, i32 5, i32 5, i32 3, i32 3, i32 -2, i32 0, i32 0, i32 0, i32 0, i32 -2, i32 2, i32 5, i32 4, i32 4, i32 5, i32 2, i32 -2, i32 0, i32 0, i32 0, i32 0, i32 -2, i32 2, i32 5, i32 4, i32 4, i32 5, i32 2, i32 -2, i32 0, i32 0, i32 0, i32 0, i32 -2, i32 3, i32 3, i32 5, i32 5, i32 3, i32 3, i32 -2, i32 0, i32 0, i32 0, i32 0, i32 -2, i32 8, i32 5, i32 5, i32 5, i32 5, i32 8, i32 -2, i32 0, i32 0, i32 0, i32 0, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2, i32 -2], [26 x i32] zeroinitializer }>, align 16
@sknight = internal global <{ [118 x i32], [26 x i32] }> <{ [118 x i32] [i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -20, i32 -10, i32 -10, i32 -10, i32 -10, i32 -10, i32 -10, i32 -20, i32 0, i32 0, i32 0, i32 0, i32 -10, i32 0, i32 0, i32 3, i32 3, i32 0, i32 0, i32 -10, i32 0, i32 0, i32 0, i32 0, i32 -10, i32 0, i32 5, i32 5, i32 5, i32 5, i32 0, i32 -10, i32 0, i32 0, i32 0, i32 0, i32 -10, i32 0, i32 5, i32 10, i32 10, i32 5, i32 0, i32 -10, i32 0, i32 0, i32 0, i32 0, i32 -10, i32 0, i32 5, i32 10, i32 10, i32 5, i32 0, i32 -10, i32 0, i32 0, i32 0, i32 0, i32 -10, i32 0, i32 5, i32 5, i32 5, i32 5, i32 0, i32 -10, i32 0, i32 0, i32 0, i32 0, i32 -10, i32 0, i32 0, i32 3, i32 3, i32 0, i32 0, i32 -10, i32 0, i32 0, i32 0, i32 0, i32 -20, i32 -10, i32 -10, i32 -10, i32 -10, i32 -10, i32 -10, i32 -20], [26 x i32] zeroinitializer }>, align 16
@.str.22 = private unnamed_addr constant [35 x i8] c"Illegal piece detected sq=%i c=%i\0A\00", align 1
@evalRoutines = internal global [7 x i32 (i32, i32)*] [i32 (i32, i32)* @ErrorIt, i32 (i32, i32)* @Pawn, i32 (i32, i32)* @Knight, i32 (i32, i32)* @King, i32 (i32, i32)* @Rook, i32 (i32, i32)* @Queen, i32 (i32, i32)* @Bishop], align 16
@swhite_pawn = internal global <{ [106 x i32], [38 x i32] }> <{ [106 x i32] [i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 1, i32 2, i32 3, i32 10, i32 10, i32 3, i32 2, i32 1, i32 0, i32 0, i32 0, i32 0, i32 2, i32 4, i32 6, i32 12, i32 12, i32 6, i32 4, i32 2, i32 0, i32 0, i32 0, i32 0, i32 3, i32 6, i32 9, i32 14, i32 14, i32 9, i32 6, i32 3, i32 0, i32 0, i32 0, i32 0, i32 10, i32 12, i32 14, i32 16, i32 16, i32 14, i32 12, i32 10, i32 0, i32 0, i32 0, i32 0, i32 20, i32 22, i32 24, i32 26, i32 26, i32 24, i32 22, i32 20], [38 x i32] zeroinitializer }>, align 16
@sblack_pawn = internal global <{ [94 x i32], [50 x i32] }> <{ [94 x i32] [i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 20, i32 22, i32 24, i32 26, i32 26, i32 24, i32 22, i32 20, i32 0, i32 0, i32 0, i32 0, i32 10, i32 12, i32 14, i32 16, i32 16, i32 14, i32 12, i32 10, i32 0, i32 0, i32 0, i32 0, i32 3, i32 6, i32 9, i32 14, i32 14, i32 9, i32 6, i32 3, i32 0, i32 0, i32 0, i32 0, i32 2, i32 4, i32 6, i32 12, i32 12, i32 6, i32 4, i32 2, i32 0, i32 0, i32 0, i32 0, i32 1, i32 2, i32 3, i32 10, i32 10, i32 3, i32 2, i32 1], [50 x i32] zeroinitializer }>, align 16
@swhite_king = internal global <{ [118 x i32], [26 x i32] }> <{ [118 x i32] [i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 2, i32 14, i32 0, i32 0, i32 0, i32 9, i32 14, i32 2, i32 0, i32 0, i32 0, i32 0, i32 -3, i32 -5, i32 -6, i32 -6, i32 -6, i32 -6, i32 -5, i32 -3, i32 0, i32 0, i32 0, i32 0, i32 -5, i32 -5, i32 -8, i32 -8, i32 -8, i32 -8, i32 -5, i32 -5, i32 0, i32 0, i32 0, i32 0, i32 -8, i32 -8, i32 -13, i32 -13, i32 -13, i32 -13, i32 -8, i32 -8, i32 0, i32 0, i32 0, i32 0, i32 -13, i32 -13, i32 -21, i32 -21, i32 -21, i32 -21, i32 -13, i32 -13, i32 0, i32 0, i32 0, i32 0, i32 -21, i32 -21, i32 -34, i32 -34, i32 -34, i32 -34, i32 -21, i32 -21, i32 0, i32 0, i32 0, i32 0, i32 -34, i32 -34, i32 -55, i32 -55, i32 -55, i32 -55, i32 -34, i32 -34, i32 0, i32 0, i32 0, i32 0, i32 -55, i32 -55, i32 -89, i32 -89, i32 -89, i32 -89, i32 -55, i32 -55], [26 x i32] zeroinitializer }>, align 16
@send_king = internal global <{ [118 x i32], [26 x i32] }> <{ [118 x i32] [i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -5, i32 -3, i32 -1, i32 0, i32 0, i32 -1, i32 -3, i32 -5, i32 0, i32 0, i32 0, i32 0, i32 -3, i32 10, i32 10, i32 10, i32 10, i32 10, i32 10, i32 -3, i32 0, i32 0, i32 0, i32 0, i32 -1, i32 10, i32 25, i32 25, i32 25, i32 25, i32 10, i32 -1, i32 0, i32 0, i32 0, i32 0, i32 0, i32 10, i32 25, i32 50, i32 50, i32 25, i32 10, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 10, i32 25, i32 50, i32 50, i32 25, i32 10, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -1, i32 10, i32 25, i32 25, i32 25, i32 25, i32 10, i32 -1, i32 0, i32 0, i32 0, i32 0, i32 -3, i32 10, i32 10, i32 10, i32 10, i32 10, i32 10, i32 -3, i32 0, i32 0, i32 0, i32 0, i32 -5, i32 -3, i32 -1, i32 0, i32 0, i32 -1, i32 -3, i32 -5], [26 x i32] zeroinitializer }>, align 16
@sblack_king = internal global <{ [118 x i32], [26 x i32] }> <{ [118 x i32] [i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -55, i32 -55, i32 -89, i32 -89, i32 -89, i32 -89, i32 -55, i32 -55, i32 0, i32 0, i32 0, i32 0, i32 -34, i32 -34, i32 -55, i32 -55, i32 -55, i32 -55, i32 -34, i32 -34, i32 0, i32 0, i32 0, i32 0, i32 -21, i32 -21, i32 -34, i32 -34, i32 -34, i32 -34, i32 -21, i32 -21, i32 0, i32 0, i32 0, i32 0, i32 -13, i32 -13, i32 -21, i32 -21, i32 -21, i32 -21, i32 -13, i32 -13, i32 0, i32 0, i32 0, i32 0, i32 -8, i32 -8, i32 -13, i32 -13, i32 -13, i32 -13, i32 -8, i32 -8, i32 0, i32 0, i32 0, i32 0, i32 -5, i32 -5, i32 -8, i32 -8, i32 -8, i32 -8, i32 -5, i32 -5, i32 0, i32 0, i32 0, i32 0, i32 -3, i32 -5, i32 -6, i32 -6, i32 -6, i32 -6, i32 -5, i32 -3, i32 0, i32 0, i32 0, i32 0, i32 2, i32 14, i32 0, i32 0, i32 0, i32 9, i32 14, i32 2], [26 x i32] zeroinitializer }>, align 16
@srev_rank = internal constant [9 x i32] [i32 0, i32 8, i32 7, i32 6, i32 5, i32 4, i32 3, i32 2, i32 1], align 16
@hand_value = dso_local global [13 x i32] [i32 0, i32 100, i32 -100, i32 210, i32 -210, i32 0, i32 0, i32 250, i32 -250, i32 450, i32 -450, i32 230, i32 -230], align 16
@std_hand_value = dso_local global [13 x i32] [i32 0, i32 100, i32 -100, i32 210, i32 -210, i32 0, i32 0, i32 250, i32 -250, i32 450, i32 -450, i32 230, i32 -230], align 16
@must_go = dso_local global i32 0, align 4
@partnerdead = dso_local global i32 0, align 4
@piecedead = dso_local global i32 0, align 4
@.str.27 = private unnamed_addr constant [69 x i8] c"tellics ptell Hello! I am Sjeng and hope you enjoy playing with me.\0A\00", align 1
@.str.1.28 = private unnamed_addr constant [76 x i8] c"tellics ptell For help on some commands that I understand, ptell me 'help'\0A\00", align 1
@.str.2.29 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@.str.3.30 = private unnamed_addr constant [25 x i8] c"tellics set f5 bughouse\0A\00", align 1
@.str.4.31 = private unnamed_addr constant [16 x i8] c"tellics unseek\0A\00", align 1
@.str.5.32 = private unnamed_addr constant [20 x i8] c"tellics set f5 1=1\0A\00", align 1
@__const.HandlePtell.howmuch = private unnamed_addr constant [80 x i8] c"is...uh...what did you say?\0A\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00\00", align 16
@.str.6.33 = private unnamed_addr constant [5 x i8] c"help\00", align 1
@.str.7.34 = private unnamed_addr constant [147 x i8] c"tellics ptell Commands that I understand are : sit, go, fast, slow, abort, flag, +/++/+++/-/--/---{p,n,b,r,q,d,h,trades}, x, dead, formula, help.\0A\00", align 1
@.str.8.35 = private unnamed_addr constant [6 x i8] c"sorry\00", align 1
@.str.9.36 = private unnamed_addr constant [59 x i8] c"tellics ptell Sorry, but I'm not playing a bughouse game.\0A\00", align 1
@.str.10.37 = private unnamed_addr constant [4 x i8] c"sit\00", align 1
@.str.11.38 = private unnamed_addr constant [56 x i8] c"tellics ptell Ok, I sit next move. Tell me when to go.\0A\00", align 1
@.str.12.39 = private unnamed_addr constant [3 x i8] c"go\00", align 1
@.str.13.40 = private unnamed_addr constant [5 x i8] c"move\00", align 1
@.str.14.41 = private unnamed_addr constant [31 x i8] c"tellics ptell Ok, I'm moving.\0A\00", align 1
@.str.15.42 = private unnamed_addr constant [5 x i8] c"fast\00", align 1
@.str.16.43 = private unnamed_addr constant [5 x i8] c"time\00", align 1
@.str.17.44 = private unnamed_addr constant [35 x i8] c"tellics ptell Ok, I'm going FAST!\0A\00", align 1
@.str.18.45 = private unnamed_addr constant [5 x i8] c"slow\00", align 1
@.str.19 = private unnamed_addr constant [36 x i8] c"tellics ptell Ok, moving normally.\0A\00", align 1
@.str.20 = private unnamed_addr constant [6 x i8] c"abort\00", align 1
@.str.21 = private unnamed_addr constant [35 x i8] c"tellics ptell Requesting abort...\0A\00", align 1
@.str.22.46 = private unnamed_addr constant [15 x i8] c"tellics abort\0A\00", align 1
@.str.23 = private unnamed_addr constant [5 x i8] c"flag\00", align 1
@.str.24 = private unnamed_addr constant [27 x i8] c"tellics ptell Flagging...\0A\00", align 1
@.str.25 = private unnamed_addr constant [14 x i8] c"tellics flag\0A\00", align 1
@.str.26 = private unnamed_addr constant [2 x i8] c"+\00", align 1
@.str.27.47 = private unnamed_addr constant [6 x i8] c"trade\00", align 1
@.str.28 = private unnamed_addr constant [2 x i8] c"n\00", align 1
@.str.29 = private unnamed_addr constant [2 x i8] c"b\00", align 1
@.str.30 = private unnamed_addr constant [2 x i8] c"p\00", align 1
@.str.31 = private unnamed_addr constant [2 x i8] c"r\00", align 1
@.str.32 = private unnamed_addr constant [2 x i8] c"q\00", align 1
@.str.33 = private unnamed_addr constant [2 x i8] c"d\00", align 1
@.str.34 = private unnamed_addr constant [2 x i8] c"h\00", align 1
@.str.35 = private unnamed_addr constant [35 x i8] c"tellics ptell Ok, trading is GOOD\0A\00", align 1
@.str.36 = private unnamed_addr constant [4 x i8] c"+++\00", align 1
@.str.37 = private unnamed_addr constant [6 x i8] c"mates\00", align 1
@.str.38 = private unnamed_addr constant [3 x i8] c"++\00", align 1
@.str.39 = private unnamed_addr constant [49 x i8] c"is VERY good (ptell me 'x' to play normal again)\00", align 1
@.str.40 = private unnamed_addr constant [44 x i8] c"is good (ptell me 'x' to play normal again)\00", align 1
@.str.41 = private unnamed_addr constant [29 x i8] c"tellics ptell Ok, Knight %s\0A\00", align 1
@.str.42 = private unnamed_addr constant [29 x i8] c"tellics ptell Ok, Bishop %s\0A\00", align 1
@.str.43 = private unnamed_addr constant [27 x i8] c"tellics ptell Ok, Rook %s\0A\00", align 1
@.str.44 = private unnamed_addr constant [28 x i8] c"tellics ptell Ok, Queen %s\0A\00", align 1
@.str.45 = private unnamed_addr constant [27 x i8] c"tellics ptell Ok, Pawn %s\0A\00", align 1
@.str.46 = private unnamed_addr constant [31 x i8] c"tellics ptell Ok, Diagonal %s\0A\00", align 1
@.str.47 = private unnamed_addr constant [28 x i8] c"tellics ptell Ok, Heavy %s\0A\00", align 1
@.str.48 = private unnamed_addr constant [2 x i8] c"-\00", align 1
@.str.49 = private unnamed_addr constant [34 x i8] c"tellics ptell Ok, trading is BAD\0A\00", align 1
@.str.50 = private unnamed_addr constant [4 x i8] c"---\00", align 1
@.str.51 = private unnamed_addr constant [53 x i8] c"mates you (ptell me 'x' when it no longer mates you)\00", align 1
@.str.52 = private unnamed_addr constant [3 x i8] c"--\00", align 1
@.str.53 = private unnamed_addr constant [52 x i8] c"is VERY bad (ptell me 'x' when it is no longer bad)\00", align 1
@.str.54 = private unnamed_addr constant [47 x i8] c"is bad (ptell me 'x' when it is no longer bad)\00", align 1
@.str.55 = private unnamed_addr constant [2 x i8] c"x\00", align 1
@.str.56 = private unnamed_addr constant [16 x i8] c"mate me anymore\00", align 1
@.str.57 = private unnamed_addr constant [6 x i8] c"never\00", align 1
@.str.58 = private unnamed_addr constant [5 x i8] c"mind\00", align 1
@.str.59 = private unnamed_addr constant [2 x i8] c"=\00", align 1
@.str.60 = private unnamed_addr constant [9 x i8] c"ptell me\00", align 1
@.str.61 = private unnamed_addr constant [55 x i8] c"tellics ptell Ok, reverting to STANDARD piece values!\0A\00", align 1
@.str.62 = private unnamed_addr constant [26 x i8] c"i'll have to sit...(dead)\00", align 1
@.str.63 = private unnamed_addr constant [5 x i8] c"dead\00", align 1
@.str.64 = private unnamed_addr constant [27 x i8] c"i'll have to sit...(piece)\00", align 1
@.str.65 = private unnamed_addr constant [3 x i8] c"ok\00", align 1
@.str.66 = private unnamed_addr constant [3 x i8] c"hi\00", align 1
@.str.67 = private unnamed_addr constant [6 x i8] c"hello\00", align 1
@.str.68 = private unnamed_addr constant [26 x i8] c"tellics ptell Greetings.\0A\00", align 1
@.str.69 = private unnamed_addr constant [8 x i8] c"formula\00", align 1
@.str.70 = private unnamed_addr constant [87 x i8] c"tellics ptell Setting formula, if you are still interrupted, complain to my operator.\0A\00", align 1
@.str.71 = private unnamed_addr constant [59 x i8] c"tellics ptell Sorry, but I don't understand that command.\0A\00", align 1
@CheckBadFlow.pawnmated = internal global i32 0, align 4
@CheckBadFlow.knightmated = internal global i32 0, align 4
@CheckBadFlow.bishopmated = internal global i32 0, align 4
@CheckBadFlow.rookmated = internal global i32 0, align 4
@CheckBadFlow.queenmated = internal global i32 0, align 4
@.str.72 = private unnamed_addr constant [41 x i8] c"tellics ptell p doesn't mate me anymore\0A\00", align 1
@.str.73 = private unnamed_addr constant [41 x i8] c"tellics ptell n doesn't mate me anymore\0A\00", align 1
@.str.74 = private unnamed_addr constant [41 x i8] c"tellics ptell b doesn't mate me anymore\0A\00", align 1
@.str.75 = private unnamed_addr constant [41 x i8] c"tellics ptell r doesn't mate me anymore\0A\00", align 1
@.str.76 = private unnamed_addr constant [41 x i8] c"tellics ptell q doesn't mate me anymore\0A\00", align 1
@.str.77 = private unnamed_addr constant [20 x i8] c"tellics ptell ---p\0A\00", align 1
@.str.78 = private unnamed_addr constant [20 x i8] c"tellics ptell ---n\0A\00", align 1
@.str.79 = private unnamed_addr constant [20 x i8] c"tellics ptell ---b\0A\00", align 1
@.str.80 = private unnamed_addr constant [20 x i8] c"tellics ptell ---r\0A\00", align 1
@.str.81 = private unnamed_addr constant [20 x i8] c"tellics ptell ---q\0A\00", align 1
@.str.82 = private unnamed_addr constant [17 x i8] c"tellics ptell x\0A\00", align 1
@.str.83 = private unnamed_addr constant [18 x i8] c"tellics ptell go\0A\00", align 1
@bufftop = dso_local global i32 0, align 4
@membuff = dso_local global i8* null, align 8
@maxply = dso_local global i32 0, align 4
@forwards = dso_local global i32 0, align 4
@nodecount = dso_local global i32 0, align 4
@frees = dso_local global i32 0, align 4
@nodecount2 = dso_local global i32 0, align 4
@pn2 = dso_local global i32 0, align 4
@alllosers = dso_local global i32 0, align 4
@rootlosers = dso_local global [300 x i32] zeroinitializer, align 16
@pn_move = dso_local global %struct.move_s zeroinitializer, align 4
@iters = dso_local global i32 0, align 4
@pn_time = dso_local global i32 0, align 4
@forcedwin = dso_local global i32 0, align 4
@kibitzed = dso_local global i32 0, align 4
@pn_saver = dso_local global %struct.move_s zeroinitializer, align 4
@.str.84 = private unnamed_addr constant [28 x i8] c"tellics kibitz Forced win!\0A\00", align 1
@.str.1.85 = private unnamed_addr constant [34 x i8] c"tellics kibitz Forced win! (alt)\0A\00", align 1
@.str.2.86 = private unnamed_addr constant [94 x i8] c"tellics whisper proof %d, disproof %d, %d losers, highest depth %d, primary %d, secondary %d\0A\00", align 1
@.str.3.87 = private unnamed_addr constant [30 x i8] c"tellics whisper Forced reply\0A\00", align 1
@.str.4.88 = private unnamed_addr constant [60 x i8] c"P: %d D: %d N: %d S: %d Mem: %2.2fM Iters: %d MaxDepth: %d\0A\00", align 1
@.str.5.89 = private unnamed_addr constant [90 x i8] c"tellics whisper proof %d, disproof %d, %d nodes, %d forwards, %d iters, highest depth %d\0A\00", align 1
@.str.6.90 = private unnamed_addr constant [11 x i8] c"Time : %f\0A\00", align 1
@.str.7.91 = private unnamed_addr constant [23 x i8] c"This position is WON.\0A\00", align 1
@.str.8.92 = private unnamed_addr constant [5 x i8] c"PV: \00", align 1
@.str.9.93 = private unnamed_addr constant [4 x i8] c"%s \00", align 1
@.str.10.94 = private unnamed_addr constant [2 x i8] c" \00", align 1
@.str.11.95 = private unnamed_addr constant [41 x i8] c"\0Atellics kibitz Forced win in %d moves.\0A\00", align 1
@.str.12.96 = private unnamed_addr constant [20 x i8] c"\0A1-0 {White mates}\0A\00", align 1
@.str.13.97 = private unnamed_addr constant [20 x i8] c"\0A0-1 {Black mates}\0A\00", align 1
@.str.14.98 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.15.99 = private unnamed_addr constant [24 x i8] c"This position is LOST.\0A\00", align 1
@.str.16.100 = private unnamed_addr constant [27 x i8] c"This position is UNKNOWN.\0A\00", align 1
@.str.17.101 = private unnamed_addr constant [47 x i8] c"P: %d D: %d N: %d S: %d Mem: %2.2fM Iters: %d\0A\00", align 1
@TTSize = dso_local global i32 0, align 4
@ECacheSize = dso_local global i32 0, align 4
@PBSize = dso_local global i32 0, align 4
@cfg_devscale = dso_local global i32 0, align 4
@cfg_scalefac = dso_local global float 0.000000e+00, align 4
@cfg_razordrop = dso_local global i32 0, align 4
@cfg_cutdrop = dso_local global i32 0, align 4
@cfg_futprune = dso_local global i32 0, align 4
@cfg_smarteval = dso_local global i32 0, align 4
@cfg_attackeval = dso_local global i32 0, align 4
@cfg_onerep = dso_local global i32 0, align 4
@cfg_recap = dso_local global i32 0, align 4
@havercfile = dso_local global i32 0, align 4
@rcfile = dso_local global %struct._IO_FILE* null, align 8
@line = dso_local global [256 x i8] zeroinitializer, align 16
@cfg_booklearn = dso_local global i32 0, align 4
@cfg_ksafety = dso_local global [15 x [9 x i32]] zeroinitializer, align 16
@cfg_tropism = dso_local global [5 x [7 x i32]] zeroinitializer, align 16
@.str.112 = private unnamed_addr constant [3 x i8] c"%u\00", align 1
@rootnodecount = dso_local global [512 x i32] zeroinitializer, align 16
@failed = dso_local global i32 0, align 4
@extendedtime = dso_local global i32 0, align 4
@checks = dso_local global [300 x i32] zeroinitializer, align 16
@singular = dso_local global [300 x i32] zeroinitializer, align 16
@recaps = dso_local global [300 x i32] zeroinitializer, align 16
@ext_recap = dso_local global i32 0, align 4
@ext_onerep = dso_local global i32 0, align 4
@razor_drop = dso_local global i32 0, align 4
@drop_cuts = dso_local global i32 0, align 4
@razor_material = dso_local global i32 0, align 4
@FHF = dso_local global i32 0, align 4
@FH = dso_local global i32 0, align 4
@legals = dso_local global i32 0, align 4
@movetotal = dso_local global i32 0, align 4
@moveleft = dso_local global i32 0, align 4
@searching_move = dso_local global [20 x i8] zeroinitializer, align 16
@bestmovenum = dso_local global i32 0, align 4
@true_i_depth = dso_local global i8 0, align 1
@postpv = dso_local global [256 x i8] zeroinitializer, align 16
@s_threat = dso_local global i32 0, align 4
@tradefreely = dso_local global i32 0, align 4
@ugly_ep_hack = dso_local global i32 0, align 4
@.str.123 = private unnamed_addr constant [38 x i8] c"Extended from %d to %d, time left %d\0A\00", align 1
@search.rc_index = internal constant [14 x i32] [i32 0, i32 1, i32 1, i32 2, i32 2, i32 5, i32 5, i32 3, i32 3, i32 4, i32 4, i32 2, i32 2, i32 0], align 16
@.str.1.126 = private unnamed_addr constant [16 x i8] c"Opening phase.\0A\00", align 1
@.str.2.127 = private unnamed_addr constant [19 x i8] c"Middlegame phase.\0A\00", align 1
@.str.3.128 = private unnamed_addr constant [16 x i8] c"Endgame phase.\0A\00", align 1
@.str.4.129 = private unnamed_addr constant [20 x i8] c"Time for move : %d\0A\00", align 1
@.str.5.130 = private unnamed_addr constant [49 x i8] c"tellics whisper %d restart(s), ended up with %s\0A\00", align 1
@.str.6.131 = private unnamed_addr constant [27 x i8] c"tellics kibitz Mate in %d\0A\00", align 1
@.str.7.132 = private unnamed_addr constant [52 x i8] c"tellics ptell Mate in %d, give him no more pieces.\0A\00", align 1
@.str.8.133 = private unnamed_addr constant [37 x i8] c"tellics ptell You can trade freely.\0A\00", align 1
@.str.9.134 = private unnamed_addr constant [25 x i8] c"tellics ptell ---trades\0A\00", align 1
@.str.10.135 = private unnamed_addr constant [49 x i8] c"tellics kibitz Both players dead...resigning...\0A\00", align 1
@.str.11.136 = private unnamed_addr constant [16 x i8] c"tellics resign\0A\00", align 1
@.str.12.137 = private unnamed_addr constant [81 x i8] c"tellics ptell I am forcedly mated (dead). Tell me 'go' to start moving into it.\0A\00", align 1
@.str.13.138 = private unnamed_addr constant [62 x i8] c"tellics ptell I'll have to sit...(lose piece that mates you)\0A\00", align 1
@.str.14.139 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@see_num_attackers = dso_local global [2 x i32] zeroinitializer, align 4
@see_attackers = dso_local global [2 x [16 x %struct.see_data]] zeroinitializer, align 16
@setup_attackers.rook_o = internal constant [4 x i32] [i32 12, i32 -12, i32 1, i32 -1], align 16
@setup_attackers.bishop_o = internal constant [4 x i32] [i32 11, i32 -11, i32 13, i32 -13], align 16
@setup_attackers.knight_o = internal constant [8 x i32] [i32 10, i32 -10, i32 14, i32 -14, i32 23, i32 -23, i32 25, i32 -25], align 16
@scentral = internal global <{ [118 x i32], [26 x i32] }> <{ [118 x i32] [i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 -20, i32 -10, i32 -10, i32 -10, i32 -10, i32 -10, i32 -10, i32 -20, i32 0, i32 0, i32 0, i32 0, i32 -10, i32 0, i32 3, i32 5, i32 5, i32 3, i32 0, i32 -10, i32 0, i32 0, i32 0, i32 0, i32 -10, i32 2, i32 15, i32 15, i32 15, i32 15, i32 2, i32 -10, i32 0, i32 0, i32 0, i32 0, i32 -10, i32 7, i32 15, i32 25, i32 25, i32 15, i32 7, i32 -10, i32 0, i32 0, i32 0, i32 0, i32 -10, i32 7, i32 15, i32 25, i32 25, i32 15, i32 7, i32 -10, i32 0, i32 0, i32 0, i32 0, i32 -10, i32 2, i32 15, i32 15, i32 15, i32 15, i32 2, i32 -10, i32 0, i32 0, i32 0, i32 0, i32 -10, i32 0, i32 3, i32 5, i32 5, i32 3, i32 0, i32 -10, i32 0, i32 0, i32 0, i32 0, i32 -20, i32 -10, i32 -10, i32 -10, i32 -10, i32 -10, i32 -10, i32 -20], [26 x i32] zeroinitializer }>, align 16
@king_o = internal constant [8 x i32] [i32 13, i32 12, i32 11, i32 1, i32 -1, i32 -11, i32 -12, i32 -13], align 16
@knight_o = internal constant [8 x i32] [i32 10, i32 -10, i32 14, i32 -14, i32 23, i32 -23, i32 25, i32 -25], align 16
@divider = dso_local global [50 x i8] c"-------------------------------------------------\00", align 16
@dummy = dso_local global %struct.move_s zeroinitializer, align 4
@Variant = dso_local global i32 0, align 4
@bookidx = dso_local global i32 0, align 4
@ply = dso_local global i32 0, align 4
@moves_to_tc = dso_local global i32 0, align 4
@min_per_game = dso_local global i32 0, align 4
@time_left = dso_local global i32 0, align 4
@opp_rating = dso_local global i32 0, align 4
@my_rating = dso_local global i32 0, align 4
@maxdepth = dso_local global i32 0, align 4
@xb_mode = dso_local global i32 0, align 4
@comp_color = dso_local global i32 0, align 4
@is_pondering = dso_local global i32 0, align 4
@allow_pondering = dso_local global i32 0, align 4
@is_analyzing = dso_local global i32 0, align 4
@have_partner = dso_local global i32 0, align 4
@must_sit = dso_local global i32 0, align 4
@go_fast = dso_local global i32 0, align 4
@fixed_time = dso_local global i32 0, align 4
@phase = dso_local global i32 0, align 4
@root_to_move = dso_local global i32 0, align 4
@move_number = dso_local global i32 0, align 4
@hash_history = dso_local global [600 x i32] zeroinitializer, align 16
@white_to_move = dso_local global i32 0, align 4
@result = dso_local global i32 0, align 4
@path_x = dso_local global [300 x %struct.move_x] zeroinitializer, align 16
@fifty = dso_local global i32 0, align 4
@book_ply = dso_local global i32 0, align 4
@opening_history = dso_local global [256 x i8] zeroinitializer, align 16
@nodes = dso_local global i32 0, align 4
@qnodes = dso_local global i32 0, align 4
@NTries = dso_local global i32 0, align 4
@NCuts = dso_local global i32 0, align 4
@TExt = dso_local global i32 0, align 4
@ext_check = dso_local global i32 0, align 4
@time_for_move = dso_local global i32 0, align 4
@raw_nodes = dso_local global i32 0, align 4
@setcode = dso_local global [30 x i8] zeroinitializer, align 16
@post = dso_local global i32 0, align 4
@opp_time = dso_local global i32 0, align 4
@sec_per_game = dso_local global i32 0, align 4
@inc = dso_local global i32 0, align 4
@time_cushion = dso_local global i32 0, align 4
@Giveaway = dso_local global i32 0, align 4
@wking_loc = dso_local global i32 0, align 4
@white_castled = dso_local global i32 0, align 4
@bking_loc = dso_local global i32 0, align 4
@black_castled = dso_local global i32 0, align 4
@ep_square = dso_local global i32 0, align 4
@start_time = dso_local global i64 0, align 8
@board = dso_local global [144 x i32] zeroinitializer, align 16
@moved = dso_local global [144 x i32] zeroinitializer, align 16
@pv_length = dso_local global [300 x i32] zeroinitializer, align 16
@pieces = dso_local global [62 x i32] zeroinitializer, align 16
@squares = dso_local global [144 x i32] zeroinitializer, align 16
@num_pieces = dso_local global i32 0, align 4
@i_depth = dso_local global i32 0, align 4
@piece_count = dso_local global i32 0, align 4
@killer_scores = dso_local global [300 x i32] zeroinitializer, align 16
@killer_scores2 = dso_local global [300 x i32] zeroinitializer, align 16
@killer_scores3 = dso_local global [300 x i32] zeroinitializer, align 16
@cur_score = dso_local global i32 0, align 4
@history_h = dso_local global [144 x [144 x i32]] zeroinitializer, align 16
@captures = dso_local global i32 0, align 4
@searching_pv = dso_local global i32 0, align 4
@time_exit = dso_local global i32 0, align 4
@time_failure = dso_local global i32 0, align 4
@pv = dso_local global [300 x [300 x %struct.move_s]] zeroinitializer, align 16
@killer1 = dso_local global [300 x %struct.move_s] zeroinitializer, align 16
@killer2 = dso_local global [300 x %struct.move_s] zeroinitializer, align 16
@killer3 = dso_local global [300 x %struct.move_s] zeroinitializer, align 16
@path = dso_local global [300 x %struct.move_s] zeroinitializer, align 16
@is_promoted = dso_local global [62 x i32] zeroinitializer, align 16
@PVS = dso_local global i32 0, align 4
@FULL = dso_local global i32 0, align 4
@PVSF = dso_local global i32 0, align 4
@my_partner = dso_local global [256 x i8] zeroinitializer, align 16
@use_book = dso_local global i32 0, align 4
@.str.280 = private unnamed_addr constant [15 x i8] c"SPEC Workload\0A\00", align 1
@.str.1.281 = private unnamed_addr constant [29 x i8] c"\0ANodes: %i (%0.2f%% qnodes)\0A\00", align 1
@.str.2.282 = private unnamed_addr constant [54 x i8] c"ECacheProbes : %u   ECacheHits : %u   HitRate : %f%%\0A\00", align 1
@.str.3.283 = private unnamed_addr constant [60 x i8] c"TTStores : %u TTProbes : %u   TTHits : %u   HitRate : %f%%\0A\00", align 1
@.str.4.284 = private unnamed_addr constant [51 x i8] c"NTries : %u  NCuts : %u  CutRate : %f%%  TExt: %u\0A\00", align 1
@.str.5.285 = private unnamed_addr constant [61 x i8] c"Check extensions: %u  Razor drops : %u  Razor Material : %u\0A\00", align 1
@.str.6.286 = private unnamed_addr constant [22 x i8] c"Move ordering : %f%%\0A\00", align 1
@.str.7.287 = private unnamed_addr constant [81 x i8] c"Material score: %d   Eval : %d  MaxPosDiff: %d  White hand: %d  Black hand : %d\0A\00", align 1
@.str.8.288 = private unnamed_addr constant [26 x i8] c"Hash : %X  HoldHash : %X\0A\00", align 1
@.str.9.289 = private unnamed_addr constant [9 x i8] c"move %s\0A\00", align 1
@.str.10.290 = private unnamed_addr constant [5 x i8] c"\0A%s\0A\00", align 1
@.str.11.291 = private unnamed_addr constant [19 x i8] c"0-1 {Black Mates}\0A\00", align 1
@.str.12.292 = private unnamed_addr constant [19 x i8] c"1-0 {White Mates}\0A\00", align 1
@.str.13.293 = private unnamed_addr constant [27 x i8] c"1/2-1/2 {Fifty move rule}\0A\00", align 1
@.str.14.294 = private unnamed_addr constant [29 x i8] c"1/2-1/2 {3 fold repetition}\0A\00", align 1
@.str.15.295 = private unnamed_addr constant [16 x i8] c"1/2-1/2 {Draw}\0A\00", align 1
@.str.16.296 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.17.297 = private unnamed_addr constant [8 x i8] c"Sjeng: \00", align 1
@.str.18.298 = private unnamed_addr constant [18 x i8] c"Illegal move: %s\0A\00", align 1
@.str.19.299 = private unnamed_addr constant [9 x i8] c"setboard\00", align 1
@.str.20.300 = private unnamed_addr constant [5 x i8] c"quit\00", align 1
@.str.21.301 = private unnamed_addr constant [5 x i8] c"exit\00", align 1
@.str.22.302 = private unnamed_addr constant [8 x i8] c"diagram\00", align 1
@.str.23.303 = private unnamed_addr constant [2 x i8] c"d\00", align 1
@.str.24.304 = private unnamed_addr constant [6 x i8] c"perft\00", align 1
@.str.25.305 = private unnamed_addr constant [3 x i8] c"%d\00", align 1
@.str.26.306 = private unnamed_addr constant [28 x i8] c"Raw nodes for depth %d: %i\0A\00", align 1
@.str.27.307 = private unnamed_addr constant [13 x i8] c"Time : %.2f\0A\00", align 1
@.str.28.308 = private unnamed_addr constant [4 x i8] c"new\00", align 1
@.str.29.309 = private unnamed_addr constant [40 x i8] c"tellics set 1 Sjeng SPEC 1.0 (SPEC/%s)\0A\00", align 1
@.str.30.310 = private unnamed_addr constant [7 x i8] c"xboard\00", align 1
@.str.31.311 = private unnamed_addr constant [20 x i8] c"tellics set f5 1=1\0A\00", align 1
@.str.32.312 = private unnamed_addr constant [6 x i8] c"nodes\00", align 1
@.str.33.313 = private unnamed_addr constant [38 x i8] c"Number of nodes: %i (%0.2f%% qnodes)\0A\00", align 1
@.str.34.314 = private unnamed_addr constant [5 x i8] c"post\00", align 1
@.str.35.315 = private unnamed_addr constant [7 x i8] c"nopost\00", align 1
@.str.36.316 = private unnamed_addr constant [7 x i8] c"random\00", align 1
@.str.37.317 = private unnamed_addr constant [5 x i8] c"hard\00", align 1
@.str.38.318 = private unnamed_addr constant [5 x i8] c"easy\00", align 1
@.str.39.319 = private unnamed_addr constant [2 x i8] c"?\00", align 1
@.str.40.320 = private unnamed_addr constant [6 x i8] c"white\00", align 1
@.str.41.321 = private unnamed_addr constant [6 x i8] c"black\00", align 1
@.str.42.322 = private unnamed_addr constant [6 x i8] c"force\00", align 1
@.str.43.323 = private unnamed_addr constant [5 x i8] c"eval\00", align 1
@.str.44.324 = private unnamed_addr constant [10 x i8] c"Eval: %d\0A\00", align 1
@.str.45.325 = private unnamed_addr constant [3 x i8] c"go\00", align 1
@.str.46.326 = private unnamed_addr constant [5 x i8] c"time\00", align 1
@.str.47.327 = private unnamed_addr constant [3 x i8] c"%i\00", align 1
@.str.48.328 = private unnamed_addr constant [5 x i8] c"otim\00", align 1
@.str.49.329 = private unnamed_addr constant [6 x i8] c"level\00", align 1
@.str.50.330 = private unnamed_addr constant [2 x i8] c":\00", align 1
@.str.51.331 = private unnamed_addr constant [12 x i8] c"%i %i:%i %i\00", align 1
@.str.52.332 = private unnamed_addr constant [9 x i8] c"%i %i %i\00", align 1
@.str.53.333 = private unnamed_addr constant [7 x i8] c"rating\00", align 1
@.str.54.334 = private unnamed_addr constant [6 x i8] c"%i %i\00", align 1
@.str.55.335 = private unnamed_addr constant [8 x i8] c"holding\00", align 1
@.str.56.336 = private unnamed_addr constant [8 x i8] c"variant\00", align 1
@.str.57.337 = private unnamed_addr constant [7 x i8] c"normal\00", align 1
@.str.58.338 = private unnamed_addr constant [11 x i8] c"crazyhouse\00", align 1
@.str.59.339 = private unnamed_addr constant [9 x i8] c"bughouse\00", align 1
@.str.60.340 = private unnamed_addr constant [8 x i8] c"suicide\00", align 1
@.str.61.341 = private unnamed_addr constant [9 x i8] c"giveaway\00", align 1
@.str.62.342 = private unnamed_addr constant [7 x i8] c"losers\00", align 1
@.str.63.343 = private unnamed_addr constant [8 x i8] c"analyze\00", align 1
@.str.64.344 = private unnamed_addr constant [5 x i8] c"undo\00", align 1
@.str.65.345 = private unnamed_addr constant [18 x i8] c"Move number : %d\0A\00", align 1
@.str.66.346 = private unnamed_addr constant [7 x i8] c"remove\00", align 1
@.str.67.347 = private unnamed_addr constant [5 x i8] c"edit\00", align 1
@.str.68.348 = private unnamed_addr constant [2 x i8] c".\00", align 1
@.str.69.349 = private unnamed_addr constant [2 x i8] c"c\00", align 1
@.str.70.350 = private unnamed_addr constant [2 x i8] c"#\00", align 1
@.str.71.351 = private unnamed_addr constant [8 x i8] c"partner\00", align 1
@.str.72.352 = private unnamed_addr constant [9 x i8] c"$partner\00", align 1
@.str.73.353 = private unnamed_addr constant [6 x i8] c"ptell\00", align 1
@.str.74.354 = private unnamed_addr constant [5 x i8] c"test\00", align 1
@.str.75.355 = private unnamed_addr constant [3 x i8] c"st\00", align 1
@.str.76.356 = private unnamed_addr constant [7 x i8] c"result\00", align 1
@.str.77.357 = private unnamed_addr constant [6 x i8] c"prove\00", align 1
@.str.78.358 = private unnamed_addr constant [26 x i8] c"\0AMax time to search (s): \00", align 1
@.str.79.359 = private unnamed_addr constant [5 x i8] c"ping\00", align 1
@.str.80.360 = private unnamed_addr constant [9 x i8] c"pong %d\0A\00", align 1
@.str.81.361 = private unnamed_addr constant [6 x i8] c"fritz\00", align 1
@.str.82.362 = private unnamed_addr constant [6 x i8] c"reset\00", align 1
@.str.83.363 = private unnamed_addr constant [3 x i8] c"sd\00", align 1
@.str.84.364 = private unnamed_addr constant [26 x i8] c"New max depth set to: %d\0A\00", align 1
@.str.85 = private unnamed_addr constant [5 x i8] c"auto\00", align 1
@.str.86 = private unnamed_addr constant [9 x i8] c"protover\00", align 1
@.str.87 = private unnamed_addr constant [63 x i8] c"feature ping=0 setboard=1 playother=0 san=0 usermove=0 time=1\0A\00", align 1
@.str.88 = private unnamed_addr constant [53 x i8] c"feature draw=0 sigint=0 sigterm=0 reuse=1 analyze=0\0A\00", align 1
@.str.89 = private unnamed_addr constant [33 x i8] c"feature myname=\22Sjeng SPEC 1.0\22\0A\00", align 1
@.str.90 = private unnamed_addr constant [71 x i8] c"feature variants=\22normal,bughouse,crazyhouse,suicide,giveaway,losers\22\0A\00", align 1
@.str.91 = private unnamed_addr constant [46 x i8] c"feature colors=1 ics=0 name=0 pause=0 done=1\0A\00", align 1
@.str.92 = private unnamed_addr constant [9 x i8] c"accepted\00", align 1
@.str.93 = private unnamed_addr constant [9 x i8] c"rejected\00", align 1
@.str.94 = private unnamed_addr constant [65 x i8] c"Interface does not support a required feature...expect trouble.\0A\00", align 1
@.str.95 = private unnamed_addr constant [5 x i8] c"help\00", align 1
@.str.96 = private unnamed_addr constant [6 x i8] c"\0A%s\0A\0A\00", align 1
@.str.97 = private unnamed_addr constant [41 x i8] c"diagram/d:       toggle diagram display\0A\00", align 1
@.str.98 = private unnamed_addr constant [34 x i8] c"exit/quit:       terminate Sjeng\0A\00", align 1
@.str.99 = private unnamed_addr constant [51 x i8] c"go:              make Sjeng play the side to move\0A\00", align 1
@.str.100 = private unnamed_addr constant [35 x i8] c"new:             start a new game\0A\00", align 1
@.str.101 = private unnamed_addr constant [55 x i8] c"level <x>:       the xboard style command to set time\0A\00", align 1
@.str.102 = private unnamed_addr constant [49 x i8] c"  <x> should be in the form: <a> <b> <c> where:\0A\00", align 1
@.str.103 = private unnamed_addr constant [49 x i8] c"  a -> moves to TC (0 if using an ICS style TC)\0A\00", align 1
@.str.104 = private unnamed_addr constant [25 x i8] c"  b -> minutes per game\0A\00", align 1
@.str.105 = private unnamed_addr constant [29 x i8] c"  c -> increment in seconds\0A\00", align 1
@.str.106 = private unnamed_addr constant [55 x i8] c"nodes:           outputs the number of nodes searched\0A\00", align 1
@.str.107 = private unnamed_addr constant [47 x i8] c"perft <x>:       compute raw nodes to depth x\0A\00", align 1
@.str.108 = private unnamed_addr constant [42 x i8] c"post:            toggles thinking output\0A\00", align 1
@.str.109 = private unnamed_addr constant [45 x i8] c"xboard:          put Sjeng into xboard mode\0A\00", align 1
@.str.110 = private unnamed_addr constant [39 x i8] c"test:            run an EPD testsuite\0A\00", align 1
@.str.111 = private unnamed_addr constant [52 x i8] c"speed:           test movegen and evaluation speed\0A\00", align 1
@.str.112.365 = private unnamed_addr constant [59 x i8] c"proof:           try to prove or disprove the current pos\0A\00", align 1
@.str.113 = private unnamed_addr constant [44 x i8] c"sd <x>:          limit thinking to depth x\0A\00", align 1
@.str.114 = private unnamed_addr constant [51 x i8] c"st <x>:          limit thinking to x centiseconds\0A\00", align 1
@.str.115 = private unnamed_addr constant [54 x i8] c"setboard <FEN>:  set board to a specified FEN string\0A\00", align 1
@.str.116 = private unnamed_addr constant [38 x i8] c"undo:            back up a half move\0A\00", align 1
@.str.117 = private unnamed_addr constant [38 x i8] c"remove:          back up a full move\0A\00", align 1
@.str.118 = private unnamed_addr constant [42 x i8] c"force:           disable computer moving\0A\00", align 1
@.str.119 = private unnamed_addr constant [44 x i8] c"auto:            computer plays both sides\0A\00", align 1
@DP_TTable = dso_local global %struct.TType* null, align 8
@AS_TTable = dso_local global %struct.TType* null, align 8
@QS_TTable = dso_local global %struct.QTType* null, align 8
@zobrist = dso_local global [14 x [144 x i32]] zeroinitializer, align 16
@hash = dso_local global i32 0, align 4
@TTStores = dso_local global i32 0, align 4
@TTProbes = dso_local global i32 0, align 4
@TTHits = dso_local global i32 0, align 4
@.str.392 = private unnamed_addr constant [38 x i8] c"Out of memory allocating hashtables.\0A\00", align 1
@left = dso_local global i32 -1, align 4
@__const.comp_to_san.type_to_char = private unnamed_addr constant [14 x i32] [i32 70, i32 80, i32 80, i32 78, i32 78, i32 75, i32 75, i32 82, i32 82, i32 81, i32 81, i32 66, i32 66, i32 69], align 16
@.str.399 = private unnamed_addr constant [8 x i8] c"%c@%c%d\00", align 1
@.str.1.400 = private unnamed_addr constant [5 x i8] c"%c%d\00", align 1
@.str.2.401 = private unnamed_addr constant [8 x i8] c"%c%d=%c\00", align 1
@.str.3.402 = private unnamed_addr constant [8 x i8] c"%cx%c%d\00", align 1
@.str.4.403 = private unnamed_addr constant [11 x i8] c"%cx%c%d=%c\00", align 1
@.str.5.404 = private unnamed_addr constant [4 x i8] c"O-O\00", align 1
@.str.6.405 = private unnamed_addr constant [6 x i8] c"O-O-O\00", align 1
@.str.7.406 = private unnamed_addr constant [9 x i8] c"%c%c%c%d\00", align 1
@.str.8.407 = private unnamed_addr constant [9 x i8] c"%c%d%c%d\00", align 1
@.str.9.408 = private unnamed_addr constant [10 x i8] c"%c%cx%c%d\00", align 1
@.str.10.409 = private unnamed_addr constant [10 x i8] c"%c%dx%c%d\00", align 1
@.str.11.410 = private unnamed_addr constant [7 x i8] c"%c%c%d\00", align 1
@.str.12.411 = private unnamed_addr constant [5 x i8] c"illg\00", align 1
@.str.13.412 = private unnamed_addr constant [2 x i8] c"#\00", align 1
@.str.14.413 = private unnamed_addr constant [2 x i8] c"+\00", align 1
@__const.comp_to_coord.type_to_char = private unnamed_addr constant [14 x i32] [i32 70, i32 80, i32 112, i32 78, i32 110, i32 75, i32 107, i32 82, i32 114, i32 81, i32 113, i32 66, i32 98, i32 69], align 16
@.str.15.416 = private unnamed_addr constant [10 x i8] c"%c%d%c%dn\00", align 1
@.str.16.417 = private unnamed_addr constant [10 x i8] c"%c%d%c%dr\00", align 1
@.str.17.418 = private unnamed_addr constant [10 x i8] c"%c%d%c%db\00", align 1
@.str.18.419 = private unnamed_addr constant [10 x i8] c"%c%d%c%dk\00", align 1
@.str.19.420 = private unnamed_addr constant [10 x i8] c"%c%d%c%dq\00", align 1
@.str.20.423 = private unnamed_addr constant [42 x i8] c"+----+----+----+----+----+----+----+----+\00", align 1
@__const.display_board.piece_rep = private unnamed_addr constant [14 x i8*] [i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.21.430, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.22.431, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.23.432, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.24.433, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.25.434, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.26.435, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.27.436, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.28.437, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.29.438, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.30.439, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.31.440, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.32.441, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.33.442, i32 0, i32 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.34.443, i32 0, i32 0)], align 16
@.str.35.424 = private unnamed_addr constant [6 x i8] c"  %s\0A\00", align 1
@.str.36.425 = private unnamed_addr constant [5 x i8] c"%d |\00", align 1
@.str.37.426 = private unnamed_addr constant [6 x i8] c" %s |\00", align 1
@.str.38.427 = private unnamed_addr constant [7 x i8] c"\0A  %s\0A\00", align 1
@.str.39.428 = private unnamed_addr constant [45 x i8] c"\0A     a    b    c    d    e    f    g    h\0A\0A\00", align 1
@.str.40.429 = private unnamed_addr constant [45 x i8] c"\0A     h    g    f    e    d    c    b    a\0A\0A\00", align 1
@.str.21.430 = private unnamed_addr constant [3 x i8] c"!!\00", align 1
@.str.22.431 = private unnamed_addr constant [3 x i8] c" P\00", align 1
@.str.23.432 = private unnamed_addr constant [3 x i8] c"*P\00", align 1
@.str.24.433 = private unnamed_addr constant [3 x i8] c" N\00", align 1
@.str.25.434 = private unnamed_addr constant [3 x i8] c"*N\00", align 1
@.str.26.435 = private unnamed_addr constant [3 x i8] c" K\00", align 1
@.str.27.436 = private unnamed_addr constant [3 x i8] c"*K\00", align 1
@.str.28.437 = private unnamed_addr constant [3 x i8] c" R\00", align 1
@.str.29.438 = private unnamed_addr constant [3 x i8] c"*R\00", align 1
@.str.30.439 = private unnamed_addr constant [3 x i8] c" Q\00", align 1
@.str.31.440 = private unnamed_addr constant [3 x i8] c"*Q\00", align 1
@.str.32.441 = private unnamed_addr constant [3 x i8] c" B\00", align 1
@.str.33.442 = private unnamed_addr constant [3 x i8] c"*B\00", align 1
@.str.34.443 = private unnamed_addr constant [3 x i8] c"  \00", align 1
@__const.init_game.init_board = private unnamed_addr constant <{ [118 x i32], [26 x i32] }> <{ [118 x i32] [i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 7, i32 3, i32 11, i32 9, i32 5, i32 11, i32 3, i32 7, i32 0, i32 0, i32 0, i32 0, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 1, i32 0, i32 0, i32 0, i32 0, i32 13, i32 13, i32 13, i32 13, i32 13, i32 13, i32 13, i32 13, i32 0, i32 0, i32 0, i32 0, i32 13, i32 13, i32 13, i32 13, i32 13, i32 13, i32 13, i32 13, i32 0, i32 0, i32 0, i32 0, i32 13, i32 13, i32 13, i32 13, i32 13, i32 13, i32 13, i32 13, i32 0, i32 0, i32 0, i32 0, i32 13, i32 13, i32 13, i32 13, i32 13, i32 13, i32 13, i32 13, i32 0, i32 0, i32 0, i32 0, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 2, i32 0, i32 0, i32 0, i32 0, i32 8, i32 4, i32 12, i32 10, i32 6, i32 12, i32 4, i32 8], [26 x i32] zeroinitializer }>, align 16
@.str.41.450 = private unnamed_addr constant [47 x i8] c"\0A\0APlease enter the desired depth for perft():\0A\00", align 1
@.str.42.453 = private unnamed_addr constant [31 x i8] c"\0A\0ARaw nodes for depth %d: %i\0A\0A\00", align 1
@.str.43.454 = private unnamed_addr constant [31 x i8] c"\0APlease input a move/command:\0A\00", align 1
@.str.44.455 = private unnamed_addr constant [5 x i8] c"exit\00", align 1
@.str.45.456 = private unnamed_addr constant [5 x i8] c"quit\00", align 1
@.str.46.459 = private unnamed_addr constant [58 x i8] c"\0AIllegal move/command!  Please input a new move/command:\0A\00", align 1
@.str.47.460 = private unnamed_addr constant [2 x i8] c"<\00", align 1
@.str.48.461 = private unnamed_addr constant [3 x i8] c"> \00", align 1
@.str.49.464 = private unnamed_addr constant [2 x i8] c" \00", align 1
@.str.50.471 = private unnamed_addr constant [18 x i8] c"%2i %7i %5i %8i  \00", align 1
@.str.51.472 = private unnamed_addr constant [20 x i8] c"%2i %c%1i.%02i %9i \00", align 1
@.str.52.473 = private unnamed_addr constant [4 x i8] c"%s \00", align 1
@.str.53.474 = private unnamed_addr constant [3 x i8] c"%s\00", align 1
@.str.54.475 = private unnamed_addr constant [2 x i8] c"\0A\00", align 1
@.str.55.478 = private unnamed_addr constant [5 x i8] c"%s !\00", align 1
@.str.56.481 = private unnamed_addr constant [6 x i8] c"%s !!\00", align 1
@.str.57.484 = private unnamed_addr constant [6 x i8] c"%s ??\00", align 1
@.str.58.485 = private unnamed_addr constant [24 x i8] c"stat01: %i %i %i %i %i\0A\00", align 1
@.str.59.486 = private unnamed_addr constant [27 x i8] c"stat01: %i %i %i %i %i %s\0A\00", align 1
@.str.60.489 = private unnamed_addr constant [36 x i8] c"Piece->square->piece inconsistency\0A\00", align 1
@.str.61.490 = private unnamed_addr constant [35 x i8] c"Board/Piece->square inconsistency\0A\00", align 1
@.str.62.491 = private unnamed_addr constant [29 x i8] c"Zero-ed piece inconsistency\0A\00", align 1
@.str.63.492 = private unnamed_addr constant [32 x i8] c"Empty square has piece pointer\0A\00", align 1
@.str.64.493 = private unnamed_addr constant [39 x i8] c"Filled square %d has no piece pointer\0A\00", align 1
@.str.65.494 = private unnamed_addr constant [37 x i8] c"Square->piece->square inconsistency\0A\00", align 1
@.str.66.497 = private unnamed_addr constant [71 x i8] c"\0ASjeng version SPEC 1.0, Copyright (C) 2000-2005 Gian-Carlo Pascutto\0A\0A\00", align 1
@.str.67.500 = private unnamed_addr constant [34 x i8] c"\0APlease enter the desired depth:\0A\00", align 1
@.str.68.501 = private unnamed_addr constant [37 x i8] c"\0ADo you want tree () output?  (y/n)\0A\00", align 1
@.str.69.502 = private unnamed_addr constant [56 x i8] c"\0APlease enter the name of the output file for tree ():\0A\00", align 1
@.str.70.503 = private unnamed_addr constant [2 x i8] c"w\00", align 1
@stderr = external dso_local global %struct._IO_FILE*, align 8
@.str.71.504 = private unnamed_addr constant [23 x i8] c"Couldn't open file %s\0A\00", align 1
@.str.72.505 = private unnamed_addr constant [40 x i8] c"\0ADo you want to output diagrams? (y/n)\0A\00", align 1
@.str.73.506 = private unnamed_addr constant [37 x i8] c"\0A\0A%s\0ARaw nodes for depth %d: %i\0A%s\0A\0A\00", align 1
@__const.reset_board.init_board = private unnamed_addr constant <{ [118 x i32], [26 x i32] }> <{ [118 x i32] [i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 0, i32 13, i32 13, i32 13, i32 13, i32 13, i32 13, i32 13, i32 13, i32 0, i32 0, i32 0, i32 0, i32 13, i32 13, i32 13, i32 13, i32 13, i32 13, i32 13, i32 13, i32 0, i32 0, i32 0, i32 0, i32 13, i32 13, i32 13, i32 13, i32 13, i32 13, i32 13, i32 13, i32 0, i32 0, i32 0, i32 0, i32 13, i32 13, i32 13, i32 13, i32 13, i32 13, i32 13, i32 13, i32 0, i32 0, i32 0, i32 0, i32 13, i32 13, i32 13, i32 13, i32 13, i32 13, i32 13, i32 13, i32 0, i32 0, i32 0, i32 0, i32 13, i32 13, i32 13, i32 13, i32 13, i32 13, i32 13, i32 13, i32 0, i32 0, i32 0, i32 0, i32 13, i32 13, i32 13, i32 13, i32 13, i32 13, i32 13, i32 13, i32 0, i32 0, i32 0, i32 0, i32 13, i32 13, i32 13, i32 13, i32 13, i32 13, i32 13, i32 13], [26 x i32] zeroinitializer }>, align 16
@state = internal global [625 x i32] zeroinitializer, align 16
@next = internal global i32* null, align 8

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @calc_attackers(i32 %square, i32 %color) #0 {
entry:
  %idxprom = sext i32 %square to i64
  %arrayidx = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom
  %i = load i32, i32* %arrayidx, align 4
  %cmp = icmp eq i32 %i, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %return

if.end:                                           ; preds = %entry
  %rem = srem i32 %color, 2
  %tobool = icmp ne i32 %rem, 0
  br i1 %tobool, label %if.then1, label %if.else97

if.then1:                                         ; preds = %if.end
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then1
  %i.0 = phi i32 [ 0, %if.then1 ], [ %inc31, %for.inc ]
  %attackers.0 = phi i32 [ 0, %if.then1 ], [ %attackers.1, %for.inc ]
  %cmp2 = icmp slt i32 %i.0, 4
  br i1 %cmp2, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %idxprom3 = sext i32 %i.0 to i64
  %arrayidx4 = getelementptr inbounds [4 x i32], [4 x i32]* @calc_attackers.rook_o, i64 0, i64 %idxprom3
  %i1 = load i32, i32* %arrayidx4, align 4
  %add = add nsw i32 %square, %i1
  %idxprom5 = sext i32 %add to i64
  %arrayidx6 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom5
  %i2 = load i32, i32* %arrayidx6, align 4
  %cmp7 = icmp eq i32 %i2, 5
  br i1 %cmp7, label %if.then8, label %if.else

if.then8:                                         ; preds = %for.body
  %inc = add nsw i32 %attackers.0, 1
  br label %for.end

if.else:                                          ; preds = %for.body
  br label %while.cond

while.cond:                                       ; preds = %if.end26, %if.else
  %a_sq.0 = phi i32 [ %add, %if.else ], [ %add29, %if.end26 ]
  %idxprom9 = sext i32 %a_sq.0 to i64
  %arrayidx10 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom9
  %i3 = load i32, i32* %arrayidx10, align 4
  %cmp11 = icmp ne i32 %i3, 0
  br i1 %cmp11, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %idxprom12 = sext i32 %a_sq.0 to i64
  %arrayidx13 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom12
  %i4 = load i32, i32* %arrayidx13, align 4
  %cmp14 = icmp eq i32 %i4, 7
  br i1 %cmp14, label %if.then18, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %while.body
  %idxprom15 = sext i32 %a_sq.0 to i64
  %arrayidx16 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom15
  %i5 = load i32, i32* %arrayidx16, align 4
  %cmp17 = icmp eq i32 %i5, 9
  br i1 %cmp17, label %if.then18, label %if.else20

if.then18:                                        ; preds = %lor.lhs.false, %while.body
  %inc19 = add nsw i32 %attackers.0, 1
  br label %while.end

if.else20:                                        ; preds = %lor.lhs.false
  %idxprom21 = sext i32 %a_sq.0 to i64
  %arrayidx22 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom21
  %i6 = load i32, i32* %arrayidx22, align 4
  %cmp23 = icmp ne i32 %i6, 13
  br i1 %cmp23, label %if.then24, label %if.end25

if.then24:                                        ; preds = %if.else20
  br label %while.end

if.end25:                                         ; preds = %if.else20
  br label %if.end26

if.end26:                                         ; preds = %if.end25
  %idxprom27 = sext i32 %i.0 to i64
  %arrayidx28 = getelementptr inbounds [4 x i32], [4 x i32]* @calc_attackers.rook_o, i64 0, i64 %idxprom27
  %i7 = load i32, i32* %arrayidx28, align 4
  %add29 = add nsw i32 %a_sq.0, %i7
  br label %while.cond

while.end:                                        ; preds = %if.then24, %if.then18, %while.cond
  %attackers.1 = phi i32 [ %inc19, %if.then18 ], [ %attackers.0, %if.then24 ], [ %attackers.0, %while.cond ]
  br label %if.end30

if.end30:                                         ; preds = %while.end
  br label %for.inc

for.inc:                                          ; preds = %if.end30
  %inc31 = add nsw i32 %i.0, 1
  br label %for.cond

for.end:                                          ; preds = %if.then8, %for.cond
  %attackers.2 = phi i32 [ %inc, %if.then8 ], [ %attackers.0, %for.cond ]
  br label %for.cond32

for.cond32:                                       ; preds = %for.inc79, %for.end
  %i.1 = phi i32 [ 0, %for.end ], [ %inc80, %for.inc79 ]
  %attackers.3 = phi i32 [ %attackers.2, %for.end ], [ %attackers.4, %for.inc79 ]
  %cmp33 = icmp slt i32 %i.1, 4
  br i1 %cmp33, label %for.body34, label %for.end81

for.body34:                                       ; preds = %for.cond32
  %idxprom35 = sext i32 %i.1 to i64
  %arrayidx36 = getelementptr inbounds [4 x i32], [4 x i32]* @calc_attackers.bishop_o, i64 0, i64 %idxprom35
  %i8 = load i32, i32* %arrayidx36, align 4
  %add37 = add nsw i32 %square, %i8
  %idxprom38 = sext i32 %add37 to i64
  %arrayidx39 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom38
  %i9 = load i32, i32* %arrayidx39, align 4
  %cmp40 = icmp eq i32 %i9, 1
  br i1 %cmp40, label %land.lhs.true, label %if.else45

land.lhs.true:                                    ; preds = %for.body34
  %rem41 = srem i32 %i.1, 2
  %tobool42 = icmp ne i32 %rem41, 0
  br i1 %tobool42, label %if.then43, label %if.else45

if.then43:                                        ; preds = %land.lhs.true
  %inc44 = add nsw i32 %attackers.3, 1
  br label %for.end81

if.else45:                                        ; preds = %land.lhs.true, %for.body34
  %idxprom46 = sext i32 %add37 to i64
  %arrayidx47 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom46
  %i10 = load i32, i32* %arrayidx47, align 4
  %cmp48 = icmp eq i32 %i10, 5
  br i1 %cmp48, label %if.then49, label %if.else51

if.then49:                                        ; preds = %if.else45
  %inc50 = add nsw i32 %attackers.3, 1
  br label %for.end81

if.else51:                                        ; preds = %if.else45
  br label %while.cond52

while.cond52:                                     ; preds = %if.end72, %if.else51
  %a_sq.1 = phi i32 [ %add37, %if.else51 ], [ %add75, %if.end72 ]
  %idxprom53 = sext i32 %a_sq.1 to i64
  %arrayidx54 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom53
  %i11 = load i32, i32* %arrayidx54, align 4
  %cmp55 = icmp ne i32 %i11, 0
  br i1 %cmp55, label %while.body56, label %while.end76

while.body56:                                     ; preds = %while.cond52
  %idxprom57 = sext i32 %a_sq.1 to i64
  %arrayidx58 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom57
  %i12 = load i32, i32* %arrayidx58, align 4
  %cmp59 = icmp eq i32 %i12, 11
  br i1 %cmp59, label %if.then64, label %lor.lhs.false60

lor.lhs.false60:                                  ; preds = %while.body56
  %idxprom61 = sext i32 %a_sq.1 to i64
  %arrayidx62 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom61
  %i13 = load i32, i32* %arrayidx62, align 4
  %cmp63 = icmp eq i32 %i13, 9
  br i1 %cmp63, label %if.then64, label %if.else66

if.then64:                                        ; preds = %lor.lhs.false60, %while.body56
  %inc65 = add nsw i32 %attackers.3, 1
  br label %while.end76

if.else66:                                        ; preds = %lor.lhs.false60
  %idxprom67 = sext i32 %a_sq.1 to i64
  %arrayidx68 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom67
  %i14 = load i32, i32* %arrayidx68, align 4
  %cmp69 = icmp ne i32 %i14, 13
  br i1 %cmp69, label %if.then70, label %if.end71

if.then70:                                        ; preds = %if.else66
  br label %while.end76

if.end71:                                         ; preds = %if.else66
  br label %if.end72

if.end72:                                         ; preds = %if.end71
  %idxprom73 = sext i32 %i.1 to i64
  %arrayidx74 = getelementptr inbounds [4 x i32], [4 x i32]* @calc_attackers.bishop_o, i64 0, i64 %idxprom73
  %i15 = load i32, i32* %arrayidx74, align 4
  %add75 = add nsw i32 %a_sq.1, %i15
  br label %while.cond52

while.end76:                                      ; preds = %if.then70, %if.then64, %while.cond52
  %attackers.4 = phi i32 [ %inc65, %if.then64 ], [ %attackers.3, %if.then70 ], [ %attackers.3, %while.cond52 ]
  br label %if.end77

if.end77:                                         ; preds = %while.end76
  br label %if.end78

if.end78:                                         ; preds = %if.end77
  br label %for.inc79

for.inc79:                                        ; preds = %if.end78
  %inc80 = add nsw i32 %i.1, 1
  br label %for.cond32

for.end81:                                        ; preds = %if.then49, %if.then43, %for.cond32
  %attackers.5 = phi i32 [ %inc44, %if.then43 ], [ %inc50, %if.then49 ], [ %attackers.3, %for.cond32 ]
  br label %for.cond82

for.cond82:                                       ; preds = %for.inc94, %for.end81
  %i.2 = phi i32 [ 0, %for.end81 ], [ %inc95, %for.inc94 ]
  %attackers.6 = phi i32 [ %attackers.5, %for.end81 ], [ %attackers.7, %for.inc94 ]
  %cmp83 = icmp slt i32 %i.2, 8
  br i1 %cmp83, label %for.body84, label %for.end96

for.body84:                                       ; preds = %for.cond82
  %idxprom85 = sext i32 %i.2 to i64
  %arrayidx86 = getelementptr inbounds [8 x i32], [8 x i32]* @calc_attackers.knight_o, i64 0, i64 %idxprom85
  %i16 = load i32, i32* %arrayidx86, align 4
  %add87 = add nsw i32 %square, %i16
  %idxprom88 = sext i32 %add87 to i64
  %arrayidx89 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom88
  %i17 = load i32, i32* %arrayidx89, align 4
  %cmp90 = icmp eq i32 %i17, 3
  br i1 %cmp90, label %if.then91, label %if.end93

if.then91:                                        ; preds = %for.body84
  %inc92 = add nsw i32 %attackers.6, 1
  br label %if.end93

if.end93:                                         ; preds = %if.then91, %for.body84
  %attackers.7 = phi i32 [ %inc92, %if.then91 ], [ %attackers.6, %for.body84 ]
  br label %for.inc94

for.inc94:                                        ; preds = %if.end93
  %inc95 = add nsw i32 %i.2, 1
  br label %for.cond82

for.end96:                                        ; preds = %for.cond82
  br label %if.end204

if.else97:                                        ; preds = %if.end
  br label %for.cond98

for.cond98:                                       ; preds = %for.inc135, %if.else97
  %i.3 = phi i32 [ 0, %if.else97 ], [ %inc136, %for.inc135 ]
  %attackers.8 = phi i32 [ 0, %if.else97 ], [ %attackers.9, %for.inc135 ]
  %cmp99 = icmp slt i32 %i.3, 4
  br i1 %cmp99, label %for.body100, label %for.end137

for.body100:                                      ; preds = %for.cond98
  %idxprom101 = sext i32 %i.3 to i64
  %arrayidx102 = getelementptr inbounds [4 x i32], [4 x i32]* @calc_attackers.rook_o, i64 0, i64 %idxprom101
  %i18 = load i32, i32* %arrayidx102, align 4
  %add103 = add nsw i32 %square, %i18
  %idxprom104 = sext i32 %add103 to i64
  %arrayidx105 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom104
  %i19 = load i32, i32* %arrayidx105, align 4
  %cmp106 = icmp eq i32 %i19, 6
  br i1 %cmp106, label %if.then107, label %if.else109

if.then107:                                       ; preds = %for.body100
  %inc108 = add nsw i32 %attackers.8, 1
  br label %for.end137

if.else109:                                       ; preds = %for.body100
  br label %while.cond110

while.cond110:                                    ; preds = %if.end129, %if.else109
  %a_sq.2 = phi i32 [ %add103, %if.else109 ], [ %add132, %if.end129 ]
  %idxprom111 = sext i32 %a_sq.2 to i64
  %arrayidx112 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom111
  %i20 = load i32, i32* %arrayidx112, align 4
  %cmp113 = icmp ne i32 %i20, 0
  br i1 %cmp113, label %while.body114, label %while.end133

while.body114:                                    ; preds = %while.cond110
  %idxprom115 = sext i32 %a_sq.2 to i64
  %arrayidx116 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom115
  %i21 = load i32, i32* %arrayidx116, align 4
  %cmp117 = icmp eq i32 %i21, 8
  br i1 %cmp117, label %if.then122, label %lor.lhs.false118

lor.lhs.false118:                                 ; preds = %while.body114
  %idxprom119 = sext i32 %a_sq.2 to i64
  %arrayidx120 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom119
  %i22 = load i32, i32* %arrayidx120, align 4
  %cmp121 = icmp eq i32 %i22, 10
  br i1 %cmp121, label %if.then122, label %if.end124

if.then122:                                       ; preds = %lor.lhs.false118, %while.body114
  %inc123 = add nsw i32 %attackers.8, 1
  br label %while.end133

if.end124:                                        ; preds = %lor.lhs.false118
  %idxprom125 = sext i32 %a_sq.2 to i64
  %arrayidx126 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom125
  %i23 = load i32, i32* %arrayidx126, align 4
  %cmp127 = icmp ne i32 %i23, 13
  br i1 %cmp127, label %if.then128, label %if.end129

if.then128:                                       ; preds = %if.end124
  br label %while.end133

if.end129:                                        ; preds = %if.end124
  %idxprom130 = sext i32 %i.3 to i64
  %arrayidx131 = getelementptr inbounds [4 x i32], [4 x i32]* @calc_attackers.rook_o, i64 0, i64 %idxprom130
  %i24 = load i32, i32* %arrayidx131, align 4
  %add132 = add nsw i32 %a_sq.2, %i24
  br label %while.cond110

while.end133:                                     ; preds = %if.then128, %if.then122, %while.cond110
  %attackers.9 = phi i32 [ %inc123, %if.then122 ], [ %attackers.8, %if.then128 ], [ %attackers.8, %while.cond110 ]
  br label %if.end134

if.end134:                                        ; preds = %while.end133
  br label %for.inc135

for.inc135:                                       ; preds = %if.end134
  %inc136 = add nsw i32 %i.3, 1
  br label %for.cond98

for.end137:                                       ; preds = %if.then107, %for.cond98
  %attackers.10 = phi i32 [ %inc108, %if.then107 ], [ %attackers.8, %for.cond98 ]
  br label %for.cond138

for.cond138:                                      ; preds = %for.inc186, %for.end137
  %i.4 = phi i32 [ 0, %for.end137 ], [ %inc187, %for.inc186 ]
  %attackers.11 = phi i32 [ %attackers.10, %for.end137 ], [ %attackers.12, %for.inc186 ]
  %cmp139 = icmp slt i32 %i.4, 4
  br i1 %cmp139, label %for.body140, label %for.end188

for.body140:                                      ; preds = %for.cond138
  %idxprom141 = sext i32 %i.4 to i64
  %arrayidx142 = getelementptr inbounds [4 x i32], [4 x i32]* @calc_attackers.bishop_o, i64 0, i64 %idxprom141
  %i25 = load i32, i32* %arrayidx142, align 4
  %add143 = add nsw i32 %square, %i25
  %idxprom144 = sext i32 %add143 to i64
  %arrayidx145 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom144
  %i26 = load i32, i32* %arrayidx145, align 4
  %cmp146 = icmp eq i32 %i26, 2
  br i1 %cmp146, label %land.lhs.true147, label %if.else152

land.lhs.true147:                                 ; preds = %for.body140
  %rem148 = srem i32 %i.4, 2
  %tobool149 = icmp ne i32 %rem148, 0
  br i1 %tobool149, label %if.else152, label %if.then150

if.then150:                                       ; preds = %land.lhs.true147
  %inc151 = add nsw i32 %attackers.11, 1
  br label %for.end188

if.else152:                                       ; preds = %land.lhs.true147, %for.body140
  %idxprom153 = sext i32 %add143 to i64
  %arrayidx154 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom153
  %i27 = load i32, i32* %arrayidx154, align 4
  %cmp155 = icmp eq i32 %i27, 6
  br i1 %cmp155, label %if.then156, label %if.else158

if.then156:                                       ; preds = %if.else152
  %inc157 = add nsw i32 %attackers.11, 1
  br label %for.end188

if.else158:                                       ; preds = %if.else152
  br label %while.cond159

while.cond159:                                    ; preds = %if.end179, %if.else158
  %a_sq.3 = phi i32 [ %add143, %if.else158 ], [ %add182, %if.end179 ]
  %idxprom160 = sext i32 %a_sq.3 to i64
  %arrayidx161 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom160
  %i28 = load i32, i32* %arrayidx161, align 4
  %cmp162 = icmp ne i32 %i28, 0
  br i1 %cmp162, label %while.body163, label %while.end183

while.body163:                                    ; preds = %while.cond159
  %idxprom164 = sext i32 %a_sq.3 to i64
  %arrayidx165 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom164
  %i29 = load i32, i32* %arrayidx165, align 4
  %cmp166 = icmp eq i32 %i29, 12
  br i1 %cmp166, label %if.then171, label %lor.lhs.false167

lor.lhs.false167:                                 ; preds = %while.body163
  %idxprom168 = sext i32 %a_sq.3 to i64
  %arrayidx169 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom168
  %i30 = load i32, i32* %arrayidx169, align 4
  %cmp170 = icmp eq i32 %i30, 10
  br i1 %cmp170, label %if.then171, label %if.else173

if.then171:                                       ; preds = %lor.lhs.false167, %while.body163
  %inc172 = add nsw i32 %attackers.11, 1
  br label %while.end183

if.else173:                                       ; preds = %lor.lhs.false167
  %idxprom174 = sext i32 %a_sq.3 to i64
  %arrayidx175 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom174
  %i31 = load i32, i32* %arrayidx175, align 4
  %cmp176 = icmp ne i32 %i31, 13
  br i1 %cmp176, label %if.then177, label %if.end178

if.then177:                                       ; preds = %if.else173
  br label %while.end183

if.end178:                                        ; preds = %if.else173
  br label %if.end179

if.end179:                                        ; preds = %if.end178
  %idxprom180 = sext i32 %i.4 to i64
  %arrayidx181 = getelementptr inbounds [4 x i32], [4 x i32]* @calc_attackers.bishop_o, i64 0, i64 %idxprom180
  %i32 = load i32, i32* %arrayidx181, align 4
  %add182 = add nsw i32 %a_sq.3, %i32
  br label %while.cond159

while.end183:                                     ; preds = %if.then177, %if.then171, %while.cond159
  %attackers.12 = phi i32 [ %inc172, %if.then171 ], [ %attackers.11, %if.then177 ], [ %attackers.11, %while.cond159 ]
  br label %if.end184

if.end184:                                        ; preds = %while.end183
  br label %if.end185

if.end185:                                        ; preds = %if.end184
  br label %for.inc186

for.inc186:                                       ; preds = %if.end185
  %inc187 = add nsw i32 %i.4, 1
  br label %for.cond138

for.end188:                                       ; preds = %if.then156, %if.then150, %for.cond138
  %attackers.13 = phi i32 [ %inc157, %if.then156 ], [ %inc151, %if.then150 ], [ %attackers.11, %for.cond138 ]
  br label %for.cond189

for.cond189:                                      ; preds = %for.inc201, %for.end188
  %i.5 = phi i32 [ 0, %for.end188 ], [ %inc202, %for.inc201 ]
  %attackers.14 = phi i32 [ %attackers.13, %for.end188 ], [ %attackers.15, %for.inc201 ]
  %cmp190 = icmp slt i32 %i.5, 8
  br i1 %cmp190, label %for.body191, label %for.end203

for.body191:                                      ; preds = %for.cond189
  %idxprom192 = sext i32 %i.5 to i64
  %arrayidx193 = getelementptr inbounds [8 x i32], [8 x i32]* @calc_attackers.knight_o, i64 0, i64 %idxprom192
  %i33 = load i32, i32* %arrayidx193, align 4
  %add194 = add nsw i32 %square, %i33
  %idxprom195 = sext i32 %add194 to i64
  %arrayidx196 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom195
  %i34 = load i32, i32* %arrayidx196, align 4
  %cmp197 = icmp eq i32 %i34, 4
  br i1 %cmp197, label %if.then198, label %if.end200

if.then198:                                       ; preds = %for.body191
  %inc199 = add nsw i32 %attackers.14, 1
  br label %if.end200

if.end200:                                        ; preds = %if.then198, %for.body191
  %attackers.15 = phi i32 [ %inc199, %if.then198 ], [ %attackers.14, %for.body191 ]
  br label %for.inc201

for.inc201:                                       ; preds = %if.end200
  %inc202 = add nsw i32 %i.5, 1
  br label %for.cond189

for.end203:                                       ; preds = %for.cond189
  br label %if.end204

if.end204:                                        ; preds = %for.end203, %for.end96
  %attackers.16 = phi i32 [ %attackers.6, %for.end96 ], [ %attackers.14, %for.end203 ]
  br label %return

return:                                           ; preds = %if.end204, %if.then
  %retval.0 = phi i32 [ 0, %if.then ], [ %attackers.16, %if.end204 ]
  ret i32 %retval.0
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @is_attacked(i32 %square, i32 %color) #0 {
entry:
  %and = and i32 %color, 1
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then
  %i.0 = phi i32 [ 0, %if.then ], [ %inc, %for.inc ]
  %cmp = icmp slt i32 %i.0, 4
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %idxprom = sext i32 %i.0 to i64
  %arrayidx = getelementptr inbounds [4 x i32], [4 x i32]* @is_attacked.bishop_o, i64 0, i64 %idxprom
  %i = load i32, i32* %arrayidx, align 4
  %add = add nsw i32 %square, %i
  %idxprom1 = sext i32 %add to i64
  %arrayidx2 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom1
  %i1 = load i32, i32* %arrayidx2, align 4
  %cmp3 = icmp eq i32 %i1, 1
  br i1 %cmp3, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %for.body
  %and4 = and i32 %i.0, 1
  %tobool5 = icmp ne i32 %and4, 0
  br i1 %tobool5, label %if.then6, label %if.end

if.then6:                                         ; preds = %land.lhs.true
  br label %return

if.end:                                           ; preds = %land.lhs.true, %for.body
  %cmp7 = icmp eq i32 %i1, 5
  br i1 %cmp7, label %if.then8, label %if.end9

if.then8:                                         ; preds = %if.end
  br label %return

if.end9:                                          ; preds = %if.end
  br label %while.cond

while.cond:                                       ; preds = %if.end17, %if.end9
  %a_sq.0 = phi i32 [ %add, %if.end9 ], [ %add18, %if.end17 ]
  %basq.0 = phi i32 [ %i1, %if.end9 ], [ %i2, %if.end17 ]
  %cmp10 = icmp ne i32 %basq.0, 0
  br i1 %cmp10, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %cmp11 = icmp eq i32 %basq.0, 11
  br i1 %cmp11, label %if.then13, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %while.body
  %cmp12 = icmp eq i32 %basq.0, 9
  br i1 %cmp12, label %if.then13, label %if.end14

if.then13:                                        ; preds = %lor.lhs.false, %while.body
  br label %return

if.end14:                                         ; preds = %lor.lhs.false
  %cmp15 = icmp ne i32 %basq.0, 13
  br i1 %cmp15, label %if.then16, label %if.end17

if.then16:                                        ; preds = %if.end14
  br label %while.end

if.end17:                                         ; preds = %if.end14
  %add18 = add nsw i32 %a_sq.0, %i
  %idxprom19 = sext i32 %add18 to i64
  %arrayidx20 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom19
  %i2 = load i32, i32* %arrayidx20, align 4
  br label %while.cond

while.end:                                        ; preds = %if.then16, %while.cond
  br label %for.inc

for.inc:                                          ; preds = %while.end
  %inc = add nsw i32 %i.0, 1
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %for.cond21

for.cond21:                                       ; preds = %for.inc32, %for.end
  %i.1 = phi i32 [ 0, %for.end ], [ %inc33, %for.inc32 ]
  %cmp22 = icmp slt i32 %i.1, 8
  br i1 %cmp22, label %for.body23, label %for.end34

for.body23:                                       ; preds = %for.cond21
  %idxprom24 = sext i32 %i.1 to i64
  %arrayidx25 = getelementptr inbounds [8 x i32], [8 x i32]* @is_attacked.knight_o, i64 0, i64 %idxprom24
  %i3 = load i32, i32* %arrayidx25, align 4
  %add26 = add nsw i32 %square, %i3
  %idxprom27 = sext i32 %add26 to i64
  %arrayidx28 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom27
  %i4 = load i32, i32* %arrayidx28, align 4
  %cmp29 = icmp eq i32 %i4, 3
  br i1 %cmp29, label %if.then30, label %if.end31

if.then30:                                        ; preds = %for.body23
  br label %return

if.end31:                                         ; preds = %for.body23
  br label %for.inc32

for.inc32:                                        ; preds = %if.end31
  %inc33 = add nsw i32 %i.1, 1
  br label %for.cond21

for.end34:                                        ; preds = %for.cond21
  br label %for.cond35

for.cond35:                                       ; preds = %for.inc61, %for.end34
  %i.2 = phi i32 [ 0, %for.end34 ], [ %inc62, %for.inc61 ]
  %cmp36 = icmp slt i32 %i.2, 4
  br i1 %cmp36, label %for.body37, label %for.end63

for.body37:                                       ; preds = %for.cond35
  %idxprom38 = sext i32 %i.2 to i64
  %arrayidx39 = getelementptr inbounds [4 x i32], [4 x i32]* @is_attacked.rook_o, i64 0, i64 %idxprom38
  %i5 = load i32, i32* %arrayidx39, align 4
  %add40 = add nsw i32 %square, %i5
  %idxprom41 = sext i32 %add40 to i64
  %arrayidx42 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom41
  %i6 = load i32, i32* %arrayidx42, align 4
  %cmp43 = icmp eq i32 %i6, 5
  br i1 %cmp43, label %if.then44, label %if.end45

if.then44:                                        ; preds = %for.body37
  br label %return

if.end45:                                         ; preds = %for.body37
  br label %while.cond46

while.cond46:                                     ; preds = %if.end56, %if.end45
  %a_sq.1 = phi i32 [ %add40, %if.end45 ], [ %add57, %if.end56 ]
  %basq.1 = phi i32 [ %i6, %if.end45 ], [ %i7, %if.end56 ]
  %cmp47 = icmp ne i32 %basq.1, 0
  br i1 %cmp47, label %while.body48, label %while.end60

while.body48:                                     ; preds = %while.cond46
  %cmp49 = icmp eq i32 %basq.1, 7
  br i1 %cmp49, label %if.then52, label %lor.lhs.false50

lor.lhs.false50:                                  ; preds = %while.body48
  %cmp51 = icmp eq i32 %basq.1, 9
  br i1 %cmp51, label %if.then52, label %if.end53

if.then52:                                        ; preds = %lor.lhs.false50, %while.body48
  br label %return

if.end53:                                         ; preds = %lor.lhs.false50
  %cmp54 = icmp ne i32 %basq.1, 13
  br i1 %cmp54, label %if.then55, label %if.end56

if.then55:                                        ; preds = %if.end53
  br label %while.end60

if.end56:                                         ; preds = %if.end53
  %add57 = add nsw i32 %a_sq.1, %i5
  %idxprom58 = sext i32 %add57 to i64
  %arrayidx59 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom58
  %i7 = load i32, i32* %arrayidx59, align 4
  br label %while.cond46

while.end60:                                      ; preds = %if.then55, %while.cond46
  br label %for.inc61

for.inc61:                                        ; preds = %while.end60
  %inc62 = add nsw i32 %i.2, 1
  br label %for.cond35

for.end63:                                        ; preds = %for.cond35
  br label %return

if.else:                                          ; preds = %entry
  br label %for.cond64

for.cond64:                                       ; preds = %for.inc96, %if.else
  %i.3 = phi i32 [ 0, %if.else ], [ %inc97, %for.inc96 ]
  %cmp65 = icmp slt i32 %i.3, 4
  br i1 %cmp65, label %for.body66, label %for.end98

for.body66:                                       ; preds = %for.cond64
  %idxprom67 = sext i32 %i.3 to i64
  %arrayidx68 = getelementptr inbounds [4 x i32], [4 x i32]* @is_attacked.bishop_o, i64 0, i64 %idxprom67
  %i8 = load i32, i32* %arrayidx68, align 4
  %add69 = add nsw i32 %square, %i8
  %idxprom70 = sext i32 %add69 to i64
  %arrayidx71 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom70
  %i9 = load i32, i32* %arrayidx71, align 4
  %cmp72 = icmp eq i32 %i9, 2
  br i1 %cmp72, label %land.lhs.true73, label %if.end77

land.lhs.true73:                                  ; preds = %for.body66
  %and74 = and i32 %i.3, 1
  %tobool75 = icmp ne i32 %and74, 0
  br i1 %tobool75, label %if.end77, label %if.then76

if.then76:                                        ; preds = %land.lhs.true73
  br label %return

if.end77:                                         ; preds = %land.lhs.true73, %for.body66
  %cmp78 = icmp eq i32 %i9, 6
  br i1 %cmp78, label %if.then79, label %if.end80

if.then79:                                        ; preds = %if.end77
  br label %return

if.end80:                                         ; preds = %if.end77
  br label %while.cond81

while.cond81:                                     ; preds = %if.end91, %if.end80
  %a_sq.2 = phi i32 [ %add69, %if.end80 ], [ %add92, %if.end91 ]
  %basq.2 = phi i32 [ %i9, %if.end80 ], [ %i10, %if.end91 ]
  %cmp82 = icmp ne i32 %basq.2, 0
  br i1 %cmp82, label %while.body83, label %while.end95

while.body83:                                     ; preds = %while.cond81
  %cmp84 = icmp eq i32 %basq.2, 12
  br i1 %cmp84, label %if.then87, label %lor.lhs.false85

lor.lhs.false85:                                  ; preds = %while.body83
  %cmp86 = icmp eq i32 %basq.2, 10
  br i1 %cmp86, label %if.then87, label %if.end88

if.then87:                                        ; preds = %lor.lhs.false85, %while.body83
  br label %return

if.end88:                                         ; preds = %lor.lhs.false85
  %cmp89 = icmp ne i32 %basq.2, 13
  br i1 %cmp89, label %if.then90, label %if.end91

if.then90:                                        ; preds = %if.end88
  br label %while.end95

if.end91:                                         ; preds = %if.end88
  %add92 = add nsw i32 %a_sq.2, %i8
  %idxprom93 = sext i32 %add92 to i64
  %arrayidx94 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom93
  %i10 = load i32, i32* %arrayidx94, align 4
  br label %while.cond81

while.end95:                                      ; preds = %if.then90, %while.cond81
  br label %for.inc96

for.inc96:                                        ; preds = %while.end95
  %inc97 = add nsw i32 %i.3, 1
  br label %for.cond64

for.end98:                                        ; preds = %for.cond64
  br label %for.cond99

for.cond99:                                       ; preds = %for.inc110, %for.end98
  %i.4 = phi i32 [ 0, %for.end98 ], [ %inc111, %for.inc110 ]
  %cmp100 = icmp slt i32 %i.4, 8
  br i1 %cmp100, label %for.body101, label %for.end112

for.body101:                                      ; preds = %for.cond99
  %idxprom102 = sext i32 %i.4 to i64
  %arrayidx103 = getelementptr inbounds [8 x i32], [8 x i32]* @is_attacked.knight_o, i64 0, i64 %idxprom102
  %i11 = load i32, i32* %arrayidx103, align 4
  %add104 = add nsw i32 %square, %i11
  %idxprom105 = sext i32 %add104 to i64
  %arrayidx106 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom105
  %i12 = load i32, i32* %arrayidx106, align 4
  %cmp107 = icmp eq i32 %i12, 4
  br i1 %cmp107, label %if.then108, label %if.end109

if.then108:                                       ; preds = %for.body101
  br label %return

if.end109:                                        ; preds = %for.body101
  br label %for.inc110

for.inc110:                                       ; preds = %if.end109
  %inc111 = add nsw i32 %i.4, 1
  br label %for.cond99

for.end112:                                       ; preds = %for.cond99
  br label %for.cond113

for.cond113:                                      ; preds = %for.inc141, %for.end112
  %i.5 = phi i32 [ 0, %for.end112 ], [ %inc142, %for.inc141 ]
  %cmp114 = icmp slt i32 %i.5, 4
  br i1 %cmp114, label %for.body115, label %for.end143

for.body115:                                      ; preds = %for.cond113
  %idxprom116 = sext i32 %i.5 to i64
  %arrayidx117 = getelementptr inbounds [4 x i32], [4 x i32]* @is_attacked.rook_o, i64 0, i64 %idxprom116
  %i13 = load i32, i32* %arrayidx117, align 4
  %idxprom118 = sext i32 %i.5 to i64
  %arrayidx119 = getelementptr inbounds [4 x i32], [4 x i32]* @is_attacked.rook_o, i64 0, i64 %idxprom118
  %i14 = load i32, i32* %arrayidx119, align 4
  %add120 = add nsw i32 %square, %i14
  %idxprom121 = sext i32 %add120 to i64
  %arrayidx122 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom121
  %i15 = load i32, i32* %arrayidx122, align 4
  %cmp123 = icmp eq i32 %i15, 6
  br i1 %cmp123, label %if.then124, label %if.end125

if.then124:                                       ; preds = %for.body115
  br label %return

if.end125:                                        ; preds = %for.body115
  br label %while.cond126

while.cond126:                                    ; preds = %if.end136, %if.end125
  %a_sq.3 = phi i32 [ %add120, %if.end125 ], [ %add137, %if.end136 ]
  %basq.3 = phi i32 [ %i15, %if.end125 ], [ %i16, %if.end136 ]
  %cmp127 = icmp ne i32 %basq.3, 0
  br i1 %cmp127, label %while.body128, label %while.end140

while.body128:                                    ; preds = %while.cond126
  %cmp129 = icmp eq i32 %basq.3, 8
  br i1 %cmp129, label %if.then132, label %lor.lhs.false130

lor.lhs.false130:                                 ; preds = %while.body128
  %cmp131 = icmp eq i32 %basq.3, 10
  br i1 %cmp131, label %if.then132, label %if.end133

if.then132:                                       ; preds = %lor.lhs.false130, %while.body128
  br label %return

if.end133:                                        ; preds = %lor.lhs.false130
  %cmp134 = icmp ne i32 %basq.3, 13
  br i1 %cmp134, label %if.then135, label %if.end136

if.then135:                                       ; preds = %if.end133
  br label %while.end140

if.end136:                                        ; preds = %if.end133
  %add137 = add nsw i32 %a_sq.3, %i13
  %idxprom138 = sext i32 %add137 to i64
  %arrayidx139 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom138
  %i16 = load i32, i32* %arrayidx139, align 4
  br label %while.cond126

while.end140:                                     ; preds = %if.then135, %while.cond126
  br label %for.inc141

for.inc141:                                       ; preds = %while.end140
  %inc142 = add nsw i32 %i.5, 1
  br label %for.cond113

for.end143:                                       ; preds = %for.cond113
  br label %return

return:                                           ; preds = %for.end143, %if.then132, %if.then124, %if.then108, %if.then87, %if.then79, %if.then76, %for.end63, %if.then52, %if.then44, %if.then30, %if.then13, %if.then8, %if.then6
  %retval.0 = phi i32 [ 1, %if.then6 ], [ 1, %if.then8 ], [ 1, %if.then13 ], [ 1, %if.then30 ], [ 1, %if.then44 ], [ 1, %if.then52 ], [ 0, %for.end63 ], [ 1, %if.then79 ], [ 1, %if.then87 ], [ 1, %if.then76 ], [ 1, %if.then108 ], [ 1, %if.then124 ], [ 1, %if.then132 ], [ 0, %for.end143 ]
  ret i32 %retval.0
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @nk_attacked(i32 %square, i32 %color) #0 {
entry:
  %and = and i32 %color, 1
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then
  %i.0 = phi i32 [ 0, %if.then ], [ %inc, %for.inc ]
  %cmp = icmp slt i32 %i.0, 4
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %idxprom = sext i32 %i.0 to i64
  %arrayidx = getelementptr inbounds [4 x i32], [4 x i32]* @nk_attacked.bishop_o, i64 0, i64 %idxprom
  %i = load i32, i32* %arrayidx, align 4
  %add = add nsw i32 %square, %i
  %idxprom1 = sext i32 %add to i64
  %arrayidx2 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom1
  %i1 = load i32, i32* %arrayidx2, align 4
  %cmp3 = icmp eq i32 %i1, 1
  br i1 %cmp3, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %for.body
  %and4 = and i32 %i.0, 1
  %tobool5 = icmp ne i32 %and4, 0
  br i1 %tobool5, label %if.then6, label %if.end

if.then6:                                         ; preds = %land.lhs.true
  br label %return

if.end:                                           ; preds = %land.lhs.true, %for.body
  br label %while.cond

while.cond:                                       ; preds = %if.end14, %if.end
  %a_sq.0 = phi i32 [ %add, %if.end ], [ %add15, %if.end14 ]
  %basq.0 = phi i32 [ %i1, %if.end ], [ %i2, %if.end14 ]
  %cmp7 = icmp ne i32 %basq.0, 0
  br i1 %cmp7, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %cmp8 = icmp eq i32 %basq.0, 11
  br i1 %cmp8, label %if.then10, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %while.body
  %cmp9 = icmp eq i32 %basq.0, 9
  br i1 %cmp9, label %if.then10, label %if.end11

if.then10:                                        ; preds = %lor.lhs.false, %while.body
  br label %return

if.end11:                                         ; preds = %lor.lhs.false
  %cmp12 = icmp ne i32 %basq.0, 13
  br i1 %cmp12, label %if.then13, label %if.end14

if.then13:                                        ; preds = %if.end11
  br label %while.end

if.end14:                                         ; preds = %if.end11
  %add15 = add nsw i32 %a_sq.0, %i
  %idxprom16 = sext i32 %add15 to i64
  %arrayidx17 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom16
  %i2 = load i32, i32* %arrayidx17, align 4
  br label %while.cond

while.end:                                        ; preds = %if.then13, %while.cond
  br label %for.inc

for.inc:                                          ; preds = %while.end
  %inc = add nsw i32 %i.0, 1
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %for.cond18

for.cond18:                                       ; preds = %for.inc29, %for.end
  %i.1 = phi i32 [ 0, %for.end ], [ %inc30, %for.inc29 ]
  %cmp19 = icmp slt i32 %i.1, 8
  br i1 %cmp19, label %for.body20, label %for.end31

for.body20:                                       ; preds = %for.cond18
  %idxprom21 = sext i32 %i.1 to i64
  %arrayidx22 = getelementptr inbounds [8 x i32], [8 x i32]* @nk_attacked.knight_o, i64 0, i64 %idxprom21
  %i3 = load i32, i32* %arrayidx22, align 4
  %add23 = add nsw i32 %square, %i3
  %idxprom24 = sext i32 %add23 to i64
  %arrayidx25 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom24
  %i4 = load i32, i32* %arrayidx25, align 4
  %cmp26 = icmp eq i32 %i4, 3
  br i1 %cmp26, label %if.then27, label %if.end28

if.then27:                                        ; preds = %for.body20
  br label %return

if.end28:                                         ; preds = %for.body20
  br label %for.inc29

for.inc29:                                        ; preds = %if.end28
  %inc30 = add nsw i32 %i.1, 1
  br label %for.cond18

for.end31:                                        ; preds = %for.cond18
  br label %for.cond32

for.cond32:                                       ; preds = %for.inc55, %for.end31
  %i.2 = phi i32 [ 0, %for.end31 ], [ %inc56, %for.inc55 ]
  %cmp33 = icmp slt i32 %i.2, 4
  br i1 %cmp33, label %for.body34, label %for.end57

for.body34:                                       ; preds = %for.cond32
  %idxprom35 = sext i32 %i.2 to i64
  %arrayidx36 = getelementptr inbounds [4 x i32], [4 x i32]* @nk_attacked.rook_o, i64 0, i64 %idxprom35
  %i5 = load i32, i32* %arrayidx36, align 4
  %add37 = add nsw i32 %square, %i5
  %idxprom38 = sext i32 %add37 to i64
  %arrayidx39 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom38
  %i6 = load i32, i32* %arrayidx39, align 4
  br label %while.cond40

while.cond40:                                     ; preds = %if.end50, %for.body34
  %a_sq.1 = phi i32 [ %add37, %for.body34 ], [ %add51, %if.end50 ]
  %basq.1 = phi i32 [ %i6, %for.body34 ], [ %i7, %if.end50 ]
  %cmp41 = icmp ne i32 %basq.1, 0
  br i1 %cmp41, label %while.body42, label %while.end54

while.body42:                                     ; preds = %while.cond40
  %cmp43 = icmp eq i32 %basq.1, 7
  br i1 %cmp43, label %if.then46, label %lor.lhs.false44

lor.lhs.false44:                                  ; preds = %while.body42
  %cmp45 = icmp eq i32 %basq.1, 9
  br i1 %cmp45, label %if.then46, label %if.end47

if.then46:                                        ; preds = %lor.lhs.false44, %while.body42
  br label %return

if.end47:                                         ; preds = %lor.lhs.false44
  %cmp48 = icmp ne i32 %basq.1, 13
  br i1 %cmp48, label %if.then49, label %if.end50

if.then49:                                        ; preds = %if.end47
  br label %while.end54

if.end50:                                         ; preds = %if.end47
  %add51 = add nsw i32 %a_sq.1, %i5
  %idxprom52 = sext i32 %add51 to i64
  %arrayidx53 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom52
  %i7 = load i32, i32* %arrayidx53, align 4
  br label %while.cond40

while.end54:                                      ; preds = %if.then49, %while.cond40
  br label %for.inc55

for.inc55:                                        ; preds = %while.end54
  %inc56 = add nsw i32 %i.2, 1
  br label %for.cond32

for.end57:                                        ; preds = %for.cond32
  br label %return

if.else:                                          ; preds = %entry
  br label %for.cond58

for.cond58:                                       ; preds = %for.inc87, %if.else
  %i.3 = phi i32 [ 0, %if.else ], [ %inc88, %for.inc87 ]
  %cmp59 = icmp slt i32 %i.3, 4
  br i1 %cmp59, label %for.body60, label %for.end89

for.body60:                                       ; preds = %for.cond58
  %idxprom61 = sext i32 %i.3 to i64
  %arrayidx62 = getelementptr inbounds [4 x i32], [4 x i32]* @nk_attacked.bishop_o, i64 0, i64 %idxprom61
  %i8 = load i32, i32* %arrayidx62, align 4
  %add63 = add nsw i32 %square, %i8
  %idxprom64 = sext i32 %add63 to i64
  %arrayidx65 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom64
  %i9 = load i32, i32* %arrayidx65, align 4
  %cmp66 = icmp eq i32 %i9, 2
  br i1 %cmp66, label %land.lhs.true67, label %if.end71

land.lhs.true67:                                  ; preds = %for.body60
  %and68 = and i32 %i.3, 1
  %tobool69 = icmp ne i32 %and68, 0
  br i1 %tobool69, label %if.end71, label %if.then70

if.then70:                                        ; preds = %land.lhs.true67
  br label %return

if.end71:                                         ; preds = %land.lhs.true67, %for.body60
  br label %while.cond72

while.cond72:                                     ; preds = %if.end82, %if.end71
  %a_sq.2 = phi i32 [ %add63, %if.end71 ], [ %add83, %if.end82 ]
  %basq.2 = phi i32 [ %i9, %if.end71 ], [ %i10, %if.end82 ]
  %cmp73 = icmp ne i32 %basq.2, 0
  br i1 %cmp73, label %while.body74, label %while.end86

while.body74:                                     ; preds = %while.cond72
  %cmp75 = icmp eq i32 %basq.2, 12
  br i1 %cmp75, label %if.then78, label %lor.lhs.false76

lor.lhs.false76:                                  ; preds = %while.body74
  %cmp77 = icmp eq i32 %basq.2, 10
  br i1 %cmp77, label %if.then78, label %if.end79

if.then78:                                        ; preds = %lor.lhs.false76, %while.body74
  br label %return

if.end79:                                         ; preds = %lor.lhs.false76
  %cmp80 = icmp ne i32 %basq.2, 13
  br i1 %cmp80, label %if.then81, label %if.end82

if.then81:                                        ; preds = %if.end79
  br label %while.end86

if.end82:                                         ; preds = %if.end79
  %add83 = add nsw i32 %a_sq.2, %i8
  %idxprom84 = sext i32 %add83 to i64
  %arrayidx85 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom84
  %i10 = load i32, i32* %arrayidx85, align 4
  br label %while.cond72

while.end86:                                      ; preds = %if.then81, %while.cond72
  br label %for.inc87

for.inc87:                                        ; preds = %while.end86
  %inc88 = add nsw i32 %i.3, 1
  br label %for.cond58

for.end89:                                        ; preds = %for.cond58
  br label %for.cond90

for.cond90:                                       ; preds = %for.inc101, %for.end89
  %i.4 = phi i32 [ 0, %for.end89 ], [ %inc102, %for.inc101 ]
  %cmp91 = icmp slt i32 %i.4, 8
  br i1 %cmp91, label %for.body92, label %for.end103

for.body92:                                       ; preds = %for.cond90
  %idxprom93 = sext i32 %i.4 to i64
  %arrayidx94 = getelementptr inbounds [8 x i32], [8 x i32]* @nk_attacked.knight_o, i64 0, i64 %idxprom93
  %i11 = load i32, i32* %arrayidx94, align 4
  %add95 = add nsw i32 %square, %i11
  %idxprom96 = sext i32 %add95 to i64
  %arrayidx97 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom96
  %i12 = load i32, i32* %arrayidx97, align 4
  %cmp98 = icmp eq i32 %i12, 4
  br i1 %cmp98, label %if.then99, label %if.end100

if.then99:                                        ; preds = %for.body92
  br label %return

if.end100:                                        ; preds = %for.body92
  br label %for.inc101

for.inc101:                                       ; preds = %if.end100
  %inc102 = add nsw i32 %i.4, 1
  br label %for.cond90

for.end103:                                       ; preds = %for.cond90
  br label %for.cond104

for.cond104:                                      ; preds = %for.inc129, %for.end103
  %i.5 = phi i32 [ 0, %for.end103 ], [ %inc130, %for.inc129 ]
  %cmp105 = icmp slt i32 %i.5, 4
  br i1 %cmp105, label %for.body106, label %for.end131

for.body106:                                      ; preds = %for.cond104
  %idxprom107 = sext i32 %i.5 to i64
  %arrayidx108 = getelementptr inbounds [4 x i32], [4 x i32]* @nk_attacked.rook_o, i64 0, i64 %idxprom107
  %i13 = load i32, i32* %arrayidx108, align 4
  %idxprom109 = sext i32 %i.5 to i64
  %arrayidx110 = getelementptr inbounds [4 x i32], [4 x i32]* @nk_attacked.rook_o, i64 0, i64 %idxprom109
  %i14 = load i32, i32* %arrayidx110, align 4
  %add111 = add nsw i32 %square, %i14
  %idxprom112 = sext i32 %add111 to i64
  %arrayidx113 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom112
  %i15 = load i32, i32* %arrayidx113, align 4
  br label %while.cond114

while.cond114:                                    ; preds = %if.end124, %for.body106
  %a_sq.3 = phi i32 [ %add111, %for.body106 ], [ %add125, %if.end124 ]
  %basq.3 = phi i32 [ %i15, %for.body106 ], [ %i16, %if.end124 ]
  %cmp115 = icmp ne i32 %basq.3, 0
  br i1 %cmp115, label %while.body116, label %while.end128

while.body116:                                    ; preds = %while.cond114
  %cmp117 = icmp eq i32 %basq.3, 8
  br i1 %cmp117, label %if.then120, label %lor.lhs.false118

lor.lhs.false118:                                 ; preds = %while.body116
  %cmp119 = icmp eq i32 %basq.3, 10
  br i1 %cmp119, label %if.then120, label %if.end121

if.then120:                                       ; preds = %lor.lhs.false118, %while.body116
  br label %return

if.end121:                                        ; preds = %lor.lhs.false118
  %cmp122 = icmp ne i32 %basq.3, 13
  br i1 %cmp122, label %if.then123, label %if.end124

if.then123:                                       ; preds = %if.end121
  br label %while.end128

if.end124:                                        ; preds = %if.end121
  %add125 = add nsw i32 %a_sq.3, %i13
  %idxprom126 = sext i32 %add125 to i64
  %arrayidx127 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom126
  %i16 = load i32, i32* %arrayidx127, align 4
  br label %while.cond114

while.end128:                                     ; preds = %if.then123, %while.cond114
  br label %for.inc129

for.inc129:                                       ; preds = %while.end128
  %inc130 = add nsw i32 %i.5, 1
  br label %for.cond104

for.end131:                                       ; preds = %for.cond104
  br label %return

return:                                           ; preds = %for.end131, %if.then120, %if.then99, %if.then78, %if.then70, %for.end57, %if.then46, %if.then27, %if.then10, %if.then6
  %retval.0 = phi i32 [ 1, %if.then6 ], [ 1, %if.then10 ], [ 1, %if.then27 ], [ 1, %if.then46 ], [ 0, %for.end57 ], [ 1, %if.then78 ], [ 1, %if.then70 ], [ 1, %if.then99 ], [ 1, %if.then120 ], [ 0, %for.end131 ]
  ret i32 %retval.0
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @init_book() #0 {
entry:
  ret i32 1
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @choose_book_move(%struct.move_s* noalias sret(%struct.move_s) align 4 %agg.result) #0 {
entry:
  %i = bitcast %struct.move_s* %agg.result to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %i, i8* align 4 bitcast (%struct.move_s* @dummy to i8*), i64 24, i1 false)
  ret void
}

; Function Attrs: argmemonly nofree nosync nounwind willreturn
declare void @llvm.memcpy.p0i8.p0i8.i64(i8* noalias nocapture writeonly, i8* noalias nocapture readonly, i64, i1 immarg) #1

; Function Attrs: noinline nounwind uwtable
define dso_local void @ProcessHoldings(i8* %str) #0 {
entry:
  call void @llvm.memset.p0i8.i64(i8* align 16 bitcast ([2 x [16 x i32]]* @holding to i8*), i8 0, i64 128, i1 false)
  store i32 -1056969216, i32* @hold_hash, align 4
  store i32 0, i32* @white_hand_eval, align 4
  store i32 0, i32* @black_hand_eval, align 4
  call void @reset_ecache()
  store i32 0, i32* getelementptr inbounds ([2 x i32], [2 x i32]* @num_holding, i64 0, i64 0), align 4
  store i32 0, i32* getelementptr inbounds ([2 x i32], [2 x i32]* @num_holding, i64 0, i64 1), align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %c.0 = phi i32 [ 0, %entry ], [ %inc152, %for.inc ]
  %i.0 = phi i32 [ 0, %entry ], [ %i.2, %for.inc ]
  %cmp = icmp sle i32 %c.0, 1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  br label %while.cond

while.cond:                                       ; preds = %if.end, %for.body
  %i.1 = phi i32 [ %i.0, %for.body ], [ %inc, %if.end ]
  %inc = add nsw i32 %i.1, 1
  %idxprom = sext i32 %i.1 to i64
  %arrayidx = getelementptr inbounds i8, i8* %str, i64 %idxprom
  %i = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %i to i32
  %cmp1 = icmp ne i32 %conv, 91
  br i1 %cmp1, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %idxprom3 = sext i32 %inc to i64
  %arrayidx4 = getelementptr inbounds i8, i8* %str, i64 %idxprom3
  %i1 = load i8, i8* %arrayidx4, align 1
  %conv5 = sext i8 %i1 to i32
  %cmp6 = icmp eq i32 %conv5, 0
  br i1 %cmp6, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  br label %if.end250

if.end:                                           ; preds = %while.body
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %while.cond8

while.cond8:                                      ; preds = %sw.epilog, %while.end
  %i.2 = phi i32 [ %inc, %while.end ], [ %inc15, %sw.epilog ]
  %idxprom9 = sext i32 %i.2 to i64
  %arrayidx10 = getelementptr inbounds i8, i8* %str, i64 %idxprom9
  %i2 = load i8, i8* %arrayidx10, align 1
  %conv11 = sext i8 %i2 to i32
  %cmp12 = icmp ne i32 %conv11, 93
  br i1 %cmp12, label %while.body14, label %while.end151

while.body14:                                     ; preds = %while.cond8
  %inc15 = add nsw i32 %i.2, 1
  %idxprom16 = sext i32 %i.2 to i64
  %arrayidx17 = getelementptr inbounds i8, i8* %str, i64 %idxprom16
  %i3 = load i8, i8* %arrayidx17, align 1
  %conv18 = sext i8 %i3 to i32
  switch i32 %conv18, label %sw.default [
    i32 112, label %sw.bb
    i32 80, label %sw.bb
    i32 113, label %sw.bb43
    i32 81, label %sw.bb43
    i32 114, label %sw.bb70
    i32 82, label %sw.bb70
    i32 98, label %sw.bb97
    i32 66, label %sw.bb97
    i32 110, label %sw.bb124
    i32 78, label %sw.bb124
  ]

sw.bb:                                            ; preds = %while.body14, %while.body14
  %idxprom19 = sext i32 %c.0 to i64
  %arrayidx20 = getelementptr inbounds [2 x [16 x i32]], [2 x [16 x i32]]* @holding, i64 0, i64 %idxprom19
  %cmp21 = icmp eq i32 %c.0, 0
  %i4 = zext i1 %cmp21 to i64
  %cond = select i1 %cmp21, i32 1, i32 2
  %idxprom23 = sext i32 %cond to i64
  %arrayidx24 = getelementptr inbounds [16 x i32], [16 x i32]* %arrayidx20, i64 0, i64 %idxprom23
  %i5 = load i32, i32* %arrayidx24, align 4
  %inc25 = add nsw i32 %i5, 1
  store i32 %inc25, i32* %arrayidx24, align 4
  %idxprom26 = sext i32 %c.0 to i64
  %arrayidx27 = getelementptr inbounds [2 x i32], [2 x i32]* @num_holding, i64 0, i64 %idxprom26
  %i6 = load i32, i32* %arrayidx27, align 4
  %inc28 = add nsw i32 %i6, 1
  store i32 %inc28, i32* %arrayidx27, align 4
  %cmp29 = icmp eq i32 %c.0, 0
  %i7 = zext i1 %cmp29 to i64
  %cond31 = select i1 %cmp29, i32 1, i32 2
  %idxprom32 = sext i32 %cond31 to i64
  %arrayidx33 = getelementptr inbounds [14 x [144 x i32]], [14 x [144 x i32]]* @zobrist, i64 0, i64 %idxprom32
  %idxprom34 = sext i32 %c.0 to i64
  %arrayidx35 = getelementptr inbounds [2 x [16 x i32]], [2 x [16 x i32]]* @holding, i64 0, i64 %idxprom34
  %cmp36 = icmp eq i32 %c.0, 0
  %i8 = zext i1 %cmp36 to i64
  %cond38 = select i1 %cmp36, i32 1, i32 2
  %idxprom39 = sext i32 %cond38 to i64
  %arrayidx40 = getelementptr inbounds [16 x i32], [16 x i32]* %arrayidx35, i64 0, i64 %idxprom39
  %i9 = load i32, i32* %arrayidx40, align 4
  %idxprom41 = sext i32 %i9 to i64
  %arrayidx42 = getelementptr inbounds [144 x i32], [144 x i32]* %arrayidx33, i64 0, i64 %idxprom41
  %i10 = load i32, i32* %arrayidx42, align 4
  %i11 = load i32, i32* @hold_hash, align 4
  %xor = xor i32 %i11, %i10
  store i32 %xor, i32* @hold_hash, align 4
  br label %sw.epilog

sw.bb43:                                          ; preds = %while.body14, %while.body14
  %idxprom44 = sext i32 %c.0 to i64
  %arrayidx45 = getelementptr inbounds [2 x [16 x i32]], [2 x [16 x i32]]* @holding, i64 0, i64 %idxprom44
  %cmp46 = icmp eq i32 %c.0, 0
  %i12 = zext i1 %cmp46 to i64
  %cond48 = select i1 %cmp46, i32 9, i32 10
  %idxprom49 = sext i32 %cond48 to i64
  %arrayidx50 = getelementptr inbounds [16 x i32], [16 x i32]* %arrayidx45, i64 0, i64 %idxprom49
  %i13 = load i32, i32* %arrayidx50, align 4
  %inc51 = add nsw i32 %i13, 1
  store i32 %inc51, i32* %arrayidx50, align 4
  %idxprom52 = sext i32 %c.0 to i64
  %arrayidx53 = getelementptr inbounds [2 x i32], [2 x i32]* @num_holding, i64 0, i64 %idxprom52
  %i14 = load i32, i32* %arrayidx53, align 4
  %inc54 = add nsw i32 %i14, 1
  store i32 %inc54, i32* %arrayidx53, align 4
  %cmp55 = icmp eq i32 %c.0, 0
  %i15 = zext i1 %cmp55 to i64
  %cond57 = select i1 %cmp55, i32 9, i32 10
  %idxprom58 = sext i32 %cond57 to i64
  %arrayidx59 = getelementptr inbounds [14 x [144 x i32]], [14 x [144 x i32]]* @zobrist, i64 0, i64 %idxprom58
  %idxprom60 = sext i32 %c.0 to i64
  %arrayidx61 = getelementptr inbounds [2 x [16 x i32]], [2 x [16 x i32]]* @holding, i64 0, i64 %idxprom60
  %cmp62 = icmp eq i32 %c.0, 0
  %i16 = zext i1 %cmp62 to i64
  %cond64 = select i1 %cmp62, i32 9, i32 10
  %idxprom65 = sext i32 %cond64 to i64
  %arrayidx66 = getelementptr inbounds [16 x i32], [16 x i32]* %arrayidx61, i64 0, i64 %idxprom65
  %i17 = load i32, i32* %arrayidx66, align 4
  %idxprom67 = sext i32 %i17 to i64
  %arrayidx68 = getelementptr inbounds [144 x i32], [144 x i32]* %arrayidx59, i64 0, i64 %idxprom67
  %i18 = load i32, i32* %arrayidx68, align 4
  %i19 = load i32, i32* @hold_hash, align 4
  %xor69 = xor i32 %i19, %i18
  store i32 %xor69, i32* @hold_hash, align 4
  br label %sw.epilog

sw.bb70:                                          ; preds = %while.body14, %while.body14
  %idxprom71 = sext i32 %c.0 to i64
  %arrayidx72 = getelementptr inbounds [2 x [16 x i32]], [2 x [16 x i32]]* @holding, i64 0, i64 %idxprom71
  %cmp73 = icmp eq i32 %c.0, 0
  %i20 = zext i1 %cmp73 to i64
  %cond75 = select i1 %cmp73, i32 7, i32 8
  %idxprom76 = sext i32 %cond75 to i64
  %arrayidx77 = getelementptr inbounds [16 x i32], [16 x i32]* %arrayidx72, i64 0, i64 %idxprom76
  %i21 = load i32, i32* %arrayidx77, align 4
  %inc78 = add nsw i32 %i21, 1
  store i32 %inc78, i32* %arrayidx77, align 4
  %idxprom79 = sext i32 %c.0 to i64
  %arrayidx80 = getelementptr inbounds [2 x i32], [2 x i32]* @num_holding, i64 0, i64 %idxprom79
  %i22 = load i32, i32* %arrayidx80, align 4
  %inc81 = add nsw i32 %i22, 1
  store i32 %inc81, i32* %arrayidx80, align 4
  %cmp82 = icmp eq i32 %c.0, 0
  %i23 = zext i1 %cmp82 to i64
  %cond84 = select i1 %cmp82, i32 7, i32 8
  %idxprom85 = sext i32 %cond84 to i64
  %arrayidx86 = getelementptr inbounds [14 x [144 x i32]], [14 x [144 x i32]]* @zobrist, i64 0, i64 %idxprom85
  %idxprom87 = sext i32 %c.0 to i64
  %arrayidx88 = getelementptr inbounds [2 x [16 x i32]], [2 x [16 x i32]]* @holding, i64 0, i64 %idxprom87
  %cmp89 = icmp eq i32 %c.0, 0
  %i24 = zext i1 %cmp89 to i64
  %cond91 = select i1 %cmp89, i32 7, i32 8
  %idxprom92 = sext i32 %cond91 to i64
  %arrayidx93 = getelementptr inbounds [16 x i32], [16 x i32]* %arrayidx88, i64 0, i64 %idxprom92
  %i25 = load i32, i32* %arrayidx93, align 4
  %idxprom94 = sext i32 %i25 to i64
  %arrayidx95 = getelementptr inbounds [144 x i32], [144 x i32]* %arrayidx86, i64 0, i64 %idxprom94
  %i26 = load i32, i32* %arrayidx95, align 4
  %i27 = load i32, i32* @hold_hash, align 4
  %xor96 = xor i32 %i27, %i26
  store i32 %xor96, i32* @hold_hash, align 4
  br label %sw.epilog

sw.bb97:                                          ; preds = %while.body14, %while.body14
  %idxprom98 = sext i32 %c.0 to i64
  %arrayidx99 = getelementptr inbounds [2 x [16 x i32]], [2 x [16 x i32]]* @holding, i64 0, i64 %idxprom98
  %cmp100 = icmp eq i32 %c.0, 0
  %i28 = zext i1 %cmp100 to i64
  %cond102 = select i1 %cmp100, i32 11, i32 12
  %idxprom103 = sext i32 %cond102 to i64
  %arrayidx104 = getelementptr inbounds [16 x i32], [16 x i32]* %arrayidx99, i64 0, i64 %idxprom103
  %i29 = load i32, i32* %arrayidx104, align 4
  %inc105 = add nsw i32 %i29, 1
  store i32 %inc105, i32* %arrayidx104, align 4
  %idxprom106 = sext i32 %c.0 to i64
  %arrayidx107 = getelementptr inbounds [2 x i32], [2 x i32]* @num_holding, i64 0, i64 %idxprom106
  %i30 = load i32, i32* %arrayidx107, align 4
  %inc108 = add nsw i32 %i30, 1
  store i32 %inc108, i32* %arrayidx107, align 4
  %cmp109 = icmp eq i32 %c.0, 0
  %i31 = zext i1 %cmp109 to i64
  %cond111 = select i1 %cmp109, i32 11, i32 12
  %idxprom112 = sext i32 %cond111 to i64
  %arrayidx113 = getelementptr inbounds [14 x [144 x i32]], [14 x [144 x i32]]* @zobrist, i64 0, i64 %idxprom112
  %idxprom114 = sext i32 %c.0 to i64
  %arrayidx115 = getelementptr inbounds [2 x [16 x i32]], [2 x [16 x i32]]* @holding, i64 0, i64 %idxprom114
  %cmp116 = icmp eq i32 %c.0, 0
  %i32 = zext i1 %cmp116 to i64
  %cond118 = select i1 %cmp116, i32 11, i32 12
  %idxprom119 = sext i32 %cond118 to i64
  %arrayidx120 = getelementptr inbounds [16 x i32], [16 x i32]* %arrayidx115, i64 0, i64 %idxprom119
  %i33 = load i32, i32* %arrayidx120, align 4
  %idxprom121 = sext i32 %i33 to i64
  %arrayidx122 = getelementptr inbounds [144 x i32], [144 x i32]* %arrayidx113, i64 0, i64 %idxprom121
  %i34 = load i32, i32* %arrayidx122, align 4
  %i35 = load i32, i32* @hold_hash, align 4
  %xor123 = xor i32 %i35, %i34
  store i32 %xor123, i32* @hold_hash, align 4
  br label %sw.epilog

sw.bb124:                                         ; preds = %while.body14, %while.body14
  %idxprom125 = sext i32 %c.0 to i64
  %arrayidx126 = getelementptr inbounds [2 x [16 x i32]], [2 x [16 x i32]]* @holding, i64 0, i64 %idxprom125
  %cmp127 = icmp eq i32 %c.0, 0
  %i36 = zext i1 %cmp127 to i64
  %cond129 = select i1 %cmp127, i32 3, i32 4
  %idxprom130 = sext i32 %cond129 to i64
  %arrayidx131 = getelementptr inbounds [16 x i32], [16 x i32]* %arrayidx126, i64 0, i64 %idxprom130
  %i37 = load i32, i32* %arrayidx131, align 4
  %inc132 = add nsw i32 %i37, 1
  store i32 %inc132, i32* %arrayidx131, align 4
  %idxprom133 = sext i32 %c.0 to i64
  %arrayidx134 = getelementptr inbounds [2 x i32], [2 x i32]* @num_holding, i64 0, i64 %idxprom133
  %i38 = load i32, i32* %arrayidx134, align 4
  %inc135 = add nsw i32 %i38, 1
  store i32 %inc135, i32* %arrayidx134, align 4
  %cmp136 = icmp eq i32 %c.0, 0
  %i39 = zext i1 %cmp136 to i64
  %cond138 = select i1 %cmp136, i32 3, i32 4
  %idxprom139 = sext i32 %cond138 to i64
  %arrayidx140 = getelementptr inbounds [14 x [144 x i32]], [14 x [144 x i32]]* @zobrist, i64 0, i64 %idxprom139
  %idxprom141 = sext i32 %c.0 to i64
  %arrayidx142 = getelementptr inbounds [2 x [16 x i32]], [2 x [16 x i32]]* @holding, i64 0, i64 %idxprom141
  %cmp143 = icmp eq i32 %c.0, 0
  %i40 = zext i1 %cmp143 to i64
  %cond145 = select i1 %cmp143, i32 3, i32 4
  %idxprom146 = sext i32 %cond145 to i64
  %arrayidx147 = getelementptr inbounds [16 x i32], [16 x i32]* %arrayidx142, i64 0, i64 %idxprom146
  %i41 = load i32, i32* %arrayidx147, align 4
  %idxprom148 = sext i32 %i41 to i64
  %arrayidx149 = getelementptr inbounds [144 x i32], [144 x i32]* %arrayidx140, i64 0, i64 %idxprom148
  %i42 = load i32, i32* %arrayidx149, align 4
  %i43 = load i32, i32* @hold_hash, align 4
  %xor150 = xor i32 %i43, %i42
  store i32 %xor150, i32* @hold_hash, align 4
  br label %sw.epilog

sw.default:                                       ; preds = %while.body14
  br label %if.end250

sw.epilog:                                        ; preds = %sw.bb124, %sw.bb97, %sw.bb70, %sw.bb43, %sw.bb
  br label %while.cond8

while.end151:                                     ; preds = %while.cond8
  br label %for.inc

for.inc:                                          ; preds = %while.end151
  %inc152 = add nsw i32 %c.0, 1
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %i44 = load i32, i32* @Variant, align 4
  %cmp153 = icmp eq i32 %i44, 1
  br i1 %cmp153, label %land.lhs.true, label %if.end250

land.lhs.true:                                    ; preds = %for.end
  %i45 = load i32, i32* @userealholdings, align 4
  %tobool = icmp ne i32 %i45, 0
  br i1 %tobool, label %if.end250, label %if.then155

if.then155:                                       ; preds = %land.lhs.true
  %call = call i8* @strncpy(i8* getelementptr inbounds ([255 x i8], [255 x i8]* @realholdings, i64 0, i64 0), i8* %str, i64 200) #8
  %i46 = load i32, i32* @comp_color, align 4
  %cmp156 = icmp eq i32 %i46, 1
  br i1 %cmp156, label %if.then158, label %if.else

if.then158:                                       ; preds = %if.then155
  %i47 = load i32, i32* getelementptr inbounds ([2 x [16 x i32]], [2 x [16 x i32]]* @holding, i64 0, i64 1, i64 2), align 8
  %cmp159 = icmp eq i32 %i47, 0
  br i1 %cmp159, label %if.then161, label %if.end167

if.then161:                                       ; preds = %if.then158
  %i48 = load i32, i32* getelementptr inbounds ([2 x [16 x i32]], [2 x [16 x i32]]* @holding, i64 0, i64 1, i64 2), align 8
  %inc162 = add nsw i32 %i48, 1
  store i32 %inc162, i32* getelementptr inbounds ([2 x [16 x i32]], [2 x [16 x i32]]* @holding, i64 0, i64 1, i64 2), align 8
  %i49 = load i32, i32* getelementptr inbounds ([2 x i32], [2 x i32]* @num_holding, i64 0, i64 1), align 4
  %inc163 = add nsw i32 %i49, 1
  store i32 %inc163, i32* getelementptr inbounds ([2 x i32], [2 x i32]* @num_holding, i64 0, i64 1), align 4
  %i50 = load i32, i32* getelementptr inbounds ([2 x [16 x i32]], [2 x [16 x i32]]* @holding, i64 0, i64 1, i64 2), align 8
  %idxprom164 = sext i32 %i50 to i64
  %arrayidx165 = getelementptr inbounds [144 x i32], [144 x i32]* getelementptr inbounds ([14 x [144 x i32]], [14 x [144 x i32]]* @zobrist, i64 0, i64 2), i64 0, i64 %idxprom164
  %i51 = load i32, i32* %arrayidx165, align 4
  %i52 = load i32, i32* @hold_hash, align 4
  %xor166 = xor i32 %i52, %i51
  store i32 %xor166, i32* @hold_hash, align 4
  br label %if.end167

if.end167:                                        ; preds = %if.then161, %if.then158
  %i53 = load i32, i32* getelementptr inbounds ([2 x [16 x i32]], [2 x [16 x i32]]* @holding, i64 0, i64 1, i64 12), align 16
  %cmp168 = icmp eq i32 %i53, 0
  br i1 %cmp168, label %if.then170, label %if.end176

if.then170:                                       ; preds = %if.end167
  %i54 = load i32, i32* getelementptr inbounds ([2 x [16 x i32]], [2 x [16 x i32]]* @holding, i64 0, i64 1, i64 12), align 16
  %inc171 = add nsw i32 %i54, 1
  store i32 %inc171, i32* getelementptr inbounds ([2 x [16 x i32]], [2 x [16 x i32]]* @holding, i64 0, i64 1, i64 12), align 16
  %i55 = load i32, i32* getelementptr inbounds ([2 x i32], [2 x i32]* @num_holding, i64 0, i64 1), align 4
  %inc172 = add nsw i32 %i55, 1
  store i32 %inc172, i32* getelementptr inbounds ([2 x i32], [2 x i32]* @num_holding, i64 0, i64 1), align 4
  %i56 = load i32, i32* getelementptr inbounds ([2 x [16 x i32]], [2 x [16 x i32]]* @holding, i64 0, i64 1, i64 12), align 16
  %idxprom173 = sext i32 %i56 to i64
  %arrayidx174 = getelementptr inbounds [144 x i32], [144 x i32]* getelementptr inbounds ([14 x [144 x i32]], [14 x [144 x i32]]* @zobrist, i64 0, i64 2), i64 0, i64 %idxprom173
  %i57 = load i32, i32* %arrayidx174, align 4
  %i58 = load i32, i32* @hold_hash, align 4
  %xor175 = xor i32 %i58, %i57
  store i32 %xor175, i32* @hold_hash, align 4
  br label %if.end176

if.end176:                                        ; preds = %if.then170, %if.end167
  %i59 = load i32, i32* getelementptr inbounds ([2 x [16 x i32]], [2 x [16 x i32]]* @holding, i64 0, i64 1, i64 4), align 16
  %cmp177 = icmp eq i32 %i59, 0
  br i1 %cmp177, label %if.then179, label %if.end185

if.then179:                                       ; preds = %if.end176
  %i60 = load i32, i32* getelementptr inbounds ([2 x [16 x i32]], [2 x [16 x i32]]* @holding, i64 0, i64 1, i64 4), align 16
  %inc180 = add nsw i32 %i60, 1
  store i32 %inc180, i32* getelementptr inbounds ([2 x [16 x i32]], [2 x [16 x i32]]* @holding, i64 0, i64 1, i64 4), align 16
  %i61 = load i32, i32* getelementptr inbounds ([2 x i32], [2 x i32]* @num_holding, i64 0, i64 1), align 4
  %inc181 = add nsw i32 %i61, 1
  store i32 %inc181, i32* getelementptr inbounds ([2 x i32], [2 x i32]* @num_holding, i64 0, i64 1), align 4
  %i62 = load i32, i32* getelementptr inbounds ([2 x [16 x i32]], [2 x [16 x i32]]* @holding, i64 0, i64 1, i64 4), align 16
  %idxprom182 = sext i32 %i62 to i64
  %arrayidx183 = getelementptr inbounds [144 x i32], [144 x i32]* getelementptr inbounds ([14 x [144 x i32]], [14 x [144 x i32]]* @zobrist, i64 0, i64 4), i64 0, i64 %idxprom182
  %i63 = load i32, i32* %arrayidx183, align 4
  %i64 = load i32, i32* @hold_hash, align 4
  %xor184 = xor i32 %i64, %i63
  store i32 %xor184, i32* @hold_hash, align 4
  br label %if.end185

if.end185:                                        ; preds = %if.then179, %if.end176
  %i65 = load i32, i32* getelementptr inbounds ([2 x [16 x i32]], [2 x [16 x i32]]* @holding, i64 0, i64 1, i64 8), align 16
  %cmp186 = icmp eq i32 %i65, 0
  br i1 %cmp186, label %if.then188, label %if.end194

if.then188:                                       ; preds = %if.end185
  %i66 = load i32, i32* getelementptr inbounds ([2 x [16 x i32]], [2 x [16 x i32]]* @holding, i64 0, i64 1, i64 8), align 16
  %inc189 = add nsw i32 %i66, 1
  store i32 %inc189, i32* getelementptr inbounds ([2 x [16 x i32]], [2 x [16 x i32]]* @holding, i64 0, i64 1, i64 8), align 16
  %i67 = load i32, i32* getelementptr inbounds ([2 x i32], [2 x i32]* @num_holding, i64 0, i64 1), align 4
  %inc190 = add nsw i32 %i67, 1
  store i32 %inc190, i32* getelementptr inbounds ([2 x i32], [2 x i32]* @num_holding, i64 0, i64 1), align 4
  %i68 = load i32, i32* getelementptr inbounds ([2 x [16 x i32]], [2 x [16 x i32]]* @holding, i64 0, i64 1, i64 8), align 16
  %idxprom191 = sext i32 %i68 to i64
  %arrayidx192 = getelementptr inbounds [144 x i32], [144 x i32]* getelementptr inbounds ([14 x [144 x i32]], [14 x [144 x i32]]* @zobrist, i64 0, i64 4), i64 0, i64 %idxprom191
  %i69 = load i32, i32* %arrayidx192, align 4
  %i70 = load i32, i32* @hold_hash, align 4
  %xor193 = xor i32 %i70, %i69
  store i32 %xor193, i32* @hold_hash, align 4
  br label %if.end194

if.end194:                                        ; preds = %if.then188, %if.end185
  %i71 = load i32, i32* getelementptr inbounds ([2 x [16 x i32]], [2 x [16 x i32]]* @holding, i64 0, i64 1, i64 10), align 8
  %cmp195 = icmp eq i32 %i71, 0
  br i1 %cmp195, label %if.then197, label %if.end203

if.then197:                                       ; preds = %if.end194
  %i72 = load i32, i32* getelementptr inbounds ([2 x [16 x i32]], [2 x [16 x i32]]* @holding, i64 0, i64 1, i64 10), align 8
  %inc198 = add nsw i32 %i72, 1
  store i32 %inc198, i32* getelementptr inbounds ([2 x [16 x i32]], [2 x [16 x i32]]* @holding, i64 0, i64 1, i64 10), align 8
  %i73 = load i32, i32* getelementptr inbounds ([2 x i32], [2 x i32]* @num_holding, i64 0, i64 1), align 4
  %inc199 = add nsw i32 %i73, 1
  store i32 %inc199, i32* getelementptr inbounds ([2 x i32], [2 x i32]* @num_holding, i64 0, i64 1), align 4
  %i74 = load i32, i32* getelementptr inbounds ([2 x [16 x i32]], [2 x [16 x i32]]* @holding, i64 0, i64 1, i64 10), align 8
  %idxprom200 = sext i32 %i74 to i64
  %arrayidx201 = getelementptr inbounds [144 x i32], [144 x i32]* getelementptr inbounds ([14 x [144 x i32]], [14 x [144 x i32]]* @zobrist, i64 0, i64 4), i64 0, i64 %idxprom200
  %i75 = load i32, i32* %arrayidx201, align 4
  %i76 = load i32, i32* @hold_hash, align 4
  %xor202 = xor i32 %i76, %i75
  store i32 %xor202, i32* @hold_hash, align 4
  br label %if.end203

if.end203:                                        ; preds = %if.then197, %if.end194
  br label %if.end249

if.else:                                          ; preds = %if.then155
  %i77 = load i32, i32* getelementptr inbounds ([2 x [16 x i32]], [2 x [16 x i32]]* @holding, i64 0, i64 0, i64 9), align 4
  %cmp204 = icmp eq i32 %i77, 0
  br i1 %cmp204, label %if.then206, label %if.end212

if.then206:                                       ; preds = %if.else
  %i78 = load i32, i32* getelementptr inbounds ([2 x [16 x i32]], [2 x [16 x i32]]* @holding, i64 0, i64 0, i64 9), align 4
  %inc207 = add nsw i32 %i78, 1
  store i32 %inc207, i32* getelementptr inbounds ([2 x [16 x i32]], [2 x [16 x i32]]* @holding, i64 0, i64 0, i64 9), align 4
  %i79 = load i32, i32* getelementptr inbounds ([2 x i32], [2 x i32]* @num_holding, i64 0, i64 0), align 4
  %inc208 = add nsw i32 %i79, 1
  store i32 %inc208, i32* getelementptr inbounds ([2 x i32], [2 x i32]* @num_holding, i64 0, i64 0), align 4
  %i80 = load i32, i32* getelementptr inbounds ([2 x [16 x i32]], [2 x [16 x i32]]* @holding, i64 0, i64 0, i64 9), align 4
  %idxprom209 = sext i32 %i80 to i64
  %arrayidx210 = getelementptr inbounds [144 x i32], [144 x i32]* getelementptr inbounds ([14 x [144 x i32]], [14 x [144 x i32]]* @zobrist, i64 0, i64 9), i64 0, i64 %idxprom209
  %i81 = load i32, i32* %arrayidx210, align 4
  %i82 = load i32, i32* @hold_hash, align 4
  %xor211 = xor i32 %i82, %i81
  store i32 %xor211, i32* @hold_hash, align 4
  br label %if.end212

if.end212:                                        ; preds = %if.then206, %if.else
  %i83 = load i32, i32* getelementptr inbounds ([2 x [16 x i32]], [2 x [16 x i32]]* @holding, i64 0, i64 0, i64 7), align 4
  %cmp213 = icmp eq i32 %i83, 0
  br i1 %cmp213, label %if.then215, label %if.end221

if.then215:                                       ; preds = %if.end212
  %i84 = load i32, i32* getelementptr inbounds ([2 x [16 x i32]], [2 x [16 x i32]]* @holding, i64 0, i64 0, i64 7), align 4
  %inc216 = add nsw i32 %i84, 1
  store i32 %inc216, i32* getelementptr inbounds ([2 x [16 x i32]], [2 x [16 x i32]]* @holding, i64 0, i64 0, i64 7), align 4
  %i85 = load i32, i32* getelementptr inbounds ([2 x i32], [2 x i32]* @num_holding, i64 0, i64 0), align 4
  %inc217 = add nsw i32 %i85, 1
  store i32 %inc217, i32* getelementptr inbounds ([2 x i32], [2 x i32]* @num_holding, i64 0, i64 0), align 4
  %i86 = load i32, i32* getelementptr inbounds ([2 x [16 x i32]], [2 x [16 x i32]]* @holding, i64 0, i64 0, i64 7), align 4
  %idxprom218 = sext i32 %i86 to i64
  %arrayidx219 = getelementptr inbounds [144 x i32], [144 x i32]* getelementptr inbounds ([14 x [144 x i32]], [14 x [144 x i32]]* @zobrist, i64 0, i64 9), i64 0, i64 %idxprom218
  %i87 = load i32, i32* %arrayidx219, align 4
  %i88 = load i32, i32* @hold_hash, align 4
  %xor220 = xor i32 %i88, %i87
  store i32 %xor220, i32* @hold_hash, align 4
  br label %if.end221

if.end221:                                        ; preds = %if.then215, %if.end212
  %i89 = load i32, i32* getelementptr inbounds ([2 x [16 x i32]], [2 x [16 x i32]]* @holding, i64 0, i64 0, i64 11), align 4
  %cmp222 = icmp eq i32 %i89, 0
  br i1 %cmp222, label %if.then224, label %if.end230

if.then224:                                       ; preds = %if.end221
  %i90 = load i32, i32* getelementptr inbounds ([2 x [16 x i32]], [2 x [16 x i32]]* @holding, i64 0, i64 0, i64 11), align 4
  %inc225 = add nsw i32 %i90, 1
  store i32 %inc225, i32* getelementptr inbounds ([2 x [16 x i32]], [2 x [16 x i32]]* @holding, i64 0, i64 0, i64 11), align 4
  %i91 = load i32, i32* getelementptr inbounds ([2 x i32], [2 x i32]* @num_holding, i64 0, i64 0), align 4
  %inc226 = add nsw i32 %i91, 1
  store i32 %inc226, i32* getelementptr inbounds ([2 x i32], [2 x i32]* @num_holding, i64 0, i64 0), align 4
  %i92 = load i32, i32* getelementptr inbounds ([2 x [16 x i32]], [2 x [16 x i32]]* @holding, i64 0, i64 0, i64 11), align 4
  %idxprom227 = sext i32 %i92 to i64
  %arrayidx228 = getelementptr inbounds [144 x i32], [144 x i32]* getelementptr inbounds ([14 x [144 x i32]], [14 x [144 x i32]]* @zobrist, i64 0, i64 9), i64 0, i64 %idxprom227
  %i93 = load i32, i32* %arrayidx228, align 4
  %i94 = load i32, i32* @hold_hash, align 4
  %xor229 = xor i32 %i94, %i93
  store i32 %xor229, i32* @hold_hash, align 4
  br label %if.end230

if.end230:                                        ; preds = %if.then224, %if.end221
  %i95 = load i32, i32* getelementptr inbounds ([2 x [16 x i32]], [2 x [16 x i32]]* @holding, i64 0, i64 0, i64 3), align 4
  %cmp231 = icmp eq i32 %i95, 0
  br i1 %cmp231, label %if.then233, label %if.end239

if.then233:                                       ; preds = %if.end230
  %i96 = load i32, i32* getelementptr inbounds ([2 x [16 x i32]], [2 x [16 x i32]]* @holding, i64 0, i64 0, i64 3), align 4
  %inc234 = add nsw i32 %i96, 1
  store i32 %inc234, i32* getelementptr inbounds ([2 x [16 x i32]], [2 x [16 x i32]]* @holding, i64 0, i64 0, i64 3), align 4
  %i97 = load i32, i32* getelementptr inbounds ([2 x i32], [2 x i32]* @num_holding, i64 0, i64 0), align 4
  %inc235 = add nsw i32 %i97, 1
  store i32 %inc235, i32* getelementptr inbounds ([2 x i32], [2 x i32]* @num_holding, i64 0, i64 0), align 4
  %i98 = load i32, i32* getelementptr inbounds ([2 x [16 x i32]], [2 x [16 x i32]]* @holding, i64 0, i64 0, i64 3), align 4
  %idxprom236 = sext i32 %i98 to i64
  %arrayidx237 = getelementptr inbounds [144 x i32], [144 x i32]* getelementptr inbounds ([14 x [144 x i32]], [14 x [144 x i32]]* @zobrist, i64 0, i64 9), i64 0, i64 %idxprom236
  %i99 = load i32, i32* %arrayidx237, align 4
  %i100 = load i32, i32* @hold_hash, align 4
  %xor238 = xor i32 %i100, %i99
  store i32 %xor238, i32* @hold_hash, align 4
  br label %if.end239

if.end239:                                        ; preds = %if.then233, %if.end230
  %i101 = load i32, i32* getelementptr inbounds ([2 x [16 x i32]], [2 x [16 x i32]]* @holding, i64 0, i64 0, i64 1), align 4
  %cmp240 = icmp eq i32 %i101, 0
  br i1 %cmp240, label %if.then242, label %if.end248

if.then242:                                       ; preds = %if.end239
  %i102 = load i32, i32* getelementptr inbounds ([2 x [16 x i32]], [2 x [16 x i32]]* @holding, i64 0, i64 0, i64 1), align 4
  %inc243 = add nsw i32 %i102, 1
  store i32 %inc243, i32* getelementptr inbounds ([2 x [16 x i32]], [2 x [16 x i32]]* @holding, i64 0, i64 0, i64 1), align 4
  %i103 = load i32, i32* getelementptr inbounds ([2 x i32], [2 x i32]* @num_holding, i64 0, i64 0), align 4
  %inc244 = add nsw i32 %i103, 1
  store i32 %inc244, i32* getelementptr inbounds ([2 x i32], [2 x i32]* @num_holding, i64 0, i64 0), align 4
  %i104 = load i32, i32* getelementptr inbounds ([2 x [16 x i32]], [2 x [16 x i32]]* @holding, i64 0, i64 0, i64 1), align 4
  %idxprom245 = sext i32 %i104 to i64
  %arrayidx246 = getelementptr inbounds [144 x i32], [144 x i32]* getelementptr inbounds ([14 x [144 x i32]], [14 x [144 x i32]]* @zobrist, i64 0, i64 9), i64 0, i64 %idxprom245
  %i105 = load i32, i32* %arrayidx246, align 4
  %i106 = load i32, i32* @hold_hash, align 4
  %xor247 = xor i32 %i106, %i105
  store i32 %xor247, i32* @hold_hash, align 4
  br label %if.end248

if.end248:                                        ; preds = %if.then242, %if.end239
  br label %if.end249

if.end249:                                        ; preds = %if.end248, %if.end203
  br label %if.end250

if.end250:                                        ; preds = %if.end249, %land.lhs.true, %for.end, %sw.default, %if.then
  ret void
}

; Function Attrs: argmemonly nofree nosync nounwind willreturn writeonly
declare void @llvm.memset.p0i8.i64(i8* nocapture writeonly, i8, i64, i1 immarg) #2

; Function Attrs: nounwind
declare dso_local i8* @strncpy(i8*, i8*, i64) #3

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @text_to_piece(i8 signext %txt, i32 %who) #0 {
entry:
  %conv = sext i8 %txt to i32
  switch i32 %conv, label %sw.epilog [
    i32 112, label %sw.bb
    i32 80, label %sw.bb
    i32 98, label %sw.bb2
    i32 66, label %sw.bb2
    i32 110, label %sw.bb6
    i32 78, label %sw.bb6
    i32 114, label %sw.bb10
    i32 82, label %sw.bb10
    i32 113, label %sw.bb14
    i32 81, label %sw.bb14
  ]

sw.bb:                                            ; preds = %entry, %entry
  %cmp = icmp eq i32 %who, 0
  %i = zext i1 %cmp to i64
  %cond = select i1 %cmp, i32 1, i32 2
  br label %return

sw.bb2:                                           ; preds = %entry, %entry
  %cmp3 = icmp eq i32 %who, 0
  %i1 = zext i1 %cmp3 to i64
  %cond5 = select i1 %cmp3, i32 11, i32 12
  br label %return

sw.bb6:                                           ; preds = %entry, %entry
  %cmp7 = icmp eq i32 %who, 0
  %i2 = zext i1 %cmp7 to i64
  %cond9 = select i1 %cmp7, i32 3, i32 4
  br label %return

sw.bb10:                                          ; preds = %entry, %entry
  %cmp11 = icmp eq i32 %who, 0
  %i3 = zext i1 %cmp11 to i64
  %cond13 = select i1 %cmp11, i32 7, i32 8
  br label %return

sw.bb14:                                          ; preds = %entry, %entry
  %cmp15 = icmp eq i32 %who, 0
  %i4 = zext i1 %cmp15 to i64
  %cond17 = select i1 %cmp15, i32 9, i32 10
  br label %return

sw.epilog:                                        ; preds = %entry
  br label %return

return:                                           ; preds = %sw.epilog, %sw.bb14, %sw.bb10, %sw.bb6, %sw.bb2, %sw.bb
  %retval.0 = phi i32 [ 13, %sw.epilog ], [ %cond17, %sw.bb14 ], [ %cond13, %sw.bb10 ], [ %cond9, %sw.bb6 ], [ %cond5, %sw.bb2 ], [ %cond, %sw.bb ]
  ret i32 %retval.0
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @SwitchColor(i32 %piece) #0 {
entry:
  %t = alloca [13 x i32], align 16
  %i = bitcast [13 x i32]* %t to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %i, i8* align 16 bitcast ([13 x i32]* @__const.SwitchColor.t to i8*), i64 52, i1 false)
  %idxprom = sext i32 %piece to i64
  %arrayidx = getelementptr inbounds [13 x i32], [13 x i32]* %t, i64 0, i64 %idxprom
  %i1 = load i32, i32* %arrayidx, align 4
  ret i32 %i1
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @SwitchPromoted(i32 %piece) #0 {
entry:
  %t = alloca [13 x i32], align 16
  %i = bitcast [13 x i32]* %t to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %i, i8* align 16 bitcast ([13 x i32]* @__const.SwitchPromoted.t to i8*), i64 52, i1 false)
  %idxprom = sext i32 %piece to i64
  %arrayidx = getelementptr inbounds [13 x i32], [13 x i32]* %t, i64 0, i64 %idxprom
  %i1 = load i32, i32* %arrayidx, align 4
  ret i32 %i1
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @addHolding(i32 %what, i32 %who) #0 {
entry:
  %i = load i32, i32* @Variant, align 4
  %cmp = icmp eq i32 %i, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %idxprom = sext i32 %who to i64
  %arrayidx = getelementptr inbounds [2 x [16 x i32]], [2 x [16 x i32]]* @holding, i64 0, i64 %idxprom
  %idxprom1 = sext i32 %what to i64
  %arrayidx2 = getelementptr inbounds [16 x i32], [16 x i32]* %arrayidx, i64 0, i64 %idxprom1
  %i1 = load i32, i32* %arrayidx2, align 4
  %inc = add nsw i32 %i1, 1
  store i32 %inc, i32* %arrayidx2, align 4
  %idxprom3 = sext i32 %who to i64
  %arrayidx4 = getelementptr inbounds [2 x i32], [2 x i32]* @num_holding, i64 0, i64 %idxprom3
  %i2 = load i32, i32* %arrayidx4, align 4
  %inc5 = add nsw i32 %i2, 1
  store i32 %inc5, i32* %arrayidx4, align 4
  %idxprom6 = sext i32 %what to i64
  %arrayidx7 = getelementptr inbounds [14 x [144 x i32]], [14 x [144 x i32]]* @zobrist, i64 0, i64 %idxprom6
  %idxprom8 = sext i32 %who to i64
  %arrayidx9 = getelementptr inbounds [2 x [16 x i32]], [2 x [16 x i32]]* @holding, i64 0, i64 %idxprom8
  %idxprom10 = sext i32 %what to i64
  %arrayidx11 = getelementptr inbounds [16 x i32], [16 x i32]* %arrayidx9, i64 0, i64 %idxprom10
  %i3 = load i32, i32* %arrayidx11, align 4
  %idxprom12 = sext i32 %i3 to i64
  %arrayidx13 = getelementptr inbounds [144 x i32], [144 x i32]* %arrayidx7, i64 0, i64 %idxprom12
  %i4 = load i32, i32* %arrayidx13, align 4
  %i5 = load i32, i32* @hold_hash, align 4
  %xor = xor i32 %i5, %i4
  store i32 %xor, i32* @hold_hash, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %cmp14 = icmp eq i32 %who, 0
  br i1 %cmp14, label %if.then15, label %if.else

if.then15:                                        ; preds = %if.end
  %idxprom16 = sext i32 %what to i64
  %arrayidx17 = getelementptr inbounds [0 x i32], [0 x i32]* bitcast ([13 x i32]* @hand_value to [0 x i32]*), i64 0, i64 %idxprom16
  %i6 = load i32, i32* %arrayidx17, align 4
  %i7 = load i32, i32* @white_hand_eval, align 4
  %add = add nsw i32 %i7, %i6
  store i32 %add, i32* @white_hand_eval, align 4
  br label %if.end21

if.else:                                          ; preds = %if.end
  %idxprom18 = sext i32 %what to i64
  %arrayidx19 = getelementptr inbounds [0 x i32], [0 x i32]* bitcast ([13 x i32]* @hand_value to [0 x i32]*), i64 0, i64 %idxprom18
  %i8 = load i32, i32* %arrayidx19, align 4
  %i9 = load i32, i32* @black_hand_eval, align 4
  %add20 = add nsw i32 %i9, %i8
  store i32 %add20, i32* @black_hand_eval, align 4
  br label %if.end21

if.end21:                                         ; preds = %if.else, %if.then15
  %idxprom22 = sext i32 %what to i64
  %arrayidx23 = getelementptr inbounds [14 x i32], [14 x i32]* @material, i64 0, i64 %idxprom22
  %i10 = load i32, i32* %arrayidx23, align 4
  %i11 = load i32, i32* @Material, align 4
  %add24 = add nsw i32 %i11, %i10
  store i32 %add24, i32* @Material, align 4
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @removeHolding(i32 %what, i32 %who) #0 {
entry:
  %i = load i32, i32* @Variant, align 4
  %cmp = icmp eq i32 %i, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %idxprom = sext i32 %what to i64
  %arrayidx = getelementptr inbounds [14 x [144 x i32]], [14 x [144 x i32]]* @zobrist, i64 0, i64 %idxprom
  %idxprom1 = sext i32 %who to i64
  %arrayidx2 = getelementptr inbounds [2 x [16 x i32]], [2 x [16 x i32]]* @holding, i64 0, i64 %idxprom1
  %idxprom3 = sext i32 %what to i64
  %arrayidx4 = getelementptr inbounds [16 x i32], [16 x i32]* %arrayidx2, i64 0, i64 %idxprom3
  %i1 = load i32, i32* %arrayidx4, align 4
  %idxprom5 = sext i32 %i1 to i64
  %arrayidx6 = getelementptr inbounds [144 x i32], [144 x i32]* %arrayidx, i64 0, i64 %idxprom5
  %i2 = load i32, i32* %arrayidx6, align 4
  %i3 = load i32, i32* @hold_hash, align 4
  %xor = xor i32 %i3, %i2
  store i32 %xor, i32* @hold_hash, align 4
  %idxprom7 = sext i32 %who to i64
  %arrayidx8 = getelementptr inbounds [2 x [16 x i32]], [2 x [16 x i32]]* @holding, i64 0, i64 %idxprom7
  %idxprom9 = sext i32 %what to i64
  %arrayidx10 = getelementptr inbounds [16 x i32], [16 x i32]* %arrayidx8, i64 0, i64 %idxprom9
  %i4 = load i32, i32* %arrayidx10, align 4
  %dec = add nsw i32 %i4, -1
  store i32 %dec, i32* %arrayidx10, align 4
  %idxprom11 = sext i32 %who to i64
  %arrayidx12 = getelementptr inbounds [2 x i32], [2 x i32]* @num_holding, i64 0, i64 %idxprom11
  %i5 = load i32, i32* %arrayidx12, align 4
  %dec13 = add nsw i32 %i5, -1
  store i32 %dec13, i32* %arrayidx12, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %cmp14 = icmp eq i32 %who, 0
  br i1 %cmp14, label %if.then15, label %if.else

if.then15:                                        ; preds = %if.end
  %idxprom16 = sext i32 %what to i64
  %arrayidx17 = getelementptr inbounds [0 x i32], [0 x i32]* bitcast ([13 x i32]* @hand_value to [0 x i32]*), i64 0, i64 %idxprom16
  %i6 = load i32, i32* %arrayidx17, align 4
  %i7 = load i32, i32* @white_hand_eval, align 4
  %sub = sub nsw i32 %i7, %i6
  store i32 %sub, i32* @white_hand_eval, align 4
  br label %if.end21

if.else:                                          ; preds = %if.end
  %idxprom18 = sext i32 %what to i64
  %arrayidx19 = getelementptr inbounds [0 x i32], [0 x i32]* bitcast ([13 x i32]* @hand_value to [0 x i32]*), i64 0, i64 %idxprom18
  %i8 = load i32, i32* %arrayidx19, align 4
  %i9 = load i32, i32* @black_hand_eval, align 4
  %sub20 = sub nsw i32 %i9, %i8
  store i32 %sub20, i32* @black_hand_eval, align 4
  br label %if.end21

if.end21:                                         ; preds = %if.else, %if.then15
  %idxprom22 = sext i32 %what to i64
  %arrayidx23 = getelementptr inbounds [14 x i32], [14 x i32]* @material, i64 0, i64 %idxprom22
  %i10 = load i32, i32* %arrayidx23, align 4
  %i11 = load i32, i32* @Material, align 4
  %sub24 = sub nsw i32 %i11, %i10
  store i32 %sub24, i32* @Material, align 4
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @DropaddHolding(i32 %what, i32 %who) #0 {
entry:
  %idxprom = sext i32 %who to i64
  %arrayidx = getelementptr inbounds [2 x [16 x i32]], [2 x [16 x i32]]* @holding, i64 0, i64 %idxprom
  %idxprom1 = sext i32 %what to i64
  %arrayidx2 = getelementptr inbounds [16 x i32], [16 x i32]* %arrayidx, i64 0, i64 %idxprom1
  %i = load i32, i32* %arrayidx2, align 4
  %inc = add nsw i32 %i, 1
  store i32 %inc, i32* %arrayidx2, align 4
  %idxprom3 = sext i32 %who to i64
  %arrayidx4 = getelementptr inbounds [2 x i32], [2 x i32]* @num_holding, i64 0, i64 %idxprom3
  %i1 = load i32, i32* %arrayidx4, align 4
  %inc5 = add nsw i32 %i1, 1
  store i32 %inc5, i32* %arrayidx4, align 4
  %idxprom6 = sext i32 %what to i64
  %arrayidx7 = getelementptr inbounds [14 x [144 x i32]], [14 x [144 x i32]]* @zobrist, i64 0, i64 %idxprom6
  %idxprom8 = sext i32 %who to i64
  %arrayidx9 = getelementptr inbounds [2 x [16 x i32]], [2 x [16 x i32]]* @holding, i64 0, i64 %idxprom8
  %idxprom10 = sext i32 %what to i64
  %arrayidx11 = getelementptr inbounds [16 x i32], [16 x i32]* %arrayidx9, i64 0, i64 %idxprom10
  %i2 = load i32, i32* %arrayidx11, align 4
  %idxprom12 = sext i32 %i2 to i64
  %arrayidx13 = getelementptr inbounds [144 x i32], [144 x i32]* %arrayidx7, i64 0, i64 %idxprom12
  %i3 = load i32, i32* %arrayidx13, align 4
  %i4 = load i32, i32* @hold_hash, align 4
  %xor = xor i32 %i4, %i3
  store i32 %xor, i32* @hold_hash, align 4
  %cmp = icmp eq i32 %who, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %idxprom14 = sext i32 %what to i64
  %arrayidx15 = getelementptr inbounds [0 x i32], [0 x i32]* bitcast ([13 x i32]* @hand_value to [0 x i32]*), i64 0, i64 %idxprom14
  %i5 = load i32, i32* %arrayidx15, align 4
  %i6 = load i32, i32* @white_hand_eval, align 4
  %add = add nsw i32 %i6, %i5
  store i32 %add, i32* @white_hand_eval, align 4
  br label %if.end

if.else:                                          ; preds = %entry
  %idxprom16 = sext i32 %what to i64
  %arrayidx17 = getelementptr inbounds [0 x i32], [0 x i32]* bitcast ([13 x i32]* @hand_value to [0 x i32]*), i64 0, i64 %idxprom16
  %i7 = load i32, i32* %arrayidx17, align 4
  %i8 = load i32, i32* @black_hand_eval, align 4
  %add18 = add nsw i32 %i8, %i7
  store i32 %add18, i32* @black_hand_eval, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %idxprom19 = sext i32 %what to i64
  %arrayidx20 = getelementptr inbounds [14 x i32], [14 x i32]* @material, i64 0, i64 %idxprom19
  %i9 = load i32, i32* %arrayidx20, align 4
  %i10 = load i32, i32* @Material, align 4
  %add21 = add nsw i32 %i10, %i9
  store i32 %add21, i32* @Material, align 4
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @DropremoveHolding(i32 %what, i32 %who) #0 {
entry:
  %idxprom = sext i32 %what to i64
  %arrayidx = getelementptr inbounds [14 x [144 x i32]], [14 x [144 x i32]]* @zobrist, i64 0, i64 %idxprom
  %idxprom1 = sext i32 %who to i64
  %arrayidx2 = getelementptr inbounds [2 x [16 x i32]], [2 x [16 x i32]]* @holding, i64 0, i64 %idxprom1
  %idxprom3 = sext i32 %what to i64
  %arrayidx4 = getelementptr inbounds [16 x i32], [16 x i32]* %arrayidx2, i64 0, i64 %idxprom3
  %i = load i32, i32* %arrayidx4, align 4
  %idxprom5 = sext i32 %i to i64
  %arrayidx6 = getelementptr inbounds [144 x i32], [144 x i32]* %arrayidx, i64 0, i64 %idxprom5
  %i1 = load i32, i32* %arrayidx6, align 4
  %i2 = load i32, i32* @hold_hash, align 4
  %xor = xor i32 %i2, %i1
  store i32 %xor, i32* @hold_hash, align 4
  %idxprom7 = sext i32 %who to i64
  %arrayidx8 = getelementptr inbounds [2 x [16 x i32]], [2 x [16 x i32]]* @holding, i64 0, i64 %idxprom7
  %idxprom9 = sext i32 %what to i64
  %arrayidx10 = getelementptr inbounds [16 x i32], [16 x i32]* %arrayidx8, i64 0, i64 %idxprom9
  %i3 = load i32, i32* %arrayidx10, align 4
  %dec = add nsw i32 %i3, -1
  store i32 %dec, i32* %arrayidx10, align 4
  %idxprom11 = sext i32 %who to i64
  %arrayidx12 = getelementptr inbounds [2 x i32], [2 x i32]* @num_holding, i64 0, i64 %idxprom11
  %i4 = load i32, i32* %arrayidx12, align 4
  %dec13 = add nsw i32 %i4, -1
  store i32 %dec13, i32* %arrayidx12, align 4
  %cmp = icmp eq i32 %who, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %idxprom14 = sext i32 %what to i64
  %arrayidx15 = getelementptr inbounds [0 x i32], [0 x i32]* bitcast ([13 x i32]* @hand_value to [0 x i32]*), i64 0, i64 %idxprom14
  %i5 = load i32, i32* %arrayidx15, align 4
  %i6 = load i32, i32* @white_hand_eval, align 4
  %sub = sub nsw i32 %i6, %i5
  store i32 %sub, i32* @white_hand_eval, align 4
  br label %if.end

if.else:                                          ; preds = %entry
  %idxprom16 = sext i32 %what to i64
  %arrayidx17 = getelementptr inbounds [0 x i32], [0 x i32]* bitcast ([13 x i32]* @hand_value to [0 x i32]*), i64 0, i64 %idxprom16
  %i7 = load i32, i32* %arrayidx17, align 4
  %i8 = load i32, i32* @black_hand_eval, align 4
  %sub18 = sub nsw i32 %i8, %i7
  store i32 %sub18, i32* @black_hand_eval, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %idxprom19 = sext i32 %what to i64
  %arrayidx20 = getelementptr inbounds [14 x i32], [14 x i32]* @material, i64 0, i64 %idxprom19
  %i9 = load i32, i32* %arrayidx20, align 4
  %i10 = load i32, i32* @Material, align 4
  %sub21 = sub nsw i32 %i10, %i9
  store i32 %sub21, i32* @Material, align 4
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @printHolding() #0 {
entry:
  %i = load i32, i32* getelementptr inbounds ([2 x [16 x i32]], [2 x [16 x i32]]* @holding, i64 0, i64 0, i64 1), align 4
  %i1 = load i32, i32* getelementptr inbounds ([2 x [16 x i32]], [2 x [16 x i32]]* @holding, i64 0, i64 0, i64 7), align 4
  %i2 = load i32, i32* getelementptr inbounds ([2 x [16 x i32]], [2 x [16 x i32]]* @holding, i64 0, i64 0, i64 11), align 4
  %i3 = load i32, i32* getelementptr inbounds ([2 x [16 x i32]], [2 x [16 x i32]]* @holding, i64 0, i64 0, i64 3), align 4
  %i4 = load i32, i32* getelementptr inbounds ([2 x [16 x i32]], [2 x [16 x i32]]* @holding, i64 0, i64 0, i64 9), align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str, i64 0, i64 0), i32 %i, i32 %i1, i32 %i2, i32 %i3, i32 %i4)
  %i5 = load i32, i32* getelementptr inbounds ([2 x [16 x i32]], [2 x [16 x i32]]* @holding, i64 0, i64 1, i64 2), align 8
  %i6 = load i32, i32* getelementptr inbounds ([2 x [16 x i32]], [2 x [16 x i32]]* @holding, i64 0, i64 1, i64 8), align 16
  %i7 = load i32, i32* getelementptr inbounds ([2 x [16 x i32]], [2 x [16 x i32]]* @holding, i64 0, i64 1, i64 12), align 16
  %i8 = load i32, i32* getelementptr inbounds ([2 x [16 x i32]], [2 x [16 x i32]]* @holding, i64 0, i64 1, i64 4), align 16
  %i9 = load i32, i32* getelementptr inbounds ([2 x [16 x i32]], [2 x [16 x i32]]* @holding, i64 0, i64 1, i64 10), align 8
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.1, i64 0, i64 0), i32 %i5, i32 %i6, i32 %i7, i32 %i8, i32 %i9)
  ret void
}

declare dso_local i32 @printf(i8*, ...) #4

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @is_draw() #0 {
entry:
  %i = load i32, i32* @fifty, align 4
  %cmp = icmp sge i32 %i, 4
  br i1 %cmp, label %if.then, label %if.end15

if.then:                                          ; preds = %entry
  %i1 = load i32, i32* @move_number, align 4
  %i2 = load i32, i32* @move_number, align 4
  %i3 = load i32, i32* @ply, align 4
  %add = add nsw i32 %i2, %i3
  %sub = sub nsw i32 %add, 1
  %i4 = load i32, i32* @fifty, align 4
  %sub1 = sub nsw i32 %sub, %i4
  %cmp2 = icmp slt i32 %i1, %sub1
  br i1 %cmp2, label %if.then3, label %if.else

if.then3:                                         ; preds = %if.then
  %i5 = load i32, i32* @move_number, align 4
  %i6 = load i32, i32* @ply, align 4
  %add4 = add nsw i32 %i5, %i6
  %sub5 = sub nsw i32 %add4, 1
  %i7 = load i32, i32* @fifty, align 4
  %sub6 = sub nsw i32 %sub5, %i7
  br label %if.end

if.else:                                          ; preds = %if.then
  %i8 = load i32, i32* @move_number, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then3
  %end.0 = phi i32 [ %sub6, %if.then3 ], [ %i8, %if.else ]
  %i9 = load i32, i32* @move_number, align 4
  %i10 = load i32, i32* @ply, align 4
  %add7 = add nsw i32 %i9, %i10
  %sub8 = sub nsw i32 %add7, 3
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %i.0 = phi i32 [ %sub8, %if.end ], [ %sub14, %for.inc ]
  %cmp9 = icmp sge i32 %i.0, 0
  br i1 %cmp9, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %cmp10 = icmp sge i32 %i.0, %end.0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %i11 = phi i1 [ false, %for.cond ], [ %cmp10, %land.rhs ]
  br i1 %i11, label %for.body, label %for.end

for.body:                                         ; preds = %land.end
  %i12 = load i32, i32* @hash, align 4
  %idxprom = sext i32 %i.0 to i64
  %arrayidx = getelementptr inbounds [600 x i32], [600 x i32]* @hash_history, i64 0, i64 %idxprom
  %i13 = load i32, i32* %arrayidx, align 4
  %cmp11 = icmp eq i32 %i12, %i13
  br i1 %cmp11, label %if.then12, label %if.end13

if.then12:                                        ; preds = %for.body
  br label %return

if.end13:                                         ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end13
  %sub14 = sub nsw i32 %i.0, 2
  br label %for.cond

for.end:                                          ; preds = %land.end
  br label %if.end15

if.end15:                                         ; preds = %for.end, %entry
  %i14 = load i32, i32* @fifty, align 4
  %cmp16 = icmp sge i32 %i14, 6
  br i1 %cmp16, label %if.then17, label %if.end40

if.then17:                                        ; preds = %if.end15
  %i15 = load i32, i32* @move_number, align 4
  %sub18 = sub nsw i32 %i15, 1
  %i16 = load i32, i32* @ply, align 4
  %rem = srem i32 %i16, 2
  %sub19 = sub nsw i32 %sub18, %rem
  %i17 = load i32, i32* @move_number, align 4
  %i18 = load i32, i32* @ply, align 4
  %add20 = add nsw i32 %i17, %i18
  %sub21 = sub nsw i32 %add20, 1
  %i19 = load i32, i32* @fifty, align 4
  %sub22 = sub nsw i32 %sub21, %i19
  br label %for.cond23

for.cond23:                                       ; preds = %for.inc37, %if.then17
  %repeats.0 = phi i32 [ 0, %if.then17 ], [ %repeats.1, %for.inc37 ]
  %i.1 = phi i32 [ %sub19, %if.then17 ], [ %sub38, %for.inc37 ]
  %cmp24 = icmp sge i32 %i.1, 0
  br i1 %cmp24, label %land.rhs25, label %land.end27

land.rhs25:                                       ; preds = %for.cond23
  %cmp26 = icmp sge i32 %i.1, %sub22
  br label %land.end27

land.end27:                                       ; preds = %land.rhs25, %for.cond23
  %i20 = phi i1 [ false, %for.cond23 ], [ %cmp26, %land.rhs25 ]
  br i1 %i20, label %for.body28, label %for.end39

for.body28:                                       ; preds = %land.end27
  %i21 = load i32, i32* @hash, align 4
  %idxprom29 = sext i32 %i.1 to i64
  %arrayidx30 = getelementptr inbounds [600 x i32], [600 x i32]* @hash_history, i64 0, i64 %idxprom29
  %i22 = load i32, i32* %arrayidx30, align 4
  %cmp31 = icmp eq i32 %i21, %i22
  br i1 %cmp31, label %if.then32, label %if.end33

if.then32:                                        ; preds = %for.body28
  %inc = add nsw i32 %repeats.0, 1
  br label %if.end33

if.end33:                                         ; preds = %if.then32, %for.body28
  %repeats.1 = phi i32 [ %inc, %if.then32 ], [ %repeats.0, %for.body28 ]
  %cmp34 = icmp sge i32 %repeats.1, 2
  br i1 %cmp34, label %if.then35, label %if.end36

if.then35:                                        ; preds = %if.end33
  br label %return

if.end36:                                         ; preds = %if.end33
  br label %for.inc37

for.inc37:                                        ; preds = %if.end36
  %sub38 = sub nsw i32 %i.1, 2
  br label %for.cond23

for.end39:                                        ; preds = %land.end27
  br label %if.end40

if.end40:                                         ; preds = %for.end39, %if.end15
  br label %return

return:                                           ; preds = %if.end40, %if.then35, %if.then12
  %retval.0 = phi i32 [ 1, %if.then12 ], [ 1, %if.then35 ], [ 0, %if.end40 ]
  ret i32 %retval.0
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @storeECache(i32 %score) #0 {
entry:
  %i = load i32, i32* @hash, align 4
  %i1 = load i32, i32* @ECacheSize, align 4
  %rem = urem i32 %i, %i1
  %i2 = load i32, i32* @hash, align 4
  %i3 = load %struct.ECacheType*, %struct.ECacheType** @ECache, align 8
  %idxprom = sext i32 %rem to i64
  %arrayidx = getelementptr inbounds %struct.ECacheType, %struct.ECacheType* %i3, i64 %idxprom
  %stored_hash = getelementptr inbounds %struct.ECacheType, %struct.ECacheType* %arrayidx, i32 0, i32 0
  store i32 %i2, i32* %stored_hash, align 4
  %i4 = load i32, i32* @hold_hash, align 4
  %i5 = load %struct.ECacheType*, %struct.ECacheType** @ECache, align 8
  %idxprom1 = sext i32 %rem to i64
  %arrayidx2 = getelementptr inbounds %struct.ECacheType, %struct.ECacheType* %i5, i64 %idxprom1
  %hold_hash = getelementptr inbounds %struct.ECacheType, %struct.ECacheType* %arrayidx2, i32 0, i32 1
  store i32 %i4, i32* %hold_hash, align 4
  %i6 = load %struct.ECacheType*, %struct.ECacheType** @ECache, align 8
  %idxprom3 = sext i32 %rem to i64
  %arrayidx4 = getelementptr inbounds %struct.ECacheType, %struct.ECacheType* %i6, i64 %idxprom3
  %score5 = getelementptr inbounds %struct.ECacheType, %struct.ECacheType* %arrayidx4, i32 0, i32 2
  store i32 %score, i32* %score5, align 4
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @checkECache(i32* %score, i32* %in_cache) #0 {
entry:
  %i = load i32, i32* @ECacheProbes, align 4
  %inc = add i32 %i, 1
  store i32 %inc, i32* @ECacheProbes, align 4
  %i1 = load i32, i32* @hash, align 4
  %i2 = load i32, i32* @ECacheSize, align 4
  %rem = urem i32 %i1, %i2
  %i3 = load %struct.ECacheType*, %struct.ECacheType** @ECache, align 8
  %idxprom = sext i32 %rem to i64
  %arrayidx = getelementptr inbounds %struct.ECacheType, %struct.ECacheType* %i3, i64 %idxprom
  %stored_hash = getelementptr inbounds %struct.ECacheType, %struct.ECacheType* %arrayidx, i32 0, i32 0
  %i4 = load i32, i32* %stored_hash, align 4
  %i5 = load i32, i32* @hash, align 4
  %cmp = icmp eq i32 %i4, %i5
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %i6 = load %struct.ECacheType*, %struct.ECacheType** @ECache, align 8
  %idxprom1 = sext i32 %rem to i64
  %arrayidx2 = getelementptr inbounds %struct.ECacheType, %struct.ECacheType* %i6, i64 %idxprom1
  %hold_hash = getelementptr inbounds %struct.ECacheType, %struct.ECacheType* %arrayidx2, i32 0, i32 1
  %i7 = load i32, i32* %hold_hash, align 4
  %i8 = load i32, i32* @hold_hash, align 4
  %cmp3 = icmp eq i32 %i7, %i8
  br i1 %cmp3, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %i9 = load i32, i32* @ECacheHits, align 4
  %inc4 = add i32 %i9, 1
  store i32 %inc4, i32* @ECacheHits, align 4
  store i32 1, i32* %in_cache, align 4
  %i10 = load %struct.ECacheType*, %struct.ECacheType** @ECache, align 8
  %idxprom5 = sext i32 %rem to i64
  %arrayidx6 = getelementptr inbounds %struct.ECacheType, %struct.ECacheType* %i10, i64 %idxprom5
  %score7 = getelementptr inbounds %struct.ECacheType, %struct.ECacheType* %arrayidx6, i32 0, i32 2
  %i11 = load i32, i32* %score7, align 4
  store i32 %i11, i32* %score, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @reset_ecache() #0 {
entry:
  %i = load %struct.ECacheType*, %struct.ECacheType** @ECache, align 8
  %i1 = bitcast %struct.ECacheType* %i to i8*
  %i2 = load i32, i32* @ECacheSize, align 4
  %conv = sext i32 %i2 to i64
  %mul = mul i64 12, %conv
  call void @llvm.memset.p0i8.i64(i8* align 4 %i1, i8 0, i64 %mul, i1 false)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @alloc_ecache() #0 {
entry:
  %i = load i32, i32* @ECacheSize, align 4
  %conv = sext i32 %i to i64
  %mul = mul i64 12, %conv
  %call = call noalias i8* @malloc(i64 %mul) #8
  %i1 = bitcast i8* %call to %struct.ECacheType*
  store %struct.ECacheType* %i1, %struct.ECacheType** @ECache, align 8
  %i2 = load %struct.ECacheType*, %struct.ECacheType** @ECache, align 8
  %cmp = icmp eq %struct.ECacheType* %i2, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.3, i64 0, i64 0))
  call void @exit(i32 1) #9
  unreachable

if.end:                                           ; preds = %entry
  ret void
}

; Function Attrs: nounwind
declare dso_local noalias i8* @malloc(i64) #3

; Function Attrs: noreturn nounwind
declare dso_local void @exit(i32) #5

; Function Attrs: noinline nounwind uwtable
define dso_local void @free_ecache() #0 {
entry:
  %i = load %struct.ECacheType*, %struct.ECacheType** @ECache, align 8
  %i1 = bitcast %struct.ECacheType* %i to i8*
  call void @free(i8* %i1) #8
  ret void
}

; Function Attrs: nounwind
declare dso_local void @free(i8*) #3

; Function Attrs: noinline nounwind uwtable
define dso_local void @setup_epd_line(i8* %inbuff) #0 {
entry:
  call void @llvm.memset.p0i8.i64(i8* align 16 bitcast ([144 x i32]* @board to i8*), i8 0, i64 576, i1 false)
  store i32 0, i32* @white_castled, align 4
  store i32 0, i32* @black_castled, align 4
  store i32 50, i32* @book_ply, align 4
  %i = load i32, i32* getelementptr inbounds ([8 x i32], [8 x i32]* @setup_epd_line.rankoffsets, i64 0, i64 0), align 16
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %i.0 = phi i32 [ 0, %entry ], [ %inc, %while.body ]
  %idxprom = sext i32 %i.0 to i64
  %arrayidx = getelementptr inbounds i8, i8* %inbuff, i64 %idxprom
  %i1 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %i1 to i32
  %cmp = icmp eq i32 %conv, 32
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %inc = add nsw i32 %i.0, 1
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %while.cond2

while.cond2:                                      ; preds = %if.end223, %while.end
  %fileoffset.0 = phi i32 [ 0, %while.end ], [ %fileoffset.3, %if.end223 ]
  %rankoffset.0 = phi i32 [ %i, %while.end ], [ %rankoffset.2, %if.end223 ]
  %rankp.0 = phi i32 [ 0, %while.end ], [ %rankp.2, %if.end223 ]
  %i.1 = phi i32 [ %i.0, %while.end ], [ %inc224, %if.end223 ]
  %stage.0 = phi i32 [ 0, %while.end ], [ %stage.4, %if.end223 ]
  %idxprom3 = sext i32 %i.1 to i64
  %arrayidx4 = getelementptr inbounds i8, i8* %inbuff, i64 %idxprom3
  %i2 = load i8, i8* %arrayidx4, align 1
  %conv5 = sext i8 %i2 to i32
  %cmp6 = icmp ne i32 %conv5, 10
  br i1 %cmp6, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond2
  %idxprom8 = sext i32 %i.1 to i64
  %arrayidx9 = getelementptr inbounds i8, i8* %inbuff, i64 %idxprom8
  %i3 = load i8, i8* %arrayidx9, align 1
  %conv10 = sext i8 %i3 to i32
  %cmp11 = icmp ne i32 %conv10, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond2
  %i4 = phi i1 [ false, %while.cond2 ], [ %cmp11, %land.rhs ]
  br i1 %i4, label %while.body13, label %while.end225

while.body13:                                     ; preds = %land.end
  %cmp14 = icmp eq i32 %stage.0, 0
  br i1 %cmp14, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %while.body13
  %call = call i16** @__ctype_b_loc() #10
  %i5 = load i16*, i16** %call, align 8
  %idxprom16 = sext i32 %i.1 to i64
  %arrayidx17 = getelementptr inbounds i8, i8* %inbuff, i64 %idxprom16
  %i6 = load i8, i8* %arrayidx17, align 1
  %conv18 = sext i8 %i6 to i32
  %idxprom19 = sext i32 %conv18 to i64
  %arrayidx20 = getelementptr inbounds i16, i16* %i5, i64 %idxprom19
  %i7 = load i16, i16* %arrayidx20, align 2
  %conv21 = zext i16 %i7 to i32
  %and = and i32 %conv21, 2048
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %land.lhs.true
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then
  %j.0 = phi i32 [ 0, %if.then ], [ %inc30, %for.inc ]
  %idxprom22 = sext i32 %i.1 to i64
  %arrayidx23 = getelementptr inbounds i8, i8* %inbuff, i64 %idxprom22
  %call24 = call i32 @atoi(i8* %arrayidx23) #11
  %cmp25 = icmp slt i32 %j.0, %call24
  br i1 %cmp25, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %add = add nsw i32 %rankoffset.0, %j.0
  %add27 = add nsw i32 %add, %fileoffset.0
  %idxprom28 = sext i32 %add27 to i64
  %arrayidx29 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom28
  store i32 13, i32* %arrayidx29, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %inc30 = add nsw i32 %j.0, 1
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %idxprom31 = sext i32 %i.1 to i64
  %arrayidx32 = getelementptr inbounds i8, i8* %inbuff, i64 %idxprom31
  %call33 = call i32 @atoi(i8* %arrayidx32) #11
  %add34 = add nsw i32 %fileoffset.0, %call33
  br label %if.end223

if.else:                                          ; preds = %land.lhs.true, %while.body13
  %cmp35 = icmp eq i32 %stage.0, 0
  br i1 %cmp35, label %land.lhs.true37, label %if.else47

land.lhs.true37:                                  ; preds = %if.else
  %idxprom38 = sext i32 %i.1 to i64
  %arrayidx39 = getelementptr inbounds i8, i8* %inbuff, i64 %idxprom38
  %i8 = load i8, i8* %arrayidx39, align 1
  %conv40 = sext i8 %i8 to i32
  %cmp41 = icmp eq i32 %conv40, 47
  br i1 %cmp41, label %if.then43, label %if.else47

if.then43:                                        ; preds = %land.lhs.true37
  %inc44 = add nsw i32 %rankp.0, 1
  %idxprom45 = sext i32 %inc44 to i64
  %arrayidx46 = getelementptr inbounds [8 x i32], [8 x i32]* @setup_epd_line.rankoffsets, i64 0, i64 %idxprom45
  %i9 = load i32, i32* %arrayidx46, align 4
  br label %if.end222

if.else47:                                        ; preds = %land.lhs.true37, %if.else
  %cmp48 = icmp eq i32 %stage.0, 0
  br i1 %cmp48, label %land.lhs.true50, label %if.else112

land.lhs.true50:                                  ; preds = %if.else47
  %call51 = call i16** @__ctype_b_loc() #10
  %i10 = load i16*, i16** %call51, align 8
  %idxprom52 = sext i32 %i.1 to i64
  %arrayidx53 = getelementptr inbounds i8, i8* %inbuff, i64 %idxprom52
  %i11 = load i8, i8* %arrayidx53, align 1
  %conv54 = sext i8 %i11 to i32
  %idxprom55 = sext i32 %conv54 to i64
  %arrayidx56 = getelementptr inbounds i16, i16* %i10, i64 %idxprom55
  %i12 = load i16, i16* %arrayidx56, align 2
  %conv57 = zext i16 %i12 to i32
  %and58 = and i32 %conv57, 1024
  %tobool59 = icmp ne i32 %and58, 0
  br i1 %tobool59, label %if.then60, label %if.else112

if.then60:                                        ; preds = %land.lhs.true50
  %idxprom61 = sext i32 %i.1 to i64
  %arrayidx62 = getelementptr inbounds i8, i8* %inbuff, i64 %idxprom61
  %i13 = load i8, i8* %arrayidx62, align 1
  %conv63 = sext i8 %i13 to i32
  switch i32 %conv63, label %sw.epilog [
    i32 112, label %sw.bb
    i32 80, label %sw.bb67
    i32 110, label %sw.bb71
    i32 78, label %sw.bb75
    i32 98, label %sw.bb79
    i32 66, label %sw.bb83
    i32 114, label %sw.bb87
    i32 82, label %sw.bb91
    i32 113, label %sw.bb95
    i32 81, label %sw.bb99
    i32 107, label %sw.bb103
    i32 75, label %sw.bb107
  ]

sw.bb:                                            ; preds = %if.then60
  %add64 = add nsw i32 %rankoffset.0, %fileoffset.0
  %idxprom65 = sext i32 %add64 to i64
  %arrayidx66 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom65
  store i32 2, i32* %arrayidx66, align 4
  br label %sw.epilog

sw.bb67:                                          ; preds = %if.then60
  %add68 = add nsw i32 %rankoffset.0, %fileoffset.0
  %idxprom69 = sext i32 %add68 to i64
  %arrayidx70 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom69
  store i32 1, i32* %arrayidx70, align 4
  br label %sw.epilog

sw.bb71:                                          ; preds = %if.then60
  %add72 = add nsw i32 %rankoffset.0, %fileoffset.0
  %idxprom73 = sext i32 %add72 to i64
  %arrayidx74 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom73
  store i32 4, i32* %arrayidx74, align 4
  br label %sw.epilog

sw.bb75:                                          ; preds = %if.then60
  %add76 = add nsw i32 %rankoffset.0, %fileoffset.0
  %idxprom77 = sext i32 %add76 to i64
  %arrayidx78 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom77
  store i32 3, i32* %arrayidx78, align 4
  br label %sw.epilog

sw.bb79:                                          ; preds = %if.then60
  %add80 = add nsw i32 %rankoffset.0, %fileoffset.0
  %idxprom81 = sext i32 %add80 to i64
  %arrayidx82 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom81
  store i32 12, i32* %arrayidx82, align 4
  br label %sw.epilog

sw.bb83:                                          ; preds = %if.then60
  %add84 = add nsw i32 %rankoffset.0, %fileoffset.0
  %idxprom85 = sext i32 %add84 to i64
  %arrayidx86 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom85
  store i32 11, i32* %arrayidx86, align 4
  br label %sw.epilog

sw.bb87:                                          ; preds = %if.then60
  %add88 = add nsw i32 %rankoffset.0, %fileoffset.0
  %idxprom89 = sext i32 %add88 to i64
  %arrayidx90 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom89
  store i32 8, i32* %arrayidx90, align 4
  br label %sw.epilog

sw.bb91:                                          ; preds = %if.then60
  %add92 = add nsw i32 %rankoffset.0, %fileoffset.0
  %idxprom93 = sext i32 %add92 to i64
  %arrayidx94 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom93
  store i32 7, i32* %arrayidx94, align 4
  br label %sw.epilog

sw.bb95:                                          ; preds = %if.then60
  %add96 = add nsw i32 %rankoffset.0, %fileoffset.0
  %idxprom97 = sext i32 %add96 to i64
  %arrayidx98 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom97
  store i32 10, i32* %arrayidx98, align 4
  br label %sw.epilog

sw.bb99:                                          ; preds = %if.then60
  %add100 = add nsw i32 %rankoffset.0, %fileoffset.0
  %idxprom101 = sext i32 %add100 to i64
  %arrayidx102 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom101
  store i32 9, i32* %arrayidx102, align 4
  br label %sw.epilog

sw.bb103:                                         ; preds = %if.then60
  %add104 = add nsw i32 %rankoffset.0, %fileoffset.0
  store i32 %add104, i32* @bking_loc, align 4
  %i14 = load i32, i32* @bking_loc, align 4
  %idxprom105 = sext i32 %i14 to i64
  %arrayidx106 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom105
  store i32 6, i32* %arrayidx106, align 4
  br label %sw.epilog

sw.bb107:                                         ; preds = %if.then60
  %add108 = add nsw i32 %rankoffset.0, %fileoffset.0
  store i32 %add108, i32* @wking_loc, align 4
  %i15 = load i32, i32* @wking_loc, align 4
  %idxprom109 = sext i32 %i15 to i64
  %arrayidx110 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom109
  store i32 5, i32* %arrayidx110, align 4
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.bb107, %sw.bb103, %sw.bb99, %sw.bb95, %sw.bb91, %sw.bb87, %sw.bb83, %sw.bb79, %sw.bb75, %sw.bb71, %sw.bb67, %sw.bb, %if.then60
  %inc111 = add nsw i32 %fileoffset.0, 1
  br label %if.end221

if.else112:                                       ; preds = %land.lhs.true50, %if.else47
  %idxprom113 = sext i32 %i.1 to i64
  %arrayidx114 = getelementptr inbounds i8, i8* %inbuff, i64 %idxprom113
  %i16 = load i8, i8* %arrayidx114, align 1
  %conv115 = sext i8 %i16 to i32
  %cmp116 = icmp eq i32 %conv115, 32
  br i1 %cmp116, label %if.then118, label %if.end220

if.then118:                                       ; preds = %if.else112
  %inc119 = add nsw i32 %stage.0, 1
  %cmp120 = icmp eq i32 %inc119, 1
  br i1 %cmp120, label %if.then122, label %if.else139

if.then122:                                       ; preds = %if.then118
  br label %while.cond123

while.cond123:                                    ; preds = %while.body129, %if.then122
  %i.2 = phi i32 [ %i.1, %if.then122 ], [ %inc130, %while.body129 ]
  %idxprom124 = sext i32 %i.2 to i64
  %arrayidx125 = getelementptr inbounds i8, i8* %inbuff, i64 %idxprom124
  %i17 = load i8, i8* %arrayidx125, align 1
  %conv126 = sext i8 %i17 to i32
  %cmp127 = icmp eq i32 %conv126, 32
  br i1 %cmp127, label %while.body129, label %while.end131

while.body129:                                    ; preds = %while.cond123
  %inc130 = add nsw i32 %i.2, 1
  br label %while.cond123

while.end131:                                     ; preds = %while.cond123
  %idxprom132 = sext i32 %i.2 to i64
  %arrayidx133 = getelementptr inbounds i8, i8* %inbuff, i64 %idxprom132
  %i18 = load i8, i8* %arrayidx133, align 1
  %conv134 = sext i8 %i18 to i32
  %cmp135 = icmp eq i32 %conv134, 119
  br i1 %cmp135, label %if.then137, label %if.else138

if.then137:                                       ; preds = %while.end131
  store i32 1, i32* @white_to_move, align 4
  br label %if.end

if.else138:                                       ; preds = %while.end131
  store i32 0, i32* @white_to_move, align 4
  br label %if.end

if.end:                                           ; preds = %if.else138, %if.then137
  br label %if.end219

if.else139:                                       ; preds = %if.then118
  %cmp140 = icmp eq i32 %inc119, 2
  br i1 %cmp140, label %if.then142, label %if.else170

if.then142:                                       ; preds = %if.else139
  store i32 1, i32* getelementptr inbounds ([144 x i32], [144 x i32]* @moved, i64 0, i64 30), align 8
  store i32 1, i32* getelementptr inbounds ([144 x i32], [144 x i32]* @moved, i64 0, i64 33), align 4
  store i32 1, i32* getelementptr inbounds ([144 x i32], [144 x i32]* @moved, i64 0, i64 26), align 8
  store i32 1, i32* getelementptr inbounds ([144 x i32], [144 x i32]* @moved, i64 0, i64 117), align 4
  store i32 1, i32* getelementptr inbounds ([144 x i32], [144 x i32]* @moved, i64 0, i64 114), align 8
  store i32 1, i32* getelementptr inbounds ([144 x i32], [144 x i32]* @moved, i64 0, i64 110), align 8
  br label %while.cond143

while.cond143:                                    ; preds = %while.body149, %if.then142
  %i.3 = phi i32 [ %i.1, %if.then142 ], [ %inc150, %while.body149 ]
  %idxprom144 = sext i32 %i.3 to i64
  %arrayidx145 = getelementptr inbounds i8, i8* %inbuff, i64 %idxprom144
  %i19 = load i8, i8* %arrayidx145, align 1
  %conv146 = sext i8 %i19 to i32
  %cmp147 = icmp eq i32 %conv146, 32
  br i1 %cmp147, label %while.body149, label %while.end151

while.body149:                                    ; preds = %while.cond143
  %inc150 = add nsw i32 %i.3, 1
  br label %while.cond143

while.end151:                                     ; preds = %while.cond143
  br label %while.cond152

while.cond152:                                    ; preds = %sw.epilog167, %while.end151
  %i.4 = phi i32 [ %i.3, %while.end151 ], [ %inc168, %sw.epilog167 ]
  %idxprom153 = sext i32 %i.4 to i64
  %arrayidx154 = getelementptr inbounds i8, i8* %inbuff, i64 %idxprom153
  %i20 = load i8, i8* %arrayidx154, align 1
  %conv155 = sext i8 %i20 to i32
  %cmp156 = icmp ne i32 %conv155, 32
  br i1 %cmp156, label %while.body158, label %while.end169

while.body158:                                    ; preds = %while.cond152
  %idxprom159 = sext i32 %i.4 to i64
  %arrayidx160 = getelementptr inbounds i8, i8* %inbuff, i64 %idxprom159
  %i21 = load i8, i8* %arrayidx160, align 1
  %conv161 = sext i8 %i21 to i32
  switch i32 %conv161, label %sw.epilog167 [
    i32 45, label %sw.bb162
    i32 75, label %sw.bb163
    i32 81, label %sw.bb164
    i32 107, label %sw.bb165
    i32 113, label %sw.bb166
  ]

sw.bb162:                                         ; preds = %while.body158
  br label %sw.epilog167

sw.bb163:                                         ; preds = %while.body158
  store i32 0, i32* getelementptr inbounds ([144 x i32], [144 x i32]* @moved, i64 0, i64 33), align 4
  store i32 0, i32* getelementptr inbounds ([144 x i32], [144 x i32]* @moved, i64 0, i64 30), align 8
  br label %sw.epilog167

sw.bb164:                                         ; preds = %while.body158
  store i32 0, i32* getelementptr inbounds ([144 x i32], [144 x i32]* @moved, i64 0, i64 26), align 8
  store i32 0, i32* getelementptr inbounds ([144 x i32], [144 x i32]* @moved, i64 0, i64 30), align 8
  br label %sw.epilog167

sw.bb165:                                         ; preds = %while.body158
  store i32 0, i32* getelementptr inbounds ([144 x i32], [144 x i32]* @moved, i64 0, i64 117), align 4
  store i32 0, i32* getelementptr inbounds ([144 x i32], [144 x i32]* @moved, i64 0, i64 114), align 8
  br label %sw.epilog167

sw.bb166:                                         ; preds = %while.body158
  store i32 0, i32* getelementptr inbounds ([144 x i32], [144 x i32]* @moved, i64 0, i64 110), align 8
  store i32 0, i32* getelementptr inbounds ([144 x i32], [144 x i32]* @moved, i64 0, i64 114), align 8
  br label %sw.epilog167

sw.epilog167:                                     ; preds = %sw.bb166, %sw.bb165, %sw.bb164, %sw.bb163, %sw.bb162, %while.body158
  %inc168 = add nsw i32 %i.4, 1
  br label %while.cond152

while.end169:                                     ; preds = %while.cond152
  %dec = add nsw i32 %i.4, -1
  br label %if.end218

if.else170:                                       ; preds = %if.else139
  %cmp171 = icmp eq i32 %inc119, 3
  br i1 %cmp171, label %if.then173, label %if.else202

if.then173:                                       ; preds = %if.else170
  br label %while.cond174

while.cond174:                                    ; preds = %while.body180, %if.then173
  %i.5 = phi i32 [ %i.1, %if.then173 ], [ %inc181, %while.body180 ]
  %idxprom175 = sext i32 %i.5 to i64
  %arrayidx176 = getelementptr inbounds i8, i8* %inbuff, i64 %idxprom175
  %i22 = load i8, i8* %arrayidx176, align 1
  %conv177 = sext i8 %i22 to i32
  %cmp178 = icmp eq i32 %conv177, 32
  br i1 %cmp178, label %while.body180, label %while.end182

while.body180:                                    ; preds = %while.cond174
  %inc181 = add nsw i32 %i.5, 1
  br label %while.cond174

while.end182:                                     ; preds = %while.cond174
  %idxprom183 = sext i32 %i.5 to i64
  %arrayidx184 = getelementptr inbounds i8, i8* %inbuff, i64 %idxprom183
  %i23 = load i8, i8* %arrayidx184, align 1
  %conv185 = sext i8 %i23 to i32
  %cmp186 = icmp eq i32 %conv185, 45
  br i1 %cmp186, label %if.then188, label %if.else189

if.then188:                                       ; preds = %while.end182
  store i32 0, i32* @ep_square, align 4
  br label %if.end201

if.else189:                                       ; preds = %while.end182
  %inc190 = add nsw i32 %i.5, 1
  %idxprom191 = sext i32 %i.5 to i64
  %arrayidx192 = getelementptr inbounds i8, i8* %inbuff, i64 %idxprom191
  %i24 = load i8, i8* %arrayidx192, align 1
  %conv193 = sext i8 %i24 to i32
  %inc194 = add nsw i32 %inc190, 1
  %idxprom195 = sext i32 %inc190 to i64
  %arrayidx196 = getelementptr inbounds i8, i8* %inbuff, i64 %idxprom195
  %i25 = load i8, i8* %arrayidx196, align 1
  %conv197 = sext i8 %i25 to i32
  %sub = sub nsw i32 %conv193, 97
  %sub198 = sub nsw i32 %conv197, 49
  %mul = mul nsw i32 %sub198, 12
  %add199 = add nsw i32 %mul, 26
  %add200 = add nsw i32 %add199, %sub
  store i32 %add200, i32* @ep_square, align 4
  br label %if.end201

if.end201:                                        ; preds = %if.else189, %if.then188
  %i.6 = phi i32 [ %i.5, %if.then188 ], [ %inc194, %if.else189 ]
  br label %if.end217

if.else202:                                       ; preds = %if.else170
  %cmp203 = icmp eq i32 %inc119, 4
  br i1 %cmp203, label %if.then205, label %if.else206

if.then205:                                       ; preds = %if.else202
  br label %if.end216

if.else206:                                       ; preds = %if.else202
  %cmp207 = icmp eq i32 %inc119, 5
  br i1 %cmp207, label %if.then209, label %if.else210

if.then209:                                       ; preds = %if.else206
  br label %if.end215

if.else210:                                       ; preds = %if.else206
  %cmp211 = icmp eq i32 %inc119, 6
  br i1 %cmp211, label %if.then213, label %if.end214

if.then213:                                       ; preds = %if.else210
  br label %if.end214

if.end214:                                        ; preds = %if.then213, %if.else210
  br label %if.end215

if.end215:                                        ; preds = %if.end214, %if.then209
  br label %if.end216

if.end216:                                        ; preds = %if.end215, %if.then205
  br label %if.end217

if.end217:                                        ; preds = %if.end216, %if.end201
  %i.7 = phi i32 [ %i.6, %if.end201 ], [ %i.1, %if.end216 ]
  br label %if.end218

if.end218:                                        ; preds = %if.end217, %while.end169
  %i.8 = phi i32 [ %dec, %while.end169 ], [ %i.7, %if.end217 ]
  br label %if.end219

if.end219:                                        ; preds = %if.end218, %if.end
  %i.9 = phi i32 [ %i.2, %if.end ], [ %i.8, %if.end218 ]
  br label %if.end220

if.end220:                                        ; preds = %if.end219, %if.else112
  %i.10 = phi i32 [ %i.9, %if.end219 ], [ %i.1, %if.else112 ]
  %stage.1 = phi i32 [ %inc119, %if.end219 ], [ %stage.0, %if.else112 ]
  br label %if.end221

if.end221:                                        ; preds = %if.end220, %sw.epilog
  %fileoffset.1 = phi i32 [ %inc111, %sw.epilog ], [ %fileoffset.0, %if.end220 ]
  %i.11 = phi i32 [ %i.1, %sw.epilog ], [ %i.10, %if.end220 ]
  %stage.2 = phi i32 [ %stage.0, %sw.epilog ], [ %stage.1, %if.end220 ]
  br label %if.end222

if.end222:                                        ; preds = %if.end221, %if.then43
  %fileoffset.2 = phi i32 [ 0, %if.then43 ], [ %fileoffset.1, %if.end221 ]
  %rankoffset.1 = phi i32 [ %i9, %if.then43 ], [ %rankoffset.0, %if.end221 ]
  %rankp.1 = phi i32 [ %inc44, %if.then43 ], [ %rankp.0, %if.end221 ]
  %i.12 = phi i32 [ %i.1, %if.then43 ], [ %i.11, %if.end221 ]
  %stage.3 = phi i32 [ %stage.0, %if.then43 ], [ %stage.2, %if.end221 ]
  br label %if.end223

if.end223:                                        ; preds = %if.end222, %for.end
  %fileoffset.3 = phi i32 [ %add34, %for.end ], [ %fileoffset.2, %if.end222 ]
  %rankoffset.2 = phi i32 [ %rankoffset.0, %for.end ], [ %rankoffset.1, %if.end222 ]
  %rankp.2 = phi i32 [ %rankp.0, %for.end ], [ %rankp.1, %if.end222 ]
  %i.13 = phi i32 [ %i.1, %for.end ], [ %i.12, %if.end222 ]
  %stage.4 = phi i32 [ %stage.0, %for.end ], [ %stage.3, %if.end222 ]
  %inc224 = add nsw i32 %i.13, 1
  br label %while.cond2

while.end225:                                     ; preds = %land.end
  call void @reset_piece_square()
  call void @initialize_hash()
  ret void
}

; Function Attrs: nounwind readnone willreturn
declare dso_local i16** @__ctype_b_loc() #6

; Function Attrs: nounwind readonly willreturn
declare dso_local i32 @atoi(i8*) #7

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @check_solution(i8* %inbuff, %struct.move_s* byval(%struct.move_s) align 8 %cmove) #0 {
entry:
  %san = alloca [256 x i8], align 16
  %arraydecay = getelementptr inbounds [256 x i8], [256 x i8]* %san, i64 0, i64 0
  call void @comp_to_san(%struct.move_s* byval(%struct.move_s) align 8 %cmove, i8* %arraydecay)
  %call = call i8* @strstr(i8* %inbuff, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.4, i64 0, i64 0)) #11
  %cmp = icmp ne i8* %call, null
  br i1 %cmp, label %if.then, label %if.else5

if.then:                                          ; preds = %entry
  %arraydecay1 = getelementptr inbounds [256 x i8], [256 x i8]* %san, i64 0, i64 0
  %call2 = call i8* @strstr(i8* %inbuff, i8* %arraydecay1) #11
  %cmp3 = icmp ne i8* %call2, null
  br i1 %cmp3, label %if.then4, label %if.else

if.then4:                                         ; preds = %if.then
  br label %return

if.else:                                          ; preds = %if.then
  br label %return

if.else5:                                         ; preds = %entry
  %call6 = call i8* @strstr(i8* %inbuff, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1.5, i64 0, i64 0)) #11
  %cmp7 = icmp ne i8* %call6, null
  br i1 %cmp7, label %if.then8, label %if.else14

if.then8:                                         ; preds = %if.else5
  %arraydecay9 = getelementptr inbounds [256 x i8], [256 x i8]* %san, i64 0, i64 0
  %call10 = call i8* @strstr(i8* %inbuff, i8* %arraydecay9) #11
  %cmp11 = icmp ne i8* %call10, null
  br i1 %cmp11, label %if.then12, label %if.else13

if.then12:                                        ; preds = %if.then8
  br label %return

if.else13:                                        ; preds = %if.then8
  br label %return

if.else14:                                        ; preds = %if.else5
  %call15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.2, i64 0, i64 0))
  br label %if.end

if.end:                                           ; preds = %if.else14
  br label %if.end16

if.end16:                                         ; preds = %if.end
  br label %return

return:                                           ; preds = %if.end16, %if.else13, %if.then12, %if.else, %if.then4
  %retval.0 = phi i32 [ 1, %if.then4 ], [ 0, %if.else ], [ 0, %if.then12 ], [ 1, %if.else13 ], [ 0, %if.end16 ]
  ret i32 %retval.0
}

; Function Attrs: nounwind readonly willreturn
declare dso_local i8* @strstr(i8*, i8*) #7

; Function Attrs: noinline nounwind uwtable
define dso_local void @run_epd_testsuite() #0 {
entry:
  %readbuff = alloca [2000 x i8], align 16
  %testname = alloca [4096 x i8], align 16
  %tempbuff = alloca [2000 x i8], align 16
  %comp_move = alloca %struct.move_s, align 8
  %tmp = alloca %struct.move_s, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.3.6, i64 0, i64 0))
  %arraydecay = getelementptr inbounds [4096 x i8], [4096 x i8]* %testname, i64 0, i64 0
  %i = load %struct._IO_FILE*, %struct._IO_FILE** @stdin, align 8
  call void @rinput(i8* %arraydecay, i32 256, %struct._IO_FILE* %i)
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.4.7, i64 0, i64 0))
  %arraydecay2 = getelementptr inbounds [2000 x i8], [2000 x i8]* %readbuff, i64 0, i64 0
  %i1 = load %struct._IO_FILE*, %struct._IO_FILE** @stdin, align 8
  call void @rinput(i8* %arraydecay2, i32 256, %struct._IO_FILE* %i1)
  %arraydecay3 = getelementptr inbounds [2000 x i8], [2000 x i8]* %readbuff, i64 0, i64 0
  %call4 = call i64 @atol(i8* %arraydecay3) #11
  %conv = trunc i64 %call4 to i32
  %call5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0))
  %mul = mul nsw i32 %conv, 100
  %arraydecay6 = getelementptr inbounds [4096 x i8], [4096 x i8]* %testname, i64 0, i64 0
  %call7 = call noalias %struct._IO_FILE* @fopen(i8* %arraydecay6, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.6, i64 0, i64 0))
  br label %while.cond

while.cond:                                       ; preds = %if.end65, %entry
  %tested.0 = phi i32 [ 0, %entry ], [ %inc, %if.end65 ]
  %found.0 = phi i32 [ 0, %entry ], [ %found.2, %if.end65 ]
  %arraydecay8 = getelementptr inbounds [2000 x i8], [2000 x i8]* %readbuff, i64 0, i64 0
  %call9 = call i8* @fgets(i8* %arraydecay8, i32 2000, %struct._IO_FILE* %call7)
  %cmp = icmp ne i8* %call9, null
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %inc = add nsw i32 %tested.0, 1
  %arraydecay11 = getelementptr inbounds [2000 x i8], [2000 x i8]* %readbuff, i64 0, i64 0
  call void @setup_epd_line(i8* %arraydecay11)
  %i2 = load i32, i32* @white_to_move, align 4
  %tobool = icmp ne i32 %i2, 0
  %i3 = zext i1 %tobool to i64
  %cond = select i1 %tobool, i32 0, i32 1
  store i32 %cond, i32* @root_to_move, align 4
  call void @clear_tt()
  call void @initialize_hash()
  %i4 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  call void @display_board(%struct._IO_FILE* %i4, i32 1)
  store i32 0, i32* @forcedwin, align 4
  %call12 = call i32 @interrupt()
  %tobool13 = icmp ne i32 %call12, 0
  br i1 %tobool13, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  %arraydecay14 = getelementptr inbounds [2000 x i8], [2000 x i8]* %tempbuff, i64 0, i64 0
  %i5 = load %struct._IO_FILE*, %struct._IO_FILE** @stdin, align 8
  call void @rinput(i8* %arraydecay14, i32 256, %struct._IO_FILE* %i5)
  br label %if.end

if.end:                                           ; preds = %if.then, %while.body
  store i32 %mul, i32* @fixed_time, align 4
  call void @think(%struct.move_s* sret(%struct.move_s) align 4 %tmp)
  %i6 = bitcast %struct.move_s* %comp_move to i8*
  %i7 = bitcast %struct.move_s* %tmp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %i6, i8* align 4 %i7, i64 24, i1 false)
  %i8 = load i32, i32* @nodes, align 4
  %i9 = load i32, i32* @qnodes, align 4
  %conv15 = sitofp i32 %i9 to float
  %i10 = load i32, i32* @nodes, align 4
  %conv16 = sitofp i32 %i10 to float
  %div = fdiv float %conv15, %conv16
  %conv17 = fpext float %div to double
  %mul18 = fmul double %conv17, 1.000000e+02
  %conv19 = fptrunc double %mul18 to float
  %conv20 = fpext float %conv19 to double
  %call21 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.7, i64 0, i64 0), i32 %i8, double %conv20)
  %i11 = load i32, i32* @ECacheProbes, align 4
  %i12 = load i32, i32* @ECacheHits, align 4
  %i13 = load i32, i32* @ECacheHits, align 4
  %conv22 = uitofp i32 %i13 to float
  %i14 = load i32, i32* @ECacheProbes, align 4
  %conv23 = uitofp i32 %i14 to float
  %add = fadd float %conv23, 1.000000e+00
  %div24 = fdiv float %conv22, %add
  %mul25 = fmul float %div24, 1.000000e+02
  %conv26 = fpext float %mul25 to double
  %call27 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.8, i64 0, i64 0), i32 %i11, i32 %i12, double %conv26)
  %i15 = load i32, i32* @TTStores, align 4
  %i16 = load i32, i32* @TTProbes, align 4
  %i17 = load i32, i32* @TTHits, align 4
  %i18 = load i32, i32* @TTHits, align 4
  %conv28 = uitofp i32 %i18 to float
  %i19 = load i32, i32* @TTProbes, align 4
  %conv29 = uitofp i32 %i19 to float
  %add30 = fadd float %conv29, 1.000000e+00
  %div31 = fdiv float %conv28, %add30
  %mul32 = fmul float %div31, 1.000000e+02
  %conv33 = fpext float %mul32 to double
  %call34 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.9, i64 0, i64 0), i32 %i15, i32 %i16, i32 %i17, double %conv33)
  %i20 = load i32, i32* @NTries, align 4
  %i21 = load i32, i32* @NCuts, align 4
  %i22 = load i32, i32* @NCuts, align 4
  %conv35 = uitofp i32 %i22 to float
  %mul36 = fmul float %conv35, 1.000000e+02
  %i23 = load i32, i32* @NTries, align 4
  %conv37 = uitofp i32 %i23 to float
  %add38 = fadd float %conv37, 1.000000e+00
  %div39 = fdiv float %mul36, %add38
  %conv40 = fpext float %div39 to double
  %i24 = load i32, i32* @TExt, align 4
  %call41 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.10, i64 0, i64 0), i32 %i20, i32 %i21, double %conv40, i32 %i24)
  %i25 = load i32, i32* @ext_check, align 4
  %i26 = load i32, i32* @razor_drop, align 4
  %i27 = load i32, i32* @razor_material, align 4
  %call42 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.11, i64 0, i64 0), i32 %i25, i32 %i26, i32 %i27)
  %i28 = load i32, i32* @FHF, align 4
  %conv43 = uitofp i32 %i28 to float
  %mul44 = fmul float %conv43, 1.000000e+02
  %i29 = load i32, i32* @FH, align 4
  %conv45 = uitofp i32 %i29 to float
  %div46 = fdiv float %mul44, %conv45
  %add47 = fadd float %div46, 1.000000e+00
  %conv48 = fpext float %add47 to double
  %call49 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.12, i64 0, i64 0), double %conv48)
  %i30 = load i32, i32* @Material, align 4
  %call50 = call i32 @eval(i32 -1000000, i32 1000000)
  %i31 = load i32, i32* @maxposdiff, align 4
  %call51 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.13, i64 0, i64 0), i32 %i30, i32 %call50, i32 %i31)
  %call52 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0))
  %i32 = load i32, i32* @forcedwin, align 4
  %tobool53 = icmp ne i32 %i32, 0
  br i1 %tobool53, label %if.else63, label %if.then54

if.then54:                                        ; preds = %if.end
  %arraydecay55 = getelementptr inbounds [2000 x i8], [2000 x i8]* %readbuff, i64 0, i64 0
  %call56 = call i32 @check_solution(i8* %arraydecay55, %struct.move_s* byval(%struct.move_s) align 8 %comp_move)
  %tobool57 = icmp ne i32 %call56, 0
  br i1 %tobool57, label %if.then58, label %if.else

if.then58:                                        ; preds = %if.then54
  %inc59 = add nsw i32 %found.0, 1
  %call60 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.14, i64 0, i64 0))
  br label %if.end62

if.else:                                          ; preds = %if.then54
  %call61 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.15, i64 0, i64 0))
  br label %if.end62

if.end62:                                         ; preds = %if.else, %if.then58
  %found.1 = phi i32 [ %inc59, %if.then58 ], [ %found.0, %if.else ]
  br label %if.end65

if.else63:                                        ; preds = %if.end
  %inc64 = add nsw i32 %found.0, 1
  br label %if.end65

if.end65:                                         ; preds = %if.else63, %if.end62
  %found.2 = phi i32 [ %inc64, %if.else63 ], [ %found.1, %if.end62 ]
  %call66 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.16, i64 0, i64 0), i32 %found.2, i32 %inc)
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %call67 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0))
  ret void
}

; Function Attrs: nounwind readonly willreturn
declare dso_local i64 @atol(i8*) #7

declare dso_local noalias %struct._IO_FILE* @fopen(i8*, i8*) #4

declare dso_local i8* @fgets(i8*, i32, %struct._IO_FILE*) #4

; Function Attrs: noinline nounwind uwtable
define dso_local void @run_autotest(i8* %testset) #0 {
entry:
  %readbuff = alloca [256 x i8], align 16
  %comp_move = alloca %struct.move_s, align 4
  %tmp = alloca %struct.move_s, align 4
  %call = call noalias %struct._IO_FILE* @fopen(i8* %testset, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.6, i64 0, i64 0))
  %cmp = icmp eq %struct._IO_FILE* %call, null
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  call void @exit(i32 1) #9
  unreachable

if.end:                                           ; preds = %entry
  %call1 = call i64 @rtime()
  br label %while.cond

while.cond:                                       ; preds = %if.end12, %if.end
  %arraydecay = getelementptr inbounds [256 x i8], [256 x i8]* %readbuff, i64 0, i64 0
  %call2 = call i8* @fgets(i8* %arraydecay, i32 256, %struct._IO_FILE* %call)
  %cmp3 = icmp ne i8* %call2, null
  br i1 %cmp3, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %arraydecay4 = getelementptr inbounds [256 x i8], [256 x i8]* %readbuff, i64 0, i64 0
  call void @setup_epd_line(i8* %arraydecay4)
  %i = load i32, i32* @white_to_move, align 4
  %tobool = icmp ne i32 %i, 0
  %i1 = zext i1 %tobool to i64
  %cond = select i1 %tobool, i32 0, i32 1
  store i32 %cond, i32* @root_to_move, align 4
  call void @clear_tt()
  call void @initialize_hash()
  %call5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.5, i64 0, i64 0))
  %i2 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  call void @display_board(%struct._IO_FILE* %i2, i32 1)
  %arraydecay6 = getelementptr inbounds [256 x i8], [256 x i8]* %readbuff, i64 0, i64 0
  %call7 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.17, i64 0, i64 0), i8* %arraydecay6)
  %arraydecay8 = getelementptr inbounds [256 x i8], [256 x i8]* %readbuff, i64 0, i64 0
  %call9 = call i8* @fgets(i8* %arraydecay8, i32 256, %struct._IO_FILE* %call)
  %cmp10 = icmp eq i8* %call9, null
  br i1 %cmp10, label %if.then11, label %if.end12

if.then11:                                        ; preds = %while.body
  call void @exit(i32 1) #9
  unreachable

if.end12:                                         ; preds = %while.body
  %arraydecay13 = getelementptr inbounds [256 x i8], [256 x i8]* %readbuff, i64 0, i64 0
  %call14 = call i32 @atoi(i8* %arraydecay13) #11
  %call15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([21 x i8], [21 x i8]* @.str.18, i64 0, i64 0), i32 %call14)
  store i32 %call14, i32* @maxdepth, align 4
  store i32 1000000, i32* @fixed_time, align 4
  call void @think(%struct.move_s* sret(%struct.move_s) align 4 %tmp)
  %i3 = bitcast %struct.move_s* %comp_move to i8*
  %i4 = bitcast %struct.move_s* %tmp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %i3, i8* align 4 %i4, i64 24, i1 false)
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %call16 = call i64 @rtime()
  %call17 = call i32 @fclose(%struct._IO_FILE* %call)
  call void @exit(i32 0) #9
  unreachable
}

declare dso_local i32 @fclose(%struct._IO_FILE*) #4

; Function Attrs: noinline nounwind uwtable
define dso_local void @initialize_eval() #0 {
entry:
  br label %for.cond

for.cond:                                         ; preds = %for.inc23, %entry
  %i.0 = phi i32 [ 0, %entry ], [ %inc24, %for.inc23 ]
  %cmp = icmp slt i32 %i.0, 64
  br i1 %cmp, label %for.body, label %for.end25

for.body:                                         ; preds = %for.cond
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %j.0 = phi i32 [ 0, %for.body ], [ %inc, %for.inc ]
  %cmp2 = icmp slt i32 %j.0, 64
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %and = and i32 %i.0, 7
  %and4 = and i32 %j.0, 7
  %sub = sub nsw i32 %and, %and4
  %call = call i32 @abs(i32 %sub) #10
  %shr = ashr i32 %i.0, 3
  %shr5 = ashr i32 %j.0, 3
  %sub6 = sub nsw i32 %shr, %shr5
  %call7 = call i32 @abs(i32 %sub6) #10
  %add = add nsw i32 %call, %call7
  %idxprom = sext i32 %i.0 to i64
  %arrayidx = getelementptr inbounds [64 x i32], [64 x i32]* @upscale, i64 0, i64 %idxprom
  %i = load i32, i32* %arrayidx, align 4
  %idxprom8 = sext i32 %i to i64
  %arrayidx9 = getelementptr inbounds [144 x [144 x i32]], [144 x [144 x i32]]* @rookdistance, i64 0, i64 %idxprom8
  %idxprom10 = sext i32 %j.0 to i64
  %arrayidx11 = getelementptr inbounds [64 x i32], [64 x i32]* @upscale, i64 0, i64 %idxprom10
  %i1 = load i32, i32* %arrayidx11, align 4
  %idxprom12 = sext i32 %i1 to i64
  %arrayidx13 = getelementptr inbounds [144 x i32], [144 x i32]* %arrayidx9, i64 0, i64 %idxprom12
  store i32 %add, i32* %arrayidx13, align 4
  %cmp14 = icmp sgt i32 %call, %call7
  br i1 %cmp14, label %cond.true, label %cond.false

cond.true:                                        ; preds = %for.body3
  br label %cond.end

cond.false:                                       ; preds = %for.body3
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %call, %cond.true ], [ %call7, %cond.false ]
  %idxprom15 = sext i32 %i.0 to i64
  %arrayidx16 = getelementptr inbounds [64 x i32], [64 x i32]* @upscale, i64 0, i64 %idxprom15
  %i2 = load i32, i32* %arrayidx16, align 4
  %idxprom17 = sext i32 %i2 to i64
  %arrayidx18 = getelementptr inbounds [144 x [144 x i32]], [144 x [144 x i32]]* @distance, i64 0, i64 %idxprom17
  %idxprom19 = sext i32 %j.0 to i64
  %arrayidx20 = getelementptr inbounds [64 x i32], [64 x i32]* @upscale, i64 0, i64 %idxprom19
  %i3 = load i32, i32* %arrayidx20, align 4
  %idxprom21 = sext i32 %i3 to i64
  %arrayidx22 = getelementptr inbounds [144 x i32], [144 x i32]* %arrayidx18, i64 0, i64 %idxprom21
  store i32 %cond, i32* %arrayidx22, align 4
  br label %for.inc

for.inc:                                          ; preds = %cond.end
  %inc = add nsw i32 %j.0, 1
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc23

for.inc23:                                        ; preds = %for.end
  %inc24 = add nsw i32 %i.0, 1
  br label %for.cond

for.end25:                                        ; preds = %for.cond
  br label %for.cond26

for.cond26:                                       ; preds = %for.inc218, %for.end25
  %i.1 = phi i32 [ 0, %for.end25 ], [ %inc219, %for.inc218 ]
  %cmp27 = icmp slt i32 %i.1, 144
  br i1 %cmp27, label %for.body28, label %for.end220

for.body28:                                       ; preds = %for.cond26
  br label %for.cond29

for.cond29:                                       ; preds = %for.inc215, %for.body28
  %j.1 = phi i32 [ 0, %for.body28 ], [ %inc216, %for.inc215 ]
  %cmp30 = icmp slt i32 %j.1, 144
  br i1 %cmp30, label %for.body31, label %for.end217

for.body31:                                       ; preds = %for.cond29
  %idxprom32 = sext i32 %i.1 to i64
  %arrayidx33 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xrank to [144 x i32]*), i64 0, i64 %idxprom32
  %i4 = load i32, i32* %arrayidx33, align 4
  %idxprom34 = sext i32 %j.1 to i64
  %arrayidx35 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xrank to [144 x i32]*), i64 0, i64 %idxprom34
  %i5 = load i32, i32* %arrayidx35, align 4
  %sub36 = sub nsw i32 %i4, %i5
  %call37 = call i32 @abs(i32 %sub36) #10
  %idxprom38 = sext i32 %i.1 to i64
  %arrayidx39 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xfile to [144 x i32]*), i64 0, i64 %idxprom38
  %i6 = load i32, i32* %arrayidx39, align 4
  %idxprom40 = sext i32 %j.1 to i64
  %arrayidx41 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xfile to [144 x i32]*), i64 0, i64 %idxprom40
  %i7 = load i32, i32* %arrayidx41, align 4
  %sub42 = sub nsw i32 %i6, %i7
  %call43 = call i32 @abs(i32 %sub42) #10
  %cmp44 = icmp sgt i32 %call37, %call43
  br i1 %cmp44, label %cond.true45, label %cond.false52

cond.true45:                                      ; preds = %for.body31
  %idxprom46 = sext i32 %i.1 to i64
  %arrayidx47 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xrank to [144 x i32]*), i64 0, i64 %idxprom46
  %i8 = load i32, i32* %arrayidx47, align 4
  %idxprom48 = sext i32 %j.1 to i64
  %arrayidx49 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xrank to [144 x i32]*), i64 0, i64 %idxprom48
  %i9 = load i32, i32* %arrayidx49, align 4
  %sub50 = sub nsw i32 %i8, %i9
  %call51 = call i32 @abs(i32 %sub50) #10
  br label %cond.end59

cond.false52:                                     ; preds = %for.body31
  %idxprom53 = sext i32 %i.1 to i64
  %arrayidx54 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xfile to [144 x i32]*), i64 0, i64 %idxprom53
  %i10 = load i32, i32* %arrayidx54, align 4
  %idxprom55 = sext i32 %j.1 to i64
  %arrayidx56 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xfile to [144 x i32]*), i64 0, i64 %idxprom55
  %i11 = load i32, i32* %arrayidx56, align 4
  %sub57 = sub nsw i32 %i10, %i11
  %call58 = call i32 @abs(i32 %sub57) #10
  br label %cond.end59

cond.end59:                                       ; preds = %cond.false52, %cond.true45
  %cond60 = phi i32 [ %call51, %cond.true45 ], [ %call58, %cond.false52 ]
  %idxprom61 = sext i32 %cond60 to i64
  %arrayidx62 = getelementptr inbounds [9 x i32], [9 x i32]* @pre_p_tropism, i64 0, i64 %idxprom61
  %i12 = load i32, i32* %arrayidx62, align 4
  %conv = trunc i32 %i12 to i8
  %idxprom63 = sext i32 %i.1 to i64
  %arrayidx64 = getelementptr inbounds [144 x [144 x i8]], [144 x [144 x i8]]* @p_tropism, i64 0, i64 %idxprom63
  %idxprom65 = sext i32 %j.1 to i64
  %arrayidx66 = getelementptr inbounds [144 x i8], [144 x i8]* %arrayidx64, i64 0, i64 %idxprom65
  store i8 %conv, i8* %arrayidx66, align 1
  %idxprom67 = sext i32 %i.1 to i64
  %arrayidx68 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xrank to [144 x i32]*), i64 0, i64 %idxprom67
  %i13 = load i32, i32* %arrayidx68, align 4
  %idxprom69 = sext i32 %j.1 to i64
  %arrayidx70 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xrank to [144 x i32]*), i64 0, i64 %idxprom69
  %i14 = load i32, i32* %arrayidx70, align 4
  %sub71 = sub nsw i32 %i13, %i14
  %call72 = call i32 @abs(i32 %sub71) #10
  %idxprom73 = sext i32 %i.1 to i64
  %arrayidx74 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xfile to [144 x i32]*), i64 0, i64 %idxprom73
  %i15 = load i32, i32* %arrayidx74, align 4
  %idxprom75 = sext i32 %j.1 to i64
  %arrayidx76 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xfile to [144 x i32]*), i64 0, i64 %idxprom75
  %i16 = load i32, i32* %arrayidx76, align 4
  %sub77 = sub nsw i32 %i15, %i16
  %call78 = call i32 @abs(i32 %sub77) #10
  %cmp79 = icmp sgt i32 %call72, %call78
  br i1 %cmp79, label %cond.true81, label %cond.false88

cond.true81:                                      ; preds = %cond.end59
  %idxprom82 = sext i32 %i.1 to i64
  %arrayidx83 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xrank to [144 x i32]*), i64 0, i64 %idxprom82
  %i17 = load i32, i32* %arrayidx83, align 4
  %idxprom84 = sext i32 %j.1 to i64
  %arrayidx85 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xrank to [144 x i32]*), i64 0, i64 %idxprom84
  %i18 = load i32, i32* %arrayidx85, align 4
  %sub86 = sub nsw i32 %i17, %i18
  %call87 = call i32 @abs(i32 %sub86) #10
  br label %cond.end95

cond.false88:                                     ; preds = %cond.end59
  %idxprom89 = sext i32 %i.1 to i64
  %arrayidx90 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xfile to [144 x i32]*), i64 0, i64 %idxprom89
  %i19 = load i32, i32* %arrayidx90, align 4
  %idxprom91 = sext i32 %j.1 to i64
  %arrayidx92 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xfile to [144 x i32]*), i64 0, i64 %idxprom91
  %i20 = load i32, i32* %arrayidx92, align 4
  %sub93 = sub nsw i32 %i19, %i20
  %call94 = call i32 @abs(i32 %sub93) #10
  br label %cond.end95

cond.end95:                                       ; preds = %cond.false88, %cond.true81
  %cond96 = phi i32 [ %call87, %cond.true81 ], [ %call94, %cond.false88 ]
  %idxprom97 = sext i32 %cond96 to i64
  %arrayidx98 = getelementptr inbounds [9 x i32], [9 x i32]* @pre_b_tropism, i64 0, i64 %idxprom97
  %i21 = load i32, i32* %arrayidx98, align 4
  %conv99 = trunc i32 %i21 to i8
  %idxprom100 = sext i32 %i.1 to i64
  %arrayidx101 = getelementptr inbounds [144 x [144 x i8]], [144 x [144 x i8]]* @b_tropism, i64 0, i64 %idxprom100
  %idxprom102 = sext i32 %j.1 to i64
  %arrayidx103 = getelementptr inbounds [144 x i8], [144 x i8]* %arrayidx101, i64 0, i64 %idxprom102
  store i8 %conv99, i8* %arrayidx103, align 1
  %idxprom104 = sext i32 %i.1 to i64
  %arrayidx105 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xrank to [144 x i32]*), i64 0, i64 %idxprom104
  %i22 = load i32, i32* %arrayidx105, align 4
  %idxprom106 = sext i32 %j.1 to i64
  %arrayidx107 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xrank to [144 x i32]*), i64 0, i64 %idxprom106
  %i23 = load i32, i32* %arrayidx107, align 4
  %sub108 = sub nsw i32 %i22, %i23
  %call109 = call i32 @abs(i32 %sub108) #10
  %idxprom110 = sext i32 %i.1 to i64
  %arrayidx111 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xfile to [144 x i32]*), i64 0, i64 %idxprom110
  %i24 = load i32, i32* %arrayidx111, align 4
  %idxprom112 = sext i32 %j.1 to i64
  %arrayidx113 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xfile to [144 x i32]*), i64 0, i64 %idxprom112
  %i25 = load i32, i32* %arrayidx113, align 4
  %sub114 = sub nsw i32 %i24, %i25
  %call115 = call i32 @abs(i32 %sub114) #10
  %cmp116 = icmp sgt i32 %call109, %call115
  br i1 %cmp116, label %cond.true118, label %cond.false125

cond.true118:                                     ; preds = %cond.end95
  %idxprom119 = sext i32 %i.1 to i64
  %arrayidx120 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xrank to [144 x i32]*), i64 0, i64 %idxprom119
  %i26 = load i32, i32* %arrayidx120, align 4
  %idxprom121 = sext i32 %j.1 to i64
  %arrayidx122 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xrank to [144 x i32]*), i64 0, i64 %idxprom121
  %i27 = load i32, i32* %arrayidx122, align 4
  %sub123 = sub nsw i32 %i26, %i27
  %call124 = call i32 @abs(i32 %sub123) #10
  br label %cond.end132

cond.false125:                                    ; preds = %cond.end95
  %idxprom126 = sext i32 %i.1 to i64
  %arrayidx127 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xfile to [144 x i32]*), i64 0, i64 %idxprom126
  %i28 = load i32, i32* %arrayidx127, align 4
  %idxprom128 = sext i32 %j.1 to i64
  %arrayidx129 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xfile to [144 x i32]*), i64 0, i64 %idxprom128
  %i29 = load i32, i32* %arrayidx129, align 4
  %sub130 = sub nsw i32 %i28, %i29
  %call131 = call i32 @abs(i32 %sub130) #10
  br label %cond.end132

cond.end132:                                      ; preds = %cond.false125, %cond.true118
  %cond133 = phi i32 [ %call124, %cond.true118 ], [ %call131, %cond.false125 ]
  %idxprom134 = sext i32 %cond133 to i64
  %arrayidx135 = getelementptr inbounds [9 x i32], [9 x i32]* @pre_n_tropism, i64 0, i64 %idxprom134
  %i30 = load i32, i32* %arrayidx135, align 4
  %conv136 = trunc i32 %i30 to i8
  %idxprom137 = sext i32 %i.1 to i64
  %arrayidx138 = getelementptr inbounds [144 x [144 x i8]], [144 x [144 x i8]]* @n_tropism, i64 0, i64 %idxprom137
  %idxprom139 = sext i32 %j.1 to i64
  %arrayidx140 = getelementptr inbounds [144 x i8], [144 x i8]* %arrayidx138, i64 0, i64 %idxprom139
  store i8 %conv136, i8* %arrayidx140, align 1
  %idxprom141 = sext i32 %i.1 to i64
  %arrayidx142 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xrank to [144 x i32]*), i64 0, i64 %idxprom141
  %i31 = load i32, i32* %arrayidx142, align 4
  %idxprom143 = sext i32 %j.1 to i64
  %arrayidx144 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xrank to [144 x i32]*), i64 0, i64 %idxprom143
  %i32 = load i32, i32* %arrayidx144, align 4
  %sub145 = sub nsw i32 %i31, %i32
  %call146 = call i32 @abs(i32 %sub145) #10
  %idxprom147 = sext i32 %i.1 to i64
  %arrayidx148 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xfile to [144 x i32]*), i64 0, i64 %idxprom147
  %i33 = load i32, i32* %arrayidx148, align 4
  %idxprom149 = sext i32 %j.1 to i64
  %arrayidx150 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xfile to [144 x i32]*), i64 0, i64 %idxprom149
  %i34 = load i32, i32* %arrayidx150, align 4
  %sub151 = sub nsw i32 %i33, %i34
  %call152 = call i32 @abs(i32 %sub151) #10
  %cmp153 = icmp sgt i32 %call146, %call152
  br i1 %cmp153, label %cond.true155, label %cond.false162

cond.true155:                                     ; preds = %cond.end132
  %idxprom156 = sext i32 %i.1 to i64
  %arrayidx157 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xrank to [144 x i32]*), i64 0, i64 %idxprom156
  %i35 = load i32, i32* %arrayidx157, align 4
  %idxprom158 = sext i32 %j.1 to i64
  %arrayidx159 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xrank to [144 x i32]*), i64 0, i64 %idxprom158
  %i36 = load i32, i32* %arrayidx159, align 4
  %sub160 = sub nsw i32 %i35, %i36
  %call161 = call i32 @abs(i32 %sub160) #10
  br label %cond.end169

cond.false162:                                    ; preds = %cond.end132
  %idxprom163 = sext i32 %i.1 to i64
  %arrayidx164 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xfile to [144 x i32]*), i64 0, i64 %idxprom163
  %i37 = load i32, i32* %arrayidx164, align 4
  %idxprom165 = sext i32 %j.1 to i64
  %arrayidx166 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xfile to [144 x i32]*), i64 0, i64 %idxprom165
  %i38 = load i32, i32* %arrayidx166, align 4
  %sub167 = sub nsw i32 %i37, %i38
  %call168 = call i32 @abs(i32 %sub167) #10
  br label %cond.end169

cond.end169:                                      ; preds = %cond.false162, %cond.true155
  %cond170 = phi i32 [ %call161, %cond.true155 ], [ %call168, %cond.false162 ]
  %idxprom171 = sext i32 %cond170 to i64
  %arrayidx172 = getelementptr inbounds [9 x i32], [9 x i32]* @pre_r_tropism, i64 0, i64 %idxprom171
  %i39 = load i32, i32* %arrayidx172, align 4
  %conv173 = trunc i32 %i39 to i8
  %idxprom174 = sext i32 %i.1 to i64
  %arrayidx175 = getelementptr inbounds [144 x [144 x i8]], [144 x [144 x i8]]* @r_tropism, i64 0, i64 %idxprom174
  %idxprom176 = sext i32 %j.1 to i64
  %arrayidx177 = getelementptr inbounds [144 x i8], [144 x i8]* %arrayidx175, i64 0, i64 %idxprom176
  store i8 %conv173, i8* %arrayidx177, align 1
  %idxprom178 = sext i32 %i.1 to i64
  %arrayidx179 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xrank to [144 x i32]*), i64 0, i64 %idxprom178
  %i40 = load i32, i32* %arrayidx179, align 4
  %idxprom180 = sext i32 %j.1 to i64
  %arrayidx181 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xrank to [144 x i32]*), i64 0, i64 %idxprom180
  %i41 = load i32, i32* %arrayidx181, align 4
  %sub182 = sub nsw i32 %i40, %i41
  %call183 = call i32 @abs(i32 %sub182) #10
  %idxprom184 = sext i32 %i.1 to i64
  %arrayidx185 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xfile to [144 x i32]*), i64 0, i64 %idxprom184
  %i42 = load i32, i32* %arrayidx185, align 4
  %idxprom186 = sext i32 %j.1 to i64
  %arrayidx187 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xfile to [144 x i32]*), i64 0, i64 %idxprom186
  %i43 = load i32, i32* %arrayidx187, align 4
  %sub188 = sub nsw i32 %i42, %i43
  %call189 = call i32 @abs(i32 %sub188) #10
  %cmp190 = icmp sgt i32 %call183, %call189
  br i1 %cmp190, label %cond.true192, label %cond.false199

cond.true192:                                     ; preds = %cond.end169
  %idxprom193 = sext i32 %i.1 to i64
  %arrayidx194 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xrank to [144 x i32]*), i64 0, i64 %idxprom193
  %i44 = load i32, i32* %arrayidx194, align 4
  %idxprom195 = sext i32 %j.1 to i64
  %arrayidx196 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xrank to [144 x i32]*), i64 0, i64 %idxprom195
  %i45 = load i32, i32* %arrayidx196, align 4
  %sub197 = sub nsw i32 %i44, %i45
  %call198 = call i32 @abs(i32 %sub197) #10
  br label %cond.end206

cond.false199:                                    ; preds = %cond.end169
  %idxprom200 = sext i32 %i.1 to i64
  %arrayidx201 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xfile to [144 x i32]*), i64 0, i64 %idxprom200
  %i46 = load i32, i32* %arrayidx201, align 4
  %idxprom202 = sext i32 %j.1 to i64
  %arrayidx203 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xfile to [144 x i32]*), i64 0, i64 %idxprom202
  %i47 = load i32, i32* %arrayidx203, align 4
  %sub204 = sub nsw i32 %i46, %i47
  %call205 = call i32 @abs(i32 %sub204) #10
  br label %cond.end206

cond.end206:                                      ; preds = %cond.false199, %cond.true192
  %cond207 = phi i32 [ %call198, %cond.true192 ], [ %call205, %cond.false199 ]
  %idxprom208 = sext i32 %cond207 to i64
  %arrayidx209 = getelementptr inbounds [9 x i32], [9 x i32]* @pre_q_tropism, i64 0, i64 %idxprom208
  %i48 = load i32, i32* %arrayidx209, align 4
  %conv210 = trunc i32 %i48 to i8
  %idxprom211 = sext i32 %i.1 to i64
  %arrayidx212 = getelementptr inbounds [144 x [144 x i8]], [144 x [144 x i8]]* @q_tropism, i64 0, i64 %idxprom211
  %idxprom213 = sext i32 %j.1 to i64
  %arrayidx214 = getelementptr inbounds [144 x i8], [144 x i8]* %arrayidx212, i64 0, i64 %idxprom213
  store i8 %conv210, i8* %arrayidx214, align 1
  br label %for.inc215

for.inc215:                                       ; preds = %cond.end206
  %inc216 = add nsw i32 %j.1, 1
  br label %for.cond29

for.end217:                                       ; preds = %for.cond29
  br label %for.inc218

for.inc218:                                       ; preds = %for.end217
  %inc219 = add nsw i32 %i.1, 1
  br label %for.cond26

for.end220:                                       ; preds = %for.cond26
  ret void
}

; Function Attrs: nounwind readnone willreturn
declare dso_local i32 @abs(i32) #6

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @eval(i32 %alpha, i32 %beta) #0 {
entry:
  %score = alloca i32, align 4
  %in_cache = alloca i32, align 4
  store i32 0, i32* %score, align 4
  %i = load i32, i32* @Variant, align 4
  %cmp = icmp eq i32 %i, 2
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call = call i32 @std_eval(i32 %alpha, i32 %beta)
  br label %return

if.else:                                          ; preds = %entry
  %i1 = load i32, i32* @Variant, align 4
  %cmp1 = icmp eq i32 %i1, 3
  br i1 %cmp1, label %if.then2, label %if.else4

if.then2:                                         ; preds = %if.else
  %call3 = call i32 @suicide_eval()
  br label %return

if.else4:                                         ; preds = %if.else
  %i2 = load i32, i32* @Variant, align 4
  %cmp5 = icmp eq i32 %i2, 4
  br i1 %cmp5, label %if.then6, label %if.end

if.then6:                                         ; preds = %if.else4
  %call7 = call i32 @losers_eval()
  br label %return

if.end:                                           ; preds = %if.else4
  br label %if.end8

if.end8:                                          ; preds = %if.end
  br label %if.end9

if.end9:                                          ; preds = %if.end8
  store i32 0, i32* %in_cache, align 4
  call void @checkECache(i32* %score, i32* %in_cache)
  %i3 = load i32, i32* %in_cache, align 4
  %tobool = icmp ne i32 %i3, 0
  br i1 %tobool, label %if.then10, label %if.end14

if.then10:                                        ; preds = %if.end9
  %i4 = load i32, i32* @white_to_move, align 4
  %cmp11 = icmp eq i32 %i4, 1
  br i1 %cmp11, label %if.then12, label %if.end13

if.then12:                                        ; preds = %if.then10
  %i5 = load i32, i32* %score, align 4
  br label %return

if.end13:                                         ; preds = %if.then10
  %i6 = load i32, i32* %score, align 4
  %sub = sub nsw i32 0, %i6
  br label %return

if.end14:                                         ; preds = %if.end9
  %i7 = load i32, i32* @cfg_devscale, align 4
  %tobool15 = icmp ne i32 %i7, 0
  br i1 %tobool15, label %if.then16, label %if.else46

if.then16:                                        ; preds = %if.end14
  %i8 = load i32, i32* @white_to_move, align 4
  %i9 = load i32, i32* @comp_color, align 4
  %cmp17 = icmp ne i32 %i8, %i9
  br i1 %cmp17, label %if.then18, label %if.else28

if.then18:                                        ; preds = %if.then16
  %i10 = load i32, i32* @white_hand_eval, align 4
  %cmp19 = icmp sle i32 %i10, 200
  br i1 %cmp19, label %land.lhs.true, label %if.else22

land.lhs.true:                                    ; preds = %if.then18
  %i11 = load i32, i32* @Variant, align 4
  %cmp20 = icmp ne i32 %i11, 1
  br i1 %cmp20, label %if.then21, label %if.else22

if.then21:                                        ; preds = %land.lhs.true
  br label %if.end27

if.else22:                                        ; preds = %land.lhs.true, %if.then18
  %i12 = load i32, i32* @white_hand_eval, align 4
  %cmp23 = icmp sge i32 %i12, 700
  br i1 %cmp23, label %if.then24, label %if.else25

if.then24:                                        ; preds = %if.else22
  br label %if.end26

if.else25:                                        ; preds = %if.else22
  br label %if.end26

if.end26:                                         ; preds = %if.else25, %if.then24
  %wdev_dscale.0 = phi i32 [ 0, %if.then24 ], [ 1, %if.else25 ]
  br label %if.end27

if.end27:                                         ; preds = %if.end26, %if.then21
  %wdev_dscale.1 = phi i32 [ 2, %if.then21 ], [ %wdev_dscale.0, %if.end26 ]
  br label %if.end29

if.else28:                                        ; preds = %if.then16
  br label %if.end29

if.end29:                                         ; preds = %if.else28, %if.end27
  %wdev_dscale.2 = phi i32 [ %wdev_dscale.1, %if.end27 ], [ 0, %if.else28 ]
  %i13 = load i32, i32* @white_to_move, align 4
  %i14 = load i32, i32* @comp_color, align 4
  %cmp30 = icmp eq i32 %i13, %i14
  br i1 %cmp30, label %if.then31, label %if.else44

if.then31:                                        ; preds = %if.end29
  %i15 = load i32, i32* @black_hand_eval, align 4
  %sub32 = sub nsw i32 0, %i15
  %cmp33 = icmp sle i32 %sub32, 200
  br i1 %cmp33, label %land.lhs.true34, label %if.else37

land.lhs.true34:                                  ; preds = %if.then31
  %i16 = load i32, i32* @Variant, align 4
  %cmp35 = icmp ne i32 %i16, 1
  br i1 %cmp35, label %if.then36, label %if.else37

if.then36:                                        ; preds = %land.lhs.true34
  br label %if.end43

if.else37:                                        ; preds = %land.lhs.true34, %if.then31
  %i17 = load i32, i32* @black_hand_eval, align 4
  %sub38 = sub nsw i32 0, %i17
  %cmp39 = icmp sge i32 %sub38, 700
  br i1 %cmp39, label %if.then40, label %if.else41

if.then40:                                        ; preds = %if.else37
  br label %if.end42

if.else41:                                        ; preds = %if.else37
  br label %if.end42

if.end42:                                         ; preds = %if.else41, %if.then40
  %bdev_dscale.0 = phi i32 [ 0, %if.then40 ], [ 1, %if.else41 ]
  br label %if.end43

if.end43:                                         ; preds = %if.end42, %if.then36
  %bdev_dscale.1 = phi i32 [ 2, %if.then36 ], [ %bdev_dscale.0, %if.end42 ]
  br label %if.end45

if.else44:                                        ; preds = %if.end29
  br label %if.end45

if.end45:                                         ; preds = %if.else44, %if.end43
  %bdev_dscale.2 = phi i32 [ %bdev_dscale.1, %if.end43 ], [ 0, %if.else44 ]
  br label %if.end47

if.else46:                                        ; preds = %if.end14
  br label %if.end47

if.end47:                                         ; preds = %if.else46, %if.end45
  %wdev_dscale.3 = phi i32 [ %wdev_dscale.2, %if.end45 ], [ 0, %if.else46 ]
  %bdev_dscale.3 = phi i32 [ %bdev_dscale.2, %if.end45 ], [ 0, %if.else46 ]
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end47
  %j.0 = phi i32 [ 1, %if.end47 ], [ %inc171, %for.inc ]
  %a.0 = phi i32 [ 1, %if.end47 ], [ %a.1, %for.inc ]
  %i18 = load i32, i32* @piece_count, align 4
  %cmp48 = icmp sle i32 %a.0, %i18
  br i1 %cmp48, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %idxprom = sext i32 %j.0 to i64
  %arrayidx = getelementptr inbounds [62 x i32], [62 x i32]* @pieces, i64 0, i64 %idxprom
  %i19 = load i32, i32* %arrayidx, align 4
  %tobool49 = icmp ne i32 %i19, 0
  br i1 %tobool49, label %if.else51, label %if.then50

if.then50:                                        ; preds = %for.body
  br label %for.inc

if.else51:                                        ; preds = %for.body
  %inc = add nsw i32 %a.0, 1
  br label %if.end52

if.end52:                                         ; preds = %if.else51
  %idxprom53 = sext i32 %i19 to i64
  %arrayidx54 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom53
  %i20 = load i32, i32* %arrayidx54, align 4
  switch i32 %i20, label %sw.epilog [
    i32 1, label %sw.bb
    i32 2, label %sw.bb63
    i32 7, label %sw.bb75
    i32 8, label %sw.bb87
    i32 11, label %sw.bb99
    i32 12, label %sw.bb111
    i32 3, label %sw.bb123
    i32 4, label %sw.bb135
    i32 9, label %sw.bb147
    i32 10, label %sw.bb159
  ]

sw.bb:                                            ; preds = %if.end52
  %i21 = load i32, i32* %score, align 4
  %add = add nsw i32 %i21, 100
  store i32 %add, i32* %score, align 4
  %idxprom55 = sext i32 %i19 to i64
  %arrayidx56 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [106 x i32], [38 x i32] }>* @white_pawn to [144 x i32]*), i64 0, i64 %idxprom55
  %i22 = load i32, i32* %arrayidx56, align 4
  %shr = ashr i32 %i22, %wdev_dscale.3
  %i23 = load i32, i32* %score, align 4
  %add57 = add nsw i32 %i23, %shr
  store i32 %add57, i32* %score, align 4
  %idxprom58 = sext i32 %i19 to i64
  %arrayidx59 = getelementptr inbounds [144 x [144 x i8]], [144 x [144 x i8]]* @p_tropism, i64 0, i64 %idxprom58
  %i24 = load i32, i32* @bking_loc, align 4
  %idxprom60 = sext i32 %i24 to i64
  %arrayidx61 = getelementptr inbounds [144 x i8], [144 x i8]* %arrayidx59, i64 0, i64 %idxprom60
  %i25 = load i8, i8* %arrayidx61, align 1
  %conv = zext i8 %i25 to i32
  %i26 = load i32, i32* %score, align 4
  %add62 = add nsw i32 %i26, %conv
  store i32 %add62, i32* %score, align 4
  br label %sw.epilog

sw.bb63:                                          ; preds = %if.end52
  %i27 = load i32, i32* %score, align 4
  %sub64 = sub nsw i32 %i27, 100
  store i32 %sub64, i32* %score, align 4
  %idxprom65 = sext i32 %i19 to i64
  %arrayidx66 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [106 x i32], [38 x i32] }>* @black_pawn to [144 x i32]*), i64 0, i64 %idxprom65
  %i28 = load i32, i32* %arrayidx66, align 4
  %shr67 = ashr i32 %i28, %bdev_dscale.3
  %i29 = load i32, i32* %score, align 4
  %sub68 = sub nsw i32 %i29, %shr67
  store i32 %sub68, i32* %score, align 4
  %idxprom69 = sext i32 %i19 to i64
  %arrayidx70 = getelementptr inbounds [144 x [144 x i8]], [144 x [144 x i8]]* @p_tropism, i64 0, i64 %idxprom69
  %i30 = load i32, i32* @wking_loc, align 4
  %idxprom71 = sext i32 %i30 to i64
  %arrayidx72 = getelementptr inbounds [144 x i8], [144 x i8]* %arrayidx70, i64 0, i64 %idxprom71
  %i31 = load i8, i8* %arrayidx72, align 1
  %conv73 = zext i8 %i31 to i32
  %i32 = load i32, i32* %score, align 4
  %sub74 = sub nsw i32 %i32, %conv73
  store i32 %sub74, i32* %score, align 4
  br label %sw.epilog

sw.bb75:                                          ; preds = %if.end52
  %i33 = load i32, i32* %score, align 4
  %add76 = add nsw i32 %i33, 250
  store i32 %add76, i32* %score, align 4
  %idxprom77 = sext i32 %i19 to i64
  %arrayidx78 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @white_rook to [144 x i32]*), i64 0, i64 %idxprom77
  %i34 = load i32, i32* %arrayidx78, align 4
  %shr79 = ashr i32 %i34, %wdev_dscale.3
  %i35 = load i32, i32* %score, align 4
  %add80 = add nsw i32 %i35, %shr79
  store i32 %add80, i32* %score, align 4
  %idxprom81 = sext i32 %i19 to i64
  %arrayidx82 = getelementptr inbounds [144 x [144 x i8]], [144 x [144 x i8]]* @r_tropism, i64 0, i64 %idxprom81
  %i36 = load i32, i32* @bking_loc, align 4
  %idxprom83 = sext i32 %i36 to i64
  %arrayidx84 = getelementptr inbounds [144 x i8], [144 x i8]* %arrayidx82, i64 0, i64 %idxprom83
  %i37 = load i8, i8* %arrayidx84, align 1
  %conv85 = zext i8 %i37 to i32
  %i38 = load i32, i32* %score, align 4
  %add86 = add nsw i32 %i38, %conv85
  store i32 %add86, i32* %score, align 4
  br label %sw.epilog

sw.bb87:                                          ; preds = %if.end52
  %i39 = load i32, i32* %score, align 4
  %sub88 = sub nsw i32 %i39, 250
  store i32 %sub88, i32* %score, align 4
  %idxprom89 = sext i32 %i19 to i64
  %arrayidx90 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @black_rook to [144 x i32]*), i64 0, i64 %idxprom89
  %i40 = load i32, i32* %arrayidx90, align 4
  %shr91 = ashr i32 %i40, %bdev_dscale.3
  %i41 = load i32, i32* %score, align 4
  %sub92 = sub nsw i32 %i41, %shr91
  store i32 %sub92, i32* %score, align 4
  %idxprom93 = sext i32 %i19 to i64
  %arrayidx94 = getelementptr inbounds [144 x [144 x i8]], [144 x [144 x i8]]* @r_tropism, i64 0, i64 %idxprom93
  %i42 = load i32, i32* @wking_loc, align 4
  %idxprom95 = sext i32 %i42 to i64
  %arrayidx96 = getelementptr inbounds [144 x i8], [144 x i8]* %arrayidx94, i64 0, i64 %idxprom95
  %i43 = load i8, i8* %arrayidx96, align 1
  %conv97 = zext i8 %i43 to i32
  %i44 = load i32, i32* %score, align 4
  %sub98 = sub nsw i32 %i44, %conv97
  store i32 %sub98, i32* %score, align 4
  br label %sw.epilog

sw.bb99:                                          ; preds = %if.end52
  %i45 = load i32, i32* %score, align 4
  %add100 = add nsw i32 %i45, 230
  store i32 %add100, i32* %score, align 4
  %idxprom101 = sext i32 %i19 to i64
  %arrayidx102 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @pcsqbishop to [144 x i32]*), i64 0, i64 %idxprom101
  %i46 = load i32, i32* %arrayidx102, align 4
  %shr103 = ashr i32 %i46, %wdev_dscale.3
  %i47 = load i32, i32* %score, align 4
  %add104 = add nsw i32 %i47, %shr103
  store i32 %add104, i32* %score, align 4
  %idxprom105 = sext i32 %i19 to i64
  %arrayidx106 = getelementptr inbounds [144 x [144 x i8]], [144 x [144 x i8]]* @b_tropism, i64 0, i64 %idxprom105
  %i48 = load i32, i32* @bking_loc, align 4
  %idxprom107 = sext i32 %i48 to i64
  %arrayidx108 = getelementptr inbounds [144 x i8], [144 x i8]* %arrayidx106, i64 0, i64 %idxprom107
  %i49 = load i8, i8* %arrayidx108, align 1
  %conv109 = zext i8 %i49 to i32
  %i50 = load i32, i32* %score, align 4
  %add110 = add nsw i32 %i50, %conv109
  store i32 %add110, i32* %score, align 4
  br label %sw.epilog

sw.bb111:                                         ; preds = %if.end52
  %i51 = load i32, i32* %score, align 4
  %sub112 = sub nsw i32 %i51, 230
  store i32 %sub112, i32* %score, align 4
  %idxprom113 = sext i32 %i19 to i64
  %arrayidx114 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @pcsqbishop to [144 x i32]*), i64 0, i64 %idxprom113
  %i52 = load i32, i32* %arrayidx114, align 4
  %shr115 = ashr i32 %i52, %bdev_dscale.3
  %i53 = load i32, i32* %score, align 4
  %sub116 = sub nsw i32 %i53, %shr115
  store i32 %sub116, i32* %score, align 4
  %idxprom117 = sext i32 %i19 to i64
  %arrayidx118 = getelementptr inbounds [144 x [144 x i8]], [144 x [144 x i8]]* @b_tropism, i64 0, i64 %idxprom117
  %i54 = load i32, i32* @wking_loc, align 4
  %idxprom119 = sext i32 %i54 to i64
  %arrayidx120 = getelementptr inbounds [144 x i8], [144 x i8]* %arrayidx118, i64 0, i64 %idxprom119
  %i55 = load i8, i8* %arrayidx120, align 1
  %conv121 = zext i8 %i55 to i32
  %i56 = load i32, i32* %score, align 4
  %sub122 = sub nsw i32 %i56, %conv121
  store i32 %sub122, i32* %score, align 4
  br label %sw.epilog

sw.bb123:                                         ; preds = %if.end52
  %i57 = load i32, i32* %score, align 4
  %add124 = add nsw i32 %i57, 210
  store i32 %add124, i32* %score, align 4
  %idxprom125 = sext i32 %i19 to i64
  %arrayidx126 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @white_knight to [144 x i32]*), i64 0, i64 %idxprom125
  %i58 = load i32, i32* %arrayidx126, align 4
  %shr127 = ashr i32 %i58, %wdev_dscale.3
  %i59 = load i32, i32* %score, align 4
  %add128 = add nsw i32 %i59, %shr127
  store i32 %add128, i32* %score, align 4
  %idxprom129 = sext i32 %i19 to i64
  %arrayidx130 = getelementptr inbounds [144 x [144 x i8]], [144 x [144 x i8]]* @n_tropism, i64 0, i64 %idxprom129
  %i60 = load i32, i32* @bking_loc, align 4
  %idxprom131 = sext i32 %i60 to i64
  %arrayidx132 = getelementptr inbounds [144 x i8], [144 x i8]* %arrayidx130, i64 0, i64 %idxprom131
  %i61 = load i8, i8* %arrayidx132, align 1
  %conv133 = zext i8 %i61 to i32
  %i62 = load i32, i32* %score, align 4
  %add134 = add nsw i32 %i62, %conv133
  store i32 %add134, i32* %score, align 4
  br label %sw.epilog

sw.bb135:                                         ; preds = %if.end52
  %i63 = load i32, i32* %score, align 4
  %sub136 = sub nsw i32 %i63, 210
  store i32 %sub136, i32* %score, align 4
  %idxprom137 = sext i32 %i19 to i64
  %arrayidx138 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @black_knight to [144 x i32]*), i64 0, i64 %idxprom137
  %i64 = load i32, i32* %arrayidx138, align 4
  %shr139 = ashr i32 %i64, %bdev_dscale.3
  %i65 = load i32, i32* %score, align 4
  %sub140 = sub nsw i32 %i65, %shr139
  store i32 %sub140, i32* %score, align 4
  %idxprom141 = sext i32 %i19 to i64
  %arrayidx142 = getelementptr inbounds [144 x [144 x i8]], [144 x [144 x i8]]* @n_tropism, i64 0, i64 %idxprom141
  %i66 = load i32, i32* @wking_loc, align 4
  %idxprom143 = sext i32 %i66 to i64
  %arrayidx144 = getelementptr inbounds [144 x i8], [144 x i8]* %arrayidx142, i64 0, i64 %idxprom143
  %i67 = load i8, i8* %arrayidx144, align 1
  %conv145 = zext i8 %i67 to i32
  %i68 = load i32, i32* %score, align 4
  %sub146 = sub nsw i32 %i68, %conv145
  store i32 %sub146, i32* %score, align 4
  br label %sw.epilog

sw.bb147:                                         ; preds = %if.end52
  %i69 = load i32, i32* %score, align 4
  %add148 = add nsw i32 %i69, 450
  store i32 %add148, i32* %score, align 4
  %idxprom149 = sext i32 %i19 to i64
  %arrayidx150 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @white_queen to [144 x i32]*), i64 0, i64 %idxprom149
  %i70 = load i32, i32* %arrayidx150, align 4
  %shr151 = ashr i32 %i70, %wdev_dscale.3
  %i71 = load i32, i32* %score, align 4
  %add152 = add nsw i32 %i71, %shr151
  store i32 %add152, i32* %score, align 4
  %idxprom153 = sext i32 %i19 to i64
  %arrayidx154 = getelementptr inbounds [144 x [144 x i8]], [144 x [144 x i8]]* @q_tropism, i64 0, i64 %idxprom153
  %i72 = load i32, i32* @bking_loc, align 4
  %idxprom155 = sext i32 %i72 to i64
  %arrayidx156 = getelementptr inbounds [144 x i8], [144 x i8]* %arrayidx154, i64 0, i64 %idxprom155
  %i73 = load i8, i8* %arrayidx156, align 1
  %conv157 = zext i8 %i73 to i32
  %i74 = load i32, i32* %score, align 4
  %add158 = add nsw i32 %i74, %conv157
  store i32 %add158, i32* %score, align 4
  br label %sw.epilog

sw.bb159:                                         ; preds = %if.end52
  %i75 = load i32, i32* %score, align 4
  %sub160 = sub nsw i32 %i75, 450
  store i32 %sub160, i32* %score, align 4
  %idxprom161 = sext i32 %i19 to i64
  %arrayidx162 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [114 x i32], [30 x i32] }>* @black_queen to [144 x i32]*), i64 0, i64 %idxprom161
  %i76 = load i32, i32* %arrayidx162, align 4
  %shr163 = ashr i32 %i76, %bdev_dscale.3
  %i77 = load i32, i32* %score, align 4
  %sub164 = sub nsw i32 %i77, %shr163
  store i32 %sub164, i32* %score, align 4
  %idxprom165 = sext i32 %i19 to i64
  %arrayidx166 = getelementptr inbounds [144 x [144 x i8]], [144 x [144 x i8]]* @q_tropism, i64 0, i64 %idxprom165
  %i78 = load i32, i32* @wking_loc, align 4
  %idxprom167 = sext i32 %i78 to i64
  %arrayidx168 = getelementptr inbounds [144 x i8], [144 x i8]* %arrayidx166, i64 0, i64 %idxprom167
  %i79 = load i8, i8* %arrayidx168, align 1
  %conv169 = zext i8 %i79 to i32
  %i80 = load i32, i32* %score, align 4
  %sub170 = sub nsw i32 %i80, %conv169
  store i32 %sub170, i32* %score, align 4
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.bb159, %sw.bb147, %sw.bb135, %sw.bb123, %sw.bb111, %sw.bb99, %sw.bb87, %sw.bb75, %sw.bb63, %sw.bb, %if.end52
  br label %for.inc

for.inc:                                          ; preds = %sw.epilog, %if.then50
  %a.1 = phi i32 [ %inc, %sw.epilog ], [ %a.0, %if.then50 ]
  %inc171 = add nsw i32 %j.0, 1
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %i81 = load i32, i32* @wking_loc, align 4
  %idxprom172 = sext i32 %i81 to i64
  %arrayidx173 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @white_king to [144 x i32]*), i64 0, i64 %idxprom172
  %i82 = load i32, i32* %arrayidx173, align 4
  %shr174 = ashr i32 %i82, %bdev_dscale.3
  %i83 = load i32, i32* %score, align 4
  %add175 = add nsw i32 %i83, %shr174
  store i32 %add175, i32* %score, align 4
  %i84 = load i32, i32* @bking_loc, align 4
  %idxprom176 = sext i32 %i84 to i64
  %arrayidx177 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @black_king to [144 x i32]*), i64 0, i64 %idxprom176
  %i85 = load i32, i32* %arrayidx177, align 4
  %shr178 = ashr i32 %i85, %wdev_dscale.3
  %i86 = load i32, i32* %score, align 4
  %sub179 = sub nsw i32 %i86, %shr178
  store i32 %sub179, i32* %score, align 4
  %i87 = load i32, i32* @white_castled, align 4
  %tobool180 = icmp ne i32 %i87, 0
  br i1 %tobool180, label %if.end185, label %land.lhs.true181

land.lhs.true181:                                 ; preds = %for.end
  %i88 = load i32, i32* getelementptr inbounds ([144 x i32], [144 x i32]* @moved, i64 0, i64 30), align 8
  %tobool182 = icmp ne i32 %i88, 0
  br i1 %tobool182, label %if.then183, label %if.end185

if.then183:                                       ; preds = %land.lhs.true181
  %i89 = load i32, i32* %score, align 4
  %sub184 = sub nsw i32 %i89, 30
  store i32 %sub184, i32* %score, align 4
  br label %if.end185

if.end185:                                        ; preds = %if.then183, %land.lhs.true181, %for.end
  %i90 = load i32, i32* @black_castled, align 4
  %tobool186 = icmp ne i32 %i90, 0
  br i1 %tobool186, label %if.end191, label %land.lhs.true187

land.lhs.true187:                                 ; preds = %if.end185
  %i91 = load i32, i32* getelementptr inbounds ([144 x i32], [144 x i32]* @moved, i64 0, i64 114), align 8
  %tobool188 = icmp ne i32 %i91, 0
  br i1 %tobool188, label %if.then189, label %if.end191

if.then189:                                       ; preds = %land.lhs.true187
  %i92 = load i32, i32* %score, align 4
  %add190 = add nsw i32 %i92, 30
  store i32 %add190, i32* %score, align 4
  br label %if.end191

if.end191:                                        ; preds = %if.then189, %land.lhs.true187, %if.end185
  %i93 = load i32, i32* getelementptr inbounds ([144 x i32], [144 x i32]* @moved, i64 0, i64 41), align 4
  %tobool192 = icmp ne i32 %i93, 0
  br i1 %tobool192, label %if.end198, label %land.lhs.true193

land.lhs.true193:                                 ; preds = %if.end191
  %i94 = load i32, i32* getelementptr inbounds ([144 x i32], [144 x i32]* @board, i64 0, i64 53), align 4
  %cmp194 = icmp ne i32 %i94, 13
  br i1 %cmp194, label %if.then196, label %if.end198

if.then196:                                       ; preds = %land.lhs.true193
  %i95 = load i32, i32* %score, align 4
  %sub197 = sub nsw i32 %i95, 15
  store i32 %sub197, i32* %score, align 4
  br label %if.end198

if.end198:                                        ; preds = %if.then196, %land.lhs.true193, %if.end191
  %i96 = load i32, i32* getelementptr inbounds ([144 x i32], [144 x i32]* @moved, i64 0, i64 42), align 8
  %tobool199 = icmp ne i32 %i96, 0
  br i1 %tobool199, label %if.end205, label %land.lhs.true200

land.lhs.true200:                                 ; preds = %if.end198
  %i97 = load i32, i32* getelementptr inbounds ([144 x i32], [144 x i32]* @board, i64 0, i64 54), align 8
  %cmp201 = icmp ne i32 %i97, 13
  br i1 %cmp201, label %if.then203, label %if.end205

if.then203:                                       ; preds = %land.lhs.true200
  %i98 = load i32, i32* %score, align 4
  %sub204 = sub nsw i32 %i98, 15
  store i32 %sub204, i32* %score, align 4
  br label %if.end205

if.end205:                                        ; preds = %if.then203, %land.lhs.true200, %if.end198
  %i99 = load i32, i32* getelementptr inbounds ([144 x i32], [144 x i32]* @moved, i64 0, i64 101), align 4
  %tobool206 = icmp ne i32 %i99, 0
  br i1 %tobool206, label %if.end212, label %land.lhs.true207

land.lhs.true207:                                 ; preds = %if.end205
  %i100 = load i32, i32* getelementptr inbounds ([144 x i32], [144 x i32]* @board, i64 0, i64 89), align 4
  %cmp208 = icmp ne i32 %i100, 13
  br i1 %cmp208, label %if.then210, label %if.end212

if.then210:                                       ; preds = %land.lhs.true207
  %i101 = load i32, i32* %score, align 4
  %add211 = add nsw i32 %i101, 15
  store i32 %add211, i32* %score, align 4
  br label %if.end212

if.end212:                                        ; preds = %if.then210, %land.lhs.true207, %if.end205
  %i102 = load i32, i32* getelementptr inbounds ([144 x i32], [144 x i32]* @moved, i64 0, i64 102), align 8
  %tobool213 = icmp ne i32 %i102, 0
  br i1 %tobool213, label %if.end219, label %land.lhs.true214

land.lhs.true214:                                 ; preds = %if.end212
  %i103 = load i32, i32* getelementptr inbounds ([144 x i32], [144 x i32]* @board, i64 0, i64 90), align 8
  %cmp215 = icmp ne i32 %i103, 13
  br i1 %cmp215, label %if.then217, label %if.end219

if.then217:                                       ; preds = %land.lhs.true214
  %i104 = load i32, i32* %score, align 4
  %add218 = add nsw i32 %i104, 15
  store i32 %add218, i32* %score, align 4
  br label %if.end219

if.end219:                                        ; preds = %if.then217, %land.lhs.true214, %if.end212
  %i105 = load i32, i32* @cfg_smarteval, align 4
  %tobool220 = icmp ne i32 %i105, 0
  br i1 %tobool220, label %if.then221, label %if.end640

if.then221:                                       ; preds = %if.end219
  %i106 = load i32, i32* @wking_loc, align 4
  %cmp222 = icmp ne i32 %i106, 30
  br i1 %cmp222, label %land.lhs.true224, label %if.end279

land.lhs.true224:                                 ; preds = %if.then221
  %i107 = load i32, i32* @wking_loc, align 4
  %cmp225 = icmp ne i32 %i107, 29
  br i1 %cmp225, label %if.then227, label %if.end279

if.then227:                                       ; preds = %land.lhs.true224
  %i108 = load i32, i32* @wking_loc, align 4
  %add228 = add nsw i32 %i108, 11
  %idxprom229 = sext i32 %add228 to i64
  %arrayidx230 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom229
  %i109 = load i32, i32* %arrayidx230, align 4
  %cmp231 = icmp ne i32 %i109, 1
  br i1 %cmp231, label %if.then233, label %if.end235

if.then233:                                       ; preds = %if.then227
  %i110 = load i32, i32* %score, align 4
  %sub234 = sub nsw i32 %i110, 24
  store i32 %sub234, i32* %score, align 4
  br label %if.end235

if.end235:                                        ; preds = %if.then233, %if.then227
  %i111 = load i32, i32* @wking_loc, align 4
  %add236 = add nsw i32 %i111, 12
  %idxprom237 = sext i32 %add236 to i64
  %arrayidx238 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom237
  %i112 = load i32, i32* %arrayidx238, align 4
  %cmp239 = icmp ne i32 %i112, 1
  br i1 %cmp239, label %if.then241, label %if.end243

if.then241:                                       ; preds = %if.end235
  %i113 = load i32, i32* %score, align 4
  %sub242 = sub nsw i32 %i113, 35
  store i32 %sub242, i32* %score, align 4
  br label %if.end243

if.end243:                                        ; preds = %if.then241, %if.end235
  %i114 = load i32, i32* @wking_loc, align 4
  %add244 = add nsw i32 %i114, 13
  %idxprom245 = sext i32 %add244 to i64
  %arrayidx246 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom245
  %i115 = load i32, i32* %arrayidx246, align 4
  %cmp247 = icmp ne i32 %i115, 1
  br i1 %cmp247, label %if.then249, label %if.end251

if.then249:                                       ; preds = %if.end243
  %i116 = load i32, i32* %score, align 4
  %sub250 = sub nsw i32 %i116, 24
  store i32 %sub250, i32* %score, align 4
  br label %if.end251

if.end251:                                        ; preds = %if.then249, %if.end243
  %i117 = load i32, i32* @white_castled, align 4
  %tobool252 = icmp ne i32 %i117, 0
  br i1 %tobool252, label %if.then253, label %if.end278

if.then253:                                       ; preds = %if.end251
  %i118 = load i32, i32* @bking_loc, align 4
  %sub254 = sub nsw i32 %i118, 25
  %idxprom255 = sext i32 %sub254 to i64
  %arrayidx256 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom255
  %i119 = load i32, i32* %arrayidx256, align 4
  %cmp257 = icmp eq i32 %i119, 2
  br i1 %cmp257, label %if.then259, label %if.end261

if.then259:                                       ; preds = %if.then253
  %i120 = load i32, i32* %score, align 4
  %add260 = add nsw i32 %i120, 11
  store i32 %add260, i32* %score, align 4
  br label %if.end261

if.end261:                                        ; preds = %if.then259, %if.then253
  %i121 = load i32, i32* @bking_loc, align 4
  %sub262 = sub nsw i32 %i121, 24
  %idxprom263 = sext i32 %sub262 to i64
  %arrayidx264 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom263
  %i122 = load i32, i32* %arrayidx264, align 4
  %cmp265 = icmp eq i32 %i122, 2
  br i1 %cmp265, label %if.then267, label %if.end269

if.then267:                                       ; preds = %if.end261
  %i123 = load i32, i32* %score, align 4
  %add268 = add nsw i32 %i123, 15
  store i32 %add268, i32* %score, align 4
  br label %if.end269

if.end269:                                        ; preds = %if.then267, %if.end261
  %i124 = load i32, i32* @bking_loc, align 4
  %sub270 = sub nsw i32 %i124, 23
  %idxprom271 = sext i32 %sub270 to i64
  %arrayidx272 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom271
  %i125 = load i32, i32* %arrayidx272, align 4
  %cmp273 = icmp eq i32 %i125, 2
  br i1 %cmp273, label %if.then275, label %if.end277

if.then275:                                       ; preds = %if.end269
  %i126 = load i32, i32* %score, align 4
  %add276 = add nsw i32 %i126, 11
  store i32 %add276, i32* %score, align 4
  br label %if.end277

if.end277:                                        ; preds = %if.then275, %if.end269
  br label %if.end278

if.end278:                                        ; preds = %if.end277, %if.end251
  br label %if.end279

if.end279:                                        ; preds = %if.end278, %land.lhs.true224, %if.then221
  %i127 = load i32, i32* @bking_loc, align 4
  %cmp280 = icmp ne i32 %i127, 114
  br i1 %cmp280, label %land.lhs.true282, label %if.end337

land.lhs.true282:                                 ; preds = %if.end279
  %i128 = load i32, i32* @bking_loc, align 4
  %cmp283 = icmp ne i32 %i128, 113
  br i1 %cmp283, label %if.then285, label %if.end337

if.then285:                                       ; preds = %land.lhs.true282
  %i129 = load i32, i32* @bking_loc, align 4
  %sub286 = sub nsw i32 %i129, 13
  %idxprom287 = sext i32 %sub286 to i64
  %arrayidx288 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom287
  %i130 = load i32, i32* %arrayidx288, align 4
  %cmp289 = icmp ne i32 %i130, 2
  br i1 %cmp289, label %if.then291, label %if.end293

if.then291:                                       ; preds = %if.then285
  %i131 = load i32, i32* %score, align 4
  %add292 = add nsw i32 %i131, 24
  store i32 %add292, i32* %score, align 4
  br label %if.end293

if.end293:                                        ; preds = %if.then291, %if.then285
  %i132 = load i32, i32* @bking_loc, align 4
  %sub294 = sub nsw i32 %i132, 12
  %idxprom295 = sext i32 %sub294 to i64
  %arrayidx296 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom295
  %i133 = load i32, i32* %arrayidx296, align 4
  %cmp297 = icmp ne i32 %i133, 2
  br i1 %cmp297, label %if.then299, label %if.end301

if.then299:                                       ; preds = %if.end293
  %i134 = load i32, i32* %score, align 4
  %add300 = add nsw i32 %i134, 35
  store i32 %add300, i32* %score, align 4
  br label %if.end301

if.end301:                                        ; preds = %if.then299, %if.end293
  %i135 = load i32, i32* @bking_loc, align 4
  %sub302 = sub nsw i32 %i135, 11
  %idxprom303 = sext i32 %sub302 to i64
  %arrayidx304 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom303
  %i136 = load i32, i32* %arrayidx304, align 4
  %cmp305 = icmp ne i32 %i136, 2
  br i1 %cmp305, label %if.then307, label %if.end309

if.then307:                                       ; preds = %if.end301
  %i137 = load i32, i32* %score, align 4
  %add308 = add nsw i32 %i137, 24
  store i32 %add308, i32* %score, align 4
  br label %if.end309

if.end309:                                        ; preds = %if.then307, %if.end301
  %i138 = load i32, i32* @black_castled, align 4
  %tobool310 = icmp ne i32 %i138, 0
  br i1 %tobool310, label %if.then311, label %if.end336

if.then311:                                       ; preds = %if.end309
  %i139 = load i32, i32* @bking_loc, align 4
  %sub312 = sub nsw i32 %i139, 25
  %idxprom313 = sext i32 %sub312 to i64
  %arrayidx314 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom313
  %i140 = load i32, i32* %arrayidx314, align 4
  %cmp315 = icmp eq i32 %i140, 2
  br i1 %cmp315, label %if.then317, label %if.end319

if.then317:                                       ; preds = %if.then311
  %i141 = load i32, i32* %score, align 4
  %sub318 = sub nsw i32 %i141, 11
  store i32 %sub318, i32* %score, align 4
  br label %if.end319

if.end319:                                        ; preds = %if.then317, %if.then311
  %i142 = load i32, i32* @bking_loc, align 4
  %sub320 = sub nsw i32 %i142, 24
  %idxprom321 = sext i32 %sub320 to i64
  %arrayidx322 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom321
  %i143 = load i32, i32* %arrayidx322, align 4
  %cmp323 = icmp eq i32 %i143, 2
  br i1 %cmp323, label %if.then325, label %if.end327

if.then325:                                       ; preds = %if.end319
  %i144 = load i32, i32* %score, align 4
  %sub326 = sub nsw i32 %i144, 15
  store i32 %sub326, i32* %score, align 4
  br label %if.end327

if.end327:                                        ; preds = %if.then325, %if.end319
  %i145 = load i32, i32* @bking_loc, align 4
  %sub328 = sub nsw i32 %i145, 23
  %idxprom329 = sext i32 %sub328 to i64
  %arrayidx330 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom329
  %i146 = load i32, i32* %arrayidx330, align 4
  %cmp331 = icmp eq i32 %i146, 2
  br i1 %cmp331, label %if.then333, label %if.end335

if.then333:                                       ; preds = %if.end327
  %i147 = load i32, i32* %score, align 4
  %sub334 = sub nsw i32 %i147, 11
  store i32 %sub334, i32* %score, align 4
  br label %if.end335

if.end335:                                        ; preds = %if.then333, %if.end327
  br label %if.end336

if.end336:                                        ; preds = %if.end335, %if.end309
  br label %if.end337

if.end337:                                        ; preds = %if.end336, %land.lhs.true282, %if.end279
  %i148 = load i32, i32* getelementptr inbounds ([144 x i32], [144 x i32]* @moved, i64 0, i64 42), align 8
  %tobool338 = icmp ne i32 %i148, 0
  br i1 %tobool338, label %if.then339, label %if.end357

if.then339:                                       ; preds = %if.end337
  %i149 = load i32, i32* %score, align 4
  %add340 = add nsw i32 %i149, 30
  store i32 %add340, i32* %score, align 4
  %i150 = load i32, i32* getelementptr inbounds ([144 x i32], [144 x i32]* @moved, i64 0, i64 41), align 4
  %tobool341 = icmp ne i32 %i150, 0
  br i1 %tobool341, label %if.then342, label %if.end344

if.then342:                                       ; preds = %if.then339
  %i151 = load i32, i32* %score, align 4
  %add343 = add nsw i32 %i151, 25
  store i32 %add343, i32* %score, align 4
  br label %if.end344

if.end344:                                        ; preds = %if.then342, %if.then339
  %i152 = load i32, i32* getelementptr inbounds ([144 x i32], [144 x i32]* @moved, i64 0, i64 32), align 16
  %tobool345 = icmp ne i32 %i152, 0
  br i1 %tobool345, label %if.then346, label %if.end348

if.then346:                                       ; preds = %if.end344
  %i153 = load i32, i32* %score, align 4
  %add347 = add nsw i32 %i153, 20
  store i32 %add347, i32* %score, align 4
  br label %if.end348

if.end348:                                        ; preds = %if.then346, %if.end344
  %i154 = load i32, i32* getelementptr inbounds ([144 x i32], [144 x i32]* @moved, i64 0, i64 27), align 4
  %tobool349 = icmp ne i32 %i154, 0
  br i1 %tobool349, label %if.then350, label %if.end352

if.then350:                                       ; preds = %if.end348
  %i155 = load i32, i32* %score, align 4
  %add351 = add nsw i32 %i155, 15
  store i32 %add351, i32* %score, align 4
  br label %if.end352

if.end352:                                        ; preds = %if.then350, %if.end348
  %i156 = load i32, i32* getelementptr inbounds ([144 x i32], [144 x i32]* @moved, i64 0, i64 28), align 16
  %tobool353 = icmp ne i32 %i156, 0
  br i1 %tobool353, label %if.then354, label %if.end356

if.then354:                                       ; preds = %if.end352
  %i157 = load i32, i32* %score, align 4
  %add355 = add nsw i32 %i157, 10
  store i32 %add355, i32* %score, align 4
  br label %if.end356

if.end356:                                        ; preds = %if.then354, %if.end352
  br label %if.end357

if.end357:                                        ; preds = %if.end356, %if.end337
  %i158 = load i32, i32* getelementptr inbounds ([144 x i32], [144 x i32]* @moved, i64 0, i64 102), align 8
  %tobool358 = icmp ne i32 %i158, 0
  br i1 %tobool358, label %if.then359, label %if.end377

if.then359:                                       ; preds = %if.end357
  %i159 = load i32, i32* %score, align 4
  %sub360 = sub nsw i32 %i159, 30
  store i32 %sub360, i32* %score, align 4
  %i160 = load i32, i32* getelementptr inbounds ([144 x i32], [144 x i32]* @moved, i64 0, i64 101), align 4
  %tobool361 = icmp ne i32 %i160, 0
  br i1 %tobool361, label %if.then362, label %if.end364

if.then362:                                       ; preds = %if.then359
  %i161 = load i32, i32* %score, align 4
  %sub363 = sub nsw i32 %i161, 25
  store i32 %sub363, i32* %score, align 4
  br label %if.end364

if.end364:                                        ; preds = %if.then362, %if.then359
  %i162 = load i32, i32* getelementptr inbounds ([144 x i32], [144 x i32]* @moved, i64 0, i64 116), align 16
  %tobool365 = icmp ne i32 %i162, 0
  br i1 %tobool365, label %if.then366, label %if.end368

if.then366:                                       ; preds = %if.end364
  %i163 = load i32, i32* %score, align 4
  %sub367 = sub nsw i32 %i163, 20
  store i32 %sub367, i32* %score, align 4
  br label %if.end368

if.end368:                                        ; preds = %if.then366, %if.end364
  %i164 = load i32, i32* getelementptr inbounds ([144 x i32], [144 x i32]* @moved, i64 0, i64 111), align 4
  %tobool369 = icmp ne i32 %i164, 0
  br i1 %tobool369, label %if.then370, label %if.end372

if.then370:                                       ; preds = %if.end368
  %i165 = load i32, i32* %score, align 4
  %sub371 = sub nsw i32 %i165, 15
  store i32 %sub371, i32* %score, align 4
  br label %if.end372

if.end372:                                        ; preds = %if.then370, %if.end368
  %i166 = load i32, i32* getelementptr inbounds ([144 x i32], [144 x i32]* @moved, i64 0, i64 112), align 16
  %tobool373 = icmp ne i32 %i166, 0
  br i1 %tobool373, label %if.then374, label %if.end376

if.then374:                                       ; preds = %if.end372
  %i167 = load i32, i32* %score, align 4
  %sub375 = sub nsw i32 %i167, 10
  store i32 %sub375, i32* %score, align 4
  br label %if.end376

if.end376:                                        ; preds = %if.then374, %if.end372
  br label %if.end377

if.end377:                                        ; preds = %if.end376, %if.end357
  %i168 = load i32, i32* getelementptr inbounds ([144 x i32], [144 x i32]* @board, i64 0, i64 44), align 16
  %cmp378 = icmp ne i32 %i168, 1
  br i1 %cmp378, label %land.lhs.true380, label %if.end387

land.lhs.true380:                                 ; preds = %if.end377
  %i169 = load i32, i32* getelementptr inbounds ([144 x i32], [144 x i32]* @board, i64 0, i64 55), align 4
  %cmp381 = icmp eq i32 %i169, 2
  br i1 %cmp381, label %if.then385, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true380
  %i170 = load i32, i32* getelementptr inbounds ([144 x i32], [144 x i32]* @board, i64 0, i64 66), align 8
  %cmp383 = icmp eq i32 %i170, 2
  br i1 %cmp383, label %if.then385, label %if.end387

if.then385:                                       ; preds = %lor.lhs.false, %land.lhs.true380
  %i171 = load i32, i32* %score, align 4
  %sub386 = sub nsw i32 %i171, 30
  store i32 %sub386, i32* %score, align 4
  br label %if.end387

if.end387:                                        ; preds = %if.then385, %lor.lhs.false, %if.end377
  %i172 = load i32, i32* getelementptr inbounds ([144 x i32], [144 x i32]* @board, i64 0, i64 104), align 16
  %cmp388 = icmp ne i32 %i172, 2
  br i1 %cmp388, label %land.lhs.true390, label %if.end398

land.lhs.true390:                                 ; preds = %if.end387
  %i173 = load i32, i32* getelementptr inbounds ([144 x i32], [144 x i32]* @board, i64 0, i64 91), align 4
  %cmp391 = icmp eq i32 %i173, 1
  br i1 %cmp391, label %if.then396, label %lor.lhs.false393

lor.lhs.false393:                                 ; preds = %land.lhs.true390
  %i174 = load i32, i32* getelementptr inbounds ([144 x i32], [144 x i32]* @board, i64 0, i64 78), align 8
  %cmp394 = icmp eq i32 %i174, 1
  br i1 %cmp394, label %if.then396, label %if.end398

if.then396:                                       ; preds = %lor.lhs.false393, %land.lhs.true390
  %i175 = load i32, i32* %score, align 4
  %add397 = add nsw i32 %i175, 30
  store i32 %add397, i32* %score, align 4
  br label %if.end398

if.end398:                                        ; preds = %if.then396, %lor.lhs.false393, %if.end387
  %i176 = load i32, i32* @wking_loc, align 4
  %add399 = add nsw i32 %i176, 12
  %idxprom400 = sext i32 %add399 to i64
  %arrayidx401 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom400
  %i177 = load i32, i32* %arrayidx401, align 4
  %cmp402 = icmp eq i32 %i177, 2
  br i1 %cmp402, label %if.then410, label %lor.lhs.false404

lor.lhs.false404:                                 ; preds = %if.end398
  %i178 = load i32, i32* @wking_loc, align 4
  %add405 = add nsw i32 %i178, 12
  %idxprom406 = sext i32 %add405 to i64
  %arrayidx407 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom406
  %i179 = load i32, i32* %arrayidx407, align 4
  %cmp408 = icmp eq i32 %i179, 12
  br i1 %cmp408, label %if.then410, label %if.end424

if.then410:                                       ; preds = %lor.lhs.false404, %if.end398
  %i180 = load i32, i32* %score, align 4
  %sub411 = sub nsw i32 %i180, 35
  store i32 %sub411, i32* %score, align 4
  %i181 = load i32, i32* @wking_loc, align 4
  %add412 = add nsw i32 %i181, 12
  %idxprom413 = sext i32 %add412 to i64
  %arrayidx414 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom413
  %i182 = load i32, i32* %arrayidx414, align 4
  %cmp415 = icmp eq i32 %i182, 0
  br i1 %cmp415, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.then410
  br i1 false, label %if.then420, label %if.end423

cond.false:                                       ; preds = %if.then410
  %i183 = load i32, i32* @wking_loc, align 4
  %add417 = add nsw i32 %i183, 12
  %call418 = call i32 @is_attacked(i32 %add417, i32 0)
  %tobool419 = icmp ne i32 %call418, 0
  br i1 %tobool419, label %if.then420, label %if.end423

if.then420:                                       ; preds = %cond.false, %cond.true
  %shr421 = ashr i32 150, %bdev_dscale.3
  %i184 = load i32, i32* %score, align 4
  %sub422 = sub nsw i32 %i184, %shr421
  store i32 %sub422, i32* %score, align 4
  br label %if.end423

if.end423:                                        ; preds = %if.then420, %cond.false, %cond.true
  br label %if.end424

if.end424:                                        ; preds = %if.end423, %lor.lhs.false404
  %i185 = load i32, i32* @bking_loc, align 4
  %sub425 = sub nsw i32 %i185, 12
  %idxprom426 = sext i32 %sub425 to i64
  %arrayidx427 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom426
  %i186 = load i32, i32* %arrayidx427, align 4
  %cmp428 = icmp eq i32 %i186, 1
  br i1 %cmp428, label %if.then436, label %lor.lhs.false430

lor.lhs.false430:                                 ; preds = %if.end424
  %i187 = load i32, i32* @bking_loc, align 4
  %sub431 = sub nsw i32 %i187, 12
  %idxprom432 = sext i32 %sub431 to i64
  %arrayidx433 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom432
  %i188 = load i32, i32* %arrayidx433, align 4
  %cmp434 = icmp eq i32 %i188, 11
  br i1 %cmp434, label %if.then436, label %if.end452

if.then436:                                       ; preds = %lor.lhs.false430, %if.end424
  %i189 = load i32, i32* %score, align 4
  %add437 = add nsw i32 %i189, 35
  store i32 %add437, i32* %score, align 4
  %i190 = load i32, i32* @bking_loc, align 4
  %sub438 = sub nsw i32 %i190, 12
  %idxprom439 = sext i32 %sub438 to i64
  %arrayidx440 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom439
  %i191 = load i32, i32* %arrayidx440, align 4
  %cmp441 = icmp eq i32 %i191, 0
  br i1 %cmp441, label %cond.true443, label %cond.false444

cond.true443:                                     ; preds = %if.then436
  br i1 false, label %if.then448, label %if.end451

cond.false444:                                    ; preds = %if.then436
  %i192 = load i32, i32* @bking_loc, align 4
  %sub445 = sub nsw i32 %i192, 12
  %call446 = call i32 @is_attacked(i32 %sub445, i32 1)
  %tobool447 = icmp ne i32 %call446, 0
  br i1 %tobool447, label %if.then448, label %if.end451

if.then448:                                       ; preds = %cond.false444, %cond.true443
  %shr449 = ashr i32 150, %wdev_dscale.3
  %i193 = load i32, i32* %score, align 4
  %add450 = add nsw i32 %i193, %shr449
  store i32 %add450, i32* %score, align 4
  br label %if.end451

if.end451:                                        ; preds = %if.then448, %cond.false444, %cond.true443
  br label %if.end452

if.end452:                                        ; preds = %if.end451, %lor.lhs.false430
  %i194 = load i32, i32* getelementptr inbounds ([144 x i32], [144 x i32]* @board, i64 0, i64 43), align 4
  %cmp453 = icmp eq i32 %i194, 1
  br i1 %cmp453, label %land.lhs.true461, label %lor.lhs.false455

lor.lhs.false455:                                 ; preds = %if.end452
  %i195 = load i32, i32* getelementptr inbounds ([144 x i32], [144 x i32]* @board, i64 0, i64 54), align 8
  %cmp456 = icmp eq i32 %i195, 1
  br i1 %cmp456, label %land.lhs.true461, label %lor.lhs.false458

lor.lhs.false458:                                 ; preds = %lor.lhs.false455
  %i196 = load i32, i32* getelementptr inbounds ([144 x i32], [144 x i32]* @board, i64 0, i64 54), align 8
  %cmp459 = icmp eq i32 %i196, 2
  br i1 %cmp459, label %land.lhs.true461, label %if.end485

land.lhs.true461:                                 ; preds = %lor.lhs.false458, %lor.lhs.false455, %if.end452
  %i197 = load i32, i32* getelementptr inbounds ([144 x i32], [144 x i32]* @board, i64 0, i64 54), align 8
  %cmp462 = icmp eq i32 %i197, 0
  br i1 %cmp462, label %cond.true464, label %cond.false465

cond.true464:                                     ; preds = %land.lhs.true461
  br i1 false, label %if.then468, label %if.end485

cond.false465:                                    ; preds = %land.lhs.true461
  %call466 = call i32 @is_attacked(i32 54, i32 0)
  %tobool467 = icmp ne i32 %call466, 0
  br i1 %tobool467, label %if.then468, label %if.end485

if.then468:                                       ; preds = %cond.false465, %cond.true464
  %i198 = load i32, i32* getelementptr inbounds ([144 x i32], [144 x i32]* @board, i64 0, i64 43), align 4
  %cmp469 = icmp eq i32 %i198, 1
  br i1 %cmp469, label %if.then471, label %if.end473

if.then471:                                       ; preds = %if.then468
  %i199 = load i32, i32* %score, align 4
  %add472 = add nsw i32 %i199, 10
  store i32 %add472, i32* %score, align 4
  br label %if.end473

if.end473:                                        ; preds = %if.then471, %if.then468
  %i200 = load i32, i32* getelementptr inbounds ([144 x i32], [144 x i32]* @board, i64 0, i64 54), align 8
  %cmp474 = icmp eq i32 %i200, 1
  br i1 %cmp474, label %if.then476, label %if.else478

if.then476:                                       ; preds = %if.end473
  %i201 = load i32, i32* %score, align 4
  %add477 = add nsw i32 %i201, 20
  store i32 %add477, i32* %score, align 4
  br label %if.end484

if.else478:                                       ; preds = %if.end473
  %i202 = load i32, i32* getelementptr inbounds ([144 x i32], [144 x i32]* @board, i64 0, i64 54), align 8
  %cmp479 = icmp eq i32 %i202, 2
  br i1 %cmp479, label %if.then481, label %if.end483

if.then481:                                       ; preds = %if.else478
  %i203 = load i32, i32* %score, align 4
  %sub482 = sub nsw i32 %i203, 15
  store i32 %sub482, i32* %score, align 4
  br label %if.end483

if.end483:                                        ; preds = %if.then481, %if.else478
  br label %if.end484

if.end484:                                        ; preds = %if.end483, %if.then476
  br label %if.end485

if.end485:                                        ; preds = %if.end484, %cond.false465, %cond.true464, %lor.lhs.false458
  %i204 = load i32, i32* getelementptr inbounds ([144 x i32], [144 x i32]* @board, i64 0, i64 103), align 4
  %cmp486 = icmp eq i32 %i204, 2
  br i1 %cmp486, label %land.lhs.true494, label %lor.lhs.false488

lor.lhs.false488:                                 ; preds = %if.end485
  %i205 = load i32, i32* getelementptr inbounds ([144 x i32], [144 x i32]* @board, i64 0, i64 90), align 8
  %cmp489 = icmp eq i32 %i205, 2
  br i1 %cmp489, label %land.lhs.true494, label %lor.lhs.false491

lor.lhs.false491:                                 ; preds = %lor.lhs.false488
  %i206 = load i32, i32* getelementptr inbounds ([144 x i32], [144 x i32]* @board, i64 0, i64 90), align 8
  %cmp492 = icmp eq i32 %i206, 1
  br i1 %cmp492, label %land.lhs.true494, label %if.end518

land.lhs.true494:                                 ; preds = %lor.lhs.false491, %lor.lhs.false488, %if.end485
  %i207 = load i32, i32* getelementptr inbounds ([144 x i32], [144 x i32]* @board, i64 0, i64 90), align 8
  %cmp495 = icmp eq i32 %i207, 0
  br i1 %cmp495, label %cond.true497, label %cond.false498

cond.true497:                                     ; preds = %land.lhs.true494
  br i1 false, label %if.then501, label %if.end518

cond.false498:                                    ; preds = %land.lhs.true494
  %call499 = call i32 @is_attacked(i32 90, i32 1)
  %tobool500 = icmp ne i32 %call499, 0
  br i1 %tobool500, label %if.then501, label %if.end518

if.then501:                                       ; preds = %cond.false498, %cond.true497
  %i208 = load i32, i32* getelementptr inbounds ([144 x i32], [144 x i32]* @board, i64 0, i64 103), align 4
  %cmp502 = icmp eq i32 %i208, 2
  br i1 %cmp502, label %if.then504, label %if.end506

if.then504:                                       ; preds = %if.then501
  %i209 = load i32, i32* %score, align 4
  %sub505 = sub nsw i32 %i209, 10
  store i32 %sub505, i32* %score, align 4
  br label %if.end506

if.end506:                                        ; preds = %if.then504, %if.then501
  %i210 = load i32, i32* getelementptr inbounds ([144 x i32], [144 x i32]* @board, i64 0, i64 90), align 8
  %cmp507 = icmp eq i32 %i210, 2
  br i1 %cmp507, label %if.then509, label %if.else511

if.then509:                                       ; preds = %if.end506
  %i211 = load i32, i32* %score, align 4
  %sub510 = sub nsw i32 %i211, 20
  store i32 %sub510, i32* %score, align 4
  br label %if.end517

if.else511:                                       ; preds = %if.end506
  %i212 = load i32, i32* getelementptr inbounds ([144 x i32], [144 x i32]* @board, i64 0, i64 90), align 8
  %cmp512 = icmp eq i32 %i212, 1
  br i1 %cmp512, label %if.then514, label %if.end516

if.then514:                                       ; preds = %if.else511
  %i213 = load i32, i32* %score, align 4
  %add515 = add nsw i32 %i213, 15
  store i32 %add515, i32* %score, align 4
  br label %if.end516

if.end516:                                        ; preds = %if.then514, %if.else511
  br label %if.end517

if.end517:                                        ; preds = %if.end516, %if.then509
  br label %if.end518

if.end518:                                        ; preds = %if.end517, %cond.false498, %cond.true497, %lor.lhs.false491
  %i214 = load i32, i32* @bking_loc, align 4
  %idxprom519 = sext i32 %i214 to i64
  %arrayidx520 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom519
  %i215 = load i32, i32* %arrayidx520, align 4
  %cmp521 = icmp eq i32 %i215, 0
  br i1 %cmp521, label %cond.true523, label %cond.false524

cond.true523:                                     ; preds = %if.end518
  br i1 false, label %if.then527, label %if.else530

cond.false524:                                    ; preds = %if.end518
  %i216 = load i32, i32* @bking_loc, align 4
  %call525 = call i32 @is_attacked(i32 %i216, i32 1)
  %tobool526 = icmp ne i32 %call525, 0
  br i1 %tobool526, label %if.then527, label %if.else530

if.then527:                                       ; preds = %cond.false524, %cond.true523
  %shr528 = ashr i32 50, %wdev_dscale.3
  %i217 = load i32, i32* %score, align 4
  %add529 = add nsw i32 %i217, %shr528
  store i32 %add529, i32* %score, align 4
  br label %if.end543

if.else530:                                       ; preds = %cond.false524, %cond.true523
  %i218 = load i32, i32* @wking_loc, align 4
  %idxprom531 = sext i32 %i218 to i64
  %arrayidx532 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom531
  %i219 = load i32, i32* %arrayidx532, align 4
  %cmp533 = icmp eq i32 %i219, 0
  br i1 %cmp533, label %cond.true535, label %cond.false536

cond.true535:                                     ; preds = %if.else530
  br i1 false, label %if.then539, label %if.end542

cond.false536:                                    ; preds = %if.else530
  %i220 = load i32, i32* @wking_loc, align 4
  %call537 = call i32 @is_attacked(i32 %i220, i32 0)
  %tobool538 = icmp ne i32 %call537, 0
  br i1 %tobool538, label %if.then539, label %if.end542

if.then539:                                       ; preds = %cond.false536, %cond.true535
  %shr540 = ashr i32 50, %bdev_dscale.3
  %i221 = load i32, i32* %score, align 4
  %sub541 = sub nsw i32 %i221, %shr540
  store i32 %sub541, i32* %score, align 4
  br label %if.end542

if.end542:                                        ; preds = %if.then539, %cond.false536, %cond.true535
  br label %if.end543

if.end543:                                        ; preds = %if.end542, %if.then527
  %i222 = load i32, i32* getelementptr inbounds ([144 x i32], [144 x i32]* @board, i64 0, i64 44), align 16
  %cmp544 = icmp eq i32 %i222, 4
  br i1 %cmp544, label %if.then546, label %if.end567

if.then546:                                       ; preds = %if.end543
  %i223 = load i32, i32* %score, align 4
  %sub547 = sub nsw i32 %i223, 20
  store i32 %sub547, i32* %score, align 4
  %i224 = load i32, i32* getelementptr inbounds ([144 x i32], [144 x i32]* @board, i64 0, i64 44), align 16
  %cmp548 = icmp eq i32 %i224, 0
  br i1 %cmp548, label %cond.true550, label %cond.false551

cond.true550:                                     ; preds = %if.then546
  br i1 false, label %if.then554, label %if.end556

cond.false551:                                    ; preds = %if.then546
  %call552 = call i32 @is_attacked(i32 44, i32 0)
  %tobool553 = icmp ne i32 %call552, 0
  br i1 %tobool553, label %if.then554, label %if.end556

if.then554:                                       ; preds = %cond.false551, %cond.true550
  %i225 = load i32, i32* %score, align 4
  %sub555 = sub nsw i32 %i225, 40
  store i32 %sub555, i32* %score, align 4
  br label %if.end556

if.end556:                                        ; preds = %if.then554, %cond.false551, %cond.true550
  %i226 = load i32, i32* getelementptr inbounds ([144 x i32], [144 x i32]* @board, i64 0, i64 32), align 16
  %cmp557 = icmp eq i32 %i226, 7
  br i1 %cmp557, label %if.then559, label %if.end561

if.then559:                                       ; preds = %if.end556
  %i227 = load i32, i32* %score, align 4
  %add560 = add nsw i32 %i227, 10
  store i32 %add560, i32* %score, align 4
  br label %if.end561

if.end561:                                        ; preds = %if.then559, %if.end556
  %i228 = load i32, i32* getelementptr inbounds ([144 x i32], [144 x i32]* @board, i64 0, i64 31), align 4
  %cmp562 = icmp eq i32 %i228, 11
  br i1 %cmp562, label %if.then564, label %if.end566

if.then564:                                       ; preds = %if.end561
  %i229 = load i32, i32* %score, align 4
  %add565 = add nsw i32 %i229, 10
  store i32 %add565, i32* %score, align 4
  br label %if.end566

if.end566:                                        ; preds = %if.then564, %if.end561
  br label %if.end567

if.end567:                                        ; preds = %if.end566, %if.end543
  %i230 = load i32, i32* getelementptr inbounds ([144 x i32], [144 x i32]* @board, i64 0, i64 104), align 16
  %cmp568 = icmp eq i32 %i230, 3
  br i1 %cmp568, label %if.then570, label %if.end591

if.then570:                                       ; preds = %if.end567
  %i231 = load i32, i32* %score, align 4
  %add571 = add nsw i32 %i231, 20
  store i32 %add571, i32* %score, align 4
  %i232 = load i32, i32* getelementptr inbounds ([144 x i32], [144 x i32]* @board, i64 0, i64 104), align 16
  %cmp572 = icmp eq i32 %i232, 0
  br i1 %cmp572, label %cond.true574, label %cond.false575

cond.true574:                                     ; preds = %if.then570
  br i1 false, label %if.then578, label %if.end580

cond.false575:                                    ; preds = %if.then570
  %call576 = call i32 @is_attacked(i32 104, i32 1)
  %tobool577 = icmp ne i32 %call576, 0
  br i1 %tobool577, label %if.then578, label %if.end580

if.then578:                                       ; preds = %cond.false575, %cond.true574
  %i233 = load i32, i32* %score, align 4
  %add579 = add nsw i32 %i233, 40
  store i32 %add579, i32* %score, align 4
  br label %if.end580

if.end580:                                        ; preds = %if.then578, %cond.false575, %cond.true574
  %i234 = load i32, i32* getelementptr inbounds ([144 x i32], [144 x i32]* @board, i64 0, i64 116), align 16
  %cmp581 = icmp eq i32 %i234, 8
  br i1 %cmp581, label %if.then583, label %if.end585

if.then583:                                       ; preds = %if.end580
  %i235 = load i32, i32* %score, align 4
  %sub584 = sub nsw i32 %i235, 10
  store i32 %sub584, i32* %score, align 4
  br label %if.end585

if.end585:                                        ; preds = %if.then583, %if.end580
  %i236 = load i32, i32* getelementptr inbounds ([144 x i32], [144 x i32]* @board, i64 0, i64 115), align 4
  %cmp586 = icmp eq i32 %i236, 12
  br i1 %cmp586, label %if.then588, label %if.end590

if.then588:                                       ; preds = %if.end585
  %i237 = load i32, i32* %score, align 4
  %sub589 = sub nsw i32 %i237, 10
  store i32 %sub589, i32* %score, align 4
  br label %if.end590

if.end590:                                        ; preds = %if.then588, %if.end585
  br label %if.end591

if.end591:                                        ; preds = %if.end590, %if.end567
  %i238 = load i32, i32* getelementptr inbounds ([144 x i32], [144 x i32]* @board, i64 0, i64 57), align 4
  %cmp592 = icmp eq i32 %i238, 12
  br i1 %cmp592, label %land.lhs.true594, label %if.end615

land.lhs.true594:                                 ; preds = %if.end591
  %i239 = load i32, i32* getelementptr inbounds ([144 x i32], [144 x i32]* @board, i64 0, i64 44), align 16
  %cmp595 = icmp ne i32 %i239, 1
  br i1 %cmp595, label %if.then597, label %if.end615

if.then597:                                       ; preds = %land.lhs.true594
  %i240 = load i32, i32* %score, align 4
  %sub598 = sub nsw i32 %i240, 20
  store i32 %sub598, i32* %score, align 4
  %i241 = load i32, i32* getelementptr inbounds ([144 x i32], [144 x i32]* @board, i64 0, i64 44), align 16
  %cmp599 = icmp eq i32 %i241, 4
  br i1 %cmp599, label %if.then601, label %if.end614

if.then601:                                       ; preds = %if.then597
  %i242 = load i32, i32* %score, align 4
  %sub602 = sub nsw i32 %i242, 40
  store i32 %sub602, i32* %score, align 4
  %i243 = load i32, i32* getelementptr inbounds ([144 x i32], [144 x i32]* @board, i64 0, i64 31), align 4
  %cmp603 = icmp eq i32 %i243, 5
  br i1 %cmp603, label %if.then611, label %lor.lhs.false605

lor.lhs.false605:                                 ; preds = %if.then601
  %i244 = load i32, i32* getelementptr inbounds ([144 x i32], [144 x i32]* @board, i64 0, i64 32), align 16
  %cmp606 = icmp eq i32 %i244, 5
  br i1 %cmp606, label %if.then611, label %lor.lhs.false608

lor.lhs.false608:                                 ; preds = %lor.lhs.false605
  %i245 = load i32, i32* getelementptr inbounds ([144 x i32], [144 x i32]* @board, i64 0, i64 33), align 4
  %cmp609 = icmp eq i32 %i245, 5
  br i1 %cmp609, label %if.then611, label %if.end613

if.then611:                                       ; preds = %lor.lhs.false608, %lor.lhs.false605, %if.then601
  %i246 = load i32, i32* %score, align 4
  %sub612 = sub nsw i32 %i246, 80
  store i32 %sub612, i32* %score, align 4
  br label %if.end613

if.end613:                                        ; preds = %if.then611, %lor.lhs.false608
  br label %if.end614

if.end614:                                        ; preds = %if.end613, %if.then597
  br label %if.end615

if.end615:                                        ; preds = %if.end614, %land.lhs.true594, %if.end591
  %i247 = load i32, i32* getelementptr inbounds ([144 x i32], [144 x i32]* @board, i64 0, i64 93), align 4
  %cmp616 = icmp eq i32 %i247, 11
  br i1 %cmp616, label %land.lhs.true618, label %if.end639

land.lhs.true618:                                 ; preds = %if.end615
  %i248 = load i32, i32* getelementptr inbounds ([144 x i32], [144 x i32]* @board, i64 0, i64 104), align 16
  %cmp619 = icmp ne i32 %i248, 2
  br i1 %cmp619, label %if.then621, label %if.end639

if.then621:                                       ; preds = %land.lhs.true618
  %i249 = load i32, i32* %score, align 4
  %add622 = add nsw i32 %i249, 20
  store i32 %add622, i32* %score, align 4
  %i250 = load i32, i32* getelementptr inbounds ([144 x i32], [144 x i32]* @board, i64 0, i64 104), align 16
  %cmp623 = icmp eq i32 %i250, 3
  br i1 %cmp623, label %if.then625, label %if.end638

if.then625:                                       ; preds = %if.then621
  %i251 = load i32, i32* %score, align 4
  %add626 = add nsw i32 %i251, 40
  store i32 %add626, i32* %score, align 4
  %i252 = load i32, i32* getelementptr inbounds ([144 x i32], [144 x i32]* @board, i64 0, i64 115), align 4
  %cmp627 = icmp eq i32 %i252, 6
  br i1 %cmp627, label %if.then635, label %lor.lhs.false629

lor.lhs.false629:                                 ; preds = %if.then625
  %i253 = load i32, i32* getelementptr inbounds ([144 x i32], [144 x i32]* @board, i64 0, i64 116), align 16
  %cmp630 = icmp eq i32 %i253, 6
  br i1 %cmp630, label %if.then635, label %lor.lhs.false632

lor.lhs.false632:                                 ; preds = %lor.lhs.false629
  %i254 = load i32, i32* getelementptr inbounds ([144 x i32], [144 x i32]* @board, i64 0, i64 117), align 4
  %cmp633 = icmp eq i32 %i254, 6
  br i1 %cmp633, label %if.then635, label %if.end637

if.then635:                                       ; preds = %lor.lhs.false632, %lor.lhs.false629, %if.then625
  %i255 = load i32, i32* %score, align 4
  %add636 = add nsw i32 %i255, 80
  store i32 %add636, i32* %score, align 4
  br label %if.end637

if.end637:                                        ; preds = %if.then635, %lor.lhs.false632
  br label %if.end638

if.end638:                                        ; preds = %if.end637, %if.then621
  br label %if.end639

if.end639:                                        ; preds = %if.end638, %land.lhs.true618, %if.end615
  br label %if.end640

if.end640:                                        ; preds = %if.end639, %if.end219
  %i256 = load i32, i32* @cfg_attackeval, align 4
  %tobool641 = icmp ne i32 %i256, 0
  br i1 %tobool641, label %if.then642, label %if.end864

if.then642:                                       ; preds = %if.end640
  %i257 = load i32, i32* @wking_loc, align 4
  %sub643 = sub nsw i32 %i257, 13
  %idxprom644 = sext i32 %sub643 to i64
  %arrayidx645 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom644
  %i258 = load i32, i32* %arrayidx645, align 4
  %cmp646 = icmp eq i32 %i258, 0
  br i1 %cmp646, label %cond.true648, label %cond.false649

cond.true648:                                     ; preds = %if.then642
  br label %cond.end

cond.false649:                                    ; preds = %if.then642
  %i259 = load i32, i32* @wking_loc, align 4
  %sub650 = sub nsw i32 %i259, 13
  %call651 = call i32 @nk_attacked(i32 %sub650, i32 0)
  br label %cond.end

cond.end:                                         ; preds = %cond.false649, %cond.true648
  %cond = phi i32 [ 0, %cond.true648 ], [ %call651, %cond.false649 ]
  %add652 = add i32 0, %cond
  %i260 = load i32, i32* @wking_loc, align 4
  %sub653 = sub nsw i32 %i260, 12
  %idxprom654 = sext i32 %sub653 to i64
  %arrayidx655 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom654
  %i261 = load i32, i32* %arrayidx655, align 4
  %cmp656 = icmp eq i32 %i261, 0
  br i1 %cmp656, label %cond.true658, label %cond.false659

cond.true658:                                     ; preds = %cond.end
  br label %cond.end662

cond.false659:                                    ; preds = %cond.end
  %i262 = load i32, i32* @wking_loc, align 4
  %sub660 = sub nsw i32 %i262, 12
  %call661 = call i32 @nk_attacked(i32 %sub660, i32 0)
  br label %cond.end662

cond.end662:                                      ; preds = %cond.false659, %cond.true658
  %cond663 = phi i32 [ 0, %cond.true658 ], [ %call661, %cond.false659 ]
  %add664 = add i32 %add652, %cond663
  %i263 = load i32, i32* @wking_loc, align 4
  %sub665 = sub nsw i32 %i263, 11
  %idxprom666 = sext i32 %sub665 to i64
  %arrayidx667 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom666
  %i264 = load i32, i32* %arrayidx667, align 4
  %cmp668 = icmp eq i32 %i264, 0
  br i1 %cmp668, label %cond.true670, label %cond.false671

cond.true670:                                     ; preds = %cond.end662
  br label %cond.end674

cond.false671:                                    ; preds = %cond.end662
  %i265 = load i32, i32* @wking_loc, align 4
  %sub672 = sub nsw i32 %i265, 11
  %call673 = call i32 @nk_attacked(i32 %sub672, i32 0)
  br label %cond.end674

cond.end674:                                      ; preds = %cond.false671, %cond.true670
  %cond675 = phi i32 [ 0, %cond.true670 ], [ %call673, %cond.false671 ]
  %add676 = add i32 %add664, %cond675
  %i266 = load i32, i32* @wking_loc, align 4
  %sub677 = sub nsw i32 %i266, 1
  %idxprom678 = sext i32 %sub677 to i64
  %arrayidx679 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom678
  %i267 = load i32, i32* %arrayidx679, align 4
  %cmp680 = icmp eq i32 %i267, 0
  br i1 %cmp680, label %cond.true682, label %cond.false683

cond.true682:                                     ; preds = %cond.end674
  br label %cond.end686

cond.false683:                                    ; preds = %cond.end674
  %i268 = load i32, i32* @wking_loc, align 4
  %sub684 = sub nsw i32 %i268, 1
  %call685 = call i32 @nk_attacked(i32 %sub684, i32 0)
  br label %cond.end686

cond.end686:                                      ; preds = %cond.false683, %cond.true682
  %cond687 = phi i32 [ 0, %cond.true682 ], [ %call685, %cond.false683 ]
  %add688 = add i32 %add676, %cond687
  %i269 = load i32, i32* @wking_loc, align 4
  %add689 = add nsw i32 %i269, 1
  %idxprom690 = sext i32 %add689 to i64
  %arrayidx691 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom690
  %i270 = load i32, i32* %arrayidx691, align 4
  %cmp692 = icmp eq i32 %i270, 0
  br i1 %cmp692, label %cond.true694, label %cond.false695

cond.true694:                                     ; preds = %cond.end686
  br label %cond.end698

cond.false695:                                    ; preds = %cond.end686
  %i271 = load i32, i32* @wking_loc, align 4
  %add696 = add nsw i32 %i271, 1
  %call697 = call i32 @nk_attacked(i32 %add696, i32 0)
  br label %cond.end698

cond.end698:                                      ; preds = %cond.false695, %cond.true694
  %cond699 = phi i32 [ 0, %cond.true694 ], [ %call697, %cond.false695 ]
  %add700 = add i32 %add688, %cond699
  %i272 = load i32, i32* @wking_loc, align 4
  %add701 = add nsw i32 %i272, 11
  %idxprom702 = sext i32 %add701 to i64
  %arrayidx703 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom702
  %i273 = load i32, i32* %arrayidx703, align 4
  %cmp704 = icmp eq i32 %i273, 0
  br i1 %cmp704, label %cond.true706, label %cond.false707

cond.true706:                                     ; preds = %cond.end698
  br label %cond.end710

cond.false707:                                    ; preds = %cond.end698
  %i274 = load i32, i32* @wking_loc, align 4
  %add708 = add nsw i32 %i274, 11
  %call709 = call i32 @nk_attacked(i32 %add708, i32 0)
  br label %cond.end710

cond.end710:                                      ; preds = %cond.false707, %cond.true706
  %cond711 = phi i32 [ 0, %cond.true706 ], [ %call709, %cond.false707 ]
  %add712 = add i32 %add700, %cond711
  %i275 = load i32, i32* @wking_loc, align 4
  %add713 = add nsw i32 %i275, 12
  %idxprom714 = sext i32 %add713 to i64
  %arrayidx715 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom714
  %i276 = load i32, i32* %arrayidx715, align 4
  %cmp716 = icmp eq i32 %i276, 0
  br i1 %cmp716, label %cond.true718, label %cond.false719

cond.true718:                                     ; preds = %cond.end710
  br label %cond.end722

cond.false719:                                    ; preds = %cond.end710
  %i277 = load i32, i32* @wking_loc, align 4
  %add720 = add nsw i32 %i277, 12
  %call721 = call i32 @nk_attacked(i32 %add720, i32 0)
  br label %cond.end722

cond.end722:                                      ; preds = %cond.false719, %cond.true718
  %cond723 = phi i32 [ 0, %cond.true718 ], [ %call721, %cond.false719 ]
  %add724 = add i32 %add712, %cond723
  %i278 = load i32, i32* @wking_loc, align 4
  %add725 = add nsw i32 %i278, 13
  %idxprom726 = sext i32 %add725 to i64
  %arrayidx727 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom726
  %i279 = load i32, i32* %arrayidx727, align 4
  %cmp728 = icmp eq i32 %i279, 0
  br i1 %cmp728, label %cond.true730, label %cond.false731

cond.true730:                                     ; preds = %cond.end722
  br label %cond.end734

cond.false731:                                    ; preds = %cond.end722
  %i280 = load i32, i32* @wking_loc, align 4
  %add732 = add nsw i32 %i280, 13
  %call733 = call i32 @nk_attacked(i32 %add732, i32 0)
  br label %cond.end734

cond.end734:                                      ; preds = %cond.false731, %cond.true730
  %cond735 = phi i32 [ 0, %cond.true730 ], [ %call733, %cond.false731 ]
  %add736 = add i32 %add724, %cond735
  %i281 = load i32, i32* @black_hand_eval, align 4
  %sub737 = sub nsw i32 0, %i281
  %div = sdiv i32 %sub737, 100
  %cmp738 = icmp sgt i32 %div, 14
  br i1 %cmp738, label %if.then740, label %if.else741

if.then740:                                       ; preds = %cond.end734
  br label %if.end746

if.else741:                                       ; preds = %cond.end734
  %cmp742 = icmp slt i32 %div, 0
  br i1 %cmp742, label %if.then744, label %if.end745

if.then744:                                       ; preds = %if.else741
  br label %if.end745

if.end745:                                        ; preds = %if.then744, %if.else741
  %norm_black_hand_eval.0 = phi i32 [ 0, %if.then744 ], [ %div, %if.else741 ]
  br label %if.end746

if.end746:                                        ; preds = %if.end745, %if.then740
  %norm_black_hand_eval.1 = phi i32 [ 14, %if.then740 ], [ %norm_black_hand_eval.0, %if.end745 ]
  %idxprom747 = sext i32 %norm_black_hand_eval.1 to i64
  %arrayidx748 = getelementptr inbounds [15 x [9 x i32]], [15 x [9 x i32]]* @ksafety_scaled, i64 0, i64 %idxprom747
  %idxprom749 = sext i32 %add736 to i64
  %arrayidx750 = getelementptr inbounds [9 x i32], [9 x i32]* %arrayidx748, i64 0, i64 %idxprom749
  %i282 = load i32, i32* %arrayidx750, align 4
  %sub751 = sub nsw i32 0, %i282
  %i283 = load i32, i32* @bking_loc, align 4
  %sub752 = sub nsw i32 %i283, 13
  %idxprom753 = sext i32 %sub752 to i64
  %arrayidx754 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom753
  %i284 = load i32, i32* %arrayidx754, align 4
  %cmp755 = icmp eq i32 %i284, 0
  br i1 %cmp755, label %cond.true757, label %cond.false758

cond.true757:                                     ; preds = %if.end746
  br label %cond.end761

cond.false758:                                    ; preds = %if.end746
  %i285 = load i32, i32* @bking_loc, align 4
  %sub759 = sub nsw i32 %i285, 13
  %call760 = call i32 @nk_attacked(i32 %sub759, i32 1)
  br label %cond.end761

cond.end761:                                      ; preds = %cond.false758, %cond.true757
  %cond762 = phi i32 [ 0, %cond.true757 ], [ %call760, %cond.false758 ]
  %add763 = add i32 0, %cond762
  %i286 = load i32, i32* @bking_loc, align 4
  %sub764 = sub nsw i32 %i286, 12
  %idxprom765 = sext i32 %sub764 to i64
  %arrayidx766 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom765
  %i287 = load i32, i32* %arrayidx766, align 4
  %cmp767 = icmp eq i32 %i287, 0
  br i1 %cmp767, label %cond.true769, label %cond.false770

cond.true769:                                     ; preds = %cond.end761
  br label %cond.end773

cond.false770:                                    ; preds = %cond.end761
  %i288 = load i32, i32* @bking_loc, align 4
  %sub771 = sub nsw i32 %i288, 12
  %call772 = call i32 @nk_attacked(i32 %sub771, i32 1)
  br label %cond.end773

cond.end773:                                      ; preds = %cond.false770, %cond.true769
  %cond774 = phi i32 [ 0, %cond.true769 ], [ %call772, %cond.false770 ]
  %add775 = add i32 %add763, %cond774
  %i289 = load i32, i32* @bking_loc, align 4
  %sub776 = sub nsw i32 %i289, 11
  %idxprom777 = sext i32 %sub776 to i64
  %arrayidx778 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom777
  %i290 = load i32, i32* %arrayidx778, align 4
  %cmp779 = icmp eq i32 %i290, 0
  br i1 %cmp779, label %cond.true781, label %cond.false782

cond.true781:                                     ; preds = %cond.end773
  br label %cond.end785

cond.false782:                                    ; preds = %cond.end773
  %i291 = load i32, i32* @bking_loc, align 4
  %sub783 = sub nsw i32 %i291, 11
  %call784 = call i32 @nk_attacked(i32 %sub783, i32 1)
  br label %cond.end785

cond.end785:                                      ; preds = %cond.false782, %cond.true781
  %cond786 = phi i32 [ 0, %cond.true781 ], [ %call784, %cond.false782 ]
  %add787 = add i32 %add775, %cond786
  %i292 = load i32, i32* @bking_loc, align 4
  %sub788 = sub nsw i32 %i292, 1
  %idxprom789 = sext i32 %sub788 to i64
  %arrayidx790 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom789
  %i293 = load i32, i32* %arrayidx790, align 4
  %cmp791 = icmp eq i32 %i293, 0
  br i1 %cmp791, label %cond.true793, label %cond.false794

cond.true793:                                     ; preds = %cond.end785
  br label %cond.end797

cond.false794:                                    ; preds = %cond.end785
  %i294 = load i32, i32* @bking_loc, align 4
  %sub795 = sub nsw i32 %i294, 1
  %call796 = call i32 @nk_attacked(i32 %sub795, i32 1)
  br label %cond.end797

cond.end797:                                      ; preds = %cond.false794, %cond.true793
  %cond798 = phi i32 [ 0, %cond.true793 ], [ %call796, %cond.false794 ]
  %add799 = add i32 %add787, %cond798
  %i295 = load i32, i32* @bking_loc, align 4
  %add800 = add nsw i32 %i295, 1
  %idxprom801 = sext i32 %add800 to i64
  %arrayidx802 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom801
  %i296 = load i32, i32* %arrayidx802, align 4
  %cmp803 = icmp eq i32 %i296, 0
  br i1 %cmp803, label %cond.true805, label %cond.false806

cond.true805:                                     ; preds = %cond.end797
  br label %cond.end809

cond.false806:                                    ; preds = %cond.end797
  %i297 = load i32, i32* @bking_loc, align 4
  %add807 = add nsw i32 %i297, 1
  %call808 = call i32 @nk_attacked(i32 %add807, i32 1)
  br label %cond.end809

cond.end809:                                      ; preds = %cond.false806, %cond.true805
  %cond810 = phi i32 [ 0, %cond.true805 ], [ %call808, %cond.false806 ]
  %add811 = add i32 %add799, %cond810
  %i298 = load i32, i32* @bking_loc, align 4
  %add812 = add nsw i32 %i298, 11
  %idxprom813 = sext i32 %add812 to i64
  %arrayidx814 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom813
  %i299 = load i32, i32* %arrayidx814, align 4
  %cmp815 = icmp eq i32 %i299, 0
  br i1 %cmp815, label %cond.true817, label %cond.false818

cond.true817:                                     ; preds = %cond.end809
  br label %cond.end821

cond.false818:                                    ; preds = %cond.end809
  %i300 = load i32, i32* @bking_loc, align 4
  %add819 = add nsw i32 %i300, 11
  %call820 = call i32 @nk_attacked(i32 %add819, i32 1)
  br label %cond.end821

cond.end821:                                      ; preds = %cond.false818, %cond.true817
  %cond822 = phi i32 [ 0, %cond.true817 ], [ %call820, %cond.false818 ]
  %add823 = add i32 %add811, %cond822
  %i301 = load i32, i32* @bking_loc, align 4
  %add824 = add nsw i32 %i301, 12
  %idxprom825 = sext i32 %add824 to i64
  %arrayidx826 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom825
  %i302 = load i32, i32* %arrayidx826, align 4
  %cmp827 = icmp eq i32 %i302, 0
  br i1 %cmp827, label %cond.true829, label %cond.false830

cond.true829:                                     ; preds = %cond.end821
  br label %cond.end833

cond.false830:                                    ; preds = %cond.end821
  %i303 = load i32, i32* @bking_loc, align 4
  %add831 = add nsw i32 %i303, 12
  %call832 = call i32 @nk_attacked(i32 %add831, i32 1)
  br label %cond.end833

cond.end833:                                      ; preds = %cond.false830, %cond.true829
  %cond834 = phi i32 [ 0, %cond.true829 ], [ %call832, %cond.false830 ]
  %add835 = add i32 %add823, %cond834
  %i304 = load i32, i32* @bking_loc, align 4
  %add836 = add nsw i32 %i304, 13
  %idxprom837 = sext i32 %add836 to i64
  %arrayidx838 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom837
  %i305 = load i32, i32* %arrayidx838, align 4
  %cmp839 = icmp eq i32 %i305, 0
  br i1 %cmp839, label %cond.true841, label %cond.false842

cond.true841:                                     ; preds = %cond.end833
  br label %cond.end845

cond.false842:                                    ; preds = %cond.end833
  %i306 = load i32, i32* @bking_loc, align 4
  %add843 = add nsw i32 %i306, 13
  %call844 = call i32 @nk_attacked(i32 %add843, i32 1)
  br label %cond.end845

cond.end845:                                      ; preds = %cond.false842, %cond.true841
  %cond846 = phi i32 [ 0, %cond.true841 ], [ %call844, %cond.false842 ]
  %add847 = add i32 %add835, %cond846
  %i307 = load i32, i32* @white_hand_eval, align 4
  %div848 = sdiv i32 %i307, 100
  %cmp849 = icmp sgt i32 %div848, 14
  br i1 %cmp849, label %if.then851, label %if.else852

if.then851:                                       ; preds = %cond.end845
  br label %if.end857

if.else852:                                       ; preds = %cond.end845
  %cmp853 = icmp slt i32 %div848, 0
  br i1 %cmp853, label %if.then855, label %if.end856

if.then855:                                       ; preds = %if.else852
  br label %if.end856

if.end856:                                        ; preds = %if.then855, %if.else852
  %norm_white_hand_eval.0 = phi i32 [ 0, %if.then855 ], [ %div848, %if.else852 ]
  br label %if.end857

if.end857:                                        ; preds = %if.end856, %if.then851
  %norm_white_hand_eval.1 = phi i32 [ 14, %if.then851 ], [ %norm_white_hand_eval.0, %if.end856 ]
  %idxprom858 = sext i32 %norm_white_hand_eval.1 to i64
  %arrayidx859 = getelementptr inbounds [15 x [9 x i32]], [15 x [9 x i32]]* @ksafety_scaled, i64 0, i64 %idxprom858
  %idxprom860 = sext i32 %add847 to i64
  %arrayidx861 = getelementptr inbounds [9 x i32], [9 x i32]* %arrayidx859, i64 0, i64 %idxprom860
  %i308 = load i32, i32* %arrayidx861, align 4
  %add862 = add nsw i32 %sub751, %i308
  %i309 = load i32, i32* %score, align 4
  %add863 = add nsw i32 %i309, %add862
  store i32 %add863, i32* %score, align 4
  br label %if.end864

if.end864:                                        ; preds = %if.end857, %if.end640
  %i310 = load i32, i32* @white_hand_eval, align 4
  %i311 = load i32, i32* @black_hand_eval, align 4
  %add865 = add nsw i32 %i310, %i311
  %i312 = load i32, i32* %score, align 4
  %add866 = add nsw i32 %i312, %add865
  store i32 %add866, i32* %score, align 4
  %i313 = load i32, i32* %score, align 4
  call void @storeECache(i32 %i313)
  %i314 = load i32, i32* @white_to_move, align 4
  %cmp867 = icmp eq i32 %i314, 1
  br i1 %cmp867, label %if.then869, label %if.else870

if.then869:                                       ; preds = %if.end864
  %i315 = load i32, i32* %score, align 4
  br label %return

if.else870:                                       ; preds = %if.end864
  %i316 = load i32, i32* %score, align 4
  %sub871 = sub nsw i32 0, %i316
  br label %return

return:                                           ; preds = %if.else870, %if.then869, %if.end13, %if.then12, %if.then6, %if.then2, %if.then
  %retval.0 = phi i32 [ %call, %if.then ], [ %call3, %if.then2 ], [ %call7, %if.then6 ], [ %i5, %if.then12 ], [ %sub, %if.end13 ], [ %i315, %if.then869 ], [ %sub871, %if.else870 ]
  ret i32 %retval.0
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @losers_eval() #0 {
entry:
  %pawns = alloca [2 x [11 x i32]], align 16
  %white_back_pawn = alloca [11 x i32], align 16
  %black_back_pawn = alloca [11 x i32], align 16
  %score = alloca i32, align 4
  %in_cache = alloca i32, align 4
  store i32 0, i32* %score, align 4
  store i32 0, i32* %in_cache, align 4
  call void @checkECache(i32* %score, i32* %in_cache)
  %i = load i32, i32* %in_cache, align 4
  %tobool = icmp ne i32 %i, 0
  br i1 %tobool, label %if.then, label %if.end2

if.then:                                          ; preds = %entry
  %i1 = load i32, i32* @white_to_move, align 4
  %cmp = icmp eq i32 %i1, 1
  br i1 %cmp, label %if.then1, label %if.end

if.then1:                                         ; preds = %if.then
  %i2 = load i32, i32* %score, align 4
  br label %return

if.end:                                           ; preds = %if.then
  %i3 = load i32, i32* %score, align 4
  %sub = sub nsw i32 0, %i3
  br label %return

if.end2:                                          ; preds = %entry
  %arraydecay = getelementptr inbounds [2 x [11 x i32]], [2 x [11 x i32]]* %pawns, i64 0, i64 0
  %i4 = bitcast [11 x i32]* %arraydecay to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %i4, i8 0, i64 88, i1 false)
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end2
  %i.0 = phi i32 [ 0, %if.end2 ], [ %inc, %for.inc ]
  %cmp3 = icmp slt i32 %i.0, 11
  br i1 %cmp3, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %idxprom = sext i32 %i.0 to i64
  %arrayidx = getelementptr inbounds [11 x i32], [11 x i32]* %white_back_pawn, i64 0, i64 %idxprom
  store i32 7, i32* %arrayidx, align 4
  %idxprom4 = sext i32 %i.0 to i64
  %arrayidx5 = getelementptr inbounds [11 x i32], [11 x i32]* %black_back_pawn, i64 0, i64 %idxprom4
  store i32 2, i32* %arrayidx5, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %inc = add nsw i32 %i.0, 1
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %for.cond6

for.cond6:                                        ; preds = %for.inc52, %for.end
  %j.0 = phi i32 [ 1, %for.end ], [ %inc53, %for.inc52 ]
  %a.0 = phi i32 [ 1, %for.end ], [ %a.1, %for.inc52 ]
  %pawn_file.0 = phi i32 [ 0, %for.end ], [ %pawn_file.1, %for.inc52 ]
  %srank.0 = phi i32 [ 0, %for.end ], [ %srank.1, %for.inc52 ]
  %i5 = load i32, i32* @piece_count, align 4
  %cmp7 = icmp sle i32 %a.0, %i5
  br i1 %cmp7, label %for.body8, label %for.end54

for.body8:                                        ; preds = %for.cond6
  %idxprom9 = sext i32 %j.0 to i64
  %arrayidx10 = getelementptr inbounds [62 x i32], [62 x i32]* @pieces, i64 0, i64 %idxprom9
  %i6 = load i32, i32* %arrayidx10, align 4
  %tobool11 = icmp ne i32 %i6, 0
  br i1 %tobool11, label %if.else, label %if.then12

if.then12:                                        ; preds = %for.body8
  br label %for.inc52

if.else:                                          ; preds = %for.body8
  %inc13 = add nsw i32 %a.0, 1
  br label %if.end14

if.end14:                                         ; preds = %if.else
  %idxprom15 = sext i32 %i6 to i64
  %arrayidx16 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xfile to [144 x i32]*), i64 0, i64 %idxprom15
  %i7 = load i32, i32* %arrayidx16, align 4
  %add = add nsw i32 %i7, 1
  %idxprom17 = sext i32 %i6 to i64
  %arrayidx18 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xrank to [144 x i32]*), i64 0, i64 %idxprom17
  %i8 = load i32, i32* %arrayidx18, align 4
  %idxprom19 = sext i32 %i6 to i64
  %arrayidx20 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom19
  %i9 = load i32, i32* %arrayidx20, align 4
  %cmp21 = icmp eq i32 %i9, 1
  br i1 %cmp21, label %if.then22, label %if.else34

if.then22:                                        ; preds = %if.end14
  %arrayidx23 = getelementptr inbounds [2 x [11 x i32]], [2 x [11 x i32]]* %pawns, i64 0, i64 1
  %idxprom24 = sext i32 %add to i64
  %arrayidx25 = getelementptr inbounds [11 x i32], [11 x i32]* %arrayidx23, i64 0, i64 %idxprom24
  %i10 = load i32, i32* %arrayidx25, align 4
  %inc26 = add nsw i32 %i10, 1
  store i32 %inc26, i32* %arrayidx25, align 4
  %idxprom27 = sext i32 %add to i64
  %arrayidx28 = getelementptr inbounds [11 x i32], [11 x i32]* %white_back_pawn, i64 0, i64 %idxprom27
  %i11 = load i32, i32* %arrayidx28, align 4
  %cmp29 = icmp slt i32 %i8, %i11
  br i1 %cmp29, label %if.then30, label %if.end33

if.then30:                                        ; preds = %if.then22
  %idxprom31 = sext i32 %add to i64
  %arrayidx32 = getelementptr inbounds [11 x i32], [11 x i32]* %white_back_pawn, i64 0, i64 %idxprom31
  store i32 %i8, i32* %arrayidx32, align 4
  br label %if.end33

if.end33:                                         ; preds = %if.then30, %if.then22
  br label %if.end51

if.else34:                                        ; preds = %if.end14
  %idxprom35 = sext i32 %i6 to i64
  %arrayidx36 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom35
  %i12 = load i32, i32* %arrayidx36, align 4
  %cmp37 = icmp eq i32 %i12, 2
  br i1 %cmp37, label %if.then38, label %if.end50

if.then38:                                        ; preds = %if.else34
  %arrayidx39 = getelementptr inbounds [2 x [11 x i32]], [2 x [11 x i32]]* %pawns, i64 0, i64 0
  %idxprom40 = sext i32 %add to i64
  %arrayidx41 = getelementptr inbounds [11 x i32], [11 x i32]* %arrayidx39, i64 0, i64 %idxprom40
  %i13 = load i32, i32* %arrayidx41, align 4
  %inc42 = add nsw i32 %i13, 1
  store i32 %inc42, i32* %arrayidx41, align 4
  %idxprom43 = sext i32 %add to i64
  %arrayidx44 = getelementptr inbounds [11 x i32], [11 x i32]* %black_back_pawn, i64 0, i64 %idxprom43
  %i14 = load i32, i32* %arrayidx44, align 4
  %cmp45 = icmp sgt i32 %i8, %i14
  br i1 %cmp45, label %if.then46, label %if.end49

if.then46:                                        ; preds = %if.then38
  %idxprom47 = sext i32 %add to i64
  %arrayidx48 = getelementptr inbounds [11 x i32], [11 x i32]* %black_back_pawn, i64 0, i64 %idxprom47
  store i32 %i8, i32* %arrayidx48, align 4
  br label %if.end49

if.end49:                                         ; preds = %if.then46, %if.then38
  br label %if.end50

if.end50:                                         ; preds = %if.end49, %if.else34
  br label %if.end51

if.end51:                                         ; preds = %if.end50, %if.end33
  br label %for.inc52

for.inc52:                                        ; preds = %if.end51, %if.then12
  %a.1 = phi i32 [ %inc13, %if.end51 ], [ %a.0, %if.then12 ]
  %pawn_file.1 = phi i32 [ %add, %if.end51 ], [ %pawn_file.0, %if.then12 ]
  %srank.1 = phi i32 [ %i8, %if.end51 ], [ %srank.0, %if.then12 ]
  %inc53 = add nsw i32 %j.0, 1
  br label %for.cond6

for.end54:                                        ; preds = %for.cond6
  br label %for.cond55

for.cond55:                                       ; preds = %for.inc389, %for.end54
  %bpawns.0 = phi i32 [ 0, %for.end54 ], [ %bpawns.2, %for.inc389 ]
  %wpawns.0 = phi i32 [ 0, %for.end54 ], [ %wpawns.2, %for.inc389 ]
  %bpassp.0 = phi i32 [ 0, %for.end54 ], [ %bpassp.3, %for.inc389 ]
  %wpassp.0 = phi i32 [ 0, %for.end54 ], [ %wpassp.3, %for.inc389 ]
  %bks.0 = phi i32 [ 0, %for.end54 ], [ %bks.2, %for.inc389 ]
  %wks.0 = phi i32 [ 0, %for.end54 ], [ %wks.2, %for.inc389 ]
  %bp.0 = phi i32 [ 0, %for.end54 ], [ %bp.2, %for.inc389 ]
  %wp.0 = phi i32 [ 0, %for.end54 ], [ %wp.2, %for.inc389 ]
  %j.1 = phi i32 [ 1, %for.end54 ], [ %inc390, %for.inc389 ]
  %a.2 = phi i32 [ 1, %for.end54 ], [ %a.3, %for.inc389 ]
  %i15 = load i32, i32* @piece_count, align 4
  %cmp56 = icmp sle i32 %a.2, %i15
  br i1 %cmp56, label %for.body57, label %for.end391

for.body57:                                       ; preds = %for.cond55
  %idxprom58 = sext i32 %j.1 to i64
  %arrayidx59 = getelementptr inbounds [62 x i32], [62 x i32]* @pieces, i64 0, i64 %idxprom58
  %i16 = load i32, i32* %arrayidx59, align 4
  %tobool60 = icmp ne i32 %i16, 0
  br i1 %tobool60, label %if.else62, label %if.then61

if.then61:                                        ; preds = %for.body57
  br label %for.inc389

if.else62:                                        ; preds = %for.body57
  %inc63 = add nsw i32 %a.2, 1
  br label %if.end64

if.end64:                                         ; preds = %if.else62
  %idxprom65 = sext i32 %i16 to i64
  %arrayidx66 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom65
  %i17 = load i32, i32* %arrayidx66, align 4
  switch i32 %i17, label %sw.epilog [
    i32 1, label %sw.bb
    i32 2, label %sw.bb183
    i32 7, label %sw.bb305
    i32 8, label %sw.bb313
    i32 11, label %sw.bb321
    i32 12, label %sw.bb329
    i32 3, label %sw.bb337
    i32 4, label %sw.bb346
    i32 9, label %sw.bb355
    i32 10, label %sw.bb366
    i32 5, label %sw.bb377
    i32 6, label %sw.bb383
  ]

sw.bb:                                            ; preds = %if.end64
  %inc67 = add nsw i32 %wp.0, 1
  %inc68 = add nsw i32 %wpawns.0, 1
  %idxprom69 = sext i32 %i16 to i64
  %arrayidx70 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @lcentral to [144 x i32]*), i64 0, i64 %idxprom69
  %i18 = load i32, i32* %arrayidx70, align 4
  %i19 = load i32, i32* %score, align 4
  %add71 = add nsw i32 %i19, %i18
  store i32 %add71, i32* %score, align 4
  %call = call i32 @l_pawn_mobility(i32 %i16)
  %shl = shl i32 %call, 2
  %i20 = load i32, i32* %score, align 4
  %add72 = add nsw i32 %i20, %shl
  store i32 %add72, i32* %score, align 4
  %idxprom73 = sext i32 %i16 to i64
  %arrayidx74 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xrank to [144 x i32]*), i64 0, i64 %idxprom73
  %i21 = load i32, i32* %arrayidx74, align 4
  %sub75 = sub nsw i32 %i21, 2
  %mul = mul nsw i32 %sub75, 8
  %i22 = load i32, i32* %score, align 4
  %add76 = add nsw i32 %i22, %mul
  store i32 %add76, i32* %score, align 4
  %add77 = add nsw i32 %pawn_file.0, 1
  %idxprom78 = sext i32 %add77 to i64
  %arrayidx79 = getelementptr inbounds [11 x i32], [11 x i32]* %white_back_pawn, i64 0, i64 %idxprom78
  %i23 = load i32, i32* %arrayidx79, align 4
  %cmp80 = icmp sgt i32 %i23, %srank.0
  br i1 %cmp80, label %land.lhs.true, label %if.end101

land.lhs.true:                                    ; preds = %sw.bb
  %sub81 = sub nsw i32 %pawn_file.0, 1
  %idxprom82 = sext i32 %sub81 to i64
  %arrayidx83 = getelementptr inbounds [11 x i32], [11 x i32]* %white_back_pawn, i64 0, i64 %idxprom82
  %i24 = load i32, i32* %arrayidx83, align 4
  %cmp84 = icmp sgt i32 %i24, %srank.0
  br i1 %cmp84, label %if.then85, label %if.end101

if.then85:                                        ; preds = %land.lhs.true
  %i25 = load i32, i32* %score, align 4
  %sub86 = sub nsw i32 %i25, 8
  store i32 %sub86, i32* %score, align 4
  %arrayidx87 = getelementptr inbounds [2 x [11 x i32]], [2 x [11 x i32]]* %pawns, i64 0, i64 1
  %add88 = add nsw i32 %pawn_file.0, 1
  %idxprom89 = sext i32 %add88 to i64
  %arrayidx90 = getelementptr inbounds [11 x i32], [11 x i32]* %arrayidx87, i64 0, i64 %idxprom89
  %i26 = load i32, i32* %arrayidx90, align 4
  %tobool91 = icmp ne i32 %i26, 0
  br i1 %tobool91, label %if.end100, label %land.lhs.true92

land.lhs.true92:                                  ; preds = %if.then85
  %arrayidx93 = getelementptr inbounds [2 x [11 x i32]], [2 x [11 x i32]]* %pawns, i64 0, i64 1
  %sub94 = sub nsw i32 %pawn_file.0, 1
  %idxprom95 = sext i32 %sub94 to i64
  %arrayidx96 = getelementptr inbounds [11 x i32], [11 x i32]* %arrayidx93, i64 0, i64 %idxprom95
  %i27 = load i32, i32* %arrayidx96, align 4
  %tobool97 = icmp ne i32 %i27, 0
  br i1 %tobool97, label %if.end100, label %if.then98

if.then98:                                        ; preds = %land.lhs.true92
  %i28 = load i32, i32* %score, align 4
  %sub99 = sub nsw i32 %i28, 12
  store i32 %sub99, i32* %score, align 4
  br label %if.end100

if.end100:                                        ; preds = %if.then98, %land.lhs.true92, %if.then85
  %isolated.0 = phi i32 [ 0, %if.then85 ], [ 0, %land.lhs.true92 ], [ 1, %if.then98 ]
  br label %if.end101

if.end101:                                        ; preds = %if.end100, %land.lhs.true, %sw.bb
  %backwards.0 = phi i32 [ 1, %if.end100 ], [ 0, %land.lhs.true ], [ 0, %sw.bb ]
  %isolated.1 = phi i32 [ %isolated.0, %if.end100 ], [ 0, %land.lhs.true ], [ 0, %sw.bb ]
  %arrayidx102 = getelementptr inbounds [2 x [11 x i32]], [2 x [11 x i32]]* %pawns, i64 0, i64 0
  %idxprom103 = sext i32 %pawn_file.0 to i64
  %arrayidx104 = getelementptr inbounds [11 x i32], [11 x i32]* %arrayidx102, i64 0, i64 %idxprom103
  %i29 = load i32, i32* %arrayidx104, align 4
  %tobool105 = icmp ne i32 %i29, 0
  br i1 %tobool105, label %if.end115, label %if.then106

if.then106:                                       ; preds = %if.end101
  %tobool107 = icmp ne i32 %backwards.0, 0
  br i1 %tobool107, label %if.then108, label %if.end110

if.then108:                                       ; preds = %if.then106
  %i30 = load i32, i32* %score, align 4
  %sub109 = sub nsw i32 %i30, 5
  store i32 %sub109, i32* %score, align 4
  br label %if.end110

if.end110:                                        ; preds = %if.then108, %if.then106
  %tobool111 = icmp ne i32 %isolated.1, 0
  br i1 %tobool111, label %if.then112, label %if.end114

if.then112:                                       ; preds = %if.end110
  %i31 = load i32, i32* %score, align 4
  %sub113 = sub nsw i32 %i31, 8
  store i32 %sub113, i32* %score, align 4
  br label %if.end114

if.end114:                                        ; preds = %if.then112, %if.end110
  br label %if.end115

if.end115:                                        ; preds = %if.end114, %if.end101
  %arrayidx116 = getelementptr inbounds [2 x [11 x i32]], [2 x [11 x i32]]* %pawns, i64 0, i64 1
  %idxprom117 = sext i32 %pawn_file.0 to i64
  %arrayidx118 = getelementptr inbounds [11 x i32], [11 x i32]* %arrayidx116, i64 0, i64 %idxprom117
  %i32 = load i32, i32* %arrayidx118, align 4
  %cmp119 = icmp sgt i32 %i32, 1
  br i1 %cmp119, label %if.then120, label %if.end127

if.then120:                                       ; preds = %if.end115
  %arrayidx121 = getelementptr inbounds [2 x [11 x i32]], [2 x [11 x i32]]* %pawns, i64 0, i64 1
  %idxprom122 = sext i32 %pawn_file.0 to i64
  %arrayidx123 = getelementptr inbounds [11 x i32], [11 x i32]* %arrayidx121, i64 0, i64 %idxprom122
  %i33 = load i32, i32* %arrayidx123, align 4
  %sub124 = sub nsw i32 %i33, 1
  %mul125 = mul nsw i32 8, %sub124
  %i34 = load i32, i32* %score, align 4
  %sub126 = sub nsw i32 %i34, %mul125
  store i32 %sub126, i32* %score, align 4
  br label %if.end127

if.end127:                                        ; preds = %if.then120, %if.end115
  %arrayidx128 = getelementptr inbounds [2 x [11 x i32]], [2 x [11 x i32]]* %pawns, i64 0, i64 0
  %idxprom129 = sext i32 %pawn_file.0 to i64
  %arrayidx130 = getelementptr inbounds [11 x i32], [11 x i32]* %arrayidx128, i64 0, i64 %idxprom129
  %i35 = load i32, i32* %arrayidx130, align 4
  %tobool131 = icmp ne i32 %i35, 0
  br i1 %tobool131, label %if.end174, label %land.lhs.true132

land.lhs.true132:                                 ; preds = %if.end127
  %sub133 = sub nsw i32 %pawn_file.0, 1
  %idxprom134 = sext i32 %sub133 to i64
  %arrayidx135 = getelementptr inbounds [11 x i32], [11 x i32]* %black_back_pawn, i64 0, i64 %idxprom134
  %i36 = load i32, i32* %arrayidx135, align 4
  %cmp136 = icmp sge i32 %srank.0, %i36
  br i1 %cmp136, label %land.lhs.true137, label %if.end174

land.lhs.true137:                                 ; preds = %land.lhs.true132
  %add138 = add nsw i32 %pawn_file.0, 1
  %idxprom139 = sext i32 %add138 to i64
  %arrayidx140 = getelementptr inbounds [11 x i32], [11 x i32]* %black_back_pawn, i64 0, i64 %idxprom139
  %i37 = load i32, i32* %arrayidx140, align 4
  %cmp141 = icmp sge i32 %srank.0, %i37
  br i1 %cmp141, label %if.then142, label %if.end174

if.then142:                                       ; preds = %land.lhs.true137
  %idxprom143 = sext i32 %i16 to i64
  %arrayidx144 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xrank to [144 x i32]*), i64 0, i64 %idxprom143
  %i38 = load i32, i32* %arrayidx144, align 4
  %sub145 = sub nsw i32 %i38, 2
  %mul146 = mul nsw i32 10, %sub145
  %add147 = add nsw i32 25, %mul146
  %i39 = load i32, i32* %score, align 4
  %add148 = add nsw i32 %i39, %add147
  store i32 %add148, i32* %score, align 4
  %idxprom149 = sext i32 %i16 to i64
  %arrayidx150 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xrank to [144 x i32]*), i64 0, i64 %idxprom149
  %i40 = load i32, i32* %arrayidx150, align 4
  %cmp151 = icmp eq i32 %i40, 7
  br i1 %cmp151, label %if.then152, label %if.end154

if.then152:                                       ; preds = %if.then142
  %i41 = load i32, i32* %score, align 4
  %add153 = add nsw i32 %i41, 50
  store i32 %add153, i32* %score, align 4
  br label %if.end154

if.end154:                                        ; preds = %if.then152, %if.then142
  %inc155 = add nsw i32 %wpassp.0, 1
  %idxprom156 = sext i32 %i16 to i64
  %arrayidx157 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xfile to [144 x i32]*), i64 0, i64 %idxprom156
  %i42 = load i32, i32* %arrayidx157, align 4
  %cmp158 = icmp eq i32 %i42, 1
  br i1 %cmp158, label %if.then162, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end154
  %idxprom159 = sext i32 %i16 to i64
  %arrayidx160 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xfile to [144 x i32]*), i64 0, i64 %idxprom159
  %i43 = load i32, i32* %arrayidx160, align 4
  %cmp161 = icmp eq i32 %i43, 8
  br i1 %cmp161, label %if.then162, label %if.end169

if.then162:                                       ; preds = %lor.lhs.false, %if.end154
  %idxprom163 = sext i32 %i16 to i64
  %arrayidx164 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xrank to [144 x i32]*), i64 0, i64 %idxprom163
  %i44 = load i32, i32* %arrayidx164, align 4
  %sub165 = sub nsw i32 %i44, 2
  %mul166 = mul nsw i32 2, %sub165
  %add167 = add nsw i32 4, %mul166
  %i45 = load i32, i32* %score, align 4
  %add168 = add nsw i32 %i45, %add167
  store i32 %add168, i32* %score, align 4
  br label %if.end169

if.end169:                                        ; preds = %if.then162, %lor.lhs.false
  %tobool170 = icmp ne i32 %isolated.1, 0
  br i1 %tobool170, label %if.end173, label %if.then171

if.then171:                                       ; preds = %if.end169
  %i46 = load i32, i32* %score, align 4
  %add172 = add nsw i32 %i46, 24
  store i32 %add172, i32* %score, align 4
  br label %if.end173

if.end173:                                        ; preds = %if.then171, %if.end169
  br label %if.end174

if.end174:                                        ; preds = %if.end173, %land.lhs.true137, %land.lhs.true132, %if.end127
  %wpassp.1 = phi i32 [ %wpassp.0, %if.end127 ], [ %inc155, %if.end173 ], [ %wpassp.0, %land.lhs.true137 ], [ %wpassp.0, %land.lhs.true132 ]
  %arrayidx175 = getelementptr inbounds [2 x [11 x i32]], [2 x [11 x i32]]* %pawns, i64 0, i64 1
  %sub176 = sub nsw i32 %pawn_file.0, 1
  %idxprom177 = sext i32 %sub176 to i64
  %arrayidx178 = getelementptr inbounds [11 x i32], [11 x i32]* %arrayidx175, i64 0, i64 %idxprom177
  %i47 = load i32, i32* %arrayidx178, align 4
  %tobool179 = icmp ne i32 %i47, 0
  br i1 %tobool179, label %if.end182, label %if.then180

if.then180:                                       ; preds = %if.end174
  %i48 = load i32, i32* %score, align 4
  %sub181 = sub nsw i32 %i48, 5
  store i32 %sub181, i32* %score, align 4
  br label %if.end182

if.end182:                                        ; preds = %if.then180, %if.end174
  br label %sw.epilog

sw.bb183:                                         ; preds = %if.end64
  %inc184 = add nsw i32 %bp.0, 1
  %inc185 = add nsw i32 %bpawns.0, 1
  %idxprom186 = sext i32 %i16 to i64
  %arrayidx187 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @lcentral to [144 x i32]*), i64 0, i64 %idxprom186
  %i49 = load i32, i32* %arrayidx187, align 4
  %i50 = load i32, i32* %score, align 4
  %sub188 = sub nsw i32 %i50, %i49
  store i32 %sub188, i32* %score, align 4
  %call189 = call i32 @l_pawn_mobility(i32 %i16)
  %shl190 = shl i32 %call189, 2
  %i51 = load i32, i32* %score, align 4
  %sub191 = sub nsw i32 %i51, %shl190
  store i32 %sub191, i32* %score, align 4
  %idxprom192 = sext i32 %i16 to i64
  %arrayidx193 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xrank to [144 x i32]*), i64 0, i64 %idxprom192
  %i52 = load i32, i32* %arrayidx193, align 4
  %sub194 = sub nsw i32 7, %i52
  %mul195 = mul nsw i32 %sub194, 8
  %i53 = load i32, i32* %score, align 4
  %sub196 = sub nsw i32 %i53, %mul195
  store i32 %sub196, i32* %score, align 4
  %add197 = add nsw i32 %pawn_file.0, 1
  %idxprom198 = sext i32 %add197 to i64
  %arrayidx199 = getelementptr inbounds [11 x i32], [11 x i32]* %black_back_pawn, i64 0, i64 %idxprom198
  %i54 = load i32, i32* %arrayidx199, align 4
  %cmp200 = icmp slt i32 %i54, %srank.0
  br i1 %cmp200, label %land.lhs.true201, label %if.end222

land.lhs.true201:                                 ; preds = %sw.bb183
  %sub202 = sub nsw i32 %pawn_file.0, 1
  %idxprom203 = sext i32 %sub202 to i64
  %arrayidx204 = getelementptr inbounds [11 x i32], [11 x i32]* %black_back_pawn, i64 0, i64 %idxprom203
  %i55 = load i32, i32* %arrayidx204, align 4
  %cmp205 = icmp slt i32 %i55, %srank.0
  br i1 %cmp205, label %if.then206, label %if.end222

if.then206:                                       ; preds = %land.lhs.true201
  %i56 = load i32, i32* %score, align 4
  %add207 = add nsw i32 %i56, 8
  store i32 %add207, i32* %score, align 4
  %arrayidx208 = getelementptr inbounds [2 x [11 x i32]], [2 x [11 x i32]]* %pawns, i64 0, i64 0
  %add209 = add nsw i32 %pawn_file.0, 1
  %idxprom210 = sext i32 %add209 to i64
  %arrayidx211 = getelementptr inbounds [11 x i32], [11 x i32]* %arrayidx208, i64 0, i64 %idxprom210
  %i57 = load i32, i32* %arrayidx211, align 4
  %tobool212 = icmp ne i32 %i57, 0
  br i1 %tobool212, label %if.end221, label %land.lhs.true213

land.lhs.true213:                                 ; preds = %if.then206
  %arrayidx214 = getelementptr inbounds [2 x [11 x i32]], [2 x [11 x i32]]* %pawns, i64 0, i64 0
  %sub215 = sub nsw i32 %pawn_file.0, 1
  %idxprom216 = sext i32 %sub215 to i64
  %arrayidx217 = getelementptr inbounds [11 x i32], [11 x i32]* %arrayidx214, i64 0, i64 %idxprom216
  %i58 = load i32, i32* %arrayidx217, align 4
  %tobool218 = icmp ne i32 %i58, 0
  br i1 %tobool218, label %if.end221, label %if.then219

if.then219:                                       ; preds = %land.lhs.true213
  %i59 = load i32, i32* %score, align 4
  %add220 = add nsw i32 %i59, 12
  store i32 %add220, i32* %score, align 4
  br label %if.end221

if.end221:                                        ; preds = %if.then219, %land.lhs.true213, %if.then206
  %isolated.2 = phi i32 [ 0, %if.then206 ], [ 0, %land.lhs.true213 ], [ 1, %if.then219 ]
  br label %if.end222

if.end222:                                        ; preds = %if.end221, %land.lhs.true201, %sw.bb183
  %backwards.1 = phi i32 [ 1, %if.end221 ], [ 0, %land.lhs.true201 ], [ 0, %sw.bb183 ]
  %isolated.3 = phi i32 [ %isolated.2, %if.end221 ], [ 0, %land.lhs.true201 ], [ 0, %sw.bb183 ]
  %arrayidx223 = getelementptr inbounds [2 x [11 x i32]], [2 x [11 x i32]]* %pawns, i64 0, i64 1
  %idxprom224 = sext i32 %pawn_file.0 to i64
  %arrayidx225 = getelementptr inbounds [11 x i32], [11 x i32]* %arrayidx223, i64 0, i64 %idxprom224
  %i60 = load i32, i32* %arrayidx225, align 4
  %tobool226 = icmp ne i32 %i60, 0
  br i1 %tobool226, label %if.end236, label %if.then227

if.then227:                                       ; preds = %if.end222
  %tobool228 = icmp ne i32 %backwards.1, 0
  br i1 %tobool228, label %if.then229, label %if.end231

if.then229:                                       ; preds = %if.then227
  %i61 = load i32, i32* %score, align 4
  %add230 = add nsw i32 %i61, 5
  store i32 %add230, i32* %score, align 4
  br label %if.end231

if.end231:                                        ; preds = %if.then229, %if.then227
  %tobool232 = icmp ne i32 %isolated.3, 0
  br i1 %tobool232, label %if.then233, label %if.end235

if.then233:                                       ; preds = %if.end231
  %i62 = load i32, i32* %score, align 4
  %add234 = add nsw i32 %i62, 8
  store i32 %add234, i32* %score, align 4
  br label %if.end235

if.end235:                                        ; preds = %if.then233, %if.end231
  br label %if.end236

if.end236:                                        ; preds = %if.end235, %if.end222
  %arrayidx237 = getelementptr inbounds [2 x [11 x i32]], [2 x [11 x i32]]* %pawns, i64 0, i64 0
  %idxprom238 = sext i32 %pawn_file.0 to i64
  %arrayidx239 = getelementptr inbounds [11 x i32], [11 x i32]* %arrayidx237, i64 0, i64 %idxprom238
  %i63 = load i32, i32* %arrayidx239, align 4
  %cmp240 = icmp sgt i32 %i63, 1
  br i1 %cmp240, label %if.then241, label %if.end248

if.then241:                                       ; preds = %if.end236
  %arrayidx242 = getelementptr inbounds [2 x [11 x i32]], [2 x [11 x i32]]* %pawns, i64 0, i64 0
  %idxprom243 = sext i32 %pawn_file.0 to i64
  %arrayidx244 = getelementptr inbounds [11 x i32], [11 x i32]* %arrayidx242, i64 0, i64 %idxprom243
  %i64 = load i32, i32* %arrayidx244, align 4
  %sub245 = sub nsw i32 %i64, 1
  %mul246 = mul nsw i32 8, %sub245
  %i65 = load i32, i32* %score, align 4
  %add247 = add nsw i32 %i65, %mul246
  store i32 %add247, i32* %score, align 4
  br label %if.end248

if.end248:                                        ; preds = %if.then241, %if.end236
  %arrayidx249 = getelementptr inbounds [2 x [11 x i32]], [2 x [11 x i32]]* %pawns, i64 0, i64 1
  %idxprom250 = sext i32 %pawn_file.0 to i64
  %arrayidx251 = getelementptr inbounds [11 x i32], [11 x i32]* %arrayidx249, i64 0, i64 %idxprom250
  %i66 = load i32, i32* %arrayidx251, align 4
  %tobool252 = icmp ne i32 %i66, 0
  br i1 %tobool252, label %if.end296, label %land.lhs.true253

land.lhs.true253:                                 ; preds = %if.end248
  %sub254 = sub nsw i32 %pawn_file.0, 1
  %idxprom255 = sext i32 %sub254 to i64
  %arrayidx256 = getelementptr inbounds [11 x i32], [11 x i32]* %white_back_pawn, i64 0, i64 %idxprom255
  %i67 = load i32, i32* %arrayidx256, align 4
  %cmp257 = icmp sle i32 %srank.0, %i67
  br i1 %cmp257, label %land.lhs.true258, label %if.end296

land.lhs.true258:                                 ; preds = %land.lhs.true253
  %add259 = add nsw i32 %pawn_file.0, 1
  %idxprom260 = sext i32 %add259 to i64
  %arrayidx261 = getelementptr inbounds [11 x i32], [11 x i32]* %white_back_pawn, i64 0, i64 %idxprom260
  %i68 = load i32, i32* %arrayidx261, align 4
  %cmp262 = icmp sle i32 %srank.0, %i68
  br i1 %cmp262, label %if.then263, label %if.end296

if.then263:                                       ; preds = %land.lhs.true258
  %idxprom264 = sext i32 %i16 to i64
  %arrayidx265 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xrank to [144 x i32]*), i64 0, i64 %idxprom264
  %i69 = load i32, i32* %arrayidx265, align 4
  %sub266 = sub nsw i32 7, %i69
  %mul267 = mul nsw i32 10, %sub266
  %add268 = add nsw i32 25, %mul267
  %i70 = load i32, i32* %score, align 4
  %sub269 = sub nsw i32 %i70, %add268
  store i32 %sub269, i32* %score, align 4
  %idxprom270 = sext i32 %i16 to i64
  %arrayidx271 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xrank to [144 x i32]*), i64 0, i64 %idxprom270
  %i71 = load i32, i32* %arrayidx271, align 4
  %cmp272 = icmp eq i32 %i71, 2
  br i1 %cmp272, label %if.then273, label %if.end275

if.then273:                                       ; preds = %if.then263
  %i72 = load i32, i32* %score, align 4
  %sub274 = sub nsw i32 %i72, 50
  store i32 %sub274, i32* %score, align 4
  br label %if.end275

if.end275:                                        ; preds = %if.then273, %if.then263
  %inc276 = add nsw i32 %bpassp.0, 1
  %idxprom277 = sext i32 %i16 to i64
  %arrayidx278 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xfile to [144 x i32]*), i64 0, i64 %idxprom277
  %i73 = load i32, i32* %arrayidx278, align 4
  %cmp279 = icmp eq i32 %i73, 1
  br i1 %cmp279, label %if.then284, label %lor.lhs.false280

lor.lhs.false280:                                 ; preds = %if.end275
  %idxprom281 = sext i32 %i16 to i64
  %arrayidx282 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xfile to [144 x i32]*), i64 0, i64 %idxprom281
  %i74 = load i32, i32* %arrayidx282, align 4
  %cmp283 = icmp eq i32 %i74, 8
  br i1 %cmp283, label %if.then284, label %if.end291

if.then284:                                       ; preds = %lor.lhs.false280, %if.end275
  %idxprom285 = sext i32 %i16 to i64
  %arrayidx286 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xrank to [144 x i32]*), i64 0, i64 %idxprom285
  %i75 = load i32, i32* %arrayidx286, align 4
  %sub287 = sub nsw i32 7, %i75
  %mul288 = mul nsw i32 2, %sub287
  %add289 = add nsw i32 4, %mul288
  %i76 = load i32, i32* %score, align 4
  %sub290 = sub nsw i32 %i76, %add289
  store i32 %sub290, i32* %score, align 4
  br label %if.end291

if.end291:                                        ; preds = %if.then284, %lor.lhs.false280
  %tobool292 = icmp ne i32 %isolated.3, 0
  br i1 %tobool292, label %if.end295, label %if.then293

if.then293:                                       ; preds = %if.end291
  %i77 = load i32, i32* %score, align 4
  %sub294 = sub nsw i32 %i77, 24
  store i32 %sub294, i32* %score, align 4
  br label %if.end295

if.end295:                                        ; preds = %if.then293, %if.end291
  br label %if.end296

if.end296:                                        ; preds = %if.end295, %land.lhs.true258, %land.lhs.true253, %if.end248
  %bpassp.1 = phi i32 [ %bpassp.0, %if.end248 ], [ %inc276, %if.end295 ], [ %bpassp.0, %land.lhs.true258 ], [ %bpassp.0, %land.lhs.true253 ]
  %arrayidx297 = getelementptr inbounds [2 x [11 x i32]], [2 x [11 x i32]]* %pawns, i64 0, i64 0
  %sub298 = sub nsw i32 %pawn_file.0, 1
  %idxprom299 = sext i32 %sub298 to i64
  %arrayidx300 = getelementptr inbounds [11 x i32], [11 x i32]* %arrayidx297, i64 0, i64 %idxprom299
  %i78 = load i32, i32* %arrayidx300, align 4
  %tobool301 = icmp ne i32 %i78, 0
  br i1 %tobool301, label %if.end304, label %if.then302

if.then302:                                       ; preds = %if.end296
  %i79 = load i32, i32* %score, align 4
  %add303 = add nsw i32 %i79, 5
  store i32 %add303, i32* %score, align 4
  br label %if.end304

if.end304:                                        ; preds = %if.then302, %if.end296
  br label %sw.epilog

sw.bb305:                                         ; preds = %if.end64
  %inc306 = add nsw i32 %wp.0, 1
  %call307 = call i32 @l_rook_mobility(i32 %i16)
  %shl308 = shl i32 %call307, 2
  %i80 = load i32, i32* %score, align 4
  %add309 = add nsw i32 %i80, %shl308
  store i32 %add309, i32* %score, align 4
  %idxprom310 = sext i32 %i16 to i64
  %arrayidx311 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @lcentral to [144 x i32]*), i64 0, i64 %idxprom310
  %i81 = load i32, i32* %arrayidx311, align 4
  %i82 = load i32, i32* %score, align 4
  %add312 = add nsw i32 %i82, %i81
  store i32 %add312, i32* %score, align 4
  br label %sw.epilog

sw.bb313:                                         ; preds = %if.end64
  %inc314 = add nsw i32 %bp.0, 1
  %call315 = call i32 @l_rook_mobility(i32 %i16)
  %shl316 = shl i32 %call315, 2
  %i83 = load i32, i32* %score, align 4
  %sub317 = sub nsw i32 %i83, %shl316
  store i32 %sub317, i32* %score, align 4
  %idxprom318 = sext i32 %i16 to i64
  %arrayidx319 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @lcentral to [144 x i32]*), i64 0, i64 %idxprom318
  %i84 = load i32, i32* %arrayidx319, align 4
  %i85 = load i32, i32* %score, align 4
  %sub320 = sub nsw i32 %i85, %i84
  store i32 %sub320, i32* %score, align 4
  br label %sw.epilog

sw.bb321:                                         ; preds = %if.end64
  %inc322 = add nsw i32 %wp.0, 1
  %call323 = call i32 @l_bishop_mobility(i32 %i16)
  %shl324 = shl i32 %call323, 2
  %i86 = load i32, i32* %score, align 4
  %add325 = add nsw i32 %i86, %shl324
  store i32 %add325, i32* %score, align 4
  %idxprom326 = sext i32 %i16 to i64
  %arrayidx327 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @lcentral to [144 x i32]*), i64 0, i64 %idxprom326
  %i87 = load i32, i32* %arrayidx327, align 4
  %i88 = load i32, i32* %score, align 4
  %add328 = add nsw i32 %i88, %i87
  store i32 %add328, i32* %score, align 4
  br label %sw.epilog

sw.bb329:                                         ; preds = %if.end64
  %inc330 = add nsw i32 %bp.0, 1
  %call331 = call i32 @l_bishop_mobility(i32 %i16)
  %shl332 = shl i32 %call331, 2
  %i89 = load i32, i32* %score, align 4
  %sub333 = sub nsw i32 %i89, %shl332
  store i32 %sub333, i32* %score, align 4
  %idxprom334 = sext i32 %i16 to i64
  %arrayidx335 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @lcentral to [144 x i32]*), i64 0, i64 %idxprom334
  %i90 = load i32, i32* %arrayidx335, align 4
  %i91 = load i32, i32* %score, align 4
  %sub336 = sub nsw i32 %i91, %i90
  store i32 %sub336, i32* %score, align 4
  br label %sw.epilog

sw.bb337:                                         ; preds = %if.end64
  %inc338 = add nsw i32 %wp.0, 1
  %idxprom339 = sext i32 %i16 to i64
  %arrayidx340 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @lcentral to [144 x i32]*), i64 0, i64 %idxprom339
  %i92 = load i32, i32* %arrayidx340, align 4
  %shl341 = shl i32 %i92, 1
  %i93 = load i32, i32* %score, align 4
  %add342 = add nsw i32 %i93, %shl341
  store i32 %add342, i32* %score, align 4
  %call343 = call i32 @l_knight_mobility(i32 %i16)
  %shl344 = shl i32 %call343, 2
  %i94 = load i32, i32* %score, align 4
  %add345 = add nsw i32 %i94, %shl344
  store i32 %add345, i32* %score, align 4
  br label %sw.epilog

sw.bb346:                                         ; preds = %if.end64
  %inc347 = add nsw i32 %bp.0, 1
  %idxprom348 = sext i32 %i16 to i64
  %arrayidx349 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @lcentral to [144 x i32]*), i64 0, i64 %idxprom348
  %i95 = load i32, i32* %arrayidx349, align 4
  %shl350 = shl i32 %i95, 1
  %i96 = load i32, i32* %score, align 4
  %sub351 = sub nsw i32 %i96, %shl350
  store i32 %sub351, i32* %score, align 4
  %call352 = call i32 @l_knight_mobility(i32 %i16)
  %shl353 = shl i32 %call352, 2
  %i97 = load i32, i32* %score, align 4
  %sub354 = sub nsw i32 %i97, %shl353
  store i32 %sub354, i32* %score, align 4
  br label %sw.epilog

sw.bb355:                                         ; preds = %if.end64
  %inc356 = add nsw i32 %wp.0, 1
  %call357 = call i32 @l_bishop_mobility(i32 %i16)
  %shl358 = shl i32 %call357, 1
  %i98 = load i32, i32* %score, align 4
  %add359 = add nsw i32 %i98, %shl358
  store i32 %add359, i32* %score, align 4
  %call360 = call i32 @l_rook_mobility(i32 %i16)
  %shl361 = shl i32 %call360, 1
  %i99 = load i32, i32* %score, align 4
  %add362 = add nsw i32 %i99, %shl361
  store i32 %add362, i32* %score, align 4
  %idxprom363 = sext i32 %i16 to i64
  %arrayidx364 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @lcentral to [144 x i32]*), i64 0, i64 %idxprom363
  %i100 = load i32, i32* %arrayidx364, align 4
  %i101 = load i32, i32* %score, align 4
  %add365 = add nsw i32 %i101, %i100
  store i32 %add365, i32* %score, align 4
  br label %sw.epilog

sw.bb366:                                         ; preds = %if.end64
  %inc367 = add nsw i32 %bp.0, 1
  %call368 = call i32 @l_bishop_mobility(i32 %i16)
  %shl369 = shl i32 %call368, 1
  %i102 = load i32, i32* %score, align 4
  %sub370 = sub nsw i32 %i102, %shl369
  store i32 %sub370, i32* %score, align 4
  %call371 = call i32 @l_rook_mobility(i32 %i16)
  %shl372 = shl i32 %call371, 1
  %i103 = load i32, i32* %score, align 4
  %sub373 = sub nsw i32 %i103, %shl372
  store i32 %sub373, i32* %score, align 4
  %idxprom374 = sext i32 %i16 to i64
  %arrayidx375 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @lcentral to [144 x i32]*), i64 0, i64 %idxprom374
  %i104 = load i32, i32* %arrayidx375, align 4
  %i105 = load i32, i32* %score, align 4
  %sub376 = sub nsw i32 %i105, %i104
  store i32 %sub376, i32* %score, align 4
  br label %sw.epilog

sw.bb377:                                         ; preds = %if.end64
  %idxprom378 = sext i32 %i16 to i64
  %arrayidx379 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @lcentral to [144 x i32]*), i64 0, i64 %idxprom378
  %i106 = load i32, i32* %arrayidx379, align 4
  %shl380 = shl i32 %i106, 1
  %call381 = call i32 @l_king_mobility(i32 %i16)
  %i107 = load i32, i32* %score, align 4
  %add382 = add nsw i32 %i107, %call381
  store i32 %add382, i32* %score, align 4
  br label %sw.epilog

sw.bb383:                                         ; preds = %if.end64
  %idxprom384 = sext i32 %i16 to i64
  %arrayidx385 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @lcentral to [144 x i32]*), i64 0, i64 %idxprom384
  %i108 = load i32, i32* %arrayidx385, align 4
  %shl386 = shl i32 %i108, 1
  %call387 = call i32 @l_king_mobility(i32 %i16)
  %i109 = load i32, i32* %score, align 4
  %sub388 = sub nsw i32 %i109, %call387
  store i32 %sub388, i32* %score, align 4
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.bb383, %sw.bb377, %sw.bb366, %sw.bb355, %sw.bb346, %sw.bb337, %sw.bb329, %sw.bb321, %sw.bb313, %sw.bb305, %if.end304, %if.end182, %if.end64
  %bpawns.1 = phi i32 [ %bpawns.0, %if.end64 ], [ %bpawns.0, %sw.bb383 ], [ %bpawns.0, %sw.bb377 ], [ %bpawns.0, %sw.bb366 ], [ %bpawns.0, %sw.bb355 ], [ %bpawns.0, %sw.bb346 ], [ %bpawns.0, %sw.bb337 ], [ %bpawns.0, %sw.bb329 ], [ %bpawns.0, %sw.bb321 ], [ %bpawns.0, %sw.bb313 ], [ %bpawns.0, %sw.bb305 ], [ %inc185, %if.end304 ], [ %bpawns.0, %if.end182 ]
  %wpawns.1 = phi i32 [ %wpawns.0, %if.end64 ], [ %wpawns.0, %sw.bb383 ], [ %wpawns.0, %sw.bb377 ], [ %wpawns.0, %sw.bb366 ], [ %wpawns.0, %sw.bb355 ], [ %wpawns.0, %sw.bb346 ], [ %wpawns.0, %sw.bb337 ], [ %wpawns.0, %sw.bb329 ], [ %wpawns.0, %sw.bb321 ], [ %wpawns.0, %sw.bb313 ], [ %wpawns.0, %sw.bb305 ], [ %wpawns.0, %if.end304 ], [ %inc68, %if.end182 ]
  %bpassp.2 = phi i32 [ %bpassp.0, %if.end64 ], [ %bpassp.0, %sw.bb383 ], [ %bpassp.0, %sw.bb377 ], [ %bpassp.0, %sw.bb366 ], [ %bpassp.0, %sw.bb355 ], [ %bpassp.0, %sw.bb346 ], [ %bpassp.0, %sw.bb337 ], [ %bpassp.0, %sw.bb329 ], [ %bpassp.0, %sw.bb321 ], [ %bpassp.0, %sw.bb313 ], [ %bpassp.0, %sw.bb305 ], [ %bpassp.1, %if.end304 ], [ %bpassp.0, %if.end182 ]
  %wpassp.2 = phi i32 [ %wpassp.0, %if.end64 ], [ %wpassp.0, %sw.bb383 ], [ %wpassp.0, %sw.bb377 ], [ %wpassp.0, %sw.bb366 ], [ %wpassp.0, %sw.bb355 ], [ %wpassp.0, %sw.bb346 ], [ %wpassp.0, %sw.bb337 ], [ %wpassp.0, %sw.bb329 ], [ %wpassp.0, %sw.bb321 ], [ %wpassp.0, %sw.bb313 ], [ %wpassp.0, %sw.bb305 ], [ %wpassp.0, %if.end304 ], [ %wpassp.1, %if.end182 ]
  %bks.1 = phi i32 [ %bks.0, %if.end64 ], [ %shl386, %sw.bb383 ], [ %bks.0, %sw.bb377 ], [ %bks.0, %sw.bb366 ], [ %bks.0, %sw.bb355 ], [ %bks.0, %sw.bb346 ], [ %bks.0, %sw.bb337 ], [ %bks.0, %sw.bb329 ], [ %bks.0, %sw.bb321 ], [ %bks.0, %sw.bb313 ], [ %bks.0, %sw.bb305 ], [ %bks.0, %if.end304 ], [ %bks.0, %if.end182 ]
  %wks.1 = phi i32 [ %wks.0, %if.end64 ], [ %wks.0, %sw.bb383 ], [ %shl380, %sw.bb377 ], [ %wks.0, %sw.bb366 ], [ %wks.0, %sw.bb355 ], [ %wks.0, %sw.bb346 ], [ %wks.0, %sw.bb337 ], [ %wks.0, %sw.bb329 ], [ %wks.0, %sw.bb321 ], [ %wks.0, %sw.bb313 ], [ %wks.0, %sw.bb305 ], [ %wks.0, %if.end304 ], [ %wks.0, %if.end182 ]
  %bp.1 = phi i32 [ %bp.0, %if.end64 ], [ %bp.0, %sw.bb383 ], [ %bp.0, %sw.bb377 ], [ %inc367, %sw.bb366 ], [ %bp.0, %sw.bb355 ], [ %inc347, %sw.bb346 ], [ %bp.0, %sw.bb337 ], [ %inc330, %sw.bb329 ], [ %bp.0, %sw.bb321 ], [ %inc314, %sw.bb313 ], [ %bp.0, %sw.bb305 ], [ %inc184, %if.end304 ], [ %bp.0, %if.end182 ]
  %wp.1 = phi i32 [ %wp.0, %if.end64 ], [ %wp.0, %sw.bb383 ], [ %wp.0, %sw.bb377 ], [ %wp.0, %sw.bb366 ], [ %inc356, %sw.bb355 ], [ %wp.0, %sw.bb346 ], [ %inc338, %sw.bb337 ], [ %wp.0, %sw.bb329 ], [ %inc322, %sw.bb321 ], [ %wp.0, %sw.bb313 ], [ %inc306, %sw.bb305 ], [ %wp.0, %if.end304 ], [ %inc67, %if.end182 ]
  br label %for.inc389

for.inc389:                                       ; preds = %sw.epilog, %if.then61
  %bpawns.2 = phi i32 [ %bpawns.1, %sw.epilog ], [ %bpawns.0, %if.then61 ]
  %wpawns.2 = phi i32 [ %wpawns.1, %sw.epilog ], [ %wpawns.0, %if.then61 ]
  %bpassp.3 = phi i32 [ %bpassp.2, %sw.epilog ], [ %bpassp.0, %if.then61 ]
  %wpassp.3 = phi i32 [ %wpassp.2, %sw.epilog ], [ %wpassp.0, %if.then61 ]
  %bks.2 = phi i32 [ %bks.1, %sw.epilog ], [ %bks.0, %if.then61 ]
  %wks.2 = phi i32 [ %wks.1, %sw.epilog ], [ %wks.0, %if.then61 ]
  %bp.2 = phi i32 [ %bp.1, %sw.epilog ], [ %bp.0, %if.then61 ]
  %wp.2 = phi i32 [ %wp.1, %sw.epilog ], [ %wp.0, %if.then61 ]
  %a.3 = phi i32 [ %inc63, %sw.epilog ], [ %a.2, %if.then61 ]
  %inc390 = add nsw i32 %j.1, 1
  br label %for.cond55

for.end391:                                       ; preds = %for.cond55
  %add392 = add nsw i32 %wp.0, %bp.0
  %cmp393 = icmp sgt i32 %add392, 10
  br i1 %cmp393, label %if.then394, label %if.end397

if.then394:                                       ; preds = %for.end391
  %sub395 = sub nsw i32 %wks.0, %bks.0
  %i110 = load i32, i32* %score, align 4
  %sub396 = sub nsw i32 %i110, %sub395
  store i32 %sub396, i32* %score, align 4
  br label %if.end397

if.end397:                                        ; preds = %if.then394, %for.end391
  %i111 = load i32, i32* @Material, align 4
  %call398 = call i32 @abs(i32 %i111) #10
  %cmp399 = icmp sle i32 %call398, 900
  br i1 %cmp399, label %if.then400, label %if.else402

if.then400:                                       ; preds = %if.end397
  %i112 = load i32, i32* @Material, align 4
  %i113 = load i32, i32* %score, align 4
  %add401 = add nsw i32 %i113, %i112
  store i32 %add401, i32* %score, align 4
  br label %if.end425

if.else402:                                       ; preds = %if.end397
  %i114 = load i32, i32* @Material, align 4
  %cmp403 = icmp sgt i32 %i114, 0
  br i1 %cmp403, label %land.lhs.true404, label %if.else411

land.lhs.true404:                                 ; preds = %if.else402
  %i115 = load i32, i32* @comp_color, align 4
  %cmp405 = icmp eq i32 %i115, 1
  br i1 %cmp405, label %land.lhs.true406, label %if.else411

land.lhs.true406:                                 ; preds = %land.lhs.true404
  %tobool407 = icmp ne i32 %wpassp.0, 0
  br i1 %tobool407, label %if.else411, label %if.then408

if.then408:                                       ; preds = %land.lhs.true406
  %i116 = load i32, i32* @Material, align 4
  %sub409 = sub nsw i32 1800, %i116
  %i117 = load i32, i32* %score, align 4
  %add410 = add nsw i32 %i117, %sub409
  store i32 %add410, i32* %score, align 4
  br label %if.end424

if.else411:                                       ; preds = %land.lhs.true406, %land.lhs.true404, %if.else402
  %i118 = load i32, i32* @Material, align 4
  %cmp412 = icmp slt i32 %i118, 0
  br i1 %cmp412, label %land.lhs.true413, label %if.else421

land.lhs.true413:                                 ; preds = %if.else411
  %i119 = load i32, i32* @comp_color, align 4
  %cmp414 = icmp eq i32 %i119, 0
  br i1 %cmp414, label %land.lhs.true415, label %if.else421

land.lhs.true415:                                 ; preds = %land.lhs.true413
  %tobool416 = icmp ne i32 %bpassp.0, 0
  br i1 %tobool416, label %if.else421, label %if.then417

if.then417:                                       ; preds = %land.lhs.true415
  %i120 = load i32, i32* @Material, align 4
  %add418 = add nsw i32 1800, %i120
  %sub419 = sub nsw i32 0, %add418
  %i121 = load i32, i32* %score, align 4
  %add420 = add nsw i32 %i121, %sub419
  store i32 %add420, i32* %score, align 4
  br label %if.end423

if.else421:                                       ; preds = %land.lhs.true415, %land.lhs.true413, %if.else411
  %i122 = load i32, i32* @Material, align 4
  %i123 = load i32, i32* %score, align 4
  %add422 = add nsw i32 %i123, %i122
  store i32 %add422, i32* %score, align 4
  br label %if.end423

if.end423:                                        ; preds = %if.else421, %if.then417
  br label %if.end424

if.end424:                                        ; preds = %if.end423, %if.then408
  br label %if.end425

if.end425:                                        ; preds = %if.end424, %if.then400
  %tobool426 = icmp ne i32 %wpawns.0, 0
  br i1 %tobool426, label %if.else429, label %if.then427

if.then427:                                       ; preds = %if.end425
  %i124 = load i32, i32* %score, align 4
  %add428 = add nsw i32 %i124, 200
  store i32 %add428, i32* %score, align 4
  br label %if.end434

if.else429:                                       ; preds = %if.end425
  %tobool430 = icmp ne i32 %bpawns.0, 0
  br i1 %tobool430, label %if.end433, label %if.then431

if.then431:                                       ; preds = %if.else429
  %i125 = load i32, i32* %score, align 4
  %sub432 = sub nsw i32 %i125, 200
  store i32 %sub432, i32* %score, align 4
  br label %if.end433

if.end433:                                        ; preds = %if.then431, %if.else429
  br label %if.end434

if.end434:                                        ; preds = %if.end433, %if.then427
  %tobool435 = icmp ne i32 %wp.0, 0
  br i1 %tobool435, label %if.else437, label %if.then436

if.then436:                                       ; preds = %if.end434
  store i32 1000000, i32* %score, align 4
  br label %if.end441

if.else437:                                       ; preds = %if.end434
  %tobool438 = icmp ne i32 %bp.0, 0
  br i1 %tobool438, label %if.end440, label %if.then439

if.then439:                                       ; preds = %if.else437
  store i32 -1000000, i32* %score, align 4
  br label %if.end440

if.end440:                                        ; preds = %if.then439, %if.else437
  br label %if.end441

if.end441:                                        ; preds = %if.end440, %if.then436
  %i126 = load i32, i32* %score, align 4
  call void @storeECache(i32 %i126)
  %i127 = load i32, i32* @white_to_move, align 4
  %cmp442 = icmp eq i32 %i127, 1
  br i1 %cmp442, label %if.then443, label %if.else444

if.then443:                                       ; preds = %if.end441
  %i128 = load i32, i32* %score, align 4
  br label %return

if.else444:                                       ; preds = %if.end441
  %i129 = load i32, i32* %score, align 4
  %sub445 = sub nsw i32 0, %i129
  br label %return

return:                                           ; preds = %if.else444, %if.then443, %if.end, %if.then1
  %retval.0 = phi i32 [ %i2, %if.then1 ], [ %sub, %if.end ], [ %i128, %if.then443 ], [ %sub445, %if.else444 ]
  ret i32 %retval.0
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @l_pawn_mobility(i32 %square) #0 {
entry:
  %idxprom = sext i32 %square to i64
  %arrayidx = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom
  %i = load i32, i32* %arrayidx, align 4
  %cmp = icmp eq i32 %i, 1
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %add = add nsw i32 %square, 12
  %idxprom1 = sext i32 %add to i64
  %arrayidx2 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom1
  %i1 = load i32, i32* %arrayidx2, align 4
  %cmp3 = icmp eq i32 %i1, 13
  br i1 %cmp3, label %if.then4, label %if.end

if.then4:                                         ; preds = %if.then
  %inc = add nsw i32 0, 1
  br label %if.end

if.end:                                           ; preds = %if.then4, %if.then
  %m.0 = phi i32 [ %inc, %if.then4 ], [ 0, %if.then ]
  br label %if.end11

if.else:                                          ; preds = %entry
  %sub = sub nsw i32 %square, 12
  %idxprom5 = sext i32 %sub to i64
  %arrayidx6 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom5
  %i2 = load i32, i32* %arrayidx6, align 4
  %cmp7 = icmp eq i32 %i2, 13
  br i1 %cmp7, label %if.then8, label %if.end10

if.then8:                                         ; preds = %if.else
  %inc9 = add nsw i32 0, 1
  br label %if.end10

if.end10:                                         ; preds = %if.then8, %if.else
  %m.1 = phi i32 [ %inc9, %if.then8 ], [ 0, %if.else ]
  br label %if.end11

if.end11:                                         ; preds = %if.end10, %if.end
  %m.2 = phi i32 [ %m.0, %if.end ], [ %m.1, %if.end10 ]
  ret i32 %m.2
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @l_rook_mobility(i32 %square) #0 {
entry:
  %sub = sub nsw i32 %square, 12
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %l.0 = phi i32 [ %sub, %entry ], [ %sub1, %for.inc ]
  %m.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ]
  %idxprom = sext i32 %l.0 to i64
  %arrayidx = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom
  %i = load i32, i32* %arrayidx, align 4
  %cmp = icmp eq i32 %i, 13
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %inc = add nsw i32 %m.0, 1
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %sub1 = sub nsw i32 %l.0, 12
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %sub2 = sub nsw i32 %square, 1
  br label %for.cond3

for.cond3:                                        ; preds = %for.inc9, %for.end
  %l.1 = phi i32 [ %sub2, %for.end ], [ %sub10, %for.inc9 ]
  %m.1 = phi i32 [ %m.0, %for.end ], [ %inc8, %for.inc9 ]
  %idxprom4 = sext i32 %l.1 to i64
  %arrayidx5 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom4
  %i1 = load i32, i32* %arrayidx5, align 4
  %cmp6 = icmp eq i32 %i1, 13
  br i1 %cmp6, label %for.body7, label %for.end11

for.body7:                                        ; preds = %for.cond3
  %inc8 = add nsw i32 %m.1, 1
  br label %for.inc9

for.inc9:                                         ; preds = %for.body7
  %sub10 = sub nsw i32 %l.1, 1
  br label %for.cond3

for.end11:                                        ; preds = %for.cond3
  %add = add nsw i32 %square, 1
  br label %for.cond12

for.cond12:                                       ; preds = %for.inc18, %for.end11
  %l.2 = phi i32 [ %add, %for.end11 ], [ %add19, %for.inc18 ]
  %m.2 = phi i32 [ %m.1, %for.end11 ], [ %inc17, %for.inc18 ]
  %idxprom13 = sext i32 %l.2 to i64
  %arrayidx14 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom13
  %i2 = load i32, i32* %arrayidx14, align 4
  %cmp15 = icmp eq i32 %i2, 13
  br i1 %cmp15, label %for.body16, label %for.end20

for.body16:                                       ; preds = %for.cond12
  %inc17 = add nsw i32 %m.2, 1
  br label %for.inc18

for.inc18:                                        ; preds = %for.body16
  %add19 = add nsw i32 %l.2, 1
  br label %for.cond12

for.end20:                                        ; preds = %for.cond12
  %add21 = add nsw i32 %square, 12
  br label %for.cond22

for.cond22:                                       ; preds = %for.inc28, %for.end20
  %l.3 = phi i32 [ %add21, %for.end20 ], [ %add29, %for.inc28 ]
  %m.3 = phi i32 [ %m.2, %for.end20 ], [ %inc27, %for.inc28 ]
  %idxprom23 = sext i32 %l.3 to i64
  %arrayidx24 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom23
  %i3 = load i32, i32* %arrayidx24, align 4
  %cmp25 = icmp eq i32 %i3, 13
  br i1 %cmp25, label %for.body26, label %for.end30

for.body26:                                       ; preds = %for.cond22
  %inc27 = add nsw i32 %m.3, 1
  br label %for.inc28

for.inc28:                                        ; preds = %for.body26
  %add29 = add nsw i32 %l.3, 12
  br label %for.cond22

for.end30:                                        ; preds = %for.cond22
  ret i32 %m.3
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @l_bishop_mobility(i32 %square) #0 {
entry:
  %sub = sub nsw i32 %square, 13
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %l.0 = phi i32 [ %sub, %entry ], [ %sub1, %for.inc ]
  %m.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ]
  %idxprom = sext i32 %l.0 to i64
  %arrayidx = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom
  %i = load i32, i32* %arrayidx, align 4
  %cmp = icmp eq i32 %i, 13
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %inc = add nsw i32 %m.0, 1
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %sub1 = sub nsw i32 %l.0, 13
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %sub2 = sub nsw i32 %square, 11
  br label %for.cond3

for.cond3:                                        ; preds = %for.inc9, %for.end
  %l.1 = phi i32 [ %sub2, %for.end ], [ %sub10, %for.inc9 ]
  %m.1 = phi i32 [ %m.0, %for.end ], [ %inc8, %for.inc9 ]
  %idxprom4 = sext i32 %l.1 to i64
  %arrayidx5 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom4
  %i1 = load i32, i32* %arrayidx5, align 4
  %cmp6 = icmp eq i32 %i1, 13
  br i1 %cmp6, label %for.body7, label %for.end11

for.body7:                                        ; preds = %for.cond3
  %inc8 = add nsw i32 %m.1, 1
  br label %for.inc9

for.inc9:                                         ; preds = %for.body7
  %sub10 = sub nsw i32 %l.1, 11
  br label %for.cond3

for.end11:                                        ; preds = %for.cond3
  %add = add nsw i32 %square, 11
  br label %for.cond12

for.cond12:                                       ; preds = %for.inc18, %for.end11
  %l.2 = phi i32 [ %add, %for.end11 ], [ %add19, %for.inc18 ]
  %m.2 = phi i32 [ %m.1, %for.end11 ], [ %inc17, %for.inc18 ]
  %idxprom13 = sext i32 %l.2 to i64
  %arrayidx14 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom13
  %i2 = load i32, i32* %arrayidx14, align 4
  %cmp15 = icmp eq i32 %i2, 13
  br i1 %cmp15, label %for.body16, label %for.end20

for.body16:                                       ; preds = %for.cond12
  %inc17 = add nsw i32 %m.2, 1
  br label %for.inc18

for.inc18:                                        ; preds = %for.body16
  %add19 = add nsw i32 %l.2, 11
  br label %for.cond12

for.end20:                                        ; preds = %for.cond12
  %add21 = add nsw i32 %square, 13
  br label %for.cond22

for.cond22:                                       ; preds = %for.inc28, %for.end20
  %l.3 = phi i32 [ %add21, %for.end20 ], [ %add29, %for.inc28 ]
  %m.3 = phi i32 [ %m.2, %for.end20 ], [ %inc27, %for.inc28 ]
  %idxprom23 = sext i32 %l.3 to i64
  %arrayidx24 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom23
  %i3 = load i32, i32* %arrayidx24, align 4
  %cmp25 = icmp eq i32 %i3, 13
  br i1 %cmp25, label %for.body26, label %for.end30

for.body26:                                       ; preds = %for.cond22
  %inc27 = add nsw i32 %m.3, 1
  br label %for.inc28

for.inc28:                                        ; preds = %for.body26
  %add29 = add nsw i32 %l.3, 13
  br label %for.cond22

for.end30:                                        ; preds = %for.cond22
  ret i32 %m.3
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @l_knight_mobility(i32 %square) #0 {
entry:
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %d.0 = phi i32 [ 0, %entry ], [ %inc4, %for.inc ]
  %m.0 = phi i32 [ 0, %entry ], [ %m.1, %for.inc ]
  %cmp = icmp slt i32 %d.0, 8
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %idxprom = sext i32 %d.0 to i64
  %arrayidx = getelementptr inbounds [8 x i32], [8 x i32]* @l_knight_mobility.knight_o, i64 0, i64 %idxprom
  %i = load i32, i32* %arrayidx, align 4
  %add = add nsw i32 %square, %i
  %idxprom1 = sext i32 %add to i64
  %arrayidx2 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom1
  %i1 = load i32, i32* %arrayidx2, align 4
  %cmp3 = icmp eq i32 %i1, 13
  br i1 %cmp3, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %inc = add nsw i32 %m.0, 1
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  %m.1 = phi i32 [ %inc, %if.then ], [ %m.0, %for.body ]
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %inc4 = add nsw i32 %d.0, 1
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret i32 %m.0
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @l_king_mobility(i32 %square) #0 {
entry:
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %d.0 = phi i32 [ 0, %entry ], [ %inc4, %for.inc ]
  %m.0 = phi i32 [ 0, %entry ], [ %m.1, %for.inc ]
  %cmp = icmp slt i32 %d.0, 8
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %idxprom = sext i32 %d.0 to i64
  %arrayidx = getelementptr inbounds [8 x i32], [8 x i32]* @l_king_mobility.king_o, i64 0, i64 %idxprom
  %i = load i32, i32* %arrayidx, align 4
  %add = add nsw i32 %square, %i
  %idxprom1 = sext i32 %add to i64
  %arrayidx2 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom1
  %i1 = load i32, i32* %arrayidx2, align 4
  %cmp3 = icmp eq i32 %i1, 13
  br i1 %cmp3, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %inc = add nsw i32 %m.0, 1
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  %m.1 = phi i32 [ %inc, %if.then ], [ %m.0, %for.body ]
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %inc4 = add nsw i32 %d.0, 1
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret i32 %m.0
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @check_legal(%struct.move_s* %moves, i32 %m, i32 %incheck) #0 {
entry:
  %idxprom = sext i32 %m to i64
  %arrayidx = getelementptr inbounds %struct.move_s, %struct.move_s* %moves, i64 %idxprom
  %castled1 = getelementptr inbounds %struct.move_s, %struct.move_s* %arrayidx, i32 0, i32 4
  %i = load i32, i32* %castled1, align 4
  %idxprom2 = sext i32 %m to i64
  %arrayidx3 = getelementptr inbounds %struct.move_s, %struct.move_s* %moves, i64 %idxprom2
  %from4 = getelementptr inbounds %struct.move_s, %struct.move_s* %arrayidx3, i32 0, i32 0
  %i1 = load i32, i32* %from4, align 4
  %idxprom5 = sext i32 %m to i64
  %arrayidx6 = getelementptr inbounds %struct.move_s, %struct.move_s* %moves, i64 %idxprom5
  %target7 = getelementptr inbounds %struct.move_s, %struct.move_s* %arrayidx6, i32 0, i32 1
  %i2 = load i32, i32* %target7, align 4
  %i3 = load i32, i32* @Variant, align 4
  %cmp = icmp eq i32 %i3, 3
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %return

if.end:                                           ; preds = %entry
  %tobool = icmp ne i32 %i, 0
  br i1 %tobool, label %if.then8, label %if.else

if.then8:                                         ; preds = %if.end
  %cmp9 = icmp eq i32 %i, 1
  br i1 %cmp9, label %if.then10, label %if.end22

if.then10:                                        ; preds = %if.then8
  %call = call i32 @is_attacked(i32 30, i32 0)
  %tobool11 = icmp ne i32 %call, 0
  br i1 %tobool11, label %if.then12, label %if.end13

if.then12:                                        ; preds = %if.then10
  br label %return

if.end13:                                         ; preds = %if.then10
  %call14 = call i32 @is_attacked(i32 31, i32 0)
  %tobool15 = icmp ne i32 %call14, 0
  br i1 %tobool15, label %if.then16, label %if.end17

if.then16:                                        ; preds = %if.end13
  br label %return

if.end17:                                         ; preds = %if.end13
  %call18 = call i32 @is_attacked(i32 32, i32 0)
  %tobool19 = icmp ne i32 %call18, 0
  br i1 %tobool19, label %if.then20, label %if.end21

if.then20:                                        ; preds = %if.end17
  br label %return

if.end21:                                         ; preds = %if.end17
  br label %return

if.end22:                                         ; preds = %if.then8
  %cmp23 = icmp eq i32 %i, 2
  br i1 %cmp23, label %if.then24, label %if.end37

if.then24:                                        ; preds = %if.end22
  %call25 = call i32 @is_attacked(i32 30, i32 0)
  %tobool26 = icmp ne i32 %call25, 0
  br i1 %tobool26, label %if.then27, label %if.end28

if.then27:                                        ; preds = %if.then24
  br label %return

if.end28:                                         ; preds = %if.then24
  %call29 = call i32 @is_attacked(i32 29, i32 0)
  %tobool30 = icmp ne i32 %call29, 0
  br i1 %tobool30, label %if.then31, label %if.end32

if.then31:                                        ; preds = %if.end28
  br label %return

if.end32:                                         ; preds = %if.end28
  %call33 = call i32 @is_attacked(i32 28, i32 0)
  %tobool34 = icmp ne i32 %call33, 0
  br i1 %tobool34, label %if.then35, label %if.end36

if.then35:                                        ; preds = %if.end32
  br label %return

if.end36:                                         ; preds = %if.end32
  br label %return

if.end37:                                         ; preds = %if.end22
  %cmp38 = icmp eq i32 %i, 3
  br i1 %cmp38, label %if.then39, label %if.end52

if.then39:                                        ; preds = %if.end37
  %call40 = call i32 @is_attacked(i32 114, i32 1)
  %tobool41 = icmp ne i32 %call40, 0
  br i1 %tobool41, label %if.then42, label %if.end43

if.then42:                                        ; preds = %if.then39
  br label %return

if.end43:                                         ; preds = %if.then39
  %call44 = call i32 @is_attacked(i32 115, i32 1)
  %tobool45 = icmp ne i32 %call44, 0
  br i1 %tobool45, label %if.then46, label %if.end47

if.then46:                                        ; preds = %if.end43
  br label %return

if.end47:                                         ; preds = %if.end43
  %call48 = call i32 @is_attacked(i32 116, i32 1)
  %tobool49 = icmp ne i32 %call48, 0
  br i1 %tobool49, label %if.then50, label %if.end51

if.then50:                                        ; preds = %if.end47
  br label %return

if.end51:                                         ; preds = %if.end47
  br label %return

if.end52:                                         ; preds = %if.end37
  %cmp53 = icmp eq i32 %i, 4
  br i1 %cmp53, label %if.then54, label %if.end67

if.then54:                                        ; preds = %if.end52
  %call55 = call i32 @is_attacked(i32 114, i32 1)
  %tobool56 = icmp ne i32 %call55, 0
  br i1 %tobool56, label %if.then57, label %if.end58

if.then57:                                        ; preds = %if.then54
  br label %return

if.end58:                                         ; preds = %if.then54
  %call59 = call i32 @is_attacked(i32 113, i32 1)
  %tobool60 = icmp ne i32 %call59, 0
  br i1 %tobool60, label %if.then61, label %if.end62

if.then61:                                        ; preds = %if.end58
  br label %return

if.end62:                                         ; preds = %if.end58
  %call63 = call i32 @is_attacked(i32 112, i32 1)
  %tobool64 = icmp ne i32 %call63, 0
  br i1 %tobool64, label %if.then65, label %if.end66

if.then65:                                        ; preds = %if.end62
  br label %return

if.end66:                                         ; preds = %if.end62
  br label %return

if.end67:                                         ; preds = %if.end52
  br label %if.end1015

if.else:                                          ; preds = %if.end
  %i4 = load i32, i32* @white_to_move, align 4
  %and = and i32 %i4, 1
  %tobool68 = icmp ne i32 %and, 0
  br i1 %tobool68, label %if.then69, label %if.else532

if.then69:                                        ; preds = %if.else
  %tobool70 = icmp ne i32 %incheck, 0
  br i1 %tobool70, label %if.end527, label %if.then71

if.then71:                                        ; preds = %if.then69
  %idxprom72 = sext i32 %m to i64
  %arrayidx73 = getelementptr inbounds %struct.move_s, %struct.move_s* %moves, i64 %idxprom72
  %from74 = getelementptr inbounds %struct.move_s, %struct.move_s* %arrayidx73, i32 0, i32 0
  %i5 = load i32, i32* %from74, align 4
  %cmp75 = icmp eq i32 %i5, 0
  br i1 %cmp75, label %if.then76, label %if.end77

if.then76:                                        ; preds = %if.then71
  br label %return

if.end77:                                         ; preds = %if.then71
  %idxprom78 = sext i32 %m to i64
  %arrayidx79 = getelementptr inbounds %struct.move_s, %struct.move_s* %moves, i64 %idxprom78
  %promoted = getelementptr inbounds %struct.move_s, %struct.move_s* %arrayidx79, i32 0, i32 3
  %i6 = load i32, i32* %promoted, align 4
  %tobool80 = icmp ne i32 %i6, 0
  br i1 %tobool80, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end77
  br label %cond.end

cond.false:                                       ; preds = %if.end77
  %idxprom81 = sext i32 %i2 to i64
  %arrayidx82 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom81
  %i7 = load i32, i32* %arrayidx82, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ 2, %cond.true ], [ %i7, %cond.false ]
  switch i32 %cond, label %sw.default [
    i32 2, label %sw.bb
    i32 4, label %sw.bb132
    i32 12, label %sw.bb158
    i32 8, label %sw.bb194
    i32 10, label %sw.bb230
  ]

sw.bb:                                            ; preds = %cond.end
  %idxprom83 = sext i32 %m to i64
  %arrayidx84 = getelementptr inbounds %struct.move_s, %struct.move_s* %moves, i64 %idxprom83
  %captured = getelementptr inbounds %struct.move_s, %struct.move_s* %arrayidx84, i32 0, i32 2
  %i8 = load i32, i32* %captured, align 4
  %cmp85 = icmp ne i32 %i8, 13
  br i1 %cmp85, label %if.then86, label %if.else111

if.then86:                                        ; preds = %sw.bb
  %idxprom87 = sext i32 %i1 to i64
  %arrayidx88 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xfile to [144 x i32]*), i64 0, i64 %idxprom87
  %i9 = load i32, i32* %arrayidx88, align 4
  %i10 = load i32, i32* @bking_loc, align 4
  %idxprom89 = sext i32 %i10 to i64
  %arrayidx90 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xfile to [144 x i32]*), i64 0, i64 %idxprom89
  %i11 = load i32, i32* %arrayidx90, align 4
  %cmp91 = icmp ne i32 %i9, %i11
  br i1 %cmp91, label %land.lhs.true, label %if.end110

land.lhs.true:                                    ; preds = %if.then86
  %idxprom92 = sext i32 %i1 to i64
  %arrayidx93 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xrank to [144 x i32]*), i64 0, i64 %idxprom92
  %i12 = load i32, i32* %arrayidx93, align 4
  %i13 = load i32, i32* @bking_loc, align 4
  %idxprom94 = sext i32 %i13 to i64
  %arrayidx95 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xrank to [144 x i32]*), i64 0, i64 %idxprom94
  %i14 = load i32, i32* %arrayidx95, align 4
  %cmp96 = icmp ne i32 %i12, %i14
  br i1 %cmp96, label %land.lhs.true97, label %if.end110

land.lhs.true97:                                  ; preds = %land.lhs.true
  %idxprom98 = sext i32 %i1 to i64
  %arrayidx99 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xdiagl to [144 x i32]*), i64 0, i64 %idxprom98
  %i15 = load i32, i32* %arrayidx99, align 4
  %i16 = load i32, i32* @bking_loc, align 4
  %idxprom100 = sext i32 %i16 to i64
  %arrayidx101 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xdiagl to [144 x i32]*), i64 0, i64 %idxprom100
  %i17 = load i32, i32* %arrayidx101, align 4
  %cmp102 = icmp ne i32 %i15, %i17
  br i1 %cmp102, label %land.lhs.true103, label %if.end110

land.lhs.true103:                                 ; preds = %land.lhs.true97
  %idxprom104 = sext i32 %i1 to i64
  %arrayidx105 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xdiagr to [144 x i32]*), i64 0, i64 %idxprom104
  %i18 = load i32, i32* %arrayidx105, align 4
  %i19 = load i32, i32* @bking_loc, align 4
  %idxprom106 = sext i32 %i19 to i64
  %arrayidx107 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xdiagr to [144 x i32]*), i64 0, i64 %idxprom106
  %i20 = load i32, i32* %arrayidx107, align 4
  %cmp108 = icmp ne i32 %i18, %i20
  br i1 %cmp108, label %if.then109, label %if.end110

if.then109:                                       ; preds = %land.lhs.true103
  br label %return

if.end110:                                        ; preds = %land.lhs.true103, %land.lhs.true97, %land.lhs.true, %if.then86
  br label %if.end131

if.else111:                                       ; preds = %sw.bb
  %idxprom112 = sext i32 %i1 to i64
  %arrayidx113 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xrank to [144 x i32]*), i64 0, i64 %idxprom112
  %i21 = load i32, i32* %arrayidx113, align 4
  %i22 = load i32, i32* @bking_loc, align 4
  %idxprom114 = sext i32 %i22 to i64
  %arrayidx115 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xrank to [144 x i32]*), i64 0, i64 %idxprom114
  %i23 = load i32, i32* %arrayidx115, align 4
  %cmp116 = icmp ne i32 %i21, %i23
  br i1 %cmp116, label %land.lhs.true117, label %if.end130

land.lhs.true117:                                 ; preds = %if.else111
  %idxprom118 = sext i32 %i1 to i64
  %arrayidx119 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xdiagl to [144 x i32]*), i64 0, i64 %idxprom118
  %i24 = load i32, i32* %arrayidx119, align 4
  %i25 = load i32, i32* @bking_loc, align 4
  %idxprom120 = sext i32 %i25 to i64
  %arrayidx121 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xdiagl to [144 x i32]*), i64 0, i64 %idxprom120
  %i26 = load i32, i32* %arrayidx121, align 4
  %cmp122 = icmp ne i32 %i24, %i26
  br i1 %cmp122, label %land.lhs.true123, label %if.end130

land.lhs.true123:                                 ; preds = %land.lhs.true117
  %idxprom124 = sext i32 %i1 to i64
  %arrayidx125 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xdiagr to [144 x i32]*), i64 0, i64 %idxprom124
  %i27 = load i32, i32* %arrayidx125, align 4
  %i28 = load i32, i32* @bking_loc, align 4
  %idxprom126 = sext i32 %i28 to i64
  %arrayidx127 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xdiagr to [144 x i32]*), i64 0, i64 %idxprom126
  %i29 = load i32, i32* %arrayidx127, align 4
  %cmp128 = icmp ne i32 %i27, %i29
  br i1 %cmp128, label %if.then129, label %if.end130

if.then129:                                       ; preds = %land.lhs.true123
  br label %return

if.end130:                                        ; preds = %land.lhs.true123, %land.lhs.true117, %if.else111
  br label %if.end131

if.end131:                                        ; preds = %if.end130, %if.end110
  br label %sw.epilog

sw.bb132:                                         ; preds = %cond.end
  %idxprom133 = sext i32 %i1 to i64
  %arrayidx134 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xfile to [144 x i32]*), i64 0, i64 %idxprom133
  %i30 = load i32, i32* %arrayidx134, align 4
  %i31 = load i32, i32* @bking_loc, align 4
  %idxprom135 = sext i32 %i31 to i64
  %arrayidx136 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xfile to [144 x i32]*), i64 0, i64 %idxprom135
  %i32 = load i32, i32* %arrayidx136, align 4
  %cmp137 = icmp ne i32 %i30, %i32
  br i1 %cmp137, label %land.lhs.true138, label %if.end157

land.lhs.true138:                                 ; preds = %sw.bb132
  %idxprom139 = sext i32 %i1 to i64
  %arrayidx140 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xrank to [144 x i32]*), i64 0, i64 %idxprom139
  %i33 = load i32, i32* %arrayidx140, align 4
  %i34 = load i32, i32* @bking_loc, align 4
  %idxprom141 = sext i32 %i34 to i64
  %arrayidx142 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xrank to [144 x i32]*), i64 0, i64 %idxprom141
  %i35 = load i32, i32* %arrayidx142, align 4
  %cmp143 = icmp ne i32 %i33, %i35
  br i1 %cmp143, label %land.lhs.true144, label %if.end157

land.lhs.true144:                                 ; preds = %land.lhs.true138
  %idxprom145 = sext i32 %i1 to i64
  %arrayidx146 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xdiagl to [144 x i32]*), i64 0, i64 %idxprom145
  %i36 = load i32, i32* %arrayidx146, align 4
  %i37 = load i32, i32* @bking_loc, align 4
  %idxprom147 = sext i32 %i37 to i64
  %arrayidx148 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xdiagl to [144 x i32]*), i64 0, i64 %idxprom147
  %i38 = load i32, i32* %arrayidx148, align 4
  %cmp149 = icmp ne i32 %i36, %i38
  br i1 %cmp149, label %land.lhs.true150, label %if.end157

land.lhs.true150:                                 ; preds = %land.lhs.true144
  %idxprom151 = sext i32 %i1 to i64
  %arrayidx152 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xdiagr to [144 x i32]*), i64 0, i64 %idxprom151
  %i39 = load i32, i32* %arrayidx152, align 4
  %i40 = load i32, i32* @bking_loc, align 4
  %idxprom153 = sext i32 %i40 to i64
  %arrayidx154 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xdiagr to [144 x i32]*), i64 0, i64 %idxprom153
  %i41 = load i32, i32* %arrayidx154, align 4
  %cmp155 = icmp ne i32 %i39, %i41
  br i1 %cmp155, label %if.then156, label %if.end157

if.then156:                                       ; preds = %land.lhs.true150
  br label %return

if.end157:                                        ; preds = %land.lhs.true150, %land.lhs.true144, %land.lhs.true138, %sw.bb132
  br label %sw.epilog

sw.bb158:                                         ; preds = %cond.end
  %idxprom159 = sext i32 %i1 to i64
  %arrayidx160 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xfile to [144 x i32]*), i64 0, i64 %idxprom159
  %i42 = load i32, i32* %arrayidx160, align 4
  %i43 = load i32, i32* @bking_loc, align 4
  %idxprom161 = sext i32 %i43 to i64
  %arrayidx162 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xfile to [144 x i32]*), i64 0, i64 %idxprom161
  %i44 = load i32, i32* %arrayidx162, align 4
  %cmp163 = icmp ne i32 %i42, %i44
  br i1 %cmp163, label %land.lhs.true164, label %if.end193

land.lhs.true164:                                 ; preds = %sw.bb158
  %idxprom165 = sext i32 %i1 to i64
  %arrayidx166 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xrank to [144 x i32]*), i64 0, i64 %idxprom165
  %i45 = load i32, i32* %arrayidx166, align 4
  %i46 = load i32, i32* @bking_loc, align 4
  %idxprom167 = sext i32 %i46 to i64
  %arrayidx168 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xrank to [144 x i32]*), i64 0, i64 %idxprom167
  %i47 = load i32, i32* %arrayidx168, align 4
  %cmp169 = icmp ne i32 %i45, %i47
  br i1 %cmp169, label %if.then170, label %if.end193

if.then170:                                       ; preds = %land.lhs.true164
  %idxprom171 = sext i32 %i1 to i64
  %arrayidx172 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xdiagl to [144 x i32]*), i64 0, i64 %idxprom171
  %i48 = load i32, i32* %arrayidx172, align 4
  %idxprom173 = sext i32 %i2 to i64
  %arrayidx174 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xdiagl to [144 x i32]*), i64 0, i64 %idxprom173
  %i49 = load i32, i32* %arrayidx174, align 4
  %cmp175 = icmp eq i32 %i48, %i49
  br i1 %cmp175, label %if.then176, label %if.else184

if.then176:                                       ; preds = %if.then170
  %idxprom177 = sext i32 %i1 to i64
  %arrayidx178 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xdiagr to [144 x i32]*), i64 0, i64 %idxprom177
  %i50 = load i32, i32* %arrayidx178, align 4
  %i51 = load i32, i32* @bking_loc, align 4
  %idxprom179 = sext i32 %i51 to i64
  %arrayidx180 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xdiagr to [144 x i32]*), i64 0, i64 %idxprom179
  %i52 = load i32, i32* %arrayidx180, align 4
  %cmp181 = icmp ne i32 %i50, %i52
  br i1 %cmp181, label %if.then182, label %if.end183

if.then182:                                       ; preds = %if.then176
  br label %return

if.end183:                                        ; preds = %if.then176
  br label %if.end192

if.else184:                                       ; preds = %if.then170
  %idxprom185 = sext i32 %i1 to i64
  %arrayidx186 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xdiagl to [144 x i32]*), i64 0, i64 %idxprom185
  %i53 = load i32, i32* %arrayidx186, align 4
  %i54 = load i32, i32* @bking_loc, align 4
  %idxprom187 = sext i32 %i54 to i64
  %arrayidx188 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xdiagl to [144 x i32]*), i64 0, i64 %idxprom187
  %i55 = load i32, i32* %arrayidx188, align 4
  %cmp189 = icmp ne i32 %i53, %i55
  br i1 %cmp189, label %if.then190, label %if.end191

if.then190:                                       ; preds = %if.else184
  br label %return

if.end191:                                        ; preds = %if.else184
  br label %if.end192

if.end192:                                        ; preds = %if.end191, %if.end183
  br label %if.end193

if.end193:                                        ; preds = %if.end192, %land.lhs.true164, %sw.bb158
  br label %sw.epilog

sw.bb194:                                         ; preds = %cond.end
  %idxprom195 = sext i32 %i1 to i64
  %arrayidx196 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xdiagr to [144 x i32]*), i64 0, i64 %idxprom195
  %i56 = load i32, i32* %arrayidx196, align 4
  %i57 = load i32, i32* @bking_loc, align 4
  %idxprom197 = sext i32 %i57 to i64
  %arrayidx198 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xdiagr to [144 x i32]*), i64 0, i64 %idxprom197
  %i58 = load i32, i32* %arrayidx198, align 4
  %cmp199 = icmp ne i32 %i56, %i58
  br i1 %cmp199, label %land.lhs.true200, label %if.end229

land.lhs.true200:                                 ; preds = %sw.bb194
  %idxprom201 = sext i32 %i1 to i64
  %arrayidx202 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xdiagl to [144 x i32]*), i64 0, i64 %idxprom201
  %i59 = load i32, i32* %arrayidx202, align 4
  %i60 = load i32, i32* @bking_loc, align 4
  %idxprom203 = sext i32 %i60 to i64
  %arrayidx204 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xdiagl to [144 x i32]*), i64 0, i64 %idxprom203
  %i61 = load i32, i32* %arrayidx204, align 4
  %cmp205 = icmp ne i32 %i59, %i61
  br i1 %cmp205, label %if.then206, label %if.end229

if.then206:                                       ; preds = %land.lhs.true200
  %idxprom207 = sext i32 %i1 to i64
  %arrayidx208 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xrank to [144 x i32]*), i64 0, i64 %idxprom207
  %i62 = load i32, i32* %arrayidx208, align 4
  %idxprom209 = sext i32 %i2 to i64
  %arrayidx210 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xrank to [144 x i32]*), i64 0, i64 %idxprom209
  %i63 = load i32, i32* %arrayidx210, align 4
  %cmp211 = icmp eq i32 %i62, %i63
  br i1 %cmp211, label %if.then212, label %if.else220

if.then212:                                       ; preds = %if.then206
  %idxprom213 = sext i32 %i1 to i64
  %arrayidx214 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xfile to [144 x i32]*), i64 0, i64 %idxprom213
  %i64 = load i32, i32* %arrayidx214, align 4
  %i65 = load i32, i32* @bking_loc, align 4
  %idxprom215 = sext i32 %i65 to i64
  %arrayidx216 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xfile to [144 x i32]*), i64 0, i64 %idxprom215
  %i66 = load i32, i32* %arrayidx216, align 4
  %cmp217 = icmp ne i32 %i64, %i66
  br i1 %cmp217, label %if.then218, label %if.end219

if.then218:                                       ; preds = %if.then212
  br label %return

if.end219:                                        ; preds = %if.then212
  br label %if.end228

if.else220:                                       ; preds = %if.then206
  %idxprom221 = sext i32 %i1 to i64
  %arrayidx222 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xrank to [144 x i32]*), i64 0, i64 %idxprom221
  %i67 = load i32, i32* %arrayidx222, align 4
  %i68 = load i32, i32* @bking_loc, align 4
  %idxprom223 = sext i32 %i68 to i64
  %arrayidx224 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xrank to [144 x i32]*), i64 0, i64 %idxprom223
  %i69 = load i32, i32* %arrayidx224, align 4
  %cmp225 = icmp ne i32 %i67, %i69
  br i1 %cmp225, label %if.then226, label %if.end227

if.then226:                                       ; preds = %if.else220
  br label %return

if.end227:                                        ; preds = %if.else220
  br label %if.end228

if.end228:                                        ; preds = %if.end227, %if.end219
  br label %if.end229

if.end229:                                        ; preds = %if.end228, %land.lhs.true200, %sw.bb194
  br label %sw.epilog

sw.bb230:                                         ; preds = %cond.end
  %idxprom231 = sext i32 %i1 to i64
  %arrayidx232 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xfile to [144 x i32]*), i64 0, i64 %idxprom231
  %i70 = load i32, i32* %arrayidx232, align 4
  %idxprom233 = sext i32 %i2 to i64
  %arrayidx234 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xfile to [144 x i32]*), i64 0, i64 %idxprom233
  %i71 = load i32, i32* %arrayidx234, align 4
  %cmp235 = icmp eq i32 %i70, %i71
  br i1 %cmp235, label %if.then236, label %if.else256

if.then236:                                       ; preds = %sw.bb230
  %idxprom237 = sext i32 %i1 to i64
  %arrayidx238 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xdiagr to [144 x i32]*), i64 0, i64 %idxprom237
  %i72 = load i32, i32* %arrayidx238, align 4
  %i73 = load i32, i32* @bking_loc, align 4
  %idxprom239 = sext i32 %i73 to i64
  %arrayidx240 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xdiagr to [144 x i32]*), i64 0, i64 %idxprom239
  %i74 = load i32, i32* %arrayidx240, align 4
  %cmp241 = icmp ne i32 %i72, %i74
  br i1 %cmp241, label %land.lhs.true242, label %if.end255

land.lhs.true242:                                 ; preds = %if.then236
  %idxprom243 = sext i32 %i1 to i64
  %arrayidx244 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xdiagl to [144 x i32]*), i64 0, i64 %idxprom243
  %i75 = load i32, i32* %arrayidx244, align 4
  %i76 = load i32, i32* @bking_loc, align 4
  %idxprom245 = sext i32 %i76 to i64
  %arrayidx246 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xdiagl to [144 x i32]*), i64 0, i64 %idxprom245
  %i77 = load i32, i32* %arrayidx246, align 4
  %cmp247 = icmp ne i32 %i75, %i77
  br i1 %cmp247, label %land.lhs.true248, label %if.end255

land.lhs.true248:                                 ; preds = %land.lhs.true242
  %idxprom249 = sext i32 %i1 to i64
  %arrayidx250 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xrank to [144 x i32]*), i64 0, i64 %idxprom249
  %i78 = load i32, i32* %arrayidx250, align 4
  %i79 = load i32, i32* @bking_loc, align 4
  %idxprom251 = sext i32 %i79 to i64
  %arrayidx252 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xrank to [144 x i32]*), i64 0, i64 %idxprom251
  %i80 = load i32, i32* %arrayidx252, align 4
  %cmp253 = icmp ne i32 %i78, %i80
  br i1 %cmp253, label %if.then254, label %if.end255

if.then254:                                       ; preds = %land.lhs.true248
  br label %return

if.end255:                                        ; preds = %land.lhs.true248, %land.lhs.true242, %if.then236
  br label %if.end337

if.else256:                                       ; preds = %sw.bb230
  %idxprom257 = sext i32 %i1 to i64
  %arrayidx258 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xrank to [144 x i32]*), i64 0, i64 %idxprom257
  %i81 = load i32, i32* %arrayidx258, align 4
  %idxprom259 = sext i32 %i2 to i64
  %arrayidx260 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xrank to [144 x i32]*), i64 0, i64 %idxprom259
  %i82 = load i32, i32* %arrayidx260, align 4
  %cmp261 = icmp eq i32 %i81, %i82
  br i1 %cmp261, label %if.then262, label %if.else282

if.then262:                                       ; preds = %if.else256
  %idxprom263 = sext i32 %i1 to i64
  %arrayidx264 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xdiagr to [144 x i32]*), i64 0, i64 %idxprom263
  %i83 = load i32, i32* %arrayidx264, align 4
  %i84 = load i32, i32* @bking_loc, align 4
  %idxprom265 = sext i32 %i84 to i64
  %arrayidx266 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xdiagr to [144 x i32]*), i64 0, i64 %idxprom265
  %i85 = load i32, i32* %arrayidx266, align 4
  %cmp267 = icmp ne i32 %i83, %i85
  br i1 %cmp267, label %land.lhs.true268, label %if.end281

land.lhs.true268:                                 ; preds = %if.then262
  %idxprom269 = sext i32 %i1 to i64
  %arrayidx270 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xfile to [144 x i32]*), i64 0, i64 %idxprom269
  %i86 = load i32, i32* %arrayidx270, align 4
  %i87 = load i32, i32* @bking_loc, align 4
  %idxprom271 = sext i32 %i87 to i64
  %arrayidx272 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xfile to [144 x i32]*), i64 0, i64 %idxprom271
  %i88 = load i32, i32* %arrayidx272, align 4
  %cmp273 = icmp ne i32 %i86, %i88
  br i1 %cmp273, label %land.lhs.true274, label %if.end281

land.lhs.true274:                                 ; preds = %land.lhs.true268
  %idxprom275 = sext i32 %i1 to i64
  %arrayidx276 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xdiagl to [144 x i32]*), i64 0, i64 %idxprom275
  %i89 = load i32, i32* %arrayidx276, align 4
  %i90 = load i32, i32* @bking_loc, align 4
  %idxprom277 = sext i32 %i90 to i64
  %arrayidx278 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xdiagl to [144 x i32]*), i64 0, i64 %idxprom277
  %i91 = load i32, i32* %arrayidx278, align 4
  %cmp279 = icmp ne i32 %i89, %i91
  br i1 %cmp279, label %if.then280, label %if.end281

if.then280:                                       ; preds = %land.lhs.true274
  br label %return

if.end281:                                        ; preds = %land.lhs.true274, %land.lhs.true268, %if.then262
  br label %if.end336

if.else282:                                       ; preds = %if.else256
  %idxprom283 = sext i32 %i1 to i64
  %arrayidx284 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xdiagl to [144 x i32]*), i64 0, i64 %idxprom283
  %i92 = load i32, i32* %arrayidx284, align 4
  %idxprom285 = sext i32 %i2 to i64
  %arrayidx286 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xdiagl to [144 x i32]*), i64 0, i64 %idxprom285
  %i93 = load i32, i32* %arrayidx286, align 4
  %cmp287 = icmp eq i32 %i92, %i93
  br i1 %cmp287, label %if.then288, label %if.else308

if.then288:                                       ; preds = %if.else282
  %idxprom289 = sext i32 %i1 to i64
  %arrayidx290 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xdiagr to [144 x i32]*), i64 0, i64 %idxprom289
  %i94 = load i32, i32* %arrayidx290, align 4
  %i95 = load i32, i32* @bking_loc, align 4
  %idxprom291 = sext i32 %i95 to i64
  %arrayidx292 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xdiagr to [144 x i32]*), i64 0, i64 %idxprom291
  %i96 = load i32, i32* %arrayidx292, align 4
  %cmp293 = icmp ne i32 %i94, %i96
  br i1 %cmp293, label %land.lhs.true294, label %if.end307

land.lhs.true294:                                 ; preds = %if.then288
  %idxprom295 = sext i32 %i1 to i64
  %arrayidx296 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xfile to [144 x i32]*), i64 0, i64 %idxprom295
  %i97 = load i32, i32* %arrayidx296, align 4
  %i98 = load i32, i32* @bking_loc, align 4
  %idxprom297 = sext i32 %i98 to i64
  %arrayidx298 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xfile to [144 x i32]*), i64 0, i64 %idxprom297
  %i99 = load i32, i32* %arrayidx298, align 4
  %cmp299 = icmp ne i32 %i97, %i99
  br i1 %cmp299, label %land.lhs.true300, label %if.end307

land.lhs.true300:                                 ; preds = %land.lhs.true294
  %idxprom301 = sext i32 %i1 to i64
  %arrayidx302 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xrank to [144 x i32]*), i64 0, i64 %idxprom301
  %i100 = load i32, i32* %arrayidx302, align 4
  %i101 = load i32, i32* @bking_loc, align 4
  %idxprom303 = sext i32 %i101 to i64
  %arrayidx304 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xrank to [144 x i32]*), i64 0, i64 %idxprom303
  %i102 = load i32, i32* %arrayidx304, align 4
  %cmp305 = icmp ne i32 %i100, %i102
  br i1 %cmp305, label %if.then306, label %if.end307

if.then306:                                       ; preds = %land.lhs.true300
  br label %return

if.end307:                                        ; preds = %land.lhs.true300, %land.lhs.true294, %if.then288
  br label %if.end335

if.else308:                                       ; preds = %if.else282
  %idxprom309 = sext i32 %i1 to i64
  %arrayidx310 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xdiagr to [144 x i32]*), i64 0, i64 %idxprom309
  %i103 = load i32, i32* %arrayidx310, align 4
  %idxprom311 = sext i32 %i2 to i64
  %arrayidx312 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xdiagr to [144 x i32]*), i64 0, i64 %idxprom311
  %i104 = load i32, i32* %arrayidx312, align 4
  %cmp313 = icmp eq i32 %i103, %i104
  br i1 %cmp313, label %if.then314, label %if.end334

if.then314:                                       ; preds = %if.else308
  %idxprom315 = sext i32 %i1 to i64
  %arrayidx316 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xdiagl to [144 x i32]*), i64 0, i64 %idxprom315
  %i105 = load i32, i32* %arrayidx316, align 4
  %i106 = load i32, i32* @bking_loc, align 4
  %idxprom317 = sext i32 %i106 to i64
  %arrayidx318 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xdiagl to [144 x i32]*), i64 0, i64 %idxprom317
  %i107 = load i32, i32* %arrayidx318, align 4
  %cmp319 = icmp ne i32 %i105, %i107
  br i1 %cmp319, label %land.lhs.true320, label %if.end333

land.lhs.true320:                                 ; preds = %if.then314
  %idxprom321 = sext i32 %i1 to i64
  %arrayidx322 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xfile to [144 x i32]*), i64 0, i64 %idxprom321
  %i108 = load i32, i32* %arrayidx322, align 4
  %i109 = load i32, i32* @bking_loc, align 4
  %idxprom323 = sext i32 %i109 to i64
  %arrayidx324 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xfile to [144 x i32]*), i64 0, i64 %idxprom323
  %i110 = load i32, i32* %arrayidx324, align 4
  %cmp325 = icmp ne i32 %i108, %i110
  br i1 %cmp325, label %land.lhs.true326, label %if.end333

land.lhs.true326:                                 ; preds = %land.lhs.true320
  %idxprom327 = sext i32 %i1 to i64
  %arrayidx328 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xrank to [144 x i32]*), i64 0, i64 %idxprom327
  %i111 = load i32, i32* %arrayidx328, align 4
  %i112 = load i32, i32* @bking_loc, align 4
  %idxprom329 = sext i32 %i112 to i64
  %arrayidx330 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xrank to [144 x i32]*), i64 0, i64 %idxprom329
  %i113 = load i32, i32* %arrayidx330, align 4
  %cmp331 = icmp ne i32 %i111, %i113
  br i1 %cmp331, label %if.then332, label %if.end333

if.then332:                                       ; preds = %land.lhs.true326
  br label %return

if.end333:                                        ; preds = %land.lhs.true326, %land.lhs.true320, %if.then314
  br label %if.end334

if.end334:                                        ; preds = %if.end333, %if.else308
  br label %if.end335

if.end335:                                        ; preds = %if.end334, %if.end307
  br label %if.end336

if.end336:                                        ; preds = %if.end335, %if.end281
  br label %if.end337

if.end337:                                        ; preds = %if.end336, %if.end255
  br label %sw.epilog

sw.default:                                       ; preds = %cond.end
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %if.end337, %if.end229, %if.end193, %if.end157, %if.end131
  %idxprom338 = sext i32 %i2 to i64
  %arrayidx339 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom338
  %i114 = load i32, i32* %arrayidx339, align 4
  %cmp340 = icmp ne i32 %i114, 6
  br i1 %cmp340, label %if.then341, label %if.end526

if.then341:                                       ; preds = %sw.epilog
  %idxprom342 = sext i32 %i1 to i64
  %arrayidx343 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xfile to [144 x i32]*), i64 0, i64 %idxprom342
  %i115 = load i32, i32* %arrayidx343, align 4
  %i116 = load i32, i32* @bking_loc, align 4
  %idxprom344 = sext i32 %i116 to i64
  %arrayidx345 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xfile to [144 x i32]*), i64 0, i64 %idxprom344
  %i117 = load i32, i32* %arrayidx345, align 4
  %cmp346 = icmp eq i32 %i115, %i117
  br i1 %cmp346, label %if.then347, label %if.else381

if.then347:                                       ; preds = %if.then341
  %i118 = load i32, i32* @bking_loc, align 4
  %cmp348 = icmp sgt i32 %i118, %i1
  br i1 %cmp348, label %if.then349, label %if.else362

if.then349:                                       ; preds = %if.then347
  %i119 = load i32, i32* @bking_loc, align 4
  %sub = sub nsw i32 %i119, 12
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then349
  %l.0 = phi i32 [ %sub, %if.then349 ], [ %sub353, %for.inc ]
  %idxprom350 = sext i32 %l.0 to i64
  %arrayidx351 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom350
  %i120 = load i32, i32* %arrayidx351, align 4
  %cmp352 = icmp eq i32 %i120, 13
  br i1 %cmp352, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %sub353 = sub nsw i32 %l.0, 12
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %idxprom354 = sext i32 %l.0 to i64
  %arrayidx355 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom354
  %i121 = load i32, i32* %arrayidx355, align 4
  %cmp356 = icmp eq i32 %i121, 7
  br i1 %cmp356, label %if.then360, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %for.end
  %idxprom357 = sext i32 %l.0 to i64
  %arrayidx358 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom357
  %i122 = load i32, i32* %arrayidx358, align 4
  %cmp359 = icmp eq i32 %i122, 9
  br i1 %cmp359, label %if.then360, label %if.end361

if.then360:                                       ; preds = %lor.lhs.false, %for.end
  br label %return

if.end361:                                        ; preds = %lor.lhs.false
  br label %if.end380

if.else362:                                       ; preds = %if.then347
  %i123 = load i32, i32* @bking_loc, align 4
  %add = add nsw i32 %i123, 12
  br label %for.cond363

for.cond363:                                      ; preds = %for.inc368, %if.else362
  %l.1 = phi i32 [ %add, %if.else362 ], [ %add369, %for.inc368 ]
  %idxprom364 = sext i32 %l.1 to i64
  %arrayidx365 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom364
  %i124 = load i32, i32* %arrayidx365, align 4
  %cmp366 = icmp eq i32 %i124, 13
  br i1 %cmp366, label %for.body367, label %for.end370

for.body367:                                      ; preds = %for.cond363
  br label %for.inc368

for.inc368:                                       ; preds = %for.body367
  %add369 = add nsw i32 %l.1, 12
  br label %for.cond363

for.end370:                                       ; preds = %for.cond363
  %idxprom371 = sext i32 %l.1 to i64
  %arrayidx372 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom371
  %i125 = load i32, i32* %arrayidx372, align 4
  %cmp373 = icmp eq i32 %i125, 7
  br i1 %cmp373, label %if.then378, label %lor.lhs.false374

lor.lhs.false374:                                 ; preds = %for.end370
  %idxprom375 = sext i32 %l.1 to i64
  %arrayidx376 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom375
  %i126 = load i32, i32* %arrayidx376, align 4
  %cmp377 = icmp eq i32 %i126, 9
  br i1 %cmp377, label %if.then378, label %if.end379

if.then378:                                       ; preds = %lor.lhs.false374, %for.end370
  br label %return

if.end379:                                        ; preds = %lor.lhs.false374
  br label %if.end380

if.end380:                                        ; preds = %if.end379, %if.end361
  br label %if.end525

if.else381:                                       ; preds = %if.then341
  %idxprom382 = sext i32 %i1 to i64
  %arrayidx383 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xrank to [144 x i32]*), i64 0, i64 %idxprom382
  %i127 = load i32, i32* %arrayidx383, align 4
  %i128 = load i32, i32* @bking_loc, align 4
  %idxprom384 = sext i32 %i128 to i64
  %arrayidx385 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xrank to [144 x i32]*), i64 0, i64 %idxprom384
  %i129 = load i32, i32* %arrayidx385, align 4
  %cmp386 = icmp eq i32 %i127, %i129
  br i1 %cmp386, label %if.then387, label %if.else428

if.then387:                                       ; preds = %if.else381
  %i130 = load i32, i32* @bking_loc, align 4
  %cmp388 = icmp sgt i32 %i130, %i1
  br i1 %cmp388, label %if.then389, label %if.else408

if.then389:                                       ; preds = %if.then387
  %i131 = load i32, i32* @bking_loc, align 4
  %sub390 = sub nsw i32 %i131, 1
  br label %for.cond391

for.cond391:                                      ; preds = %for.inc396, %if.then389
  %l.2 = phi i32 [ %sub390, %if.then389 ], [ %sub397, %for.inc396 ]
  %idxprom392 = sext i32 %l.2 to i64
  %arrayidx393 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom392
  %i132 = load i32, i32* %arrayidx393, align 4
  %cmp394 = icmp eq i32 %i132, 13
  br i1 %cmp394, label %for.body395, label %for.end398

for.body395:                                      ; preds = %for.cond391
  br label %for.inc396

for.inc396:                                       ; preds = %for.body395
  %sub397 = sub nsw i32 %l.2, 1
  br label %for.cond391

for.end398:                                       ; preds = %for.cond391
  %idxprom399 = sext i32 %l.2 to i64
  %arrayidx400 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom399
  %i133 = load i32, i32* %arrayidx400, align 4
  %cmp401 = icmp eq i32 %i133, 7
  br i1 %cmp401, label %if.then406, label %lor.lhs.false402

lor.lhs.false402:                                 ; preds = %for.end398
  %idxprom403 = sext i32 %l.2 to i64
  %arrayidx404 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom403
  %i134 = load i32, i32* %arrayidx404, align 4
  %cmp405 = icmp eq i32 %i134, 9
  br i1 %cmp405, label %if.then406, label %if.end407

if.then406:                                       ; preds = %lor.lhs.false402, %for.end398
  br label %return

if.end407:                                        ; preds = %lor.lhs.false402
  br label %if.end427

if.else408:                                       ; preds = %if.then387
  %i135 = load i32, i32* @bking_loc, align 4
  %add409 = add nsw i32 %i135, 1
  br label %for.cond410

for.cond410:                                      ; preds = %for.inc415, %if.else408
  %l.3 = phi i32 [ %add409, %if.else408 ], [ %add416, %for.inc415 ]
  %idxprom411 = sext i32 %l.3 to i64
  %arrayidx412 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom411
  %i136 = load i32, i32* %arrayidx412, align 4
  %cmp413 = icmp eq i32 %i136, 13
  br i1 %cmp413, label %for.body414, label %for.end417

for.body414:                                      ; preds = %for.cond410
  br label %for.inc415

for.inc415:                                       ; preds = %for.body414
  %add416 = add nsw i32 %l.3, 1
  br label %for.cond410

for.end417:                                       ; preds = %for.cond410
  %idxprom418 = sext i32 %l.3 to i64
  %arrayidx419 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom418
  %i137 = load i32, i32* %arrayidx419, align 4
  %cmp420 = icmp eq i32 %i137, 7
  br i1 %cmp420, label %if.then425, label %lor.lhs.false421

lor.lhs.false421:                                 ; preds = %for.end417
  %idxprom422 = sext i32 %l.3 to i64
  %arrayidx423 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom422
  %i138 = load i32, i32* %arrayidx423, align 4
  %cmp424 = icmp eq i32 %i138, 9
  br i1 %cmp424, label %if.then425, label %if.end426

if.then425:                                       ; preds = %lor.lhs.false421, %for.end417
  br label %return

if.end426:                                        ; preds = %lor.lhs.false421
  br label %if.end427

if.end427:                                        ; preds = %if.end426, %if.end407
  br label %if.end524

if.else428:                                       ; preds = %if.else381
  %idxprom429 = sext i32 %i1 to i64
  %arrayidx430 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xdiagl to [144 x i32]*), i64 0, i64 %idxprom429
  %i139 = load i32, i32* %arrayidx430, align 4
  %i140 = load i32, i32* @bking_loc, align 4
  %idxprom431 = sext i32 %i140 to i64
  %arrayidx432 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xdiagl to [144 x i32]*), i64 0, i64 %idxprom431
  %i141 = load i32, i32* %arrayidx432, align 4
  %cmp433 = icmp eq i32 %i139, %i141
  br i1 %cmp433, label %if.then434, label %if.else475

if.then434:                                       ; preds = %if.else428
  %i142 = load i32, i32* @bking_loc, align 4
  %cmp435 = icmp sgt i32 %i142, %i1
  br i1 %cmp435, label %if.then436, label %if.else455

if.then436:                                       ; preds = %if.then434
  %i143 = load i32, i32* @bking_loc, align 4
  %sub437 = sub nsw i32 %i143, 13
  br label %for.cond438

for.cond438:                                      ; preds = %for.inc443, %if.then436
  %l.4 = phi i32 [ %sub437, %if.then436 ], [ %sub444, %for.inc443 ]
  %idxprom439 = sext i32 %l.4 to i64
  %arrayidx440 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom439
  %i144 = load i32, i32* %arrayidx440, align 4
  %cmp441 = icmp eq i32 %i144, 13
  br i1 %cmp441, label %for.body442, label %for.end445

for.body442:                                      ; preds = %for.cond438
  br label %for.inc443

for.inc443:                                       ; preds = %for.body442
  %sub444 = sub nsw i32 %l.4, 13
  br label %for.cond438

for.end445:                                       ; preds = %for.cond438
  %idxprom446 = sext i32 %l.4 to i64
  %arrayidx447 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom446
  %i145 = load i32, i32* %arrayidx447, align 4
  %cmp448 = icmp eq i32 %i145, 11
  br i1 %cmp448, label %if.then453, label %lor.lhs.false449

lor.lhs.false449:                                 ; preds = %for.end445
  %idxprom450 = sext i32 %l.4 to i64
  %arrayidx451 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom450
  %i146 = load i32, i32* %arrayidx451, align 4
  %cmp452 = icmp eq i32 %i146, 9
  br i1 %cmp452, label %if.then453, label %if.end454

if.then453:                                       ; preds = %lor.lhs.false449, %for.end445
  br label %return

if.end454:                                        ; preds = %lor.lhs.false449
  br label %if.end474

if.else455:                                       ; preds = %if.then434
  %i147 = load i32, i32* @bking_loc, align 4
  %add456 = add nsw i32 %i147, 13
  br label %for.cond457

for.cond457:                                      ; preds = %for.inc462, %if.else455
  %l.5 = phi i32 [ %add456, %if.else455 ], [ %add463, %for.inc462 ]
  %idxprom458 = sext i32 %l.5 to i64
  %arrayidx459 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom458
  %i148 = load i32, i32* %arrayidx459, align 4
  %cmp460 = icmp eq i32 %i148, 13
  br i1 %cmp460, label %for.body461, label %for.end464

for.body461:                                      ; preds = %for.cond457
  br label %for.inc462

for.inc462:                                       ; preds = %for.body461
  %add463 = add nsw i32 %l.5, 13
  br label %for.cond457

for.end464:                                       ; preds = %for.cond457
  %idxprom465 = sext i32 %l.5 to i64
  %arrayidx466 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom465
  %i149 = load i32, i32* %arrayidx466, align 4
  %cmp467 = icmp eq i32 %i149, 11
  br i1 %cmp467, label %if.then472, label %lor.lhs.false468

lor.lhs.false468:                                 ; preds = %for.end464
  %idxprom469 = sext i32 %l.5 to i64
  %arrayidx470 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom469
  %i150 = load i32, i32* %arrayidx470, align 4
  %cmp471 = icmp eq i32 %i150, 9
  br i1 %cmp471, label %if.then472, label %if.end473

if.then472:                                       ; preds = %lor.lhs.false468, %for.end464
  br label %return

if.end473:                                        ; preds = %lor.lhs.false468
  br label %if.end474

if.end474:                                        ; preds = %if.end473, %if.end454
  br label %if.end523

if.else475:                                       ; preds = %if.else428
  %idxprom476 = sext i32 %i1 to i64
  %arrayidx477 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xdiagr to [144 x i32]*), i64 0, i64 %idxprom476
  %i151 = load i32, i32* %arrayidx477, align 4
  %i152 = load i32, i32* @bking_loc, align 4
  %idxprom478 = sext i32 %i152 to i64
  %arrayidx479 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xdiagr to [144 x i32]*), i64 0, i64 %idxprom478
  %i153 = load i32, i32* %arrayidx479, align 4
  %cmp480 = icmp eq i32 %i151, %i153
  br i1 %cmp480, label %if.then481, label %if.end522

if.then481:                                       ; preds = %if.else475
  %i154 = load i32, i32* @bking_loc, align 4
  %cmp482 = icmp sgt i32 %i154, %i1
  br i1 %cmp482, label %if.then483, label %if.else502

if.then483:                                       ; preds = %if.then481
  %i155 = load i32, i32* @bking_loc, align 4
  %sub484 = sub nsw i32 %i155, 11
  br label %for.cond485

for.cond485:                                      ; preds = %for.inc490, %if.then483
  %l.6 = phi i32 [ %sub484, %if.then483 ], [ %sub491, %for.inc490 ]
  %idxprom486 = sext i32 %l.6 to i64
  %arrayidx487 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom486
  %i156 = load i32, i32* %arrayidx487, align 4
  %cmp488 = icmp eq i32 %i156, 13
  br i1 %cmp488, label %for.body489, label %for.end492

for.body489:                                      ; preds = %for.cond485
  br label %for.inc490

for.inc490:                                       ; preds = %for.body489
  %sub491 = sub nsw i32 %l.6, 11
  br label %for.cond485

for.end492:                                       ; preds = %for.cond485
  %idxprom493 = sext i32 %l.6 to i64
  %arrayidx494 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom493
  %i157 = load i32, i32* %arrayidx494, align 4
  %cmp495 = icmp eq i32 %i157, 11
  br i1 %cmp495, label %if.then500, label %lor.lhs.false496

lor.lhs.false496:                                 ; preds = %for.end492
  %idxprom497 = sext i32 %l.6 to i64
  %arrayidx498 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom497
  %i158 = load i32, i32* %arrayidx498, align 4
  %cmp499 = icmp eq i32 %i158, 9
  br i1 %cmp499, label %if.then500, label %if.end501

if.then500:                                       ; preds = %lor.lhs.false496, %for.end492
  br label %return

if.end501:                                        ; preds = %lor.lhs.false496
  br label %if.end521

if.else502:                                       ; preds = %if.then481
  %i159 = load i32, i32* @bking_loc, align 4
  %add503 = add nsw i32 %i159, 11
  br label %for.cond504

for.cond504:                                      ; preds = %for.inc509, %if.else502
  %l.7 = phi i32 [ %add503, %if.else502 ], [ %add510, %for.inc509 ]
  %idxprom505 = sext i32 %l.7 to i64
  %arrayidx506 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom505
  %i160 = load i32, i32* %arrayidx506, align 4
  %cmp507 = icmp eq i32 %i160, 13
  br i1 %cmp507, label %for.body508, label %for.end511

for.body508:                                      ; preds = %for.cond504
  br label %for.inc509

for.inc509:                                       ; preds = %for.body508
  %add510 = add nsw i32 %l.7, 11
  br label %for.cond504

for.end511:                                       ; preds = %for.cond504
  %idxprom512 = sext i32 %l.7 to i64
  %arrayidx513 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom512
  %i161 = load i32, i32* %arrayidx513, align 4
  %cmp514 = icmp eq i32 %i161, 11
  br i1 %cmp514, label %if.then519, label %lor.lhs.false515

lor.lhs.false515:                                 ; preds = %for.end511
  %idxprom516 = sext i32 %l.7 to i64
  %arrayidx517 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom516
  %i162 = load i32, i32* %arrayidx517, align 4
  %cmp518 = icmp eq i32 %i162, 9
  br i1 %cmp518, label %if.then519, label %if.end520

if.then519:                                       ; preds = %lor.lhs.false515, %for.end511
  br label %return

if.end520:                                        ; preds = %lor.lhs.false515
  br label %if.end521

if.end521:                                        ; preds = %if.end520, %if.end501
  br label %if.end522

if.end522:                                        ; preds = %if.end521, %if.else475
  br label %if.end523

if.end523:                                        ; preds = %if.end522, %if.end474
  br label %if.end524

if.end524:                                        ; preds = %if.end523, %if.end427
  br label %if.end525

if.end525:                                        ; preds = %if.end524, %if.end380
  br label %return

if.end526:                                        ; preds = %sw.epilog
  br label %if.end527

if.end527:                                        ; preds = %if.end526, %if.then69
  %i163 = load i32, i32* @bking_loc, align 4
  %call528 = call i32 @is_attacked(i32 %i163, i32 1)
  %tobool529 = icmp ne i32 %call528, 0
  br i1 %tobool529, label %if.then530, label %if.else531

if.then530:                                       ; preds = %if.end527
  br label %return

if.else531:                                       ; preds = %if.end527
  br label %return

if.else532:                                       ; preds = %if.else
  %tobool533 = icmp ne i32 %incheck, 0
  br i1 %tobool533, label %if.end1010, label %if.then534

if.then534:                                       ; preds = %if.else532
  %idxprom535 = sext i32 %m to i64
  %arrayidx536 = getelementptr inbounds %struct.move_s, %struct.move_s* %moves, i64 %idxprom535
  %from537 = getelementptr inbounds %struct.move_s, %struct.move_s* %arrayidx536, i32 0, i32 0
  %i164 = load i32, i32* %from537, align 4
  %cmp538 = icmp eq i32 %i164, 0
  br i1 %cmp538, label %if.then539, label %if.end540

if.then539:                                       ; preds = %if.then534
  br label %return

if.end540:                                        ; preds = %if.then534
  %idxprom541 = sext i32 %m to i64
  %arrayidx542 = getelementptr inbounds %struct.move_s, %struct.move_s* %moves, i64 %idxprom541
  %promoted543 = getelementptr inbounds %struct.move_s, %struct.move_s* %arrayidx542, i32 0, i32 3
  %i165 = load i32, i32* %promoted543, align 4
  %tobool544 = icmp ne i32 %i165, 0
  br i1 %tobool544, label %cond.true545, label %cond.false546

cond.true545:                                     ; preds = %if.end540
  br label %cond.end549

cond.false546:                                    ; preds = %if.end540
  %idxprom547 = sext i32 %i2 to i64
  %arrayidx548 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom547
  %i166 = load i32, i32* %arrayidx548, align 4
  br label %cond.end549

cond.end549:                                      ; preds = %cond.false546, %cond.true545
  %cond550 = phi i32 [ 1, %cond.true545 ], [ %i166, %cond.false546 ]
  switch i32 %cond550, label %sw.default812 [
    i32 1, label %sw.bb551
    i32 3, label %sw.bb603
    i32 11, label %sw.bb629
    i32 7, label %sw.bb665
    i32 9, label %sw.bb701
  ]

sw.bb551:                                         ; preds = %cond.end549
  %idxprom552 = sext i32 %m to i64
  %arrayidx553 = getelementptr inbounds %struct.move_s, %struct.move_s* %moves, i64 %idxprom552
  %captured554 = getelementptr inbounds %struct.move_s, %struct.move_s* %arrayidx553, i32 0, i32 2
  %i167 = load i32, i32* %captured554, align 4
  %cmp555 = icmp ne i32 %i167, 13
  br i1 %cmp555, label %if.then556, label %if.else582

if.then556:                                       ; preds = %sw.bb551
  %idxprom557 = sext i32 %i1 to i64
  %arrayidx558 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xfile to [144 x i32]*), i64 0, i64 %idxprom557
  %i168 = load i32, i32* %arrayidx558, align 4
  %i169 = load i32, i32* @wking_loc, align 4
  %idxprom559 = sext i32 %i169 to i64
  %arrayidx560 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xfile to [144 x i32]*), i64 0, i64 %idxprom559
  %i170 = load i32, i32* %arrayidx560, align 4
  %cmp561 = icmp ne i32 %i168, %i170
  br i1 %cmp561, label %land.lhs.true562, label %if.end581

land.lhs.true562:                                 ; preds = %if.then556
  %idxprom563 = sext i32 %i1 to i64
  %arrayidx564 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xrank to [144 x i32]*), i64 0, i64 %idxprom563
  %i171 = load i32, i32* %arrayidx564, align 4
  %i172 = load i32, i32* @wking_loc, align 4
  %idxprom565 = sext i32 %i172 to i64
  %arrayidx566 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xrank to [144 x i32]*), i64 0, i64 %idxprom565
  %i173 = load i32, i32* %arrayidx566, align 4
  %cmp567 = icmp ne i32 %i171, %i173
  br i1 %cmp567, label %land.lhs.true568, label %if.end581

land.lhs.true568:                                 ; preds = %land.lhs.true562
  %idxprom569 = sext i32 %i1 to i64
  %arrayidx570 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xdiagl to [144 x i32]*), i64 0, i64 %idxprom569
  %i174 = load i32, i32* %arrayidx570, align 4
  %i175 = load i32, i32* @wking_loc, align 4
  %idxprom571 = sext i32 %i175 to i64
  %arrayidx572 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xdiagl to [144 x i32]*), i64 0, i64 %idxprom571
  %i176 = load i32, i32* %arrayidx572, align 4
  %cmp573 = icmp ne i32 %i174, %i176
  br i1 %cmp573, label %land.lhs.true574, label %if.end581

land.lhs.true574:                                 ; preds = %land.lhs.true568
  %idxprom575 = sext i32 %i1 to i64
  %arrayidx576 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xdiagr to [144 x i32]*), i64 0, i64 %idxprom575
  %i177 = load i32, i32* %arrayidx576, align 4
  %i178 = load i32, i32* @wking_loc, align 4
  %idxprom577 = sext i32 %i178 to i64
  %arrayidx578 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xdiagr to [144 x i32]*), i64 0, i64 %idxprom577
  %i179 = load i32, i32* %arrayidx578, align 4
  %cmp579 = icmp ne i32 %i177, %i179
  br i1 %cmp579, label %if.then580, label %if.end581

if.then580:                                       ; preds = %land.lhs.true574
  br label %return

if.end581:                                        ; preds = %land.lhs.true574, %land.lhs.true568, %land.lhs.true562, %if.then556
  br label %if.end602

if.else582:                                       ; preds = %sw.bb551
  %idxprom583 = sext i32 %i1 to i64
  %arrayidx584 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xrank to [144 x i32]*), i64 0, i64 %idxprom583
  %i180 = load i32, i32* %arrayidx584, align 4
  %i181 = load i32, i32* @wking_loc, align 4
  %idxprom585 = sext i32 %i181 to i64
  %arrayidx586 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xrank to [144 x i32]*), i64 0, i64 %idxprom585
  %i182 = load i32, i32* %arrayidx586, align 4
  %cmp587 = icmp ne i32 %i180, %i182
  br i1 %cmp587, label %land.lhs.true588, label %if.end601

land.lhs.true588:                                 ; preds = %if.else582
  %idxprom589 = sext i32 %i1 to i64
  %arrayidx590 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xdiagl to [144 x i32]*), i64 0, i64 %idxprom589
  %i183 = load i32, i32* %arrayidx590, align 4
  %i184 = load i32, i32* @wking_loc, align 4
  %idxprom591 = sext i32 %i184 to i64
  %arrayidx592 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xdiagl to [144 x i32]*), i64 0, i64 %idxprom591
  %i185 = load i32, i32* %arrayidx592, align 4
  %cmp593 = icmp ne i32 %i183, %i185
  br i1 %cmp593, label %land.lhs.true594, label %if.end601

land.lhs.true594:                                 ; preds = %land.lhs.true588
  %idxprom595 = sext i32 %i1 to i64
  %arrayidx596 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xdiagr to [144 x i32]*), i64 0, i64 %idxprom595
  %i186 = load i32, i32* %arrayidx596, align 4
  %i187 = load i32, i32* @wking_loc, align 4
  %idxprom597 = sext i32 %i187 to i64
  %arrayidx598 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xdiagr to [144 x i32]*), i64 0, i64 %idxprom597
  %i188 = load i32, i32* %arrayidx598, align 4
  %cmp599 = icmp ne i32 %i186, %i188
  br i1 %cmp599, label %if.then600, label %if.end601

if.then600:                                       ; preds = %land.lhs.true594
  br label %return

if.end601:                                        ; preds = %land.lhs.true594, %land.lhs.true588, %if.else582
  br label %if.end602

if.end602:                                        ; preds = %if.end601, %if.end581
  br label %sw.epilog813

sw.bb603:                                         ; preds = %cond.end549
  %idxprom604 = sext i32 %i1 to i64
  %arrayidx605 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xfile to [144 x i32]*), i64 0, i64 %idxprom604
  %i189 = load i32, i32* %arrayidx605, align 4
  %i190 = load i32, i32* @wking_loc, align 4
  %idxprom606 = sext i32 %i190 to i64
  %arrayidx607 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xfile to [144 x i32]*), i64 0, i64 %idxprom606
  %i191 = load i32, i32* %arrayidx607, align 4
  %cmp608 = icmp ne i32 %i189, %i191
  br i1 %cmp608, label %land.lhs.true609, label %if.end628

land.lhs.true609:                                 ; preds = %sw.bb603
  %idxprom610 = sext i32 %i1 to i64
  %arrayidx611 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xrank to [144 x i32]*), i64 0, i64 %idxprom610
  %i192 = load i32, i32* %arrayidx611, align 4
  %i193 = load i32, i32* @wking_loc, align 4
  %idxprom612 = sext i32 %i193 to i64
  %arrayidx613 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xrank to [144 x i32]*), i64 0, i64 %idxprom612
  %i194 = load i32, i32* %arrayidx613, align 4
  %cmp614 = icmp ne i32 %i192, %i194
  br i1 %cmp614, label %land.lhs.true615, label %if.end628

land.lhs.true615:                                 ; preds = %land.lhs.true609
  %idxprom616 = sext i32 %i1 to i64
  %arrayidx617 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xdiagl to [144 x i32]*), i64 0, i64 %idxprom616
  %i195 = load i32, i32* %arrayidx617, align 4
  %i196 = load i32, i32* @wking_loc, align 4
  %idxprom618 = sext i32 %i196 to i64
  %arrayidx619 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xdiagl to [144 x i32]*), i64 0, i64 %idxprom618
  %i197 = load i32, i32* %arrayidx619, align 4
  %cmp620 = icmp ne i32 %i195, %i197
  br i1 %cmp620, label %land.lhs.true621, label %if.end628

land.lhs.true621:                                 ; preds = %land.lhs.true615
  %idxprom622 = sext i32 %i1 to i64
  %arrayidx623 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xdiagr to [144 x i32]*), i64 0, i64 %idxprom622
  %i198 = load i32, i32* %arrayidx623, align 4
  %i199 = load i32, i32* @wking_loc, align 4
  %idxprom624 = sext i32 %i199 to i64
  %arrayidx625 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xdiagr to [144 x i32]*), i64 0, i64 %idxprom624
  %i200 = load i32, i32* %arrayidx625, align 4
  %cmp626 = icmp ne i32 %i198, %i200
  br i1 %cmp626, label %if.then627, label %if.end628

if.then627:                                       ; preds = %land.lhs.true621
  br label %return

if.end628:                                        ; preds = %land.lhs.true621, %land.lhs.true615, %land.lhs.true609, %sw.bb603
  br label %sw.epilog813

sw.bb629:                                         ; preds = %cond.end549
  %idxprom630 = sext i32 %i1 to i64
  %arrayidx631 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xfile to [144 x i32]*), i64 0, i64 %idxprom630
  %i201 = load i32, i32* %arrayidx631, align 4
  %i202 = load i32, i32* @wking_loc, align 4
  %idxprom632 = sext i32 %i202 to i64
  %arrayidx633 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xfile to [144 x i32]*), i64 0, i64 %idxprom632
  %i203 = load i32, i32* %arrayidx633, align 4
  %cmp634 = icmp ne i32 %i201, %i203
  br i1 %cmp634, label %land.lhs.true635, label %if.end664

land.lhs.true635:                                 ; preds = %sw.bb629
  %idxprom636 = sext i32 %i1 to i64
  %arrayidx637 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xrank to [144 x i32]*), i64 0, i64 %idxprom636
  %i204 = load i32, i32* %arrayidx637, align 4
  %i205 = load i32, i32* @wking_loc, align 4
  %idxprom638 = sext i32 %i205 to i64
  %arrayidx639 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xrank to [144 x i32]*), i64 0, i64 %idxprom638
  %i206 = load i32, i32* %arrayidx639, align 4
  %cmp640 = icmp ne i32 %i204, %i206
  br i1 %cmp640, label %if.then641, label %if.end664

if.then641:                                       ; preds = %land.lhs.true635
  %idxprom642 = sext i32 %i1 to i64
  %arrayidx643 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xdiagl to [144 x i32]*), i64 0, i64 %idxprom642
  %i207 = load i32, i32* %arrayidx643, align 4
  %idxprom644 = sext i32 %i2 to i64
  %arrayidx645 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xdiagl to [144 x i32]*), i64 0, i64 %idxprom644
  %i208 = load i32, i32* %arrayidx645, align 4
  %cmp646 = icmp eq i32 %i207, %i208
  br i1 %cmp646, label %if.then647, label %if.else655

if.then647:                                       ; preds = %if.then641
  %idxprom648 = sext i32 %i1 to i64
  %arrayidx649 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xdiagr to [144 x i32]*), i64 0, i64 %idxprom648
  %i209 = load i32, i32* %arrayidx649, align 4
  %i210 = load i32, i32* @wking_loc, align 4
  %idxprom650 = sext i32 %i210 to i64
  %arrayidx651 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xdiagr to [144 x i32]*), i64 0, i64 %idxprom650
  %i211 = load i32, i32* %arrayidx651, align 4
  %cmp652 = icmp ne i32 %i209, %i211
  br i1 %cmp652, label %if.then653, label %if.end654

if.then653:                                       ; preds = %if.then647
  br label %return

if.end654:                                        ; preds = %if.then647
  br label %if.end663

if.else655:                                       ; preds = %if.then641
  %idxprom656 = sext i32 %i1 to i64
  %arrayidx657 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xdiagl to [144 x i32]*), i64 0, i64 %idxprom656
  %i212 = load i32, i32* %arrayidx657, align 4
  %i213 = load i32, i32* @wking_loc, align 4
  %idxprom658 = sext i32 %i213 to i64
  %arrayidx659 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xdiagl to [144 x i32]*), i64 0, i64 %idxprom658
  %i214 = load i32, i32* %arrayidx659, align 4
  %cmp660 = icmp ne i32 %i212, %i214
  br i1 %cmp660, label %if.then661, label %if.end662

if.then661:                                       ; preds = %if.else655
  br label %return

if.end662:                                        ; preds = %if.else655
  br label %if.end663

if.end663:                                        ; preds = %if.end662, %if.end654
  br label %if.end664

if.end664:                                        ; preds = %if.end663, %land.lhs.true635, %sw.bb629
  br label %sw.epilog813

sw.bb665:                                         ; preds = %cond.end549
  %idxprom666 = sext i32 %i1 to i64
  %arrayidx667 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xdiagr to [144 x i32]*), i64 0, i64 %idxprom666
  %i215 = load i32, i32* %arrayidx667, align 4
  %i216 = load i32, i32* @wking_loc, align 4
  %idxprom668 = sext i32 %i216 to i64
  %arrayidx669 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xdiagr to [144 x i32]*), i64 0, i64 %idxprom668
  %i217 = load i32, i32* %arrayidx669, align 4
  %cmp670 = icmp ne i32 %i215, %i217
  br i1 %cmp670, label %land.lhs.true671, label %if.end700

land.lhs.true671:                                 ; preds = %sw.bb665
  %idxprom672 = sext i32 %i1 to i64
  %arrayidx673 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xdiagl to [144 x i32]*), i64 0, i64 %idxprom672
  %i218 = load i32, i32* %arrayidx673, align 4
  %i219 = load i32, i32* @wking_loc, align 4
  %idxprom674 = sext i32 %i219 to i64
  %arrayidx675 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xdiagl to [144 x i32]*), i64 0, i64 %idxprom674
  %i220 = load i32, i32* %arrayidx675, align 4
  %cmp676 = icmp ne i32 %i218, %i220
  br i1 %cmp676, label %if.then677, label %if.end700

if.then677:                                       ; preds = %land.lhs.true671
  %idxprom678 = sext i32 %i1 to i64
  %arrayidx679 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xrank to [144 x i32]*), i64 0, i64 %idxprom678
  %i221 = load i32, i32* %arrayidx679, align 4
  %idxprom680 = sext i32 %i2 to i64
  %arrayidx681 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xrank to [144 x i32]*), i64 0, i64 %idxprom680
  %i222 = load i32, i32* %arrayidx681, align 4
  %cmp682 = icmp eq i32 %i221, %i222
  br i1 %cmp682, label %if.then683, label %if.else691

if.then683:                                       ; preds = %if.then677
  %idxprom684 = sext i32 %i1 to i64
  %arrayidx685 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xfile to [144 x i32]*), i64 0, i64 %idxprom684
  %i223 = load i32, i32* %arrayidx685, align 4
  %i224 = load i32, i32* @wking_loc, align 4
  %idxprom686 = sext i32 %i224 to i64
  %arrayidx687 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xfile to [144 x i32]*), i64 0, i64 %idxprom686
  %i225 = load i32, i32* %arrayidx687, align 4
  %cmp688 = icmp ne i32 %i223, %i225
  br i1 %cmp688, label %if.then689, label %if.end690

if.then689:                                       ; preds = %if.then683
  br label %return

if.end690:                                        ; preds = %if.then683
  br label %if.end699

if.else691:                                       ; preds = %if.then677
  %idxprom692 = sext i32 %i1 to i64
  %arrayidx693 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xrank to [144 x i32]*), i64 0, i64 %idxprom692
  %i226 = load i32, i32* %arrayidx693, align 4
  %i227 = load i32, i32* @wking_loc, align 4
  %idxprom694 = sext i32 %i227 to i64
  %arrayidx695 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xrank to [144 x i32]*), i64 0, i64 %idxprom694
  %i228 = load i32, i32* %arrayidx695, align 4
  %cmp696 = icmp ne i32 %i226, %i228
  br i1 %cmp696, label %if.then697, label %if.end698

if.then697:                                       ; preds = %if.else691
  br label %return

if.end698:                                        ; preds = %if.else691
  br label %if.end699

if.end699:                                        ; preds = %if.end698, %if.end690
  br label %if.end700

if.end700:                                        ; preds = %if.end699, %land.lhs.true671, %sw.bb665
  br label %sw.epilog813

sw.bb701:                                         ; preds = %cond.end549
  %idxprom702 = sext i32 %i1 to i64
  %arrayidx703 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xfile to [144 x i32]*), i64 0, i64 %idxprom702
  %i229 = load i32, i32* %arrayidx703, align 4
  %idxprom704 = sext i32 %m to i64
  %arrayidx705 = getelementptr inbounds %struct.move_s, %struct.move_s* %moves, i64 %idxprom704
  %target706 = getelementptr inbounds %struct.move_s, %struct.move_s* %arrayidx705, i32 0, i32 1
  %i230 = load i32, i32* %target706, align 4
  %idxprom707 = sext i32 %i230 to i64
  %arrayidx708 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xfile to [144 x i32]*), i64 0, i64 %idxprom707
  %i231 = load i32, i32* %arrayidx708, align 4
  %cmp709 = icmp eq i32 %i229, %i231
  br i1 %cmp709, label %if.then710, label %if.else730

if.then710:                                       ; preds = %sw.bb701
  %idxprom711 = sext i32 %i1 to i64
  %arrayidx712 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xdiagr to [144 x i32]*), i64 0, i64 %idxprom711
  %i232 = load i32, i32* %arrayidx712, align 4
  %i233 = load i32, i32* @wking_loc, align 4
  %idxprom713 = sext i32 %i233 to i64
  %arrayidx714 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xdiagr to [144 x i32]*), i64 0, i64 %idxprom713
  %i234 = load i32, i32* %arrayidx714, align 4
  %cmp715 = icmp ne i32 %i232, %i234
  br i1 %cmp715, label %land.lhs.true716, label %if.end729

land.lhs.true716:                                 ; preds = %if.then710
  %idxprom717 = sext i32 %i1 to i64
  %arrayidx718 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xdiagl to [144 x i32]*), i64 0, i64 %idxprom717
  %i235 = load i32, i32* %arrayidx718, align 4
  %i236 = load i32, i32* @wking_loc, align 4
  %idxprom719 = sext i32 %i236 to i64
  %arrayidx720 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xdiagl to [144 x i32]*), i64 0, i64 %idxprom719
  %i237 = load i32, i32* %arrayidx720, align 4
  %cmp721 = icmp ne i32 %i235, %i237
  br i1 %cmp721, label %land.lhs.true722, label %if.end729

land.lhs.true722:                                 ; preds = %land.lhs.true716
  %idxprom723 = sext i32 %i1 to i64
  %arrayidx724 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xrank to [144 x i32]*), i64 0, i64 %idxprom723
  %i238 = load i32, i32* %arrayidx724, align 4
  %i239 = load i32, i32* @wking_loc, align 4
  %idxprom725 = sext i32 %i239 to i64
  %arrayidx726 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xrank to [144 x i32]*), i64 0, i64 %idxprom725
  %i240 = load i32, i32* %arrayidx726, align 4
  %cmp727 = icmp ne i32 %i238, %i240
  br i1 %cmp727, label %if.then728, label %if.end729

if.then728:                                       ; preds = %land.lhs.true722
  br label %return

if.end729:                                        ; preds = %land.lhs.true722, %land.lhs.true716, %if.then710
  br label %if.end811

if.else730:                                       ; preds = %sw.bb701
  %idxprom731 = sext i32 %i1 to i64
  %arrayidx732 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xrank to [144 x i32]*), i64 0, i64 %idxprom731
  %i241 = load i32, i32* %arrayidx732, align 4
  %idxprom733 = sext i32 %i2 to i64
  %arrayidx734 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xrank to [144 x i32]*), i64 0, i64 %idxprom733
  %i242 = load i32, i32* %arrayidx734, align 4
  %cmp735 = icmp eq i32 %i241, %i242
  br i1 %cmp735, label %if.then736, label %if.else756

if.then736:                                       ; preds = %if.else730
  %idxprom737 = sext i32 %i1 to i64
  %arrayidx738 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xdiagr to [144 x i32]*), i64 0, i64 %idxprom737
  %i243 = load i32, i32* %arrayidx738, align 4
  %i244 = load i32, i32* @wking_loc, align 4
  %idxprom739 = sext i32 %i244 to i64
  %arrayidx740 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xdiagr to [144 x i32]*), i64 0, i64 %idxprom739
  %i245 = load i32, i32* %arrayidx740, align 4
  %cmp741 = icmp ne i32 %i243, %i245
  br i1 %cmp741, label %land.lhs.true742, label %if.end755

land.lhs.true742:                                 ; preds = %if.then736
  %idxprom743 = sext i32 %i1 to i64
  %arrayidx744 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xfile to [144 x i32]*), i64 0, i64 %idxprom743
  %i246 = load i32, i32* %arrayidx744, align 4
  %i247 = load i32, i32* @wking_loc, align 4
  %idxprom745 = sext i32 %i247 to i64
  %arrayidx746 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xfile to [144 x i32]*), i64 0, i64 %idxprom745
  %i248 = load i32, i32* %arrayidx746, align 4
  %cmp747 = icmp ne i32 %i246, %i248
  br i1 %cmp747, label %land.lhs.true748, label %if.end755

land.lhs.true748:                                 ; preds = %land.lhs.true742
  %idxprom749 = sext i32 %i1 to i64
  %arrayidx750 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xdiagl to [144 x i32]*), i64 0, i64 %idxprom749
  %i249 = load i32, i32* %arrayidx750, align 4
  %i250 = load i32, i32* @wking_loc, align 4
  %idxprom751 = sext i32 %i250 to i64
  %arrayidx752 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xdiagl to [144 x i32]*), i64 0, i64 %idxprom751
  %i251 = load i32, i32* %arrayidx752, align 4
  %cmp753 = icmp ne i32 %i249, %i251
  br i1 %cmp753, label %if.then754, label %if.end755

if.then754:                                       ; preds = %land.lhs.true748
  br label %return

if.end755:                                        ; preds = %land.lhs.true748, %land.lhs.true742, %if.then736
  br label %if.end810

if.else756:                                       ; preds = %if.else730
  %idxprom757 = sext i32 %i1 to i64
  %arrayidx758 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xdiagl to [144 x i32]*), i64 0, i64 %idxprom757
  %i252 = load i32, i32* %arrayidx758, align 4
  %idxprom759 = sext i32 %i2 to i64
  %arrayidx760 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xdiagl to [144 x i32]*), i64 0, i64 %idxprom759
  %i253 = load i32, i32* %arrayidx760, align 4
  %cmp761 = icmp eq i32 %i252, %i253
  br i1 %cmp761, label %if.then762, label %if.else782

if.then762:                                       ; preds = %if.else756
  %idxprom763 = sext i32 %i1 to i64
  %arrayidx764 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xdiagr to [144 x i32]*), i64 0, i64 %idxprom763
  %i254 = load i32, i32* %arrayidx764, align 4
  %i255 = load i32, i32* @wking_loc, align 4
  %idxprom765 = sext i32 %i255 to i64
  %arrayidx766 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xdiagr to [144 x i32]*), i64 0, i64 %idxprom765
  %i256 = load i32, i32* %arrayidx766, align 4
  %cmp767 = icmp ne i32 %i254, %i256
  br i1 %cmp767, label %land.lhs.true768, label %if.end781

land.lhs.true768:                                 ; preds = %if.then762
  %idxprom769 = sext i32 %i1 to i64
  %arrayidx770 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xfile to [144 x i32]*), i64 0, i64 %idxprom769
  %i257 = load i32, i32* %arrayidx770, align 4
  %i258 = load i32, i32* @wking_loc, align 4
  %idxprom771 = sext i32 %i258 to i64
  %arrayidx772 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xfile to [144 x i32]*), i64 0, i64 %idxprom771
  %i259 = load i32, i32* %arrayidx772, align 4
  %cmp773 = icmp ne i32 %i257, %i259
  br i1 %cmp773, label %land.lhs.true774, label %if.end781

land.lhs.true774:                                 ; preds = %land.lhs.true768
  %idxprom775 = sext i32 %i1 to i64
  %arrayidx776 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xrank to [144 x i32]*), i64 0, i64 %idxprom775
  %i260 = load i32, i32* %arrayidx776, align 4
  %i261 = load i32, i32* @wking_loc, align 4
  %idxprom777 = sext i32 %i261 to i64
  %arrayidx778 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xrank to [144 x i32]*), i64 0, i64 %idxprom777
  %i262 = load i32, i32* %arrayidx778, align 4
  %cmp779 = icmp ne i32 %i260, %i262
  br i1 %cmp779, label %if.then780, label %if.end781

if.then780:                                       ; preds = %land.lhs.true774
  br label %return

if.end781:                                        ; preds = %land.lhs.true774, %land.lhs.true768, %if.then762
  br label %if.end809

if.else782:                                       ; preds = %if.else756
  %idxprom783 = sext i32 %i1 to i64
  %arrayidx784 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xdiagr to [144 x i32]*), i64 0, i64 %idxprom783
  %i263 = load i32, i32* %arrayidx784, align 4
  %idxprom785 = sext i32 %i2 to i64
  %arrayidx786 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xdiagr to [144 x i32]*), i64 0, i64 %idxprom785
  %i264 = load i32, i32* %arrayidx786, align 4
  %cmp787 = icmp eq i32 %i263, %i264
  br i1 %cmp787, label %if.then788, label %if.end808

if.then788:                                       ; preds = %if.else782
  %idxprom789 = sext i32 %i1 to i64
  %arrayidx790 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xdiagl to [144 x i32]*), i64 0, i64 %idxprom789
  %i265 = load i32, i32* %arrayidx790, align 4
  %i266 = load i32, i32* @wking_loc, align 4
  %idxprom791 = sext i32 %i266 to i64
  %arrayidx792 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xdiagl to [144 x i32]*), i64 0, i64 %idxprom791
  %i267 = load i32, i32* %arrayidx792, align 4
  %cmp793 = icmp ne i32 %i265, %i267
  br i1 %cmp793, label %land.lhs.true794, label %if.end807

land.lhs.true794:                                 ; preds = %if.then788
  %idxprom795 = sext i32 %i1 to i64
  %arrayidx796 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xfile to [144 x i32]*), i64 0, i64 %idxprom795
  %i268 = load i32, i32* %arrayidx796, align 4
  %i269 = load i32, i32* @wking_loc, align 4
  %idxprom797 = sext i32 %i269 to i64
  %arrayidx798 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xfile to [144 x i32]*), i64 0, i64 %idxprom797
  %i270 = load i32, i32* %arrayidx798, align 4
  %cmp799 = icmp ne i32 %i268, %i270
  br i1 %cmp799, label %land.lhs.true800, label %if.end807

land.lhs.true800:                                 ; preds = %land.lhs.true794
  %idxprom801 = sext i32 %i1 to i64
  %arrayidx802 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xrank to [144 x i32]*), i64 0, i64 %idxprom801
  %i271 = load i32, i32* %arrayidx802, align 4
  %i272 = load i32, i32* @wking_loc, align 4
  %idxprom803 = sext i32 %i272 to i64
  %arrayidx804 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xrank to [144 x i32]*), i64 0, i64 %idxprom803
  %i273 = load i32, i32* %arrayidx804, align 4
  %cmp805 = icmp ne i32 %i271, %i273
  br i1 %cmp805, label %if.then806, label %if.end807

if.then806:                                       ; preds = %land.lhs.true800
  br label %return

if.end807:                                        ; preds = %land.lhs.true800, %land.lhs.true794, %if.then788
  br label %if.end808

if.end808:                                        ; preds = %if.end807, %if.else782
  br label %if.end809

if.end809:                                        ; preds = %if.end808, %if.end781
  br label %if.end810

if.end810:                                        ; preds = %if.end809, %if.end755
  br label %if.end811

if.end811:                                        ; preds = %if.end810, %if.end729
  br label %sw.epilog813

sw.default812:                                    ; preds = %cond.end549
  br label %sw.epilog813

sw.epilog813:                                     ; preds = %sw.default812, %if.end811, %if.end700, %if.end664, %if.end628, %if.end602
  %idxprom814 = sext i32 %i2 to i64
  %arrayidx815 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom814
  %i274 = load i32, i32* %arrayidx815, align 4
  %cmp816 = icmp ne i32 %i274, 5
  br i1 %cmp816, label %if.then817, label %if.end1009

if.then817:                                       ; preds = %sw.epilog813
  %idxprom818 = sext i32 %i1 to i64
  %arrayidx819 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xfile to [144 x i32]*), i64 0, i64 %idxprom818
  %i275 = load i32, i32* %arrayidx819, align 4
  %i276 = load i32, i32* @wking_loc, align 4
  %idxprom820 = sext i32 %i276 to i64
  %arrayidx821 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xfile to [144 x i32]*), i64 0, i64 %idxprom820
  %i277 = load i32, i32* %arrayidx821, align 4
  %cmp822 = icmp eq i32 %i275, %i277
  br i1 %cmp822, label %if.then823, label %if.else864

if.then823:                                       ; preds = %if.then817
  %i278 = load i32, i32* @wking_loc, align 4
  %cmp824 = icmp sgt i32 %i278, %i1
  br i1 %cmp824, label %if.then825, label %if.else844

if.then825:                                       ; preds = %if.then823
  %i279 = load i32, i32* @wking_loc, align 4
  %sub826 = sub nsw i32 %i279, 12
  br label %for.cond827

for.cond827:                                      ; preds = %for.inc832, %if.then825
  %l.8 = phi i32 [ %sub826, %if.then825 ], [ %sub833, %for.inc832 ]
  %idxprom828 = sext i32 %l.8 to i64
  %arrayidx829 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom828
  %i280 = load i32, i32* %arrayidx829, align 4
  %cmp830 = icmp eq i32 %i280, 13
  br i1 %cmp830, label %for.body831, label %for.end834

for.body831:                                      ; preds = %for.cond827
  br label %for.inc832

for.inc832:                                       ; preds = %for.body831
  %sub833 = sub nsw i32 %l.8, 12
  br label %for.cond827

for.end834:                                       ; preds = %for.cond827
  %idxprom835 = sext i32 %l.8 to i64
  %arrayidx836 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom835
  %i281 = load i32, i32* %arrayidx836, align 4
  %cmp837 = icmp eq i32 %i281, 8
  br i1 %cmp837, label %if.then842, label %lor.lhs.false838

lor.lhs.false838:                                 ; preds = %for.end834
  %idxprom839 = sext i32 %l.8 to i64
  %arrayidx840 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom839
  %i282 = load i32, i32* %arrayidx840, align 4
  %cmp841 = icmp eq i32 %i282, 10
  br i1 %cmp841, label %if.then842, label %if.end843

if.then842:                                       ; preds = %lor.lhs.false838, %for.end834
  br label %return

if.end843:                                        ; preds = %lor.lhs.false838
  br label %if.end863

if.else844:                                       ; preds = %if.then823
  %i283 = load i32, i32* @wking_loc, align 4
  %add845 = add nsw i32 %i283, 12
  br label %for.cond846

for.cond846:                                      ; preds = %for.inc851, %if.else844
  %l.9 = phi i32 [ %add845, %if.else844 ], [ %add852, %for.inc851 ]
  %idxprom847 = sext i32 %l.9 to i64
  %arrayidx848 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom847
  %i284 = load i32, i32* %arrayidx848, align 4
  %cmp849 = icmp eq i32 %i284, 13
  br i1 %cmp849, label %for.body850, label %for.end853

for.body850:                                      ; preds = %for.cond846
  br label %for.inc851

for.inc851:                                       ; preds = %for.body850
  %add852 = add nsw i32 %l.9, 12
  br label %for.cond846

for.end853:                                       ; preds = %for.cond846
  %idxprom854 = sext i32 %l.9 to i64
  %arrayidx855 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom854
  %i285 = load i32, i32* %arrayidx855, align 4
  %cmp856 = icmp eq i32 %i285, 8
  br i1 %cmp856, label %if.then861, label %lor.lhs.false857

lor.lhs.false857:                                 ; preds = %for.end853
  %idxprom858 = sext i32 %l.9 to i64
  %arrayidx859 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom858
  %i286 = load i32, i32* %arrayidx859, align 4
  %cmp860 = icmp eq i32 %i286, 10
  br i1 %cmp860, label %if.then861, label %if.end862

if.then861:                                       ; preds = %lor.lhs.false857, %for.end853
  br label %return

if.end862:                                        ; preds = %lor.lhs.false857
  br label %if.end863

if.end863:                                        ; preds = %if.end862, %if.end843
  br label %if.end1008

if.else864:                                       ; preds = %if.then817
  %idxprom865 = sext i32 %i1 to i64
  %arrayidx866 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xrank to [144 x i32]*), i64 0, i64 %idxprom865
  %i287 = load i32, i32* %arrayidx866, align 4
  %i288 = load i32, i32* @wking_loc, align 4
  %idxprom867 = sext i32 %i288 to i64
  %arrayidx868 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xrank to [144 x i32]*), i64 0, i64 %idxprom867
  %i289 = load i32, i32* %arrayidx868, align 4
  %cmp869 = icmp eq i32 %i287, %i289
  br i1 %cmp869, label %if.then870, label %if.else911

if.then870:                                       ; preds = %if.else864
  %i290 = load i32, i32* @wking_loc, align 4
  %cmp871 = icmp sgt i32 %i290, %i1
  br i1 %cmp871, label %if.then872, label %if.else891

if.then872:                                       ; preds = %if.then870
  %i291 = load i32, i32* @wking_loc, align 4
  %sub873 = sub nsw i32 %i291, 1
  br label %for.cond874

for.cond874:                                      ; preds = %for.inc879, %if.then872
  %l.10 = phi i32 [ %sub873, %if.then872 ], [ %sub880, %for.inc879 ]
  %idxprom875 = sext i32 %l.10 to i64
  %arrayidx876 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom875
  %i292 = load i32, i32* %arrayidx876, align 4
  %cmp877 = icmp eq i32 %i292, 13
  br i1 %cmp877, label %for.body878, label %for.end881

for.body878:                                      ; preds = %for.cond874
  br label %for.inc879

for.inc879:                                       ; preds = %for.body878
  %sub880 = sub nsw i32 %l.10, 1
  br label %for.cond874

for.end881:                                       ; preds = %for.cond874
  %idxprom882 = sext i32 %l.10 to i64
  %arrayidx883 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom882
  %i293 = load i32, i32* %arrayidx883, align 4
  %cmp884 = icmp eq i32 %i293, 8
  br i1 %cmp884, label %if.then889, label %lor.lhs.false885

lor.lhs.false885:                                 ; preds = %for.end881
  %idxprom886 = sext i32 %l.10 to i64
  %arrayidx887 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom886
  %i294 = load i32, i32* %arrayidx887, align 4
  %cmp888 = icmp eq i32 %i294, 10
  br i1 %cmp888, label %if.then889, label %if.end890

if.then889:                                       ; preds = %lor.lhs.false885, %for.end881
  br label %return

if.end890:                                        ; preds = %lor.lhs.false885
  br label %if.end910

if.else891:                                       ; preds = %if.then870
  %i295 = load i32, i32* @wking_loc, align 4
  %add892 = add nsw i32 %i295, 1
  br label %for.cond893

for.cond893:                                      ; preds = %for.inc898, %if.else891
  %l.11 = phi i32 [ %add892, %if.else891 ], [ %add899, %for.inc898 ]
  %idxprom894 = sext i32 %l.11 to i64
  %arrayidx895 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom894
  %i296 = load i32, i32* %arrayidx895, align 4
  %cmp896 = icmp eq i32 %i296, 13
  br i1 %cmp896, label %for.body897, label %for.end900

for.body897:                                      ; preds = %for.cond893
  br label %for.inc898

for.inc898:                                       ; preds = %for.body897
  %add899 = add nsw i32 %l.11, 1
  br label %for.cond893

for.end900:                                       ; preds = %for.cond893
  %idxprom901 = sext i32 %l.11 to i64
  %arrayidx902 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom901
  %i297 = load i32, i32* %arrayidx902, align 4
  %cmp903 = icmp eq i32 %i297, 8
  br i1 %cmp903, label %if.then908, label %lor.lhs.false904

lor.lhs.false904:                                 ; preds = %for.end900
  %idxprom905 = sext i32 %l.11 to i64
  %arrayidx906 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom905
  %i298 = load i32, i32* %arrayidx906, align 4
  %cmp907 = icmp eq i32 %i298, 10
  br i1 %cmp907, label %if.then908, label %if.end909

if.then908:                                       ; preds = %lor.lhs.false904, %for.end900
  br label %return

if.end909:                                        ; preds = %lor.lhs.false904
  br label %if.end910

if.end910:                                        ; preds = %if.end909, %if.end890
  br label %if.end1007

if.else911:                                       ; preds = %if.else864
  %idxprom912 = sext i32 %i1 to i64
  %arrayidx913 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xdiagl to [144 x i32]*), i64 0, i64 %idxprom912
  %i299 = load i32, i32* %arrayidx913, align 4
  %i300 = load i32, i32* @wking_loc, align 4
  %idxprom914 = sext i32 %i300 to i64
  %arrayidx915 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xdiagl to [144 x i32]*), i64 0, i64 %idxprom914
  %i301 = load i32, i32* %arrayidx915, align 4
  %cmp916 = icmp eq i32 %i299, %i301
  br i1 %cmp916, label %if.then917, label %if.else958

if.then917:                                       ; preds = %if.else911
  %i302 = load i32, i32* @wking_loc, align 4
  %cmp918 = icmp sgt i32 %i302, %i1
  br i1 %cmp918, label %if.then919, label %if.else938

if.then919:                                       ; preds = %if.then917
  %i303 = load i32, i32* @wking_loc, align 4
  %sub920 = sub nsw i32 %i303, 13
  br label %for.cond921

for.cond921:                                      ; preds = %for.inc926, %if.then919
  %l.12 = phi i32 [ %sub920, %if.then919 ], [ %sub927, %for.inc926 ]
  %idxprom922 = sext i32 %l.12 to i64
  %arrayidx923 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom922
  %i304 = load i32, i32* %arrayidx923, align 4
  %cmp924 = icmp eq i32 %i304, 13
  br i1 %cmp924, label %for.body925, label %for.end928

for.body925:                                      ; preds = %for.cond921
  br label %for.inc926

for.inc926:                                       ; preds = %for.body925
  %sub927 = sub nsw i32 %l.12, 13
  br label %for.cond921

for.end928:                                       ; preds = %for.cond921
  %idxprom929 = sext i32 %l.12 to i64
  %arrayidx930 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom929
  %i305 = load i32, i32* %arrayidx930, align 4
  %cmp931 = icmp eq i32 %i305, 12
  br i1 %cmp931, label %if.then936, label %lor.lhs.false932

lor.lhs.false932:                                 ; preds = %for.end928
  %idxprom933 = sext i32 %l.12 to i64
  %arrayidx934 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom933
  %i306 = load i32, i32* %arrayidx934, align 4
  %cmp935 = icmp eq i32 %i306, 10
  br i1 %cmp935, label %if.then936, label %if.end937

if.then936:                                       ; preds = %lor.lhs.false932, %for.end928
  br label %return

if.end937:                                        ; preds = %lor.lhs.false932
  br label %if.end957

if.else938:                                       ; preds = %if.then917
  %i307 = load i32, i32* @wking_loc, align 4
  %add939 = add nsw i32 %i307, 13
  br label %for.cond940

for.cond940:                                      ; preds = %for.inc945, %if.else938
  %l.13 = phi i32 [ %add939, %if.else938 ], [ %add946, %for.inc945 ]
  %idxprom941 = sext i32 %l.13 to i64
  %arrayidx942 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom941
  %i308 = load i32, i32* %arrayidx942, align 4
  %cmp943 = icmp eq i32 %i308, 13
  br i1 %cmp943, label %for.body944, label %for.end947

for.body944:                                      ; preds = %for.cond940
  br label %for.inc945

for.inc945:                                       ; preds = %for.body944
  %add946 = add nsw i32 %l.13, 13
  br label %for.cond940

for.end947:                                       ; preds = %for.cond940
  %idxprom948 = sext i32 %l.13 to i64
  %arrayidx949 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom948
  %i309 = load i32, i32* %arrayidx949, align 4
  %cmp950 = icmp eq i32 %i309, 12
  br i1 %cmp950, label %if.then955, label %lor.lhs.false951

lor.lhs.false951:                                 ; preds = %for.end947
  %idxprom952 = sext i32 %l.13 to i64
  %arrayidx953 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom952
  %i310 = load i32, i32* %arrayidx953, align 4
  %cmp954 = icmp eq i32 %i310, 10
  br i1 %cmp954, label %if.then955, label %if.end956

if.then955:                                       ; preds = %lor.lhs.false951, %for.end947
  br label %return

if.end956:                                        ; preds = %lor.lhs.false951
  br label %if.end957

if.end957:                                        ; preds = %if.end956, %if.end937
  br label %if.end1006

if.else958:                                       ; preds = %if.else911
  %idxprom959 = sext i32 %i1 to i64
  %arrayidx960 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xdiagr to [144 x i32]*), i64 0, i64 %idxprom959
  %i311 = load i32, i32* %arrayidx960, align 4
  %i312 = load i32, i32* @wking_loc, align 4
  %idxprom961 = sext i32 %i312 to i64
  %arrayidx962 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xdiagr to [144 x i32]*), i64 0, i64 %idxprom961
  %i313 = load i32, i32* %arrayidx962, align 4
  %cmp963 = icmp eq i32 %i311, %i313
  br i1 %cmp963, label %if.then964, label %if.end1005

if.then964:                                       ; preds = %if.else958
  %i314 = load i32, i32* @wking_loc, align 4
  %cmp965 = icmp sgt i32 %i314, %i1
  br i1 %cmp965, label %if.then966, label %if.else985

if.then966:                                       ; preds = %if.then964
  %i315 = load i32, i32* @wking_loc, align 4
  %sub967 = sub nsw i32 %i315, 11
  br label %for.cond968

for.cond968:                                      ; preds = %for.inc973, %if.then966
  %l.14 = phi i32 [ %sub967, %if.then966 ], [ %sub974, %for.inc973 ]
  %idxprom969 = sext i32 %l.14 to i64
  %arrayidx970 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom969
  %i316 = load i32, i32* %arrayidx970, align 4
  %cmp971 = icmp eq i32 %i316, 13
  br i1 %cmp971, label %for.body972, label %for.end975

for.body972:                                      ; preds = %for.cond968
  br label %for.inc973

for.inc973:                                       ; preds = %for.body972
  %sub974 = sub nsw i32 %l.14, 11
  br label %for.cond968

for.end975:                                       ; preds = %for.cond968
  %idxprom976 = sext i32 %l.14 to i64
  %arrayidx977 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom976
  %i317 = load i32, i32* %arrayidx977, align 4
  %cmp978 = icmp eq i32 %i317, 12
  br i1 %cmp978, label %if.then983, label %lor.lhs.false979

lor.lhs.false979:                                 ; preds = %for.end975
  %idxprom980 = sext i32 %l.14 to i64
  %arrayidx981 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom980
  %i318 = load i32, i32* %arrayidx981, align 4
  %cmp982 = icmp eq i32 %i318, 10
  br i1 %cmp982, label %if.then983, label %if.end984

if.then983:                                       ; preds = %lor.lhs.false979, %for.end975
  br label %return

if.end984:                                        ; preds = %lor.lhs.false979
  br label %if.end1004

if.else985:                                       ; preds = %if.then964
  %i319 = load i32, i32* @wking_loc, align 4
  %add986 = add nsw i32 %i319, 11
  br label %for.cond987

for.cond987:                                      ; preds = %for.inc992, %if.else985
  %l.15 = phi i32 [ %add986, %if.else985 ], [ %add993, %for.inc992 ]
  %idxprom988 = sext i32 %l.15 to i64
  %arrayidx989 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom988
  %i320 = load i32, i32* %arrayidx989, align 4
  %cmp990 = icmp eq i32 %i320, 13
  br i1 %cmp990, label %for.body991, label %for.end994

for.body991:                                      ; preds = %for.cond987
  br label %for.inc992

for.inc992:                                       ; preds = %for.body991
  %add993 = add nsw i32 %l.15, 11
  br label %for.cond987

for.end994:                                       ; preds = %for.cond987
  %idxprom995 = sext i32 %l.15 to i64
  %arrayidx996 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom995
  %i321 = load i32, i32* %arrayidx996, align 4
  %cmp997 = icmp eq i32 %i321, 12
  br i1 %cmp997, label %if.then1002, label %lor.lhs.false998

lor.lhs.false998:                                 ; preds = %for.end994
  %idxprom999 = sext i32 %l.15 to i64
  %arrayidx1000 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom999
  %i322 = load i32, i32* %arrayidx1000, align 4
  %cmp1001 = icmp eq i32 %i322, 10
  br i1 %cmp1001, label %if.then1002, label %if.end1003

if.then1002:                                      ; preds = %lor.lhs.false998, %for.end994
  br label %return

if.end1003:                                       ; preds = %lor.lhs.false998
  br label %if.end1004

if.end1004:                                       ; preds = %if.end1003, %if.end984
  br label %if.end1005

if.end1005:                                       ; preds = %if.end1004, %if.else958
  br label %if.end1006

if.end1006:                                       ; preds = %if.end1005, %if.end957
  br label %if.end1007

if.end1007:                                       ; preds = %if.end1006, %if.end910
  br label %if.end1008

if.end1008:                                       ; preds = %if.end1007, %if.end863
  br label %return

if.end1009:                                       ; preds = %sw.epilog813
  br label %if.end1010

if.end1010:                                       ; preds = %if.end1009, %if.else532
  %i323 = load i32, i32* @wking_loc, align 4
  %call1011 = call i32 @is_attacked(i32 %i323, i32 0)
  %tobool1012 = icmp ne i32 %call1011, 0
  br i1 %tobool1012, label %if.then1013, label %if.else1014

if.then1013:                                      ; preds = %if.end1010
  br label %return

if.else1014:                                      ; preds = %if.end1010
  br label %return

if.end1015:                                       ; preds = %if.end67
  br label %return

return:                                           ; preds = %if.end1015, %if.else1014, %if.then1013, %if.end1008, %if.then1002, %if.then983, %if.then955, %if.then936, %if.then908, %if.then889, %if.then861, %if.then842, %if.then806, %if.then780, %if.then754, %if.then728, %if.then697, %if.then689, %if.then661, %if.then653, %if.then627, %if.then600, %if.then580, %if.then539, %if.else531, %if.then530, %if.end525, %if.then519, %if.then500, %if.then472, %if.then453, %if.then425, %if.then406, %if.then378, %if.then360, %if.then332, %if.then306, %if.then280, %if.then254, %if.then226, %if.then218, %if.then190, %if.then182, %if.then156, %if.then129, %if.then109, %if.then76, %if.end66, %if.then65, %if.then61, %if.then57, %if.end51, %if.then50, %if.then46, %if.then42, %if.end36, %if.then35, %if.then31, %if.then27, %if.end21, %if.then20, %if.then16, %if.then12, %if.then
  %retval.0 = phi i32 [ 1, %if.then ], [ 0, %if.then12 ], [ 0, %if.then16 ], [ 0, %if.then20 ], [ 1, %if.end21 ], [ 0, %if.then27 ], [ 0, %if.then31 ], [ 0, %if.then35 ], [ 1, %if.end36 ], [ 0, %if.then42 ], [ 0, %if.then46 ], [ 0, %if.then50 ], [ 1, %if.end51 ], [ 0, %if.then57 ], [ 0, %if.then61 ], [ 0, %if.then65 ], [ 1, %if.end66 ], [ 0, %if.end1015 ], [ 0, %if.then530 ], [ 1, %if.else531 ], [ 1, %if.then76 ], [ 0, %if.then360 ], [ 1, %if.end525 ], [ 0, %if.then378 ], [ 0, %if.then406 ], [ 0, %if.then425 ], [ 0, %if.then453 ], [ 0, %if.then472 ], [ 0, %if.then500 ], [ 0, %if.then519 ], [ 1, %if.then254 ], [ 1, %if.then280 ], [ 1, %if.then306 ], [ 1, %if.then332 ], [ 1, %if.then218 ], [ 1, %if.then226 ], [ 1, %if.then182 ], [ 1, %if.then190 ], [ 1, %if.then156 ], [ 1, %if.then109 ], [ 1, %if.then129 ], [ 0, %if.then1013 ], [ 1, %if.else1014 ], [ 1, %if.then539 ], [ 0, %if.then842 ], [ 1, %if.end1008 ], [ 0, %if.then861 ], [ 0, %if.then889 ], [ 0, %if.then908 ], [ 0, %if.then936 ], [ 0, %if.then955 ], [ 0, %if.then983 ], [ 0, %if.then1002 ], [ 1, %if.then728 ], [ 1, %if.then754 ], [ 1, %if.then780 ], [ 1, %if.then806 ], [ 1, %if.then689 ], [ 1, %if.then697 ], [ 1, %if.then653 ], [ 1, %if.then661 ], [ 1, %if.then627 ], [ 1, %if.then580 ], [ 1, %if.then600 ]
  ret i32 %retval.0
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @gen(%struct.move_s* %moves) #0 {
entry:
  store i32 0, i32* @kingcap, align 4
  store i32 0, i32* @numb_moves, align 4
  %arrayidx = getelementptr inbounds %struct.move_s, %struct.move_s* %moves, i64 0
  store %struct.move_s* %arrayidx, %struct.move_s** @genfor, align 8
  %i = load i32, i32* @Variant, align 4
  %cmp = icmp eq i32 %i, 3
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 0, i32* @captures, align 4
  store i32 0, i32* @fcaptures, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  br label %restart

restart:                                          ; preds = %if.then726, %if.end
  %i1 = load i32, i32* @white_to_move, align 4
  %tobool = icmp ne i32 %i1, 0
  br i1 %tobool, label %if.then1, label %if.else297

if.then1:                                         ; preds = %restart
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then1
  %j.0 = phi i32 [ 1, %if.then1 ], [ %inc296, %for.inc ]
  %a.0 = phi i32 [ 1, %if.then1 ], [ %a.1, %for.inc ]
  %i2 = load i32, i32* @piece_count, align 4
  %cmp2 = icmp sle i32 %a.0, %i2
  br i1 %cmp2, label %land.rhs, label %land.end8

land.rhs:                                         ; preds = %for.cond
  %i3 = load i32, i32* @Variant, align 4
  %cmp3 = icmp ne i32 %i3, 3
  br i1 %cmp3, label %land.lhs.true, label %lor.rhs

land.lhs.true:                                    ; preds = %land.rhs
  %i4 = load i32, i32* @kingcap, align 4
  %tobool4 = icmp ne i32 %i4, 0
  br i1 %tobool4, label %lor.rhs, label %lor.end

lor.rhs:                                          ; preds = %land.lhs.true, %land.rhs
  %i5 = load i32, i32* @Variant, align 4
  %cmp5 = icmp eq i32 %i5, 3
  br i1 %cmp5, label %land.rhs6, label %land.end

land.rhs6:                                        ; preds = %lor.rhs
  %i6 = load i32, i32* @fcaptures, align 4
  %i7 = load i32, i32* @captures, align 4
  %cmp7 = icmp eq i32 %i6, %i7
  br label %land.end

land.end:                                         ; preds = %land.rhs6, %lor.rhs
  %i8 = phi i1 [ false, %lor.rhs ], [ %cmp7, %land.rhs6 ]
  br label %lor.end

lor.end:                                          ; preds = %land.end, %land.lhs.true
  %i9 = phi i1 [ true, %land.lhs.true ], [ %i8, %land.end ]
  br label %land.end8

land.end8:                                        ; preds = %lor.end, %for.cond
  %i10 = phi i1 [ false, %for.cond ], [ %i9, %lor.end ]
  br i1 %i10, label %for.body, label %for.end

for.body:                                         ; preds = %land.end8
  %idxprom = sext i32 %j.0 to i64
  %arrayidx9 = getelementptr inbounds [62 x i32], [62 x i32]* @pieces, i64 0, i64 %idxprom
  %i11 = load i32, i32* %arrayidx9, align 4
  %tobool10 = icmp ne i32 %i11, 0
  br i1 %tobool10, label %if.else, label %if.then11

if.then11:                                        ; preds = %for.body
  br label %for.inc

if.else:                                          ; preds = %for.body
  %inc = add nsw i32 %a.0, 1
  br label %if.end12

if.end12:                                         ; preds = %if.else
  store i32 %i11, i32* @gfrom, align 4
  %idxprom13 = sext i32 %i11 to i64
  %arrayidx14 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom13
  %i12 = load i32, i32* %arrayidx14, align 4
  switch i32 %i12, label %sw.default [
    i32 1, label %sw.bb
    i32 3, label %sw.bb82
    i32 11, label %sw.bb138
    i32 7, label %sw.bb167
    i32 9, label %sw.bb196
    i32 5, label %sw.bb253
  ]

sw.bb:                                            ; preds = %if.end12
  %add = add nsw i32 %i11, 12
  %idxprom15 = sext i32 %add to i64
  %arrayidx16 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom15
  %i13 = load i32, i32* %arrayidx16, align 4
  %cmp17 = icmp eq i32 %i13, 13
  br i1 %cmp17, label %if.then18, label %if.end45

if.then18:                                        ; preds = %sw.bb
  %idxprom19 = sext i32 %i11 to i64
  %arrayidx20 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xrank to [144 x i32]*), i64 0, i64 %idxprom19
  %i14 = load i32, i32* %arrayidx20, align 4
  %cmp21 = icmp eq i32 %i14, 7
  br i1 %cmp21, label %land.lhs.true22, label %if.else28

land.lhs.true22:                                  ; preds = %if.then18
  %i15 = load i32, i32* @Variant, align 4
  %cmp23 = icmp ne i32 %i15, 3
  br i1 %cmp23, label %land.lhs.true24, label %if.else28

land.lhs.true24:                                  ; preds = %land.lhs.true22
  %i16 = load i32, i32* @Variant, align 4
  %cmp25 = icmp ne i32 %i16, 4
  br i1 %cmp25, label %if.then26, label %if.else28

if.then26:                                        ; preds = %land.lhs.true24
  %add27 = add nsw i32 %i11, 12
  call void @push_pawn(i32 %add27, i32 0)
  br label %if.end44

if.else28:                                        ; preds = %land.lhs.true24, %land.lhs.true22, %if.then18
  %i17 = load i32, i32* @captures, align 4
  %tobool29 = icmp ne i32 %i17, 0
  br i1 %tobool29, label %if.end43, label %if.then30

if.then30:                                        ; preds = %if.else28
  %add31 = add nsw i32 %i11, 12
  call void @push_pawn(i32 %add31, i32 0)
  %idxprom32 = sext i32 %i11 to i64
  %arrayidx33 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xrank to [144 x i32]*), i64 0, i64 %idxprom32
  %i18 = load i32, i32* %arrayidx33, align 4
  %cmp34 = icmp eq i32 %i18, 2
  br i1 %cmp34, label %land.lhs.true35, label %if.end42

land.lhs.true35:                                  ; preds = %if.then30
  %add36 = add nsw i32 %i11, 24
  %idxprom37 = sext i32 %add36 to i64
  %arrayidx38 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom37
  %i19 = load i32, i32* %arrayidx38, align 4
  %cmp39 = icmp eq i32 %i19, 13
  br i1 %cmp39, label %if.then40, label %if.end42

if.then40:                                        ; preds = %land.lhs.true35
  %add41 = add nsw i32 %i11, 24
  call void @push_pawn_simple(i32 %add41)
  br label %if.end42

if.end42:                                         ; preds = %if.then40, %land.lhs.true35, %if.then30
  br label %if.end43

if.end43:                                         ; preds = %if.end42, %if.else28
  br label %if.end44

if.end44:                                         ; preds = %if.end43, %if.then26
  br label %if.end45

if.end45:                                         ; preds = %if.end44, %sw.bb
  %add46 = add nsw i32 %i11, 13
  %idxprom47 = sext i32 %add46 to i64
  %arrayidx48 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom47
  %i20 = load i32, i32* %arrayidx48, align 4
  %and = and i32 %i20, 1
  %cmp49 = icmp eq i32 %and, 0
  br i1 %cmp49, label %land.lhs.true50, label %if.end57

land.lhs.true50:                                  ; preds = %if.end45
  %add51 = add nsw i32 %i11, 13
  %idxprom52 = sext i32 %add51 to i64
  %arrayidx53 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom52
  %i21 = load i32, i32* %arrayidx53, align 4
  %cmp54 = icmp ne i32 %i21, 0
  br i1 %cmp54, label %if.then55, label %if.end57

if.then55:                                        ; preds = %land.lhs.true50
  %add56 = add nsw i32 %i11, 13
  call void @push_pawn(i32 %add56, i32 0)
  br label %if.end57

if.end57:                                         ; preds = %if.then55, %land.lhs.true50, %if.end45
  %add58 = add nsw i32 %i11, 11
  %idxprom59 = sext i32 %add58 to i64
  %arrayidx60 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom59
  %i22 = load i32, i32* %arrayidx60, align 4
  %and61 = and i32 %i22, 1
  %cmp62 = icmp eq i32 %and61, 0
  br i1 %cmp62, label %land.lhs.true63, label %if.end70

land.lhs.true63:                                  ; preds = %if.end57
  %add64 = add nsw i32 %i11, 11
  %idxprom65 = sext i32 %add64 to i64
  %arrayidx66 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom65
  %i23 = load i32, i32* %arrayidx66, align 4
  %cmp67 = icmp ne i32 %i23, 0
  br i1 %cmp67, label %if.then68, label %if.end70

if.then68:                                        ; preds = %land.lhs.true63
  %add69 = add nsw i32 %i11, 11
  call void @push_pawn(i32 %add69, i32 0)
  br label %if.end70

if.end70:                                         ; preds = %if.then68, %land.lhs.true63, %if.end57
  %i24 = load i32, i32* @ep_square, align 4
  %add71 = add nsw i32 %i11, 13
  %cmp72 = icmp eq i32 %i24, %add71
  br i1 %cmp72, label %if.then73, label %if.else75

if.then73:                                        ; preds = %if.end70
  %add74 = add nsw i32 %i11, 13
  call void @push_pawn(i32 %add74, i32 1)
  br label %if.end81

if.else75:                                        ; preds = %if.end70
  %i25 = load i32, i32* @ep_square, align 4
  %add76 = add nsw i32 %i11, 11
  %cmp77 = icmp eq i32 %i25, %add76
  br i1 %cmp77, label %if.then78, label %if.end80

if.then78:                                        ; preds = %if.else75
  %add79 = add nsw i32 %i11, 11
  call void @push_pawn(i32 %add79, i32 1)
  br label %if.end80

if.end80:                                         ; preds = %if.then78, %if.else75
  br label %if.end81

if.end81:                                         ; preds = %if.end80, %if.then73
  br label %sw.epilog

sw.bb82:                                          ; preds = %if.end12
  %sub = sub nsw i32 %i11, 25
  %idxprom83 = sext i32 %sub to i64
  %arrayidx84 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom83
  %i26 = load i32, i32* %arrayidx84, align 4
  %cmp85 = icmp ne i32 %i26, 0
  br i1 %cmp85, label %if.then86, label %if.end88

if.then86:                                        ; preds = %sw.bb82
  %sub87 = sub nsw i32 %i11, 25
  call void @push_knighT(i32 %sub87)
  br label %if.end88

if.end88:                                         ; preds = %if.then86, %sw.bb82
  %sub89 = sub nsw i32 %i11, 23
  %idxprom90 = sext i32 %sub89 to i64
  %arrayidx91 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom90
  %i27 = load i32, i32* %arrayidx91, align 4
  %cmp92 = icmp ne i32 %i27, 0
  br i1 %cmp92, label %if.then93, label %if.end95

if.then93:                                        ; preds = %if.end88
  %sub94 = sub nsw i32 %i11, 23
  call void @push_knighT(i32 %sub94)
  br label %if.end95

if.end95:                                         ; preds = %if.then93, %if.end88
  %sub96 = sub nsw i32 %i11, 14
  %idxprom97 = sext i32 %sub96 to i64
  %arrayidx98 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom97
  %i28 = load i32, i32* %arrayidx98, align 4
  %cmp99 = icmp ne i32 %i28, 0
  br i1 %cmp99, label %if.then100, label %if.end102

if.then100:                                       ; preds = %if.end95
  %sub101 = sub nsw i32 %i11, 14
  call void @push_knighT(i32 %sub101)
  br label %if.end102

if.end102:                                        ; preds = %if.then100, %if.end95
  %sub103 = sub nsw i32 %i11, 10
  %idxprom104 = sext i32 %sub103 to i64
  %arrayidx105 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom104
  %i29 = load i32, i32* %arrayidx105, align 4
  %cmp106 = icmp ne i32 %i29, 0
  br i1 %cmp106, label %if.then107, label %if.end109

if.then107:                                       ; preds = %if.end102
  %sub108 = sub nsw i32 %i11, 10
  call void @push_knighT(i32 %sub108)
  br label %if.end109

if.end109:                                        ; preds = %if.then107, %if.end102
  %add110 = add nsw i32 %i11, 10
  %idxprom111 = sext i32 %add110 to i64
  %arrayidx112 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom111
  %i30 = load i32, i32* %arrayidx112, align 4
  %cmp113 = icmp ne i32 %i30, 0
  br i1 %cmp113, label %if.then114, label %if.end116

if.then114:                                       ; preds = %if.end109
  %add115 = add nsw i32 %i11, 10
  call void @push_knighT(i32 %add115)
  br label %if.end116

if.end116:                                        ; preds = %if.then114, %if.end109
  %add117 = add nsw i32 %i11, 14
  %idxprom118 = sext i32 %add117 to i64
  %arrayidx119 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom118
  %i31 = load i32, i32* %arrayidx119, align 4
  %cmp120 = icmp ne i32 %i31, 0
  br i1 %cmp120, label %if.then121, label %if.end123

if.then121:                                       ; preds = %if.end116
  %add122 = add nsw i32 %i11, 14
  call void @push_knighT(i32 %add122)
  br label %if.end123

if.end123:                                        ; preds = %if.then121, %if.end116
  %add124 = add nsw i32 %i11, 23
  %idxprom125 = sext i32 %add124 to i64
  %arrayidx126 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom125
  %i32 = load i32, i32* %arrayidx126, align 4
  %cmp127 = icmp ne i32 %i32, 0
  br i1 %cmp127, label %if.then128, label %if.end130

if.then128:                                       ; preds = %if.end123
  %add129 = add nsw i32 %i11, 23
  call void @push_knighT(i32 %add129)
  br label %if.end130

if.end130:                                        ; preds = %if.then128, %if.end123
  %add131 = add nsw i32 %i11, 25
  %idxprom132 = sext i32 %add131 to i64
  %arrayidx133 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom132
  %i33 = load i32, i32* %arrayidx133, align 4
  %cmp134 = icmp ne i32 %i33, 0
  br i1 %cmp134, label %if.then135, label %if.end137

if.then135:                                       ; preds = %if.end130
  %add136 = add nsw i32 %i11, 25
  call void @push_knighT(i32 %add136)
  br label %if.end137

if.end137:                                        ; preds = %if.then135, %if.end130
  br label %sw.epilog

sw.bb138:                                         ; preds = %if.end12
  %sub139 = sub nsw i32 %i11, 13
  %idxprom140 = sext i32 %sub139 to i64
  %arrayidx141 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom140
  %i34 = load i32, i32* %arrayidx141, align 4
  %cmp142 = icmp ne i32 %i34, 0
  br i1 %cmp142, label %if.then143, label %if.end145

if.then143:                                       ; preds = %sw.bb138
  %sub144 = sub nsw i32 %i11, 13
  call void @push_slidE(i32 %sub144)
  br label %if.end145

if.end145:                                        ; preds = %if.then143, %sw.bb138
  %sub146 = sub nsw i32 %i11, 11
  %idxprom147 = sext i32 %sub146 to i64
  %arrayidx148 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom147
  %i35 = load i32, i32* %arrayidx148, align 4
  %cmp149 = icmp ne i32 %i35, 0
  br i1 %cmp149, label %if.then150, label %if.end152

if.then150:                                       ; preds = %if.end145
  %sub151 = sub nsw i32 %i11, 11
  call void @push_slidE(i32 %sub151)
  br label %if.end152

if.end152:                                        ; preds = %if.then150, %if.end145
  %add153 = add nsw i32 %i11, 11
  %idxprom154 = sext i32 %add153 to i64
  %arrayidx155 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom154
  %i36 = load i32, i32* %arrayidx155, align 4
  %cmp156 = icmp ne i32 %i36, 0
  br i1 %cmp156, label %if.then157, label %if.end159

if.then157:                                       ; preds = %if.end152
  %add158 = add nsw i32 %i11, 11
  call void @push_slidE(i32 %add158)
  br label %if.end159

if.end159:                                        ; preds = %if.then157, %if.end152
  %add160 = add nsw i32 %i11, 13
  %idxprom161 = sext i32 %add160 to i64
  %arrayidx162 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom161
  %i37 = load i32, i32* %arrayidx162, align 4
  %cmp163 = icmp ne i32 %i37, 0
  br i1 %cmp163, label %if.then164, label %if.end166

if.then164:                                       ; preds = %if.end159
  %add165 = add nsw i32 %i11, 13
  call void @push_slidE(i32 %add165)
  br label %if.end166

if.end166:                                        ; preds = %if.then164, %if.end159
  br label %sw.epilog

sw.bb167:                                         ; preds = %if.end12
  %sub168 = sub nsw i32 %i11, 12
  %idxprom169 = sext i32 %sub168 to i64
  %arrayidx170 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom169
  %i38 = load i32, i32* %arrayidx170, align 4
  %cmp171 = icmp ne i32 %i38, 0
  br i1 %cmp171, label %if.then172, label %if.end174

if.then172:                                       ; preds = %sw.bb167
  %sub173 = sub nsw i32 %i11, 12
  call void @push_slidE(i32 %sub173)
  br label %if.end174

if.end174:                                        ; preds = %if.then172, %sw.bb167
  %sub175 = sub nsw i32 %i11, 1
  %idxprom176 = sext i32 %sub175 to i64
  %arrayidx177 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom176
  %i39 = load i32, i32* %arrayidx177, align 4
  %cmp178 = icmp ne i32 %i39, 0
  br i1 %cmp178, label %if.then179, label %if.end181

if.then179:                                       ; preds = %if.end174
  %sub180 = sub nsw i32 %i11, 1
  call void @push_slidE(i32 %sub180)
  br label %if.end181

if.end181:                                        ; preds = %if.then179, %if.end174
  %add182 = add nsw i32 %i11, 1
  %idxprom183 = sext i32 %add182 to i64
  %arrayidx184 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom183
  %i40 = load i32, i32* %arrayidx184, align 4
  %cmp185 = icmp ne i32 %i40, 0
  br i1 %cmp185, label %if.then186, label %if.end188

if.then186:                                       ; preds = %if.end181
  %add187 = add nsw i32 %i11, 1
  call void @push_slidE(i32 %add187)
  br label %if.end188

if.end188:                                        ; preds = %if.then186, %if.end181
  %add189 = add nsw i32 %i11, 12
  %idxprom190 = sext i32 %add189 to i64
  %arrayidx191 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom190
  %i41 = load i32, i32* %arrayidx191, align 4
  %cmp192 = icmp ne i32 %i41, 0
  br i1 %cmp192, label %if.then193, label %if.end195

if.then193:                                       ; preds = %if.end188
  %add194 = add nsw i32 %i11, 12
  call void @push_slidE(i32 %add194)
  br label %if.end195

if.end195:                                        ; preds = %if.then193, %if.end188
  br label %sw.epilog

sw.bb196:                                         ; preds = %if.end12
  %sub197 = sub nsw i32 %i11, 13
  %idxprom198 = sext i32 %sub197 to i64
  %arrayidx199 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom198
  %i42 = load i32, i32* %arrayidx199, align 4
  %cmp200 = icmp ne i32 %i42, 0
  br i1 %cmp200, label %if.then201, label %if.end203

if.then201:                                       ; preds = %sw.bb196
  %sub202 = sub nsw i32 %i11, 13
  call void @push_slidE(i32 %sub202)
  br label %if.end203

if.end203:                                        ; preds = %if.then201, %sw.bb196
  %sub204 = sub nsw i32 %i11, 12
  %idxprom205 = sext i32 %sub204 to i64
  %arrayidx206 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom205
  %i43 = load i32, i32* %arrayidx206, align 4
  %cmp207 = icmp ne i32 %i43, 0
  br i1 %cmp207, label %if.then208, label %if.end210

if.then208:                                       ; preds = %if.end203
  %sub209 = sub nsw i32 %i11, 12
  call void @push_slidE(i32 %sub209)
  br label %if.end210

if.end210:                                        ; preds = %if.then208, %if.end203
  %sub211 = sub nsw i32 %i11, 11
  %idxprom212 = sext i32 %sub211 to i64
  %arrayidx213 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom212
  %i44 = load i32, i32* %arrayidx213, align 4
  %cmp214 = icmp ne i32 %i44, 0
  br i1 %cmp214, label %if.then215, label %if.end217

if.then215:                                       ; preds = %if.end210
  %sub216 = sub nsw i32 %i11, 11
  call void @push_slidE(i32 %sub216)
  br label %if.end217

if.end217:                                        ; preds = %if.then215, %if.end210
  %sub218 = sub nsw i32 %i11, 1
  %idxprom219 = sext i32 %sub218 to i64
  %arrayidx220 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom219
  %i45 = load i32, i32* %arrayidx220, align 4
  %cmp221 = icmp ne i32 %i45, 0
  br i1 %cmp221, label %if.then222, label %if.end224

if.then222:                                       ; preds = %if.end217
  %sub223 = sub nsw i32 %i11, 1
  call void @push_slidE(i32 %sub223)
  br label %if.end224

if.end224:                                        ; preds = %if.then222, %if.end217
  %add225 = add nsw i32 %i11, 1
  %idxprom226 = sext i32 %add225 to i64
  %arrayidx227 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom226
  %i46 = load i32, i32* %arrayidx227, align 4
  %cmp228 = icmp ne i32 %i46, 0
  br i1 %cmp228, label %if.then229, label %if.end231

if.then229:                                       ; preds = %if.end224
  %add230 = add nsw i32 %i11, 1
  call void @push_slidE(i32 %add230)
  br label %if.end231

if.end231:                                        ; preds = %if.then229, %if.end224
  %add232 = add nsw i32 %i11, 11
  %idxprom233 = sext i32 %add232 to i64
  %arrayidx234 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom233
  %i47 = load i32, i32* %arrayidx234, align 4
  %cmp235 = icmp ne i32 %i47, 0
  br i1 %cmp235, label %if.then236, label %if.end238

if.then236:                                       ; preds = %if.end231
  %add237 = add nsw i32 %i11, 11
  call void @push_slidE(i32 %add237)
  br label %if.end238

if.end238:                                        ; preds = %if.then236, %if.end231
  %add239 = add nsw i32 %i11, 12
  %idxprom240 = sext i32 %add239 to i64
  %arrayidx241 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom240
  %i48 = load i32, i32* %arrayidx241, align 4
  %cmp242 = icmp ne i32 %i48, 0
  br i1 %cmp242, label %if.then243, label %if.end245

if.then243:                                       ; preds = %if.end238
  %add244 = add nsw i32 %i11, 12
  call void @push_slidE(i32 %add244)
  br label %if.end245

if.end245:                                        ; preds = %if.then243, %if.end238
  %add246 = add nsw i32 %i11, 13
  %idxprom247 = sext i32 %add246 to i64
  %arrayidx248 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom247
  %i49 = load i32, i32* %arrayidx248, align 4
  %cmp249 = icmp ne i32 %i49, 0
  br i1 %cmp249, label %if.then250, label %if.end252

if.then250:                                       ; preds = %if.end245
  %add251 = add nsw i32 %i11, 13
  call void @push_slidE(i32 %add251)
  br label %if.end252

if.end252:                                        ; preds = %if.then250, %if.end245
  br label %sw.epilog

sw.bb253:                                         ; preds = %if.end12
  %sub254 = sub nsw i32 %i11, 13
  call void @push_king(i32 %sub254)
  %sub255 = sub nsw i32 %i11, 12
  call void @push_king(i32 %sub255)
  %sub256 = sub nsw i32 %i11, 11
  call void @push_king(i32 %sub256)
  %sub257 = sub nsw i32 %i11, 1
  call void @push_king(i32 %sub257)
  %add258 = add nsw i32 %i11, 1
  call void @push_king(i32 %add258)
  %add259 = add nsw i32 %i11, 11
  call void @push_king(i32 %add259)
  %add260 = add nsw i32 %i11, 12
  call void @push_king(i32 %add260)
  %add261 = add nsw i32 %i11, 13
  call void @push_king(i32 %add261)
  %cmp262 = icmp eq i32 %i11, 30
  br i1 %cmp262, label %land.lhs.true263, label %if.end295

land.lhs.true263:                                 ; preds = %sw.bb253
  %i50 = load i32, i32* getelementptr inbounds ([144 x i32], [144 x i32]* @moved, i64 0, i64 30), align 8
  %tobool264 = icmp ne i32 %i50, 0
  br i1 %tobool264, label %if.end295, label %land.lhs.true265

land.lhs.true265:                                 ; preds = %land.lhs.true263
  %i51 = load i32, i32* @captures, align 4
  %tobool266 = icmp ne i32 %i51, 0
  br i1 %tobool266, label %if.end295, label %land.lhs.true267

land.lhs.true267:                                 ; preds = %land.lhs.true265
  %i52 = load i32, i32* @Variant, align 4
  %cmp268 = icmp ne i32 %i52, 3
  br i1 %cmp268, label %if.then270, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true267
  %i53 = load i32, i32* @Giveaway, align 4
  %cmp269 = icmp eq i32 %i53, 1
  br i1 %cmp269, label %if.then270, label %if.end295

if.then270:                                       ; preds = %lor.lhs.false, %land.lhs.true267
  %i54 = load i32, i32* getelementptr inbounds ([144 x i32], [144 x i32]* @moved, i64 0, i64 33), align 4
  %tobool271 = icmp ne i32 %i54, 0
  br i1 %tobool271, label %if.end281, label %land.lhs.true272

land.lhs.true272:                                 ; preds = %if.then270
  %i55 = load i32, i32* getelementptr inbounds ([144 x i32], [144 x i32]* @board, i64 0, i64 33), align 4
  %cmp273 = icmp eq i32 %i55, 7
  br i1 %cmp273, label %if.then274, label %if.end281

if.then274:                                       ; preds = %land.lhs.true272
  %i56 = load i32, i32* getelementptr inbounds ([144 x i32], [144 x i32]* @board, i64 0, i64 31), align 4
  %cmp275 = icmp eq i32 %i56, 13
  br i1 %cmp275, label %land.lhs.true276, label %if.end280

land.lhs.true276:                                 ; preds = %if.then274
  %i57 = load i32, i32* getelementptr inbounds ([144 x i32], [144 x i32]* @board, i64 0, i64 32), align 16
  %cmp277 = icmp eq i32 %i57, 13
  br i1 %cmp277, label %if.then278, label %if.end280

if.then278:                                       ; preds = %land.lhs.true276
  %add279 = add nsw i32 %i11, 2
  call void @push_king_castle(i32 %add279, i32 1)
  br label %if.end280

if.end280:                                        ; preds = %if.then278, %land.lhs.true276, %if.then274
  br label %if.end281

if.end281:                                        ; preds = %if.end280, %land.lhs.true272, %if.then270
  %i58 = load i32, i32* getelementptr inbounds ([144 x i32], [144 x i32]* @moved, i64 0, i64 26), align 8
  %tobool282 = icmp ne i32 %i58, 0
  br i1 %tobool282, label %if.end294, label %land.lhs.true283

land.lhs.true283:                                 ; preds = %if.end281
  %i59 = load i32, i32* getelementptr inbounds ([144 x i32], [144 x i32]* @board, i64 0, i64 26), align 8
  %cmp284 = icmp eq i32 %i59, 7
  br i1 %cmp284, label %if.then285, label %if.end294

if.then285:                                       ; preds = %land.lhs.true283
  %i60 = load i32, i32* getelementptr inbounds ([144 x i32], [144 x i32]* @board, i64 0, i64 27), align 4
  %cmp286 = icmp eq i32 %i60, 13
  br i1 %cmp286, label %land.lhs.true287, label %if.end293

land.lhs.true287:                                 ; preds = %if.then285
  %i61 = load i32, i32* getelementptr inbounds ([144 x i32], [144 x i32]* @board, i64 0, i64 28), align 16
  %cmp288 = icmp eq i32 %i61, 13
  br i1 %cmp288, label %land.lhs.true289, label %if.end293

land.lhs.true289:                                 ; preds = %land.lhs.true287
  %i62 = load i32, i32* getelementptr inbounds ([144 x i32], [144 x i32]* @board, i64 0, i64 29), align 4
  %cmp290 = icmp eq i32 %i62, 13
  br i1 %cmp290, label %if.then291, label %if.end293

if.then291:                                       ; preds = %land.lhs.true289
  %sub292 = sub nsw i32 %i11, 2
  call void @push_king_castle(i32 %sub292, i32 2)
  br label %if.end293

if.end293:                                        ; preds = %if.then291, %land.lhs.true289, %land.lhs.true287, %if.then285
  br label %if.end294

if.end294:                                        ; preds = %if.end293, %land.lhs.true283, %if.end281
  br label %if.end295

if.end295:                                        ; preds = %if.end294, %lor.lhs.false, %land.lhs.true265, %land.lhs.true263, %sw.bb253
  br label %sw.epilog

sw.default:                                       ; preds = %if.end12
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.default, %if.end295, %if.end252, %if.end195, %if.end166, %if.end137, %if.end81
  br label %for.inc

for.inc:                                          ; preds = %sw.epilog, %if.then11
  %a.1 = phi i32 [ %inc, %sw.epilog ], [ %a.0, %if.then11 ]
  %inc296 = add nsw i32 %j.0, 1
  br label %for.cond

for.end:                                          ; preds = %land.end8
  br label %if.end612

if.else297:                                       ; preds = %restart
  br label %for.cond298

for.cond298:                                      ; preds = %for.inc609, %if.else297
  %j.1 = phi i32 [ 1, %if.else297 ], [ %inc610, %for.inc609 ]
  %a.2 = phi i32 [ 1, %if.else297 ], [ %a.3, %for.inc609 ]
  %i63 = load i32, i32* @piece_count, align 4
  %cmp299 = icmp sle i32 %a.2, %i63
  br i1 %cmp299, label %land.rhs300, label %land.end310

land.rhs300:                                      ; preds = %for.cond298
  %i64 = load i32, i32* @Variant, align 4
  %cmp301 = icmp ne i32 %i64, 3
  br i1 %cmp301, label %land.lhs.true302, label %lor.rhs304

land.lhs.true302:                                 ; preds = %land.rhs300
  %i65 = load i32, i32* @kingcap, align 4
  %tobool303 = icmp ne i32 %i65, 0
  br i1 %tobool303, label %lor.rhs304, label %lor.end309

lor.rhs304:                                       ; preds = %land.lhs.true302, %land.rhs300
  %i66 = load i32, i32* @Variant, align 4
  %cmp305 = icmp eq i32 %i66, 3
  br i1 %cmp305, label %land.rhs306, label %land.end308

land.rhs306:                                      ; preds = %lor.rhs304
  %i67 = load i32, i32* @fcaptures, align 4
  %i68 = load i32, i32* @captures, align 4
  %cmp307 = icmp eq i32 %i67, %i68
  br label %land.end308

land.end308:                                      ; preds = %land.rhs306, %lor.rhs304
  %i69 = phi i1 [ false, %lor.rhs304 ], [ %cmp307, %land.rhs306 ]
  br label %lor.end309

lor.end309:                                       ; preds = %land.end308, %land.lhs.true302
  %i70 = phi i1 [ true, %land.lhs.true302 ], [ %i69, %land.end308 ]
  br label %land.end310

land.end310:                                      ; preds = %lor.end309, %for.cond298
  %i71 = phi i1 [ false, %for.cond298 ], [ %i70, %lor.end309 ]
  br i1 %i71, label %for.body311, label %for.end611

for.body311:                                      ; preds = %land.end310
  %idxprom312 = sext i32 %j.1 to i64
  %arrayidx313 = getelementptr inbounds [62 x i32], [62 x i32]* @pieces, i64 0, i64 %idxprom312
  %i72 = load i32, i32* %arrayidx313, align 4
  %tobool314 = icmp ne i32 %i72, 0
  br i1 %tobool314, label %if.else316, label %if.then315

if.then315:                                       ; preds = %for.body311
  br label %for.inc609

if.else316:                                       ; preds = %for.body311
  %inc317 = add nsw i32 %a.2, 1
  br label %if.end318

if.end318:                                        ; preds = %if.else316
  store i32 %i72, i32* @gfrom, align 4
  %idxprom319 = sext i32 %i72 to i64
  %arrayidx320 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom319
  %i73 = load i32, i32* %arrayidx320, align 4
  switch i32 %i73, label %sw.default607 [
    i32 2, label %sw.bb321
    i32 4, label %sw.bb391
    i32 12, label %sw.bb448
    i32 8, label %sw.bb477
    i32 10, label %sw.bb506
    i32 6, label %sw.bb563
  ]

sw.bb321:                                         ; preds = %if.end318
  %sub322 = sub nsw i32 %i72, 12
  %idxprom323 = sext i32 %sub322 to i64
  %arrayidx324 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom323
  %i74 = load i32, i32* %arrayidx324, align 4
  %cmp325 = icmp eq i32 %i74, 13
  br i1 %cmp325, label %if.then326, label %if.end353

if.then326:                                       ; preds = %sw.bb321
  %idxprom327 = sext i32 %i72 to i64
  %arrayidx328 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xrank to [144 x i32]*), i64 0, i64 %idxprom327
  %i75 = load i32, i32* %arrayidx328, align 4
  %cmp329 = icmp eq i32 %i75, 2
  br i1 %cmp329, label %land.lhs.true330, label %if.else336

land.lhs.true330:                                 ; preds = %if.then326
  %i76 = load i32, i32* @Variant, align 4
  %cmp331 = icmp ne i32 %i76, 3
  br i1 %cmp331, label %land.lhs.true332, label %if.else336

land.lhs.true332:                                 ; preds = %land.lhs.true330
  %i77 = load i32, i32* @Variant, align 4
  %cmp333 = icmp ne i32 %i77, 4
  br i1 %cmp333, label %if.then334, label %if.else336

if.then334:                                       ; preds = %land.lhs.true332
  %sub335 = sub nsw i32 %i72, 12
  call void @push_pawn(i32 %sub335, i32 0)
  br label %if.end352

if.else336:                                       ; preds = %land.lhs.true332, %land.lhs.true330, %if.then326
  %i78 = load i32, i32* @captures, align 4
  %tobool337 = icmp ne i32 %i78, 0
  br i1 %tobool337, label %if.end351, label %if.then338

if.then338:                                       ; preds = %if.else336
  %sub339 = sub nsw i32 %i72, 12
  call void @push_pawn(i32 %sub339, i32 0)
  %idxprom340 = sext i32 %i72 to i64
  %arrayidx341 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xrank to [144 x i32]*), i64 0, i64 %idxprom340
  %i79 = load i32, i32* %arrayidx341, align 4
  %cmp342 = icmp eq i32 %i79, 7
  br i1 %cmp342, label %land.lhs.true343, label %if.end350

land.lhs.true343:                                 ; preds = %if.then338
  %sub344 = sub nsw i32 %i72, 24
  %idxprom345 = sext i32 %sub344 to i64
  %arrayidx346 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom345
  %i80 = load i32, i32* %arrayidx346, align 4
  %cmp347 = icmp eq i32 %i80, 13
  br i1 %cmp347, label %if.then348, label %if.end350

if.then348:                                       ; preds = %land.lhs.true343
  %sub349 = sub nsw i32 %i72, 24
  call void @push_pawn_simple(i32 %sub349)
  br label %if.end350

if.end350:                                        ; preds = %if.then348, %land.lhs.true343, %if.then338
  br label %if.end351

if.end351:                                        ; preds = %if.end350, %if.else336
  br label %if.end352

if.end352:                                        ; preds = %if.end351, %if.then334
  br label %if.end353

if.end353:                                        ; preds = %if.end352, %sw.bb321
  %sub354 = sub nsw i32 %i72, 13
  %idxprom355 = sext i32 %sub354 to i64
  %arrayidx356 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom355
  %i81 = load i32, i32* %arrayidx356, align 4
  %and357 = and i32 %i81, 1
  %cmp358 = icmp eq i32 %and357, 1
  br i1 %cmp358, label %land.lhs.true359, label %if.end366

land.lhs.true359:                                 ; preds = %if.end353
  %sub360 = sub nsw i32 %i72, 13
  %idxprom361 = sext i32 %sub360 to i64
  %arrayidx362 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom361
  %i82 = load i32, i32* %arrayidx362, align 4
  %cmp363 = icmp ne i32 %i82, 13
  br i1 %cmp363, label %if.then364, label %if.end366

if.then364:                                       ; preds = %land.lhs.true359
  %sub365 = sub nsw i32 %i72, 13
  call void @push_pawn(i32 %sub365, i32 0)
  br label %if.end366

if.end366:                                        ; preds = %if.then364, %land.lhs.true359, %if.end353
  %sub367 = sub nsw i32 %i72, 11
  %idxprom368 = sext i32 %sub367 to i64
  %arrayidx369 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom368
  %i83 = load i32, i32* %arrayidx369, align 4
  %and370 = and i32 %i83, 1
  %cmp371 = icmp eq i32 %and370, 1
  br i1 %cmp371, label %land.lhs.true372, label %if.end379

land.lhs.true372:                                 ; preds = %if.end366
  %sub373 = sub nsw i32 %i72, 11
  %idxprom374 = sext i32 %sub373 to i64
  %arrayidx375 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom374
  %i84 = load i32, i32* %arrayidx375, align 4
  %cmp376 = icmp ne i32 %i84, 13
  br i1 %cmp376, label %if.then377, label %if.end379

if.then377:                                       ; preds = %land.lhs.true372
  %sub378 = sub nsw i32 %i72, 11
  call void @push_pawn(i32 %sub378, i32 0)
  br label %if.end379

if.end379:                                        ; preds = %if.then377, %land.lhs.true372, %if.end366
  %i85 = load i32, i32* @ep_square, align 4
  %sub380 = sub nsw i32 %i72, 13
  %cmp381 = icmp eq i32 %i85, %sub380
  br i1 %cmp381, label %if.then382, label %if.else384

if.then382:                                       ; preds = %if.end379
  %sub383 = sub nsw i32 %i72, 13
  call void @push_pawn(i32 %sub383, i32 1)
  br label %if.end390

if.else384:                                       ; preds = %if.end379
  %i86 = load i32, i32* @ep_square, align 4
  %sub385 = sub nsw i32 %i72, 11
  %cmp386 = icmp eq i32 %i86, %sub385
  br i1 %cmp386, label %if.then387, label %if.end389

if.then387:                                       ; preds = %if.else384
  %sub388 = sub nsw i32 %i72, 11
  call void @push_pawn(i32 %sub388, i32 1)
  br label %if.end389

if.end389:                                        ; preds = %if.then387, %if.else384
  br label %if.end390

if.end390:                                        ; preds = %if.end389, %if.then382
  br label %sw.epilog608

sw.bb391:                                         ; preds = %if.end318
  %sub392 = sub nsw i32 %i72, 25
  %idxprom393 = sext i32 %sub392 to i64
  %arrayidx394 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom393
  %i87 = load i32, i32* %arrayidx394, align 4
  %cmp395 = icmp ne i32 %i87, 0
  br i1 %cmp395, label %if.then396, label %if.end398

if.then396:                                       ; preds = %sw.bb391
  %sub397 = sub nsw i32 %i72, 25
  call void @push_knighT(i32 %sub397)
  br label %if.end398

if.end398:                                        ; preds = %if.then396, %sw.bb391
  %sub399 = sub nsw i32 %i72, 23
  %idxprom400 = sext i32 %sub399 to i64
  %arrayidx401 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom400
  %i88 = load i32, i32* %arrayidx401, align 4
  %cmp402 = icmp ne i32 %i88, 0
  br i1 %cmp402, label %if.then403, label %if.end405

if.then403:                                       ; preds = %if.end398
  %sub404 = sub nsw i32 %i72, 23
  call void @push_knighT(i32 %sub404)
  br label %if.end405

if.end405:                                        ; preds = %if.then403, %if.end398
  %sub406 = sub nsw i32 %i72, 14
  %idxprom407 = sext i32 %sub406 to i64
  %arrayidx408 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom407
  %i89 = load i32, i32* %arrayidx408, align 4
  %cmp409 = icmp ne i32 %i89, 0
  br i1 %cmp409, label %if.then410, label %if.end412

if.then410:                                       ; preds = %if.end405
  %sub411 = sub nsw i32 %i72, 14
  call void @push_knighT(i32 %sub411)
  br label %if.end412

if.end412:                                        ; preds = %if.then410, %if.end405
  %sub413 = sub nsw i32 %i72, 10
  %idxprom414 = sext i32 %sub413 to i64
  %arrayidx415 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom414
  %i90 = load i32, i32* %arrayidx415, align 4
  %cmp416 = icmp ne i32 %i90, 0
  br i1 %cmp416, label %if.then417, label %if.end419

if.then417:                                       ; preds = %if.end412
  %sub418 = sub nsw i32 %i72, 10
  call void @push_knighT(i32 %sub418)
  br label %if.end419

if.end419:                                        ; preds = %if.then417, %if.end412
  %add420 = add nsw i32 %i72, 10
  %idxprom421 = sext i32 %add420 to i64
  %arrayidx422 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom421
  %i91 = load i32, i32* %arrayidx422, align 4
  %cmp423 = icmp ne i32 %i91, 0
  br i1 %cmp423, label %if.then424, label %if.end426

if.then424:                                       ; preds = %if.end419
  %add425 = add nsw i32 %i72, 10
  call void @push_knighT(i32 %add425)
  br label %if.end426

if.end426:                                        ; preds = %if.then424, %if.end419
  %add427 = add nsw i32 %i72, 14
  %idxprom428 = sext i32 %add427 to i64
  %arrayidx429 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom428
  %i92 = load i32, i32* %arrayidx429, align 4
  %cmp430 = icmp ne i32 %i92, 0
  br i1 %cmp430, label %if.then431, label %if.end433

if.then431:                                       ; preds = %if.end426
  %add432 = add nsw i32 %i72, 14
  call void @push_knighT(i32 %add432)
  br label %if.end433

if.end433:                                        ; preds = %if.then431, %if.end426
  %add434 = add nsw i32 %i72, 23
  %idxprom435 = sext i32 %add434 to i64
  %arrayidx436 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom435
  %i93 = load i32, i32* %arrayidx436, align 4
  %cmp437 = icmp ne i32 %i93, 0
  br i1 %cmp437, label %if.then438, label %if.end440

if.then438:                                       ; preds = %if.end433
  %add439 = add nsw i32 %i72, 23
  call void @push_knighT(i32 %add439)
  br label %if.end440

if.end440:                                        ; preds = %if.then438, %if.end433
  %add441 = add nsw i32 %i72, 25
  %idxprom442 = sext i32 %add441 to i64
  %arrayidx443 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom442
  %i94 = load i32, i32* %arrayidx443, align 4
  %cmp444 = icmp ne i32 %i94, 0
  br i1 %cmp444, label %if.then445, label %if.end447

if.then445:                                       ; preds = %if.end440
  %add446 = add nsw i32 %i72, 25
  call void @push_knighT(i32 %add446)
  br label %if.end447

if.end447:                                        ; preds = %if.then445, %if.end440
  br label %sw.epilog608

sw.bb448:                                         ; preds = %if.end318
  %sub449 = sub nsw i32 %i72, 13
  %idxprom450 = sext i32 %sub449 to i64
  %arrayidx451 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom450
  %i95 = load i32, i32* %arrayidx451, align 4
  %cmp452 = icmp ne i32 %i95, 0
  br i1 %cmp452, label %if.then453, label %if.end455

if.then453:                                       ; preds = %sw.bb448
  %sub454 = sub nsw i32 %i72, 13
  call void @push_slidE(i32 %sub454)
  br label %if.end455

if.end455:                                        ; preds = %if.then453, %sw.bb448
  %sub456 = sub nsw i32 %i72, 11
  %idxprom457 = sext i32 %sub456 to i64
  %arrayidx458 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom457
  %i96 = load i32, i32* %arrayidx458, align 4
  %cmp459 = icmp ne i32 %i96, 0
  br i1 %cmp459, label %if.then460, label %if.end462

if.then460:                                       ; preds = %if.end455
  %sub461 = sub nsw i32 %i72, 11
  call void @push_slidE(i32 %sub461)
  br label %if.end462

if.end462:                                        ; preds = %if.then460, %if.end455
  %add463 = add nsw i32 %i72, 11
  %idxprom464 = sext i32 %add463 to i64
  %arrayidx465 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom464
  %i97 = load i32, i32* %arrayidx465, align 4
  %cmp466 = icmp ne i32 %i97, 0
  br i1 %cmp466, label %if.then467, label %if.end469

if.then467:                                       ; preds = %if.end462
  %add468 = add nsw i32 %i72, 11
  call void @push_slidE(i32 %add468)
  br label %if.end469

if.end469:                                        ; preds = %if.then467, %if.end462
  %add470 = add nsw i32 %i72, 13
  %idxprom471 = sext i32 %add470 to i64
  %arrayidx472 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom471
  %i98 = load i32, i32* %arrayidx472, align 4
  %cmp473 = icmp ne i32 %i98, 0
  br i1 %cmp473, label %if.then474, label %if.end476

if.then474:                                       ; preds = %if.end469
  %add475 = add nsw i32 %i72, 13
  call void @push_slidE(i32 %add475)
  br label %if.end476

if.end476:                                        ; preds = %if.then474, %if.end469
  br label %sw.epilog608

sw.bb477:                                         ; preds = %if.end318
  %sub478 = sub nsw i32 %i72, 12
  %idxprom479 = sext i32 %sub478 to i64
  %arrayidx480 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom479
  %i99 = load i32, i32* %arrayidx480, align 4
  %cmp481 = icmp ne i32 %i99, 0
  br i1 %cmp481, label %if.then482, label %if.end484

if.then482:                                       ; preds = %sw.bb477
  %sub483 = sub nsw i32 %i72, 12
  call void @push_slidE(i32 %sub483)
  br label %if.end484

if.end484:                                        ; preds = %if.then482, %sw.bb477
  %sub485 = sub nsw i32 %i72, 1
  %idxprom486 = sext i32 %sub485 to i64
  %arrayidx487 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom486
  %i100 = load i32, i32* %arrayidx487, align 4
  %cmp488 = icmp ne i32 %i100, 0
  br i1 %cmp488, label %if.then489, label %if.end491

if.then489:                                       ; preds = %if.end484
  %sub490 = sub nsw i32 %i72, 1
  call void @push_slidE(i32 %sub490)
  br label %if.end491

if.end491:                                        ; preds = %if.then489, %if.end484
  %add492 = add nsw i32 %i72, 1
  %idxprom493 = sext i32 %add492 to i64
  %arrayidx494 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom493
  %i101 = load i32, i32* %arrayidx494, align 4
  %cmp495 = icmp ne i32 %i101, 0
  br i1 %cmp495, label %if.then496, label %if.end498

if.then496:                                       ; preds = %if.end491
  %add497 = add nsw i32 %i72, 1
  call void @push_slidE(i32 %add497)
  br label %if.end498

if.end498:                                        ; preds = %if.then496, %if.end491
  %add499 = add nsw i32 %i72, 12
  %idxprom500 = sext i32 %add499 to i64
  %arrayidx501 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom500
  %i102 = load i32, i32* %arrayidx501, align 4
  %cmp502 = icmp ne i32 %i102, 0
  br i1 %cmp502, label %if.then503, label %if.end505

if.then503:                                       ; preds = %if.end498
  %add504 = add nsw i32 %i72, 12
  call void @push_slidE(i32 %add504)
  br label %if.end505

if.end505:                                        ; preds = %if.then503, %if.end498
  br label %sw.epilog608

sw.bb506:                                         ; preds = %if.end318
  %sub507 = sub nsw i32 %i72, 13
  %idxprom508 = sext i32 %sub507 to i64
  %arrayidx509 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom508
  %i103 = load i32, i32* %arrayidx509, align 4
  %cmp510 = icmp ne i32 %i103, 0
  br i1 %cmp510, label %if.then511, label %if.end513

if.then511:                                       ; preds = %sw.bb506
  %sub512 = sub nsw i32 %i72, 13
  call void @push_slidE(i32 %sub512)
  br label %if.end513

if.end513:                                        ; preds = %if.then511, %sw.bb506
  %sub514 = sub nsw i32 %i72, 12
  %idxprom515 = sext i32 %sub514 to i64
  %arrayidx516 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom515
  %i104 = load i32, i32* %arrayidx516, align 4
  %cmp517 = icmp ne i32 %i104, 0
  br i1 %cmp517, label %if.then518, label %if.end520

if.then518:                                       ; preds = %if.end513
  %sub519 = sub nsw i32 %i72, 12
  call void @push_slidE(i32 %sub519)
  br label %if.end520

if.end520:                                        ; preds = %if.then518, %if.end513
  %sub521 = sub nsw i32 %i72, 11
  %idxprom522 = sext i32 %sub521 to i64
  %arrayidx523 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom522
  %i105 = load i32, i32* %arrayidx523, align 4
  %cmp524 = icmp ne i32 %i105, 0
  br i1 %cmp524, label %if.then525, label %if.end527

if.then525:                                       ; preds = %if.end520
  %sub526 = sub nsw i32 %i72, 11
  call void @push_slidE(i32 %sub526)
  br label %if.end527

if.end527:                                        ; preds = %if.then525, %if.end520
  %sub528 = sub nsw i32 %i72, 1
  %idxprom529 = sext i32 %sub528 to i64
  %arrayidx530 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom529
  %i106 = load i32, i32* %arrayidx530, align 4
  %cmp531 = icmp ne i32 %i106, 0
  br i1 %cmp531, label %if.then532, label %if.end534

if.then532:                                       ; preds = %if.end527
  %sub533 = sub nsw i32 %i72, 1
  call void @push_slidE(i32 %sub533)
  br label %if.end534

if.end534:                                        ; preds = %if.then532, %if.end527
  %add535 = add nsw i32 %i72, 1
  %idxprom536 = sext i32 %add535 to i64
  %arrayidx537 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom536
  %i107 = load i32, i32* %arrayidx537, align 4
  %cmp538 = icmp ne i32 %i107, 0
  br i1 %cmp538, label %if.then539, label %if.end541

if.then539:                                       ; preds = %if.end534
  %add540 = add nsw i32 %i72, 1
  call void @push_slidE(i32 %add540)
  br label %if.end541

if.end541:                                        ; preds = %if.then539, %if.end534
  %add542 = add nsw i32 %i72, 11
  %idxprom543 = sext i32 %add542 to i64
  %arrayidx544 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom543
  %i108 = load i32, i32* %arrayidx544, align 4
  %cmp545 = icmp ne i32 %i108, 0
  br i1 %cmp545, label %if.then546, label %if.end548

if.then546:                                       ; preds = %if.end541
  %add547 = add nsw i32 %i72, 11
  call void @push_slidE(i32 %add547)
  br label %if.end548

if.end548:                                        ; preds = %if.then546, %if.end541
  %add549 = add nsw i32 %i72, 12
  %idxprom550 = sext i32 %add549 to i64
  %arrayidx551 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom550
  %i109 = load i32, i32* %arrayidx551, align 4
  %cmp552 = icmp ne i32 %i109, 0
  br i1 %cmp552, label %if.then553, label %if.end555

if.then553:                                       ; preds = %if.end548
  %add554 = add nsw i32 %i72, 12
  call void @push_slidE(i32 %add554)
  br label %if.end555

if.end555:                                        ; preds = %if.then553, %if.end548
  %add556 = add nsw i32 %i72, 13
  %idxprom557 = sext i32 %add556 to i64
  %arrayidx558 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom557
  %i110 = load i32, i32* %arrayidx558, align 4
  %cmp559 = icmp ne i32 %i110, 0
  br i1 %cmp559, label %if.then560, label %if.end562

if.then560:                                       ; preds = %if.end555
  %add561 = add nsw i32 %i72, 13
  call void @push_slidE(i32 %add561)
  br label %if.end562

if.end562:                                        ; preds = %if.then560, %if.end555
  br label %sw.epilog608

sw.bb563:                                         ; preds = %if.end318
  %sub564 = sub nsw i32 %i72, 13
  call void @push_king(i32 %sub564)
  %sub565 = sub nsw i32 %i72, 12
  call void @push_king(i32 %sub565)
  %sub566 = sub nsw i32 %i72, 11
  call void @push_king(i32 %sub566)
  %sub567 = sub nsw i32 %i72, 1
  call void @push_king(i32 %sub567)
  %add568 = add nsw i32 %i72, 1
  call void @push_king(i32 %add568)
  %add569 = add nsw i32 %i72, 11
  call void @push_king(i32 %add569)
  %add570 = add nsw i32 %i72, 12
  call void @push_king(i32 %add570)
  %add571 = add nsw i32 %i72, 13
  call void @push_king(i32 %add571)
  %cmp572 = icmp eq i32 %i72, 114
  br i1 %cmp572, label %land.lhs.true573, label %if.end606

land.lhs.true573:                                 ; preds = %sw.bb563
  %i111 = load i32, i32* getelementptr inbounds ([144 x i32], [144 x i32]* @moved, i64 0, i64 114), align 8
  %tobool574 = icmp ne i32 %i111, 0
  br i1 %tobool574, label %if.end606, label %land.lhs.true575

land.lhs.true575:                                 ; preds = %land.lhs.true573
  %i112 = load i32, i32* @captures, align 4
  %tobool576 = icmp ne i32 %i112, 0
  br i1 %tobool576, label %if.end606, label %land.lhs.true577

land.lhs.true577:                                 ; preds = %land.lhs.true575
  %i113 = load i32, i32* @Variant, align 4
  %cmp578 = icmp ne i32 %i113, 3
  br i1 %cmp578, label %if.then581, label %lor.lhs.false579

lor.lhs.false579:                                 ; preds = %land.lhs.true577
  %i114 = load i32, i32* @Giveaway, align 4
  %cmp580 = icmp eq i32 %i114, 1
  br i1 %cmp580, label %if.then581, label %if.end606

if.then581:                                       ; preds = %lor.lhs.false579, %land.lhs.true577
  %i115 = load i32, i32* getelementptr inbounds ([144 x i32], [144 x i32]* @moved, i64 0, i64 117), align 4
  %tobool582 = icmp ne i32 %i115, 0
  br i1 %tobool582, label %if.end592, label %land.lhs.true583

land.lhs.true583:                                 ; preds = %if.then581
  %i116 = load i32, i32* getelementptr inbounds ([144 x i32], [144 x i32]* @board, i64 0, i64 117), align 4
  %cmp584 = icmp eq i32 %i116, 8
  br i1 %cmp584, label %if.then585, label %if.end592

if.then585:                                       ; preds = %land.lhs.true583
  %i117 = load i32, i32* getelementptr inbounds ([144 x i32], [144 x i32]* @board, i64 0, i64 115), align 4
  %cmp586 = icmp eq i32 %i117, 13
  br i1 %cmp586, label %land.lhs.true587, label %if.end591

land.lhs.true587:                                 ; preds = %if.then585
  %i118 = load i32, i32* getelementptr inbounds ([144 x i32], [144 x i32]* @board, i64 0, i64 116), align 16
  %cmp588 = icmp eq i32 %i118, 13
  br i1 %cmp588, label %if.then589, label %if.end591

if.then589:                                       ; preds = %land.lhs.true587
  %add590 = add nsw i32 %i72, 2
  call void @push_king_castle(i32 %add590, i32 3)
  br label %if.end591

if.end591:                                        ; preds = %if.then589, %land.lhs.true587, %if.then585
  br label %if.end592

if.end592:                                        ; preds = %if.end591, %land.lhs.true583, %if.then581
  %i119 = load i32, i32* getelementptr inbounds ([144 x i32], [144 x i32]* @moved, i64 0, i64 110), align 8
  %tobool593 = icmp ne i32 %i119, 0
  br i1 %tobool593, label %if.end605, label %land.lhs.true594

land.lhs.true594:                                 ; preds = %if.end592
  %i120 = load i32, i32* getelementptr inbounds ([144 x i32], [144 x i32]* @board, i64 0, i64 110), align 8
  %cmp595 = icmp eq i32 %i120, 8
  br i1 %cmp595, label %if.then596, label %if.end605

if.then596:                                       ; preds = %land.lhs.true594
  %i121 = load i32, i32* getelementptr inbounds ([144 x i32], [144 x i32]* @board, i64 0, i64 111), align 4
  %cmp597 = icmp eq i32 %i121, 13
  br i1 %cmp597, label %land.lhs.true598, label %if.end604

land.lhs.true598:                                 ; preds = %if.then596
  %i122 = load i32, i32* getelementptr inbounds ([144 x i32], [144 x i32]* @board, i64 0, i64 112), align 16
  %cmp599 = icmp eq i32 %i122, 13
  br i1 %cmp599, label %land.lhs.true600, label %if.end604

land.lhs.true600:                                 ; preds = %land.lhs.true598
  %i123 = load i32, i32* getelementptr inbounds ([144 x i32], [144 x i32]* @board, i64 0, i64 113), align 4
  %cmp601 = icmp eq i32 %i123, 13
  br i1 %cmp601, label %if.then602, label %if.end604

if.then602:                                       ; preds = %land.lhs.true600
  %sub603 = sub nsw i32 %i72, 2
  call void @push_king_castle(i32 %sub603, i32 4)
  br label %if.end604

if.end604:                                        ; preds = %if.then602, %land.lhs.true600, %land.lhs.true598, %if.then596
  br label %if.end605

if.end605:                                        ; preds = %if.end604, %land.lhs.true594, %if.end592
  br label %if.end606

if.end606:                                        ; preds = %if.end605, %lor.lhs.false579, %land.lhs.true575, %land.lhs.true573, %sw.bb563
  br label %sw.epilog608

sw.default607:                                    ; preds = %if.end318
  br label %sw.epilog608

sw.epilog608:                                     ; preds = %sw.default607, %if.end606, %if.end562, %if.end505, %if.end476, %if.end447, %if.end390
  br label %for.inc609

for.inc609:                                       ; preds = %sw.epilog608, %if.then315
  %a.3 = phi i32 [ %inc317, %sw.epilog608 ], [ %a.2, %if.then315 ]
  %inc610 = add nsw i32 %j.1, 1
  br label %for.cond298

for.end611:                                       ; preds = %land.end310
  br label %if.end612

if.end612:                                        ; preds = %for.end611, %for.end
  %i124 = load i32, i32* @Variant, align 4
  %cmp613 = icmp eq i32 %i124, 0
  br i1 %cmp613, label %land.lhs.true616, label %lor.lhs.false614

lor.lhs.false614:                                 ; preds = %if.end612
  %i125 = load i32, i32* @Variant, align 4
  %cmp615 = icmp eq i32 %i125, 1
  br i1 %cmp615, label %land.lhs.true616, label %if.end720

land.lhs.true616:                                 ; preds = %lor.lhs.false614, %if.end612
  %i126 = load i32, i32* @captures, align 4
  %tobool617 = icmp ne i32 %i126, 0
  br i1 %tobool617, label %if.end720, label %land.lhs.true618

land.lhs.true618:                                 ; preds = %land.lhs.true616
  %i127 = load i32, i32* @kingcap, align 4
  %tobool619 = icmp ne i32 %i127, 0
  br i1 %tobool619, label %if.end720, label %if.then620

if.then620:                                       ; preds = %land.lhs.true618
  %i128 = load i32, i32* @white_to_move, align 4
  %tobool621 = icmp ne i32 %i128, 0
  br i1 %tobool621, label %land.lhs.true622, label %if.else669

land.lhs.true622:                                 ; preds = %if.then620
  %i129 = load i32, i32* getelementptr inbounds ([2 x [16 x i32]], [2 x [16 x i32]]* @holding, i64 0, i64 0, i64 1), align 4
  %tobool623 = icmp ne i32 %i129, 0
  br i1 %tobool623, label %if.then632, label %lor.lhs.false624

lor.lhs.false624:                                 ; preds = %land.lhs.true622
  %i130 = load i32, i32* getelementptr inbounds ([2 x [16 x i32]], [2 x [16 x i32]]* @holding, i64 0, i64 0, i64 3), align 4
  %tobool625 = icmp ne i32 %i130, 0
  br i1 %tobool625, label %if.then632, label %lor.lhs.false626

lor.lhs.false626:                                 ; preds = %lor.lhs.false624
  %i131 = load i32, i32* getelementptr inbounds ([2 x [16 x i32]], [2 x [16 x i32]]* @holding, i64 0, i64 0, i64 11), align 4
  %tobool627 = icmp ne i32 %i131, 0
  br i1 %tobool627, label %if.then632, label %lor.lhs.false628

lor.lhs.false628:                                 ; preds = %lor.lhs.false626
  %i132 = load i32, i32* getelementptr inbounds ([2 x [16 x i32]], [2 x [16 x i32]]* @holding, i64 0, i64 0, i64 9), align 4
  %tobool629 = icmp ne i32 %i132, 0
  br i1 %tobool629, label %if.then632, label %lor.lhs.false630

lor.lhs.false630:                                 ; preds = %lor.lhs.false628
  %i133 = load i32, i32* getelementptr inbounds ([2 x [16 x i32]], [2 x [16 x i32]]* @holding, i64 0, i64 0, i64 7), align 4
  %tobool631 = icmp ne i32 %i133, 0
  br i1 %tobool631, label %if.then632, label %if.else669

if.then632:                                       ; preds = %lor.lhs.false630, %lor.lhs.false628, %lor.lhs.false626, %lor.lhs.false624, %land.lhs.true622
  br label %for.cond633

for.cond633:                                      ; preds = %for.inc666, %if.then632
  %from.0 = phi i32 [ 26, %if.then632 ], [ %inc667, %for.inc666 ]
  %cmp634 = icmp slt i32 %from.0, 118
  br i1 %cmp634, label %for.body635, label %for.end668

for.body635:                                      ; preds = %for.cond633
  store i32 %from.0, i32* @gfrom, align 4
  %idxprom636 = sext i32 %from.0 to i64
  %arrayidx637 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom636
  %i134 = load i32, i32* %arrayidx637, align 4
  switch i32 %i134, label %sw.epilog665 [
    i32 0, label %sw.bb638
    i32 13, label %sw.bb640
  ]

sw.bb638:                                         ; preds = %for.body635
  %add639 = add nsw i32 %from.0, 3
  br label %for.inc666

sw.bb640:                                         ; preds = %for.body635
  %i135 = load i32, i32* getelementptr inbounds ([2 x [16 x i32]], [2 x [16 x i32]]* @holding, i64 0, i64 0, i64 1), align 4
  %tobool641 = icmp ne i32 %i135, 0
  br i1 %tobool641, label %if.then642, label %if.end652

if.then642:                                       ; preds = %sw.bb640
  %idxprom643 = sext i32 %from.0 to i64
  %arrayidx644 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xrank to [144 x i32]*), i64 0, i64 %idxprom643
  %i136 = load i32, i32* %arrayidx644, align 4
  %cmp645 = icmp ne i32 %i136, 8
  br i1 %cmp645, label %land.lhs.true646, label %if.end651

land.lhs.true646:                                 ; preds = %if.then642
  %idxprom647 = sext i32 %from.0 to i64
  %arrayidx648 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xrank to [144 x i32]*), i64 0, i64 %idxprom647
  %i137 = load i32, i32* %arrayidx648, align 4
  %cmp649 = icmp ne i32 %i137, 1
  br i1 %cmp649, label %if.then650, label %if.end651

if.then650:                                       ; preds = %land.lhs.true646
  call void @try_drop(i32 1)
  br label %if.end651

if.end651:                                        ; preds = %if.then650, %land.lhs.true646, %if.then642
  br label %if.end652

if.end652:                                        ; preds = %if.end651, %sw.bb640
  %i138 = load i32, i32* getelementptr inbounds ([2 x [16 x i32]], [2 x [16 x i32]]* @holding, i64 0, i64 0, i64 3), align 4
  %tobool653 = icmp ne i32 %i138, 0
  br i1 %tobool653, label %if.then654, label %if.end655

if.then654:                                       ; preds = %if.end652
  call void @try_drop(i32 3)
  br label %if.end655

if.end655:                                        ; preds = %if.then654, %if.end652
  %i139 = load i32, i32* getelementptr inbounds ([2 x [16 x i32]], [2 x [16 x i32]]* @holding, i64 0, i64 0, i64 11), align 4
  %tobool656 = icmp ne i32 %i139, 0
  br i1 %tobool656, label %if.then657, label %if.end658

if.then657:                                       ; preds = %if.end655
  call void @try_drop(i32 11)
  br label %if.end658

if.end658:                                        ; preds = %if.then657, %if.end655
  %i140 = load i32, i32* getelementptr inbounds ([2 x [16 x i32]], [2 x [16 x i32]]* @holding, i64 0, i64 0, i64 7), align 4
  %tobool659 = icmp ne i32 %i140, 0
  br i1 %tobool659, label %if.then660, label %if.end661

if.then660:                                       ; preds = %if.end658
  call void @try_drop(i32 7)
  br label %if.end661

if.end661:                                        ; preds = %if.then660, %if.end658
  %i141 = load i32, i32* getelementptr inbounds ([2 x [16 x i32]], [2 x [16 x i32]]* @holding, i64 0, i64 0, i64 9), align 4
  %tobool662 = icmp ne i32 %i141, 0
  br i1 %tobool662, label %if.then663, label %if.end664

if.then663:                                       ; preds = %if.end661
  call void @try_drop(i32 9)
  br label %if.end664

if.end664:                                        ; preds = %if.then663, %if.end661
  br label %sw.epilog665

sw.epilog665:                                     ; preds = %if.end664, %for.body635
  br label %for.inc666

for.inc666:                                       ; preds = %sw.epilog665, %sw.bb638
  %from.1 = phi i32 [ %from.0, %sw.epilog665 ], [ %add639, %sw.bb638 ]
  %inc667 = add nsw i32 %from.1, 1
  br label %for.cond633

for.end668:                                       ; preds = %for.cond633
  br label %if.end719

if.else669:                                       ; preds = %lor.lhs.false630, %if.then620
  %i142 = load i32, i32* @white_to_move, align 4
  %tobool670 = icmp ne i32 %i142, 0
  br i1 %tobool670, label %if.end718, label %land.lhs.true671

land.lhs.true671:                                 ; preds = %if.else669
  %i143 = load i32, i32* getelementptr inbounds ([2 x [16 x i32]], [2 x [16 x i32]]* @holding, i64 0, i64 1, i64 2), align 8
  %tobool672 = icmp ne i32 %i143, 0
  br i1 %tobool672, label %if.then681, label %lor.lhs.false673

lor.lhs.false673:                                 ; preds = %land.lhs.true671
  %i144 = load i32, i32* getelementptr inbounds ([2 x [16 x i32]], [2 x [16 x i32]]* @holding, i64 0, i64 1, i64 4), align 16
  %tobool674 = icmp ne i32 %i144, 0
  br i1 %tobool674, label %if.then681, label %lor.lhs.false675

lor.lhs.false675:                                 ; preds = %lor.lhs.false673
  %i145 = load i32, i32* getelementptr inbounds ([2 x [16 x i32]], [2 x [16 x i32]]* @holding, i64 0, i64 1, i64 12), align 16
  %tobool676 = icmp ne i32 %i145, 0
  br i1 %tobool676, label %if.then681, label %lor.lhs.false677

lor.lhs.false677:                                 ; preds = %lor.lhs.false675
  %i146 = load i32, i32* getelementptr inbounds ([2 x [16 x i32]], [2 x [16 x i32]]* @holding, i64 0, i64 1, i64 10), align 8
  %tobool678 = icmp ne i32 %i146, 0
  br i1 %tobool678, label %if.then681, label %lor.lhs.false679

lor.lhs.false679:                                 ; preds = %lor.lhs.false677
  %i147 = load i32, i32* getelementptr inbounds ([2 x [16 x i32]], [2 x [16 x i32]]* @holding, i64 0, i64 1, i64 8), align 16
  %tobool680 = icmp ne i32 %i147, 0
  br i1 %tobool680, label %if.then681, label %if.end718

if.then681:                                       ; preds = %lor.lhs.false679, %lor.lhs.false677, %lor.lhs.false675, %lor.lhs.false673, %land.lhs.true671
  br label %for.cond682

for.cond682:                                      ; preds = %for.inc715, %if.then681
  %from.2 = phi i32 [ 26, %if.then681 ], [ %inc716, %for.inc715 ]
  %cmp683 = icmp slt i32 %from.2, 118
  br i1 %cmp683, label %for.body684, label %for.end717

for.body684:                                      ; preds = %for.cond682
  store i32 %from.2, i32* @gfrom, align 4
  %idxprom685 = sext i32 %from.2 to i64
  %arrayidx686 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom685
  %i148 = load i32, i32* %arrayidx686, align 4
  switch i32 %i148, label %sw.epilog714 [
    i32 0, label %sw.bb687
    i32 13, label %sw.bb689
  ]

sw.bb687:                                         ; preds = %for.body684
  %add688 = add nsw i32 %from.2, 3
  br label %for.inc715

sw.bb689:                                         ; preds = %for.body684
  %i149 = load i32, i32* getelementptr inbounds ([2 x [16 x i32]], [2 x [16 x i32]]* @holding, i64 0, i64 1, i64 2), align 8
  %tobool690 = icmp ne i32 %i149, 0
  br i1 %tobool690, label %if.then691, label %if.end701

if.then691:                                       ; preds = %sw.bb689
  %idxprom692 = sext i32 %from.2 to i64
  %arrayidx693 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xrank to [144 x i32]*), i64 0, i64 %idxprom692
  %i150 = load i32, i32* %arrayidx693, align 4
  %cmp694 = icmp ne i32 %i150, 8
  br i1 %cmp694, label %land.lhs.true695, label %if.end700

land.lhs.true695:                                 ; preds = %if.then691
  %idxprom696 = sext i32 %from.2 to i64
  %arrayidx697 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xrank to [144 x i32]*), i64 0, i64 %idxprom696
  %i151 = load i32, i32* %arrayidx697, align 4
  %cmp698 = icmp ne i32 %i151, 1
  br i1 %cmp698, label %if.then699, label %if.end700

if.then699:                                       ; preds = %land.lhs.true695
  call void @try_drop(i32 2)
  br label %if.end700

if.end700:                                        ; preds = %if.then699, %land.lhs.true695, %if.then691
  br label %if.end701

if.end701:                                        ; preds = %if.end700, %sw.bb689
  %i152 = load i32, i32* getelementptr inbounds ([2 x [16 x i32]], [2 x [16 x i32]]* @holding, i64 0, i64 1, i64 4), align 16
  %tobool702 = icmp ne i32 %i152, 0
  br i1 %tobool702, label %if.then703, label %if.end704

if.then703:                                       ; preds = %if.end701
  call void @try_drop(i32 4)
  br label %if.end704

if.end704:                                        ; preds = %if.then703, %if.end701
  %i153 = load i32, i32* getelementptr inbounds ([2 x [16 x i32]], [2 x [16 x i32]]* @holding, i64 0, i64 1, i64 12), align 16
  %tobool705 = icmp ne i32 %i153, 0
  br i1 %tobool705, label %if.then706, label %if.end707

if.then706:                                       ; preds = %if.end704
  call void @try_drop(i32 12)
  br label %if.end707

if.end707:                                        ; preds = %if.then706, %if.end704
  %i154 = load i32, i32* getelementptr inbounds ([2 x [16 x i32]], [2 x [16 x i32]]* @holding, i64 0, i64 1, i64 8), align 16
  %tobool708 = icmp ne i32 %i154, 0
  br i1 %tobool708, label %if.then709, label %if.end710

if.then709:                                       ; preds = %if.end707
  call void @try_drop(i32 8)
  br label %if.end710

if.end710:                                        ; preds = %if.then709, %if.end707
  %i155 = load i32, i32* getelementptr inbounds ([2 x [16 x i32]], [2 x [16 x i32]]* @holding, i64 0, i64 1, i64 10), align 8
  %tobool711 = icmp ne i32 %i155, 0
  br i1 %tobool711, label %if.then712, label %if.end713

if.then712:                                       ; preds = %if.end710
  call void @try_drop(i32 10)
  br label %if.end713

if.end713:                                        ; preds = %if.then712, %if.end710
  br label %sw.epilog714

sw.epilog714:                                     ; preds = %if.end713, %for.body684
  br label %for.inc715

for.inc715:                                       ; preds = %sw.epilog714, %sw.bb687
  %from.3 = phi i32 [ %from.2, %sw.epilog714 ], [ %add688, %sw.bb687 ]
  %inc716 = add nsw i32 %from.3, 1
  br label %for.cond682

for.end717:                                       ; preds = %for.cond682
  br label %if.end718

if.end718:                                        ; preds = %for.end717, %lor.lhs.false679, %if.else669
  br label %if.end719

if.end719:                                        ; preds = %if.end718, %for.end668
  br label %if.end720

if.end720:                                        ; preds = %if.end719, %land.lhs.true618, %land.lhs.true616, %lor.lhs.false614
  %i156 = load i32, i32* @Variant, align 4
  %cmp721 = icmp eq i32 %i156, 3
  br i1 %cmp721, label %land.lhs.true722, label %if.end727

land.lhs.true722:                                 ; preds = %if.end720
  %i157 = load i32, i32* @fcaptures, align 4
  %cmp723 = icmp eq i32 %i157, 1
  br i1 %cmp723, label %land.lhs.true724, label %if.end727

land.lhs.true724:                                 ; preds = %land.lhs.true722
  %i158 = load i32, i32* @captures, align 4
  %cmp725 = icmp eq i32 %i158, 0
  br i1 %cmp725, label %if.then726, label %if.end727

if.then726:                                       ; preds = %land.lhs.true724
  store i32 1, i32* @captures, align 4
  store i32 0, i32* @numb_moves, align 4
  br label %restart

if.end727:                                        ; preds = %land.lhs.true724, %land.lhs.true722, %if.end720
  %i159 = load i32, i32* @Variant, align 4
  %cmp728 = icmp eq i32 %i159, 3
  br i1 %cmp728, label %if.then729, label %if.end730

if.then729:                                       ; preds = %if.end727
  store i32 0, i32* @kingcap, align 4
  br label %if.end730

if.end730:                                        ; preds = %if.then729, %if.end727
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @push_pawn(i32 %target, i32 %is_ep) #0 {
entry:
  %tobool = icmp ne i32 %is_ep, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %i = load i32, i32* @gfrom, align 4
  %idxprom = sext i32 %i to i64
  %arrayidx = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom
  %i1 = load i32, i32* %arrayidx, align 4
  %cmp = icmp eq i32 %i1, 1
  br i1 %cmp, label %if.then1, label %if.else

if.then1:                                         ; preds = %if.then
  call void @add_capture(i32 %target, i32 2, i32 0, i32 1)
  br label %return

if.else:                                          ; preds = %if.then
  call void @add_capture(i32 %target, i32 1, i32 0, i32 1)
  br label %return

if.end:                                           ; preds = %entry
  %idxprom2 = sext i32 %target to i64
  %arrayidx3 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom2
  %i2 = load i32, i32* %arrayidx3, align 4
  %i3 = load i32, i32* @gfrom, align 4
  %idxprom4 = sext i32 %i3 to i64
  %arrayidx5 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom4
  %i4 = load i32, i32* %arrayidx5, align 4
  %cmp6 = icmp eq i32 %i4, 1
  br i1 %cmp6, label %land.lhs.true, label %if.else14

land.lhs.true:                                    ; preds = %if.end
  %i5 = load i32, i32* @gfrom, align 4
  %idxprom7 = sext i32 %i5 to i64
  %arrayidx8 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xrank to [144 x i32]*), i64 0, i64 %idxprom7
  %i6 = load i32, i32* %arrayidx8, align 4
  %cmp9 = icmp eq i32 %i6, 7
  br i1 %cmp9, label %if.then10, label %if.else14

if.then10:                                        ; preds = %land.lhs.true
  call void @add_capture(i32 %target, i32 %i2, i32 9, i32 0)
  call void @add_capture(i32 %target, i32 %i2, i32 7, i32 0)
  call void @add_capture(i32 %target, i32 %i2, i32 11, i32 0)
  call void @add_capture(i32 %target, i32 %i2, i32 3, i32 0)
  %i7 = load i32, i32* @Variant, align 4
  %cmp11 = icmp eq i32 %i7, 3
  br i1 %cmp11, label %if.then12, label %if.end13

if.then12:                                        ; preds = %if.then10
  call void @add_capture(i32 %target, i32 %i2, i32 5, i32 0)
  br label %if.end13

if.end13:                                         ; preds = %if.then12, %if.then10
  br label %return

if.else14:                                        ; preds = %land.lhs.true, %if.end
  %i8 = load i32, i32* @gfrom, align 4
  %idxprom15 = sext i32 %i8 to i64
  %arrayidx16 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom15
  %i9 = load i32, i32* %arrayidx16, align 4
  %cmp17 = icmp eq i32 %i9, 2
  br i1 %cmp17, label %land.lhs.true18, label %if.else26

land.lhs.true18:                                  ; preds = %if.else14
  %i10 = load i32, i32* @gfrom, align 4
  %idxprom19 = sext i32 %i10 to i64
  %arrayidx20 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xrank to [144 x i32]*), i64 0, i64 %idxprom19
  %i11 = load i32, i32* %arrayidx20, align 4
  %cmp21 = icmp eq i32 %i11, 2
  br i1 %cmp21, label %if.then22, label %if.else26

if.then22:                                        ; preds = %land.lhs.true18
  call void @add_capture(i32 %target, i32 %i2, i32 10, i32 0)
  call void @add_capture(i32 %target, i32 %i2, i32 8, i32 0)
  call void @add_capture(i32 %target, i32 %i2, i32 12, i32 0)
  call void @add_capture(i32 %target, i32 %i2, i32 4, i32 0)
  %i12 = load i32, i32* @Variant, align 4
  %cmp23 = icmp eq i32 %i12, 3
  br i1 %cmp23, label %if.then24, label %if.end25

if.then24:                                        ; preds = %if.then22
  call void @add_capture(i32 %target, i32 %i2, i32 6, i32 0)
  br label %if.end25

if.end25:                                         ; preds = %if.then24, %if.then22
  br label %return

if.else26:                                        ; preds = %land.lhs.true18, %if.else14
  call void @add_capture(i32 %target, i32 %i2, i32 0, i32 0)
  br label %return

return:                                           ; preds = %if.else26, %if.end25, %if.end13, %if.else, %if.then1
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @push_pawn_simple(i32 %target) #0 {
entry:
  call void @add_move(i32 %target, i32 0)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @push_knighT(i32 %target) #0 {
entry:
  %idxprom = sext i32 %target to i64
  %arrayidx = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom
  %i = load i32, i32* %arrayidx, align 4
  %cmp = icmp eq i32 %i, 13
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %i1 = load i32, i32* @captures, align 4
  %tobool = icmp ne i32 %i1, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  br label %return

if.end:                                           ; preds = %land.lhs.true, %entry
  %idxprom1 = sext i32 %target to i64
  %arrayidx2 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom1
  %i2 = load i32, i32* %arrayidx2, align 4
  %cmp3 = icmp eq i32 %i2, 13
  br i1 %cmp3, label %if.then4, label %if.else

if.then4:                                         ; preds = %if.end
  call void @add_move(i32 %target, i32 0)
  br label %return

if.else:                                          ; preds = %if.end
  %idxprom5 = sext i32 %target to i64
  %arrayidx6 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom5
  %i3 = load i32, i32* %arrayidx6, align 4
  %and = and i32 %i3, 1
  %i4 = load i32, i32* @gfrom, align 4
  %idxprom7 = sext i32 %i4 to i64
  %arrayidx8 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom7
  %i5 = load i32, i32* %arrayidx8, align 4
  %and9 = and i32 %i5, 1
  %cmp10 = icmp ne i32 %and, %and9
  br i1 %cmp10, label %if.then11, label %if.end14

if.then11:                                        ; preds = %if.else
  %idxprom12 = sext i32 %target to i64
  %arrayidx13 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom12
  %i6 = load i32, i32* %arrayidx13, align 4
  call void @add_capture(i32 %target, i32 %i6, i32 0, i32 0)
  br label %return

if.end14:                                         ; preds = %if.else
  br label %if.end15

if.end15:                                         ; preds = %if.end14
  br label %return

return:                                           ; preds = %if.end15, %if.then11, %if.then4, %if.then
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @push_slidE(i32 %target) #0 {
entry:
  %i = load i32, i32* @gfrom, align 4
  %sub = sub nsw i32 %target, %i
  %i1 = load i32, i32* @gfrom, align 4
  %idxprom = sext i32 %i1 to i64
  %arrayidx = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom
  %i2 = load i32, i32* %arrayidx, align 4
  %and = and i32 %i2, 1
  br label %do.body

do.body:                                          ; preds = %do.cond, %entry
  %target.addr.0 = phi i32 [ %target, %entry ], [ %add, %do.cond ]
  %idxprom1 = sext i32 %target.addr.0 to i64
  %arrayidx2 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom1
  %i3 = load i32, i32* %arrayidx2, align 4
  %cmp = icmp eq i32 %i3, 13
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %do.body
  %i4 = load i32, i32* @captures, align 4
  %tobool = icmp ne i32 %i4, 0
  br i1 %tobool, label %if.end, label %if.then3

if.then3:                                         ; preds = %if.then
  call void @add_move(i32 %target.addr.0, i32 0)
  br label %if.end

if.end:                                           ; preds = %if.then3, %if.then
  %add = add nsw i32 %target.addr.0, %sub
  br label %if.end12

if.else:                                          ; preds = %do.body
  %idxprom4 = sext i32 %target.addr.0 to i64
  %arrayidx5 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom4
  %i5 = load i32, i32* %arrayidx5, align 4
  %and6 = and i32 %i5, 1
  %cmp7 = icmp ne i32 %and6, %and
  br i1 %cmp7, label %if.then8, label %if.else11

if.then8:                                         ; preds = %if.else
  %idxprom9 = sext i32 %target.addr.0 to i64
  %arrayidx10 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom9
  %i6 = load i32, i32* %arrayidx10, align 4
  call void @add_capture(i32 %target.addr.0, i32 %i6, i32 0, i32 0)
  br label %do.end

if.else11:                                        ; preds = %if.else
  br label %do.end

if.end12:                                         ; preds = %if.end
  br label %do.cond

do.cond:                                          ; preds = %if.end12
  %idxprom13 = sext i32 %add to i64
  %arrayidx14 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom13
  %i7 = load i32, i32* %arrayidx14, align 4
  %cmp15 = icmp ne i32 %i7, 0
  br i1 %cmp15, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond, %if.else11, %if.then8
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @push_king(i32 %target) #0 {
entry:
  %idxprom = sext i32 %target to i64
  %arrayidx = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom
  %i = load i32, i32* %arrayidx, align 4
  %cmp = icmp eq i32 %i, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %return

if.end:                                           ; preds = %entry
  %idxprom1 = sext i32 %target to i64
  %arrayidx2 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom1
  %i1 = load i32, i32* %arrayidx2, align 4
  %cmp3 = icmp eq i32 %i1, 13
  br i1 %cmp3, label %land.lhs.true, label %if.end5

land.lhs.true:                                    ; preds = %if.end
  %i2 = load i32, i32* @captures, align 4
  %tobool = icmp ne i32 %i2, 0
  br i1 %tobool, label %if.then4, label %if.end5

if.then4:                                         ; preds = %land.lhs.true
  br label %return

if.end5:                                          ; preds = %land.lhs.true, %if.end
  %idxprom6 = sext i32 %target to i64
  %arrayidx7 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom6
  %i3 = load i32, i32* %arrayidx7, align 4
  %cmp8 = icmp eq i32 %i3, 13
  br i1 %cmp8, label %if.then9, label %if.else

if.then9:                                         ; preds = %if.end5
  call void @add_move(i32 %target, i32 0)
  br label %return

if.else:                                          ; preds = %if.end5
  %idxprom10 = sext i32 %target to i64
  %arrayidx11 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom10
  %i4 = load i32, i32* %arrayidx11, align 4
  %and = and i32 %i4, 1
  %i5 = load i32, i32* @gfrom, align 4
  %idxprom12 = sext i32 %i5 to i64
  %arrayidx13 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom12
  %i6 = load i32, i32* %arrayidx13, align 4
  %and14 = and i32 %i6, 1
  %cmp15 = icmp ne i32 %and, %and14
  br i1 %cmp15, label %if.then16, label %if.end19

if.then16:                                        ; preds = %if.else
  %idxprom17 = sext i32 %target to i64
  %arrayidx18 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom17
  %i7 = load i32, i32* %arrayidx18, align 4
  call void @add_capture(i32 %target, i32 %i7, i32 0, i32 0)
  br label %return

if.end19:                                         ; preds = %if.else
  br label %if.end20

if.end20:                                         ; preds = %if.end19
  br label %return

return:                                           ; preds = %if.end20, %if.then16, %if.then9, %if.then4, %if.then
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @push_king_castle(i32 %Ptarget, i32 %Pcastle_type) #0 {
entry:
  %i = load i32, i32* @gfrom, align 4
  %i1 = load %struct.move_s*, %struct.move_s** @genfor, align 8
  %i2 = load i32, i32* @numb_moves, align 4
  %idxprom = sext i32 %i2 to i64
  %arrayidx = getelementptr inbounds %struct.move_s, %struct.move_s* %i1, i64 %idxprom
  %from = getelementptr inbounds %struct.move_s, %struct.move_s* %arrayidx, i32 0, i32 0
  store i32 %i, i32* %from, align 4
  %i3 = load %struct.move_s*, %struct.move_s** @genfor, align 8
  %i4 = load i32, i32* @numb_moves, align 4
  %idxprom1 = sext i32 %i4 to i64
  %arrayidx2 = getelementptr inbounds %struct.move_s, %struct.move_s* %i3, i64 %idxprom1
  %target = getelementptr inbounds %struct.move_s, %struct.move_s* %arrayidx2, i32 0, i32 1
  store i32 %Ptarget, i32* %target, align 4
  %i5 = load %struct.move_s*, %struct.move_s** @genfor, align 8
  %i6 = load i32, i32* @numb_moves, align 4
  %idxprom3 = sext i32 %i6 to i64
  %arrayidx4 = getelementptr inbounds %struct.move_s, %struct.move_s* %i5, i64 %idxprom3
  %captured = getelementptr inbounds %struct.move_s, %struct.move_s* %arrayidx4, i32 0, i32 2
  store i32 13, i32* %captured, align 4
  %i7 = load %struct.move_s*, %struct.move_s** @genfor, align 8
  %i8 = load i32, i32* @numb_moves, align 4
  %idxprom5 = sext i32 %i8 to i64
  %arrayidx6 = getelementptr inbounds %struct.move_s, %struct.move_s* %i7, i64 %idxprom5
  %castled = getelementptr inbounds %struct.move_s, %struct.move_s* %arrayidx6, i32 0, i32 4
  store i32 %Pcastle_type, i32* %castled, align 4
  %i9 = load %struct.move_s*, %struct.move_s** @genfor, align 8
  %i10 = load i32, i32* @numb_moves, align 4
  %idxprom7 = sext i32 %i10 to i64
  %arrayidx8 = getelementptr inbounds %struct.move_s, %struct.move_s* %i9, i64 %idxprom7
  %promoted = getelementptr inbounds %struct.move_s, %struct.move_s* %arrayidx8, i32 0, i32 3
  store i32 0, i32* %promoted, align 4
  %i11 = load %struct.move_s*, %struct.move_s** @genfor, align 8
  %i12 = load i32, i32* @numb_moves, align 4
  %idxprom9 = sext i32 %i12 to i64
  %arrayidx10 = getelementptr inbounds %struct.move_s, %struct.move_s* %i11, i64 %idxprom9
  %ep = getelementptr inbounds %struct.move_s, %struct.move_s* %arrayidx10, i32 0, i32 5
  store i32 0, i32* %ep, align 4
  %i13 = load i32, i32* @numb_moves, align 4
  %inc = add nsw i32 %i13, 1
  store i32 %inc, i32* @numb_moves, align 4
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @try_drop(i32 %ptype) #0 {
entry:
  %i = load %struct.move_s*, %struct.move_s** @genfor, align 8
  %i1 = load i32, i32* @numb_moves, align 4
  %idxprom = sext i32 %i1 to i64
  %arrayidx = getelementptr inbounds %struct.move_s, %struct.move_s* %i, i64 %idxprom
  %from = getelementptr inbounds %struct.move_s, %struct.move_s* %arrayidx, i32 0, i32 0
  store i32 0, i32* %from, align 4
  %i2 = load i32, i32* @gfrom, align 4
  %i3 = load %struct.move_s*, %struct.move_s** @genfor, align 8
  %i4 = load i32, i32* @numb_moves, align 4
  %idxprom1 = sext i32 %i4 to i64
  %arrayidx2 = getelementptr inbounds %struct.move_s, %struct.move_s* %i3, i64 %idxprom1
  %target = getelementptr inbounds %struct.move_s, %struct.move_s* %arrayidx2, i32 0, i32 1
  store i32 %i2, i32* %target, align 4
  %i5 = load %struct.move_s*, %struct.move_s** @genfor, align 8
  %i6 = load i32, i32* @numb_moves, align 4
  %idxprom3 = sext i32 %i6 to i64
  %arrayidx4 = getelementptr inbounds %struct.move_s, %struct.move_s* %i5, i64 %idxprom3
  %captured = getelementptr inbounds %struct.move_s, %struct.move_s* %arrayidx4, i32 0, i32 2
  store i32 13, i32* %captured, align 4
  %i7 = load %struct.move_s*, %struct.move_s** @genfor, align 8
  %i8 = load i32, i32* @numb_moves, align 4
  %idxprom5 = sext i32 %i8 to i64
  %arrayidx6 = getelementptr inbounds %struct.move_s, %struct.move_s* %i7, i64 %idxprom5
  %castled = getelementptr inbounds %struct.move_s, %struct.move_s* %arrayidx6, i32 0, i32 4
  store i32 0, i32* %castled, align 4
  %i9 = load %struct.move_s*, %struct.move_s** @genfor, align 8
  %i10 = load i32, i32* @numb_moves, align 4
  %idxprom7 = sext i32 %i10 to i64
  %arrayidx8 = getelementptr inbounds %struct.move_s, %struct.move_s* %i9, i64 %idxprom7
  %promoted = getelementptr inbounds %struct.move_s, %struct.move_s* %arrayidx8, i32 0, i32 3
  store i32 %ptype, i32* %promoted, align 4
  %i11 = load %struct.move_s*, %struct.move_s** @genfor, align 8
  %i12 = load i32, i32* @numb_moves, align 4
  %idxprom9 = sext i32 %i12 to i64
  %arrayidx10 = getelementptr inbounds %struct.move_s, %struct.move_s* %i11, i64 %idxprom9
  %ep = getelementptr inbounds %struct.move_s, %struct.move_s* %arrayidx10, i32 0, i32 5
  store i32 0, i32* %ep, align 4
  %i13 = load i32, i32* @numb_moves, align 4
  %inc = add nsw i32 %i13, 1
  store i32 %inc, i32* @numb_moves, align 4
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @add_move(i32 %Ptarget, i32 %Ppromoted) #0 {
entry:
  %i = load i32, i32* @gfrom, align 4
  %i1 = load %struct.move_s*, %struct.move_s** @genfor, align 8
  %i2 = load i32, i32* @numb_moves, align 4
  %idxprom = sext i32 %i2 to i64
  %arrayidx = getelementptr inbounds %struct.move_s, %struct.move_s* %i1, i64 %idxprom
  %from = getelementptr inbounds %struct.move_s, %struct.move_s* %arrayidx, i32 0, i32 0
  store i32 %i, i32* %from, align 4
  %i3 = load %struct.move_s*, %struct.move_s** @genfor, align 8
  %i4 = load i32, i32* @numb_moves, align 4
  %idxprom1 = sext i32 %i4 to i64
  %arrayidx2 = getelementptr inbounds %struct.move_s, %struct.move_s* %i3, i64 %idxprom1
  %target = getelementptr inbounds %struct.move_s, %struct.move_s* %arrayidx2, i32 0, i32 1
  store i32 %Ptarget, i32* %target, align 4
  %i5 = load %struct.move_s*, %struct.move_s** @genfor, align 8
  %i6 = load i32, i32* @numb_moves, align 4
  %idxprom3 = sext i32 %i6 to i64
  %arrayidx4 = getelementptr inbounds %struct.move_s, %struct.move_s* %i5, i64 %idxprom3
  %captured = getelementptr inbounds %struct.move_s, %struct.move_s* %arrayidx4, i32 0, i32 2
  store i32 13, i32* %captured, align 4
  %i7 = load %struct.move_s*, %struct.move_s** @genfor, align 8
  %i8 = load i32, i32* @numb_moves, align 4
  %idxprom5 = sext i32 %i8 to i64
  %arrayidx6 = getelementptr inbounds %struct.move_s, %struct.move_s* %i7, i64 %idxprom5
  %castled = getelementptr inbounds %struct.move_s, %struct.move_s* %arrayidx6, i32 0, i32 4
  store i32 0, i32* %castled, align 4
  %i9 = load %struct.move_s*, %struct.move_s** @genfor, align 8
  %i10 = load i32, i32* @numb_moves, align 4
  %idxprom7 = sext i32 %i10 to i64
  %arrayidx8 = getelementptr inbounds %struct.move_s, %struct.move_s* %i9, i64 %idxprom7
  %promoted = getelementptr inbounds %struct.move_s, %struct.move_s* %arrayidx8, i32 0, i32 3
  store i32 %Ppromoted, i32* %promoted, align 4
  %i11 = load %struct.move_s*, %struct.move_s** @genfor, align 8
  %i12 = load i32, i32* @numb_moves, align 4
  %idxprom9 = sext i32 %i12 to i64
  %arrayidx10 = getelementptr inbounds %struct.move_s, %struct.move_s* %i11, i64 %idxprom9
  %ep = getelementptr inbounds %struct.move_s, %struct.move_s* %arrayidx10, i32 0, i32 5
  store i32 0, i32* %ep, align 4
  %i13 = load i32, i32* @numb_moves, align 4
  %inc = add nsw i32 %i13, 1
  store i32 %inc, i32* @numb_moves, align 4
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @add_capture(i32 %Ptarget, i32 %Pcaptured, i32 %Ppromoted, i32 %Pep) #0 {
entry:
  %i = load i32, i32* @Variant, align 4
  %cmp = icmp ne i32 %i, 3
  br i1 %cmp, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %entry
  %cmp1 = icmp eq i32 %Pcaptured, 5
  br i1 %cmp1, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true
  %cmp2 = icmp eq i32 %Pcaptured, 6
  br i1 %cmp2, label %if.then, label %if.else

if.then:                                          ; preds = %lor.lhs.false, %land.lhs.true
  store i32 1, i32* @kingcap, align 4
  br label %return

if.else:                                          ; preds = %lor.lhs.false, %entry
  %cmp3 = icmp ne i32 %Pcaptured, 13
  br i1 %cmp3, label %if.then4, label %if.end

if.then4:                                         ; preds = %if.else
  store i32 1, i32* @fcaptures, align 4
  br label %if.end

if.end:                                           ; preds = %if.then4, %if.else
  br label %if.end5

if.end5:                                          ; preds = %if.end
  %i1 = load i32, i32* @gfrom, align 4
  %i2 = load %struct.move_s*, %struct.move_s** @genfor, align 8
  %i3 = load i32, i32* @numb_moves, align 4
  %idxprom = sext i32 %i3 to i64
  %arrayidx = getelementptr inbounds %struct.move_s, %struct.move_s* %i2, i64 %idxprom
  %from = getelementptr inbounds %struct.move_s, %struct.move_s* %arrayidx, i32 0, i32 0
  store i32 %i1, i32* %from, align 4
  %i4 = load %struct.move_s*, %struct.move_s** @genfor, align 8
  %i5 = load i32, i32* @numb_moves, align 4
  %idxprom6 = sext i32 %i5 to i64
  %arrayidx7 = getelementptr inbounds %struct.move_s, %struct.move_s* %i4, i64 %idxprom6
  %target = getelementptr inbounds %struct.move_s, %struct.move_s* %arrayidx7, i32 0, i32 1
  store i32 %Ptarget, i32* %target, align 4
  %i6 = load %struct.move_s*, %struct.move_s** @genfor, align 8
  %i7 = load i32, i32* @numb_moves, align 4
  %idxprom8 = sext i32 %i7 to i64
  %arrayidx9 = getelementptr inbounds %struct.move_s, %struct.move_s* %i6, i64 %idxprom8
  %captured = getelementptr inbounds %struct.move_s, %struct.move_s* %arrayidx9, i32 0, i32 2
  store i32 %Pcaptured, i32* %captured, align 4
  %i8 = load %struct.move_s*, %struct.move_s** @genfor, align 8
  %i9 = load i32, i32* @numb_moves, align 4
  %idxprom10 = sext i32 %i9 to i64
  %arrayidx11 = getelementptr inbounds %struct.move_s, %struct.move_s* %i8, i64 %idxprom10
  %castled = getelementptr inbounds %struct.move_s, %struct.move_s* %arrayidx11, i32 0, i32 4
  store i32 0, i32* %castled, align 4
  %i10 = load %struct.move_s*, %struct.move_s** @genfor, align 8
  %i11 = load i32, i32* @numb_moves, align 4
  %idxprom12 = sext i32 %i11 to i64
  %arrayidx13 = getelementptr inbounds %struct.move_s, %struct.move_s* %i10, i64 %idxprom12
  %promoted = getelementptr inbounds %struct.move_s, %struct.move_s* %arrayidx13, i32 0, i32 3
  store i32 %Ppromoted, i32* %promoted, align 4
  %i12 = load %struct.move_s*, %struct.move_s** @genfor, align 8
  %i13 = load i32, i32* @numb_moves, align 4
  %idxprom14 = sext i32 %i13 to i64
  %arrayidx15 = getelementptr inbounds %struct.move_s, %struct.move_s* %i12, i64 %idxprom14
  %ep = getelementptr inbounds %struct.move_s, %struct.move_s* %arrayidx15, i32 0, i32 5
  store i32 %Pep, i32* %ep, align 4
  %i14 = load i32, i32* @numb_moves, align 4
  %inc = add nsw i32 %i14, 1
  store i32 %inc, i32* @numb_moves, align 4
  br label %return

return:                                           ; preds = %if.end5, %if.then
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @in_check() #0 {
entry:
  %i = load i32, i32* @Variant, align 4
  %cmp = icmp eq i32 %i, 3
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %return

if.end:                                           ; preds = %entry
  %i1 = load i32, i32* @white_to_move, align 4
  %cmp1 = icmp eq i32 %i1, 1
  br i1 %cmp1, label %if.then2, label %if.else

if.then2:                                         ; preds = %if.end
  %i2 = load i32, i32* @wking_loc, align 4
  %call = call i32 @is_attacked(i32 %i2, i32 0)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then3, label %if.end4

if.then3:                                         ; preds = %if.then2
  br label %return

if.end4:                                          ; preds = %if.then2
  br label %if.end9

if.else:                                          ; preds = %if.end
  %i3 = load i32, i32* @bking_loc, align 4
  %call5 = call i32 @is_attacked(i32 %i3, i32 1)
  %tobool6 = icmp ne i32 %call5, 0
  br i1 %tobool6, label %if.then7, label %if.end8

if.then7:                                         ; preds = %if.else
  br label %return

if.end8:                                          ; preds = %if.else
  br label %if.end9

if.end9:                                          ; preds = %if.end8, %if.end4
  br label %return

return:                                           ; preds = %if.end9, %if.then7, %if.then3, %if.then
  %retval.0 = phi i32 [ 0, %if.then ], [ 1, %if.then3 ], [ 0, %if.end9 ], [ 1, %if.then7 ]
  ret i32 %retval.0
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @f_in_check(%struct.move_s* %moves, i32 %m) #0 {
entry:
  %idxprom = sext i32 %m to i64
  %arrayidx = getelementptr inbounds %struct.move_s, %struct.move_s* %moves, i64 %idxprom
  %target1 = getelementptr inbounds %struct.move_s, %struct.move_s* %arrayidx, i32 0, i32 1
  %i = load i32, i32* %target1, align 4
  %idxprom2 = sext i32 %m to i64
  %arrayidx3 = getelementptr inbounds %struct.move_s, %struct.move_s* %moves, i64 %idxprom2
  %from4 = getelementptr inbounds %struct.move_s, %struct.move_s* %arrayidx3, i32 0, i32 0
  %i1 = load i32, i32* %from4, align 4
  %i2 = load i32, i32* @Variant, align 4
  %cmp = icmp eq i32 %i2, 3
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %return

if.end:                                           ; preds = %entry
  %i3 = load i32, i32* @white_to_move, align 4
  %cmp5 = icmp eq i32 %i3, 1
  br i1 %cmp5, label %if.then6, label %if.else513

if.then6:                                         ; preds = %if.end
  %idxprom7 = sext i32 %i to i64
  %arrayidx8 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom7
  %i4 = load i32, i32* %arrayidx8, align 4
  switch i32 %i4, label %sw.epilog [
    i32 2, label %sw.bb
    i32 12, label %sw.bb18
    i32 8, label %sw.bb84
    i32 4, label %sw.bb154
    i32 10, label %sw.bb167
    i32 6, label %sw.bb311
  ]

sw.bb:                                            ; preds = %if.then6
  %sub = sub nsw i32 %i, 11
  %idxprom9 = sext i32 %sub to i64
  %arrayidx10 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom9
  %i5 = load i32, i32* %arrayidx10, align 4
  %cmp11 = icmp eq i32 %i5, 5
  br i1 %cmp11, label %if.then16, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %sw.bb
  %sub12 = sub nsw i32 %i, 13
  %idxprom13 = sext i32 %sub12 to i64
  %arrayidx14 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom13
  %i6 = load i32, i32* %arrayidx14, align 4
  %cmp15 = icmp eq i32 %i6, 5
  br i1 %cmp15, label %if.then16, label %if.end17

if.then16:                                        ; preds = %lor.lhs.false, %sw.bb
  br label %return

if.end17:                                         ; preds = %lor.lhs.false
  br label %sw.epilog

sw.bb18:                                          ; preds = %if.then6
  %idxprom19 = sext i32 %i to i64
  %arrayidx20 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xdiagl to [144 x i32]*), i64 0, i64 %idxprom19
  %i7 = load i32, i32* %arrayidx20, align 4
  %i8 = load i32, i32* @wking_loc, align 4
  %idxprom21 = sext i32 %i8 to i64
  %arrayidx22 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xdiagl to [144 x i32]*), i64 0, i64 %idxprom21
  %i9 = load i32, i32* %arrayidx22, align 4
  %cmp23 = icmp eq i32 %i7, %i9
  br i1 %cmp23, label %if.then24, label %if.else47

if.then24:                                        ; preds = %sw.bb18
  %i10 = load i32, i32* @wking_loc, align 4
  %cmp25 = icmp slt i32 %i10, %i
  br i1 %cmp25, label %if.then26, label %if.else

if.then26:                                        ; preds = %if.then24
  %i11 = load i32, i32* @wking_loc, align 4
  %add = add nsw i32 %i11, 13
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then26
  %l.0 = phi i32 [ %add, %if.then26 ], [ %add30, %for.inc ]
  %idxprom27 = sext i32 %l.0 to i64
  %arrayidx28 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom27
  %i12 = load i32, i32* %arrayidx28, align 4
  %cmp29 = icmp eq i32 %i12, 13
  br i1 %cmp29, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %add30 = add nsw i32 %l.0, 13
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %cmp31 = icmp eq i32 %l.0, %i
  br i1 %cmp31, label %if.then32, label %if.end33

if.then32:                                        ; preds = %for.end
  br label %return

if.end33:                                         ; preds = %for.end
  br label %if.end46

if.else:                                          ; preds = %if.then24
  %i13 = load i32, i32* @wking_loc, align 4
  %sub34 = sub nsw i32 %i13, 13
  br label %for.cond35

for.cond35:                                       ; preds = %for.inc40, %if.else
  %l.1 = phi i32 [ %sub34, %if.else ], [ %sub41, %for.inc40 ]
  %idxprom36 = sext i32 %l.1 to i64
  %arrayidx37 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom36
  %i14 = load i32, i32* %arrayidx37, align 4
  %cmp38 = icmp eq i32 %i14, 13
  br i1 %cmp38, label %for.body39, label %for.end42

for.body39:                                       ; preds = %for.cond35
  br label %for.inc40

for.inc40:                                        ; preds = %for.body39
  %sub41 = sub nsw i32 %l.1, 13
  br label %for.cond35

for.end42:                                        ; preds = %for.cond35
  %cmp43 = icmp eq i32 %l.1, %i
  br i1 %cmp43, label %if.then44, label %if.end45

if.then44:                                        ; preds = %for.end42
  br label %return

if.end45:                                         ; preds = %for.end42
  br label %if.end46

if.end46:                                         ; preds = %if.end45, %if.end33
  br label %if.end83

if.else47:                                        ; preds = %sw.bb18
  %idxprom48 = sext i32 %i to i64
  %arrayidx49 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xdiagr to [144 x i32]*), i64 0, i64 %idxprom48
  %i15 = load i32, i32* %arrayidx49, align 4
  %i16 = load i32, i32* @wking_loc, align 4
  %idxprom50 = sext i32 %i16 to i64
  %arrayidx51 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xdiagr to [144 x i32]*), i64 0, i64 %idxprom50
  %i17 = load i32, i32* %arrayidx51, align 4
  %cmp52 = icmp eq i32 %i15, %i17
  br i1 %cmp52, label %if.then53, label %if.end82

if.then53:                                        ; preds = %if.else47
  %i18 = load i32, i32* @wking_loc, align 4
  %cmp54 = icmp slt i32 %i18, %i
  br i1 %cmp54, label %if.then55, label %if.else68

if.then55:                                        ; preds = %if.then53
  %i19 = load i32, i32* @wking_loc, align 4
  %add56 = add nsw i32 %i19, 11
  br label %for.cond57

for.cond57:                                       ; preds = %for.inc62, %if.then55
  %l.2 = phi i32 [ %add56, %if.then55 ], [ %add63, %for.inc62 ]
  %idxprom58 = sext i32 %l.2 to i64
  %arrayidx59 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom58
  %i20 = load i32, i32* %arrayidx59, align 4
  %cmp60 = icmp eq i32 %i20, 13
  br i1 %cmp60, label %for.body61, label %for.end64

for.body61:                                       ; preds = %for.cond57
  br label %for.inc62

for.inc62:                                        ; preds = %for.body61
  %add63 = add nsw i32 %l.2, 11
  br label %for.cond57

for.end64:                                        ; preds = %for.cond57
  %cmp65 = icmp eq i32 %l.2, %i
  br i1 %cmp65, label %if.then66, label %if.end67

if.then66:                                        ; preds = %for.end64
  br label %return

if.end67:                                         ; preds = %for.end64
  br label %if.end81

if.else68:                                        ; preds = %if.then53
  %i21 = load i32, i32* @wking_loc, align 4
  %sub69 = sub nsw i32 %i21, 11
  br label %for.cond70

for.cond70:                                       ; preds = %for.inc75, %if.else68
  %l.3 = phi i32 [ %sub69, %if.else68 ], [ %sub76, %for.inc75 ]
  %idxprom71 = sext i32 %l.3 to i64
  %arrayidx72 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom71
  %i22 = load i32, i32* %arrayidx72, align 4
  %cmp73 = icmp eq i32 %i22, 13
  br i1 %cmp73, label %for.body74, label %for.end77

for.body74:                                       ; preds = %for.cond70
  br label %for.inc75

for.inc75:                                        ; preds = %for.body74
  %sub76 = sub nsw i32 %l.3, 11
  br label %for.cond70

for.end77:                                        ; preds = %for.cond70
  %cmp78 = icmp eq i32 %l.3, %i
  br i1 %cmp78, label %if.then79, label %if.end80

if.then79:                                        ; preds = %for.end77
  br label %return

if.end80:                                         ; preds = %for.end77
  br label %if.end81

if.end81:                                         ; preds = %if.end80, %if.end67
  br label %if.end82

if.end82:                                         ; preds = %if.end81, %if.else47
  br label %if.end83

if.end83:                                         ; preds = %if.end82, %if.end46
  br label %sw.epilog

sw.bb84:                                          ; preds = %if.then6
  %idxprom85 = sext i32 %i to i64
  %arrayidx86 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xfile to [144 x i32]*), i64 0, i64 %idxprom85
  %i23 = load i32, i32* %arrayidx86, align 4
  %i24 = load i32, i32* @wking_loc, align 4
  %idxprom87 = sext i32 %i24 to i64
  %arrayidx88 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xfile to [144 x i32]*), i64 0, i64 %idxprom87
  %i25 = load i32, i32* %arrayidx88, align 4
  %cmp89 = icmp eq i32 %i23, %i25
  br i1 %cmp89, label %if.then90, label %if.else119

if.then90:                                        ; preds = %sw.bb84
  %i26 = load i32, i32* @wking_loc, align 4
  %cmp91 = icmp slt i32 %i26, %i
  br i1 %cmp91, label %if.then92, label %if.else105

if.then92:                                        ; preds = %if.then90
  %i27 = load i32, i32* @wking_loc, align 4
  %add93 = add nsw i32 %i27, 12
  br label %for.cond94

for.cond94:                                       ; preds = %for.inc99, %if.then92
  %l.4 = phi i32 [ %add93, %if.then92 ], [ %add100, %for.inc99 ]
  %idxprom95 = sext i32 %l.4 to i64
  %arrayidx96 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom95
  %i28 = load i32, i32* %arrayidx96, align 4
  %cmp97 = icmp eq i32 %i28, 13
  br i1 %cmp97, label %for.body98, label %for.end101

for.body98:                                       ; preds = %for.cond94
  br label %for.inc99

for.inc99:                                        ; preds = %for.body98
  %add100 = add nsw i32 %l.4, 12
  br label %for.cond94

for.end101:                                       ; preds = %for.cond94
  %cmp102 = icmp eq i32 %l.4, %i
  br i1 %cmp102, label %if.then103, label %if.end104

if.then103:                                       ; preds = %for.end101
  br label %return

if.end104:                                        ; preds = %for.end101
  br label %if.end118

if.else105:                                       ; preds = %if.then90
  %i29 = load i32, i32* @wking_loc, align 4
  %sub106 = sub nsw i32 %i29, 12
  br label %for.cond107

for.cond107:                                      ; preds = %for.inc112, %if.else105
  %l.5 = phi i32 [ %sub106, %if.else105 ], [ %sub113, %for.inc112 ]
  %idxprom108 = sext i32 %l.5 to i64
  %arrayidx109 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom108
  %i30 = load i32, i32* %arrayidx109, align 4
  %cmp110 = icmp eq i32 %i30, 13
  br i1 %cmp110, label %for.body111, label %for.end114

for.body111:                                      ; preds = %for.cond107
  br label %for.inc112

for.inc112:                                       ; preds = %for.body111
  %sub113 = sub nsw i32 %l.5, 12
  br label %for.cond107

for.end114:                                       ; preds = %for.cond107
  %cmp115 = icmp eq i32 %l.5, %i
  br i1 %cmp115, label %if.then116, label %if.end117

if.then116:                                       ; preds = %for.end114
  br label %return

if.end117:                                        ; preds = %for.end114
  br label %if.end118

if.end118:                                        ; preds = %if.end117, %if.end104
  br label %if.end153

if.else119:                                       ; preds = %sw.bb84
  %idxprom120 = sext i32 %i to i64
  %arrayidx121 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xrank to [144 x i32]*), i64 0, i64 %idxprom120
  %i31 = load i32, i32* %arrayidx121, align 4
  %i32 = load i32, i32* @wking_loc, align 4
  %idxprom122 = sext i32 %i32 to i64
  %arrayidx123 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xrank to [144 x i32]*), i64 0, i64 %idxprom122
  %i33 = load i32, i32* %arrayidx123, align 4
  %cmp124 = icmp eq i32 %i31, %i33
  br i1 %cmp124, label %if.then125, label %if.end152

if.then125:                                       ; preds = %if.else119
  %i34 = load i32, i32* @wking_loc, align 4
  %cmp126 = icmp slt i32 %i34, %i
  br i1 %cmp126, label %if.then127, label %if.else139

if.then127:                                       ; preds = %if.then125
  %i35 = load i32, i32* @wking_loc, align 4
  %add128 = add nsw i32 %i35, 1
  br label %for.cond129

for.cond129:                                      ; preds = %for.inc134, %if.then127
  %l.6 = phi i32 [ %add128, %if.then127 ], [ %inc, %for.inc134 ]
  %idxprom130 = sext i32 %l.6 to i64
  %arrayidx131 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom130
  %i36 = load i32, i32* %arrayidx131, align 4
  %cmp132 = icmp eq i32 %i36, 13
  br i1 %cmp132, label %for.body133, label %for.end135

for.body133:                                      ; preds = %for.cond129
  br label %for.inc134

for.inc134:                                       ; preds = %for.body133
  %inc = add nsw i32 %l.6, 1
  br label %for.cond129

for.end135:                                       ; preds = %for.cond129
  %cmp136 = icmp eq i32 %l.6, %i
  br i1 %cmp136, label %if.then137, label %if.end138

if.then137:                                       ; preds = %for.end135
  br label %return

if.end138:                                        ; preds = %for.end135
  br label %if.end151

if.else139:                                       ; preds = %if.then125
  %i37 = load i32, i32* @wking_loc, align 4
  %sub140 = sub nsw i32 %i37, 1
  br label %for.cond141

for.cond141:                                      ; preds = %for.inc146, %if.else139
  %l.7 = phi i32 [ %sub140, %if.else139 ], [ %dec, %for.inc146 ]
  %idxprom142 = sext i32 %l.7 to i64
  %arrayidx143 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom142
  %i38 = load i32, i32* %arrayidx143, align 4
  %cmp144 = icmp eq i32 %i38, 13
  br i1 %cmp144, label %for.body145, label %for.end147

for.body145:                                      ; preds = %for.cond141
  br label %for.inc146

for.inc146:                                       ; preds = %for.body145
  %dec = add nsw i32 %l.7, -1
  br label %for.cond141

for.end147:                                       ; preds = %for.cond141
  %cmp148 = icmp eq i32 %l.7, %i
  br i1 %cmp148, label %if.then149, label %if.end150

if.then149:                                       ; preds = %for.end147
  br label %return

if.end150:                                        ; preds = %for.end147
  br label %if.end151

if.end151:                                        ; preds = %if.end150, %if.end138
  br label %if.end152

if.end152:                                        ; preds = %if.end151, %if.else119
  br label %if.end153

if.end153:                                        ; preds = %if.end152, %if.end118
  br label %sw.epilog

sw.bb154:                                         ; preds = %if.then6
  br label %for.cond155

for.cond155:                                      ; preds = %for.inc164, %sw.bb154
  %l.8 = phi i32 [ 0, %sw.bb154 ], [ %inc165, %for.inc164 ]
  %cmp156 = icmp slt i32 %l.8, 8
  br i1 %cmp156, label %for.body157, label %for.end166

for.body157:                                      ; preds = %for.cond155
  %i39 = load i32, i32* @wking_loc, align 4
  %idxprom158 = sext i32 %l.8 to i64
  %arrayidx159 = getelementptr inbounds [8 x i32], [8 x i32]* @f_in_check.knight_o, i64 0, i64 %idxprom158
  %i40 = load i32, i32* %arrayidx159, align 4
  %add160 = add nsw i32 %i39, %i40
  %cmp161 = icmp eq i32 %add160, %i
  br i1 %cmp161, label %if.then162, label %if.end163

if.then162:                                       ; preds = %for.body157
  br label %return

if.end163:                                        ; preds = %for.body157
  br label %for.inc164

for.inc164:                                       ; preds = %if.end163
  %inc165 = add nsw i32 %l.8, 1
  br label %for.cond155

for.end166:                                       ; preds = %for.cond155
  br label %sw.epilog

sw.bb167:                                         ; preds = %if.then6
  %idxprom168 = sext i32 %i to i64
  %arrayidx169 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xfile to [144 x i32]*), i64 0, i64 %idxprom168
  %i41 = load i32, i32* %arrayidx169, align 4
  %i42 = load i32, i32* @wking_loc, align 4
  %idxprom170 = sext i32 %i42 to i64
  %arrayidx171 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xfile to [144 x i32]*), i64 0, i64 %idxprom170
  %i43 = load i32, i32* %arrayidx171, align 4
  %cmp172 = icmp eq i32 %i41, %i43
  br i1 %cmp172, label %if.then173, label %if.else202

if.then173:                                       ; preds = %sw.bb167
  %i44 = load i32, i32* @wking_loc, align 4
  %cmp174 = icmp slt i32 %i44, %i
  br i1 %cmp174, label %if.then175, label %if.else188

if.then175:                                       ; preds = %if.then173
  %i45 = load i32, i32* @wking_loc, align 4
  %add176 = add nsw i32 %i45, 12
  br label %for.cond177

for.cond177:                                      ; preds = %for.inc182, %if.then175
  %l.9 = phi i32 [ %add176, %if.then175 ], [ %add183, %for.inc182 ]
  %idxprom178 = sext i32 %l.9 to i64
  %arrayidx179 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom178
  %i46 = load i32, i32* %arrayidx179, align 4
  %cmp180 = icmp eq i32 %i46, 13
  br i1 %cmp180, label %for.body181, label %for.end184

for.body181:                                      ; preds = %for.cond177
  br label %for.inc182

for.inc182:                                       ; preds = %for.body181
  %add183 = add nsw i32 %l.9, 12
  br label %for.cond177

for.end184:                                       ; preds = %for.cond177
  %cmp185 = icmp eq i32 %l.9, %i
  br i1 %cmp185, label %if.then186, label %if.end187

if.then186:                                       ; preds = %for.end184
  br label %return

if.end187:                                        ; preds = %for.end184
  br label %if.end201

if.else188:                                       ; preds = %if.then173
  %i47 = load i32, i32* @wking_loc, align 4
  %sub189 = sub nsw i32 %i47, 12
  br label %for.cond190

for.cond190:                                      ; preds = %for.inc195, %if.else188
  %l.10 = phi i32 [ %sub189, %if.else188 ], [ %sub196, %for.inc195 ]
  %idxprom191 = sext i32 %l.10 to i64
  %arrayidx192 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom191
  %i48 = load i32, i32* %arrayidx192, align 4
  %cmp193 = icmp eq i32 %i48, 13
  br i1 %cmp193, label %for.body194, label %for.end197

for.body194:                                      ; preds = %for.cond190
  br label %for.inc195

for.inc195:                                       ; preds = %for.body194
  %sub196 = sub nsw i32 %l.10, 12
  br label %for.cond190

for.end197:                                       ; preds = %for.cond190
  %cmp198 = icmp eq i32 %l.10, %i
  br i1 %cmp198, label %if.then199, label %if.end200

if.then199:                                       ; preds = %for.end197
  br label %return

if.end200:                                        ; preds = %for.end197
  br label %if.end201

if.end201:                                        ; preds = %if.end200, %if.end187
  br label %if.end310

if.else202:                                       ; preds = %sw.bb167
  %idxprom203 = sext i32 %i to i64
  %arrayidx204 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xrank to [144 x i32]*), i64 0, i64 %idxprom203
  %i49 = load i32, i32* %arrayidx204, align 4
  %i50 = load i32, i32* @wking_loc, align 4
  %idxprom205 = sext i32 %i50 to i64
  %arrayidx206 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xrank to [144 x i32]*), i64 0, i64 %idxprom205
  %i51 = load i32, i32* %arrayidx206, align 4
  %cmp207 = icmp eq i32 %i49, %i51
  br i1 %cmp207, label %if.then208, label %if.else237

if.then208:                                       ; preds = %if.else202
  %i52 = load i32, i32* @wking_loc, align 4
  %cmp209 = icmp slt i32 %i52, %i
  br i1 %cmp209, label %if.then210, label %if.else223

if.then210:                                       ; preds = %if.then208
  %i53 = load i32, i32* @wking_loc, align 4
  %add211 = add nsw i32 %i53, 1
  br label %for.cond212

for.cond212:                                      ; preds = %for.inc217, %if.then210
  %l.11 = phi i32 [ %add211, %if.then210 ], [ %add218, %for.inc217 ]
  %idxprom213 = sext i32 %l.11 to i64
  %arrayidx214 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom213
  %i54 = load i32, i32* %arrayidx214, align 4
  %cmp215 = icmp eq i32 %i54, 13
  br i1 %cmp215, label %for.body216, label %for.end219

for.body216:                                      ; preds = %for.cond212
  br label %for.inc217

for.inc217:                                       ; preds = %for.body216
  %add218 = add nsw i32 %l.11, 1
  br label %for.cond212

for.end219:                                       ; preds = %for.cond212
  %cmp220 = icmp eq i32 %l.11, %i
  br i1 %cmp220, label %if.then221, label %if.end222

if.then221:                                       ; preds = %for.end219
  br label %return

if.end222:                                        ; preds = %for.end219
  br label %if.end236

if.else223:                                       ; preds = %if.then208
  %i55 = load i32, i32* @wking_loc, align 4
  %sub224 = sub nsw i32 %i55, 1
  br label %for.cond225

for.cond225:                                      ; preds = %for.inc230, %if.else223
  %l.12 = phi i32 [ %sub224, %if.else223 ], [ %sub231, %for.inc230 ]
  %idxprom226 = sext i32 %l.12 to i64
  %arrayidx227 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom226
  %i56 = load i32, i32* %arrayidx227, align 4
  %cmp228 = icmp eq i32 %i56, 13
  br i1 %cmp228, label %for.body229, label %for.end232

for.body229:                                      ; preds = %for.cond225
  br label %for.inc230

for.inc230:                                       ; preds = %for.body229
  %sub231 = sub nsw i32 %l.12, 1
  br label %for.cond225

for.end232:                                       ; preds = %for.cond225
  %cmp233 = icmp eq i32 %l.12, %i
  br i1 %cmp233, label %if.then234, label %if.end235

if.then234:                                       ; preds = %for.end232
  br label %return

if.end235:                                        ; preds = %for.end232
  br label %if.end236

if.end236:                                        ; preds = %if.end235, %if.end222
  br label %if.end309

if.else237:                                       ; preds = %if.else202
  %idxprom238 = sext i32 %i to i64
  %arrayidx239 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xdiagl to [144 x i32]*), i64 0, i64 %idxprom238
  %i57 = load i32, i32* %arrayidx239, align 4
  %i58 = load i32, i32* @wking_loc, align 4
  %idxprom240 = sext i32 %i58 to i64
  %arrayidx241 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xdiagl to [144 x i32]*), i64 0, i64 %idxprom240
  %i59 = load i32, i32* %arrayidx241, align 4
  %cmp242 = icmp eq i32 %i57, %i59
  br i1 %cmp242, label %if.then243, label %if.else272

if.then243:                                       ; preds = %if.else237
  %i60 = load i32, i32* @wking_loc, align 4
  %cmp244 = icmp slt i32 %i60, %i
  br i1 %cmp244, label %if.then245, label %if.else258

if.then245:                                       ; preds = %if.then243
  %i61 = load i32, i32* @wking_loc, align 4
  %add246 = add nsw i32 %i61, 13
  br label %for.cond247

for.cond247:                                      ; preds = %for.inc252, %if.then245
  %l.13 = phi i32 [ %add246, %if.then245 ], [ %add253, %for.inc252 ]
  %idxprom248 = sext i32 %l.13 to i64
  %arrayidx249 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom248
  %i62 = load i32, i32* %arrayidx249, align 4
  %cmp250 = icmp eq i32 %i62, 13
  br i1 %cmp250, label %for.body251, label %for.end254

for.body251:                                      ; preds = %for.cond247
  br label %for.inc252

for.inc252:                                       ; preds = %for.body251
  %add253 = add nsw i32 %l.13, 13
  br label %for.cond247

for.end254:                                       ; preds = %for.cond247
  %cmp255 = icmp eq i32 %l.13, %i
  br i1 %cmp255, label %if.then256, label %if.end257

if.then256:                                       ; preds = %for.end254
  br label %return

if.end257:                                        ; preds = %for.end254
  br label %if.end271

if.else258:                                       ; preds = %if.then243
  %i63 = load i32, i32* @wking_loc, align 4
  %sub259 = sub nsw i32 %i63, 13
  br label %for.cond260

for.cond260:                                      ; preds = %for.inc265, %if.else258
  %l.14 = phi i32 [ %sub259, %if.else258 ], [ %sub266, %for.inc265 ]
  %idxprom261 = sext i32 %l.14 to i64
  %arrayidx262 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom261
  %i64 = load i32, i32* %arrayidx262, align 4
  %cmp263 = icmp eq i32 %i64, 13
  br i1 %cmp263, label %for.body264, label %for.end267

for.body264:                                      ; preds = %for.cond260
  br label %for.inc265

for.inc265:                                       ; preds = %for.body264
  %sub266 = sub nsw i32 %l.14, 13
  br label %for.cond260

for.end267:                                       ; preds = %for.cond260
  %cmp268 = icmp eq i32 %l.14, %i
  br i1 %cmp268, label %if.then269, label %if.end270

if.then269:                                       ; preds = %for.end267
  br label %return

if.end270:                                        ; preds = %for.end267
  br label %if.end271

if.end271:                                        ; preds = %if.end270, %if.end257
  br label %if.end308

if.else272:                                       ; preds = %if.else237
  %idxprom273 = sext i32 %i to i64
  %arrayidx274 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xdiagr to [144 x i32]*), i64 0, i64 %idxprom273
  %i65 = load i32, i32* %arrayidx274, align 4
  %i66 = load i32, i32* @wking_loc, align 4
  %idxprom275 = sext i32 %i66 to i64
  %arrayidx276 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xdiagr to [144 x i32]*), i64 0, i64 %idxprom275
  %i67 = load i32, i32* %arrayidx276, align 4
  %cmp277 = icmp eq i32 %i65, %i67
  br i1 %cmp277, label %if.then278, label %if.end307

if.then278:                                       ; preds = %if.else272
  %i68 = load i32, i32* @wking_loc, align 4
  %cmp279 = icmp slt i32 %i68, %i
  br i1 %cmp279, label %if.then280, label %if.else293

if.then280:                                       ; preds = %if.then278
  %i69 = load i32, i32* @wking_loc, align 4
  %add281 = add nsw i32 %i69, 11
  br label %for.cond282

for.cond282:                                      ; preds = %for.inc287, %if.then280
  %l.15 = phi i32 [ %add281, %if.then280 ], [ %add288, %for.inc287 ]
  %idxprom283 = sext i32 %l.15 to i64
  %arrayidx284 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom283
  %i70 = load i32, i32* %arrayidx284, align 4
  %cmp285 = icmp eq i32 %i70, 13
  br i1 %cmp285, label %for.body286, label %for.end289

for.body286:                                      ; preds = %for.cond282
  br label %for.inc287

for.inc287:                                       ; preds = %for.body286
  %add288 = add nsw i32 %l.15, 11
  br label %for.cond282

for.end289:                                       ; preds = %for.cond282
  %cmp290 = icmp eq i32 %l.15, %i
  br i1 %cmp290, label %if.then291, label %if.end292

if.then291:                                       ; preds = %for.end289
  br label %return

if.end292:                                        ; preds = %for.end289
  br label %if.end306

if.else293:                                       ; preds = %if.then278
  %i71 = load i32, i32* @wking_loc, align 4
  %sub294 = sub nsw i32 %i71, 11
  br label %for.cond295

for.cond295:                                      ; preds = %for.inc300, %if.else293
  %l.16 = phi i32 [ %sub294, %if.else293 ], [ %sub301, %for.inc300 ]
  %idxprom296 = sext i32 %l.16 to i64
  %arrayidx297 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom296
  %i72 = load i32, i32* %arrayidx297, align 4
  %cmp298 = icmp eq i32 %i72, 13
  br i1 %cmp298, label %for.body299, label %for.end302

for.body299:                                      ; preds = %for.cond295
  br label %for.inc300

for.inc300:                                       ; preds = %for.body299
  %sub301 = sub nsw i32 %l.16, 11
  br label %for.cond295

for.end302:                                       ; preds = %for.cond295
  %cmp303 = icmp eq i32 %l.16, %i
  br i1 %cmp303, label %if.then304, label %if.end305

if.then304:                                       ; preds = %for.end302
  br label %return

if.end305:                                        ; preds = %for.end302
  br label %if.end306

if.end306:                                        ; preds = %if.end305, %if.end292
  br label %if.end307

if.end307:                                        ; preds = %if.end306, %if.else272
  br label %if.end308

if.end308:                                        ; preds = %if.end307, %if.end271
  br label %if.end309

if.end309:                                        ; preds = %if.end308, %if.end236
  br label %if.end310

if.end310:                                        ; preds = %if.end309, %if.end201
  br label %sw.epilog

sw.bb311:                                         ; preds = %if.then6
  %idxprom312 = sext i32 %m to i64
  %arrayidx313 = getelementptr inbounds %struct.move_s, %struct.move_s* %moves, i64 %idxprom312
  %castled = getelementptr inbounds %struct.move_s, %struct.move_s* %arrayidx313, i32 0, i32 4
  %i73 = load i32, i32* %castled, align 4
  %tobool = icmp ne i32 %i73, 0
  br i1 %tobool, label %if.then314, label %if.end318

if.then314:                                       ; preds = %sw.bb311
  %i74 = load i32, i32* @wking_loc, align 4
  %call = call i32 @is_attacked(i32 %i74, i32 0)
  %tobool315 = icmp ne i32 %call, 0
  br i1 %tobool315, label %if.then316, label %if.else317

if.then316:                                       ; preds = %if.then314
  br label %return

if.else317:                                       ; preds = %if.then314
  br label %return

if.end318:                                        ; preds = %sw.bb311
  br label %sw.epilog

sw.epilog:                                        ; preds = %if.end318, %if.end310, %for.end166, %if.end153, %if.end83, %if.end17, %if.then6
  %cmp319 = icmp eq i32 %i1, 0
  br i1 %cmp319, label %if.then320, label %if.end321

if.then320:                                       ; preds = %sw.epilog
  br label %return

if.end321:                                        ; preds = %sw.epilog
  %idxprom322 = sext i32 %i1 to i64
  %arrayidx323 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xrank to [144 x i32]*), i64 0, i64 %idxprom322
  %i75 = load i32, i32* %arrayidx323, align 4
  %i76 = load i32, i32* @wking_loc, align 4
  %idxprom324 = sext i32 %i76 to i64
  %arrayidx325 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xrank to [144 x i32]*), i64 0, i64 %idxprom324
  %i77 = load i32, i32* %arrayidx325, align 4
  %cmp326 = icmp eq i32 %i75, %i77
  br i1 %cmp326, label %if.then327, label %if.else368

if.then327:                                       ; preds = %if.end321
  %i78 = load i32, i32* @wking_loc, align 4
  %cmp328 = icmp sgt i32 %i78, %i1
  br i1 %cmp328, label %if.then329, label %if.else348

if.then329:                                       ; preds = %if.then327
  %i79 = load i32, i32* @wking_loc, align 4
  %sub330 = sub nsw i32 %i79, 1
  br label %for.cond331

for.cond331:                                      ; preds = %for.inc336, %if.then329
  %l.17 = phi i32 [ %sub330, %if.then329 ], [ %dec337, %for.inc336 ]
  %idxprom332 = sext i32 %l.17 to i64
  %arrayidx333 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom332
  %i80 = load i32, i32* %arrayidx333, align 4
  %cmp334 = icmp eq i32 %i80, 13
  br i1 %cmp334, label %for.body335, label %for.end338

for.body335:                                      ; preds = %for.cond331
  br label %for.inc336

for.inc336:                                       ; preds = %for.body335
  %dec337 = add nsw i32 %l.17, -1
  br label %for.cond331

for.end338:                                       ; preds = %for.cond331
  %idxprom339 = sext i32 %l.17 to i64
  %arrayidx340 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom339
  %i81 = load i32, i32* %arrayidx340, align 4
  %cmp341 = icmp eq i32 %i81, 8
  br i1 %cmp341, label %if.then346, label %lor.lhs.false342

lor.lhs.false342:                                 ; preds = %for.end338
  %idxprom343 = sext i32 %l.17 to i64
  %arrayidx344 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom343
  %i82 = load i32, i32* %arrayidx344, align 4
  %cmp345 = icmp eq i32 %i82, 10
  br i1 %cmp345, label %if.then346, label %if.end347

if.then346:                                       ; preds = %lor.lhs.false342, %for.end338
  br label %return

if.end347:                                        ; preds = %lor.lhs.false342
  br label %if.end367

if.else348:                                       ; preds = %if.then327
  %i83 = load i32, i32* @wking_loc, align 4
  %add349 = add nsw i32 %i83, 1
  br label %for.cond350

for.cond350:                                      ; preds = %for.inc355, %if.else348
  %l.18 = phi i32 [ %add349, %if.else348 ], [ %inc356, %for.inc355 ]
  %idxprom351 = sext i32 %l.18 to i64
  %arrayidx352 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom351
  %i84 = load i32, i32* %arrayidx352, align 4
  %cmp353 = icmp eq i32 %i84, 13
  br i1 %cmp353, label %for.body354, label %for.end357

for.body354:                                      ; preds = %for.cond350
  br label %for.inc355

for.inc355:                                       ; preds = %for.body354
  %inc356 = add nsw i32 %l.18, 1
  br label %for.cond350

for.end357:                                       ; preds = %for.cond350
  %idxprom358 = sext i32 %l.18 to i64
  %arrayidx359 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom358
  %i85 = load i32, i32* %arrayidx359, align 4
  %cmp360 = icmp eq i32 %i85, 8
  br i1 %cmp360, label %if.then365, label %lor.lhs.false361

lor.lhs.false361:                                 ; preds = %for.end357
  %idxprom362 = sext i32 %l.18 to i64
  %arrayidx363 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom362
  %i86 = load i32, i32* %arrayidx363, align 4
  %cmp364 = icmp eq i32 %i86, 10
  br i1 %cmp364, label %if.then365, label %if.end366

if.then365:                                       ; preds = %lor.lhs.false361, %for.end357
  br label %return

if.end366:                                        ; preds = %lor.lhs.false361
  br label %if.end367

if.end367:                                        ; preds = %if.end366, %if.end347
  br label %if.end512

if.else368:                                       ; preds = %if.end321
  %idxprom369 = sext i32 %i1 to i64
  %arrayidx370 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xfile to [144 x i32]*), i64 0, i64 %idxprom369
  %i87 = load i32, i32* %arrayidx370, align 4
  %i88 = load i32, i32* @wking_loc, align 4
  %idxprom371 = sext i32 %i88 to i64
  %arrayidx372 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xfile to [144 x i32]*), i64 0, i64 %idxprom371
  %i89 = load i32, i32* %arrayidx372, align 4
  %cmp373 = icmp eq i32 %i87, %i89
  br i1 %cmp373, label %if.then374, label %if.else415

if.then374:                                       ; preds = %if.else368
  %i90 = load i32, i32* @wking_loc, align 4
  %cmp375 = icmp sgt i32 %i90, %i1
  br i1 %cmp375, label %if.then376, label %if.else395

if.then376:                                       ; preds = %if.then374
  %i91 = load i32, i32* @wking_loc, align 4
  %sub377 = sub nsw i32 %i91, 12
  br label %for.cond378

for.cond378:                                      ; preds = %for.inc383, %if.then376
  %l.19 = phi i32 [ %sub377, %if.then376 ], [ %sub384, %for.inc383 ]
  %idxprom379 = sext i32 %l.19 to i64
  %arrayidx380 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom379
  %i92 = load i32, i32* %arrayidx380, align 4
  %cmp381 = icmp eq i32 %i92, 13
  br i1 %cmp381, label %for.body382, label %for.end385

for.body382:                                      ; preds = %for.cond378
  br label %for.inc383

for.inc383:                                       ; preds = %for.body382
  %sub384 = sub nsw i32 %l.19, 12
  br label %for.cond378

for.end385:                                       ; preds = %for.cond378
  %idxprom386 = sext i32 %l.19 to i64
  %arrayidx387 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom386
  %i93 = load i32, i32* %arrayidx387, align 4
  %cmp388 = icmp eq i32 %i93, 8
  br i1 %cmp388, label %if.then393, label %lor.lhs.false389

lor.lhs.false389:                                 ; preds = %for.end385
  %idxprom390 = sext i32 %l.19 to i64
  %arrayidx391 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom390
  %i94 = load i32, i32* %arrayidx391, align 4
  %cmp392 = icmp eq i32 %i94, 10
  br i1 %cmp392, label %if.then393, label %if.end394

if.then393:                                       ; preds = %lor.lhs.false389, %for.end385
  br label %return

if.end394:                                        ; preds = %lor.lhs.false389
  br label %if.end414

if.else395:                                       ; preds = %if.then374
  %i95 = load i32, i32* @wking_loc, align 4
  %add396 = add nsw i32 %i95, 12
  br label %for.cond397

for.cond397:                                      ; preds = %for.inc402, %if.else395
  %l.20 = phi i32 [ %add396, %if.else395 ], [ %add403, %for.inc402 ]
  %idxprom398 = sext i32 %l.20 to i64
  %arrayidx399 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom398
  %i96 = load i32, i32* %arrayidx399, align 4
  %cmp400 = icmp eq i32 %i96, 13
  br i1 %cmp400, label %for.body401, label %for.end404

for.body401:                                      ; preds = %for.cond397
  br label %for.inc402

for.inc402:                                       ; preds = %for.body401
  %add403 = add nsw i32 %l.20, 12
  br label %for.cond397

for.end404:                                       ; preds = %for.cond397
  %idxprom405 = sext i32 %l.20 to i64
  %arrayidx406 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom405
  %i97 = load i32, i32* %arrayidx406, align 4
  %cmp407 = icmp eq i32 %i97, 8
  br i1 %cmp407, label %if.then412, label %lor.lhs.false408

lor.lhs.false408:                                 ; preds = %for.end404
  %idxprom409 = sext i32 %l.20 to i64
  %arrayidx410 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom409
  %i98 = load i32, i32* %arrayidx410, align 4
  %cmp411 = icmp eq i32 %i98, 10
  br i1 %cmp411, label %if.then412, label %if.end413

if.then412:                                       ; preds = %lor.lhs.false408, %for.end404
  br label %return

if.end413:                                        ; preds = %lor.lhs.false408
  br label %if.end414

if.end414:                                        ; preds = %if.end413, %if.end394
  br label %if.end511

if.else415:                                       ; preds = %if.else368
  %idxprom416 = sext i32 %i1 to i64
  %arrayidx417 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xdiagl to [144 x i32]*), i64 0, i64 %idxprom416
  %i99 = load i32, i32* %arrayidx417, align 4
  %i100 = load i32, i32* @wking_loc, align 4
  %idxprom418 = sext i32 %i100 to i64
  %arrayidx419 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xdiagl to [144 x i32]*), i64 0, i64 %idxprom418
  %i101 = load i32, i32* %arrayidx419, align 4
  %cmp420 = icmp eq i32 %i99, %i101
  br i1 %cmp420, label %if.then421, label %if.else462

if.then421:                                       ; preds = %if.else415
  %i102 = load i32, i32* @wking_loc, align 4
  %cmp422 = icmp sgt i32 %i102, %i1
  br i1 %cmp422, label %if.then423, label %if.else442

if.then423:                                       ; preds = %if.then421
  %i103 = load i32, i32* @wking_loc, align 4
  %sub424 = sub nsw i32 %i103, 13
  br label %for.cond425

for.cond425:                                      ; preds = %for.inc430, %if.then423
  %l.21 = phi i32 [ %sub424, %if.then423 ], [ %sub431, %for.inc430 ]
  %idxprom426 = sext i32 %l.21 to i64
  %arrayidx427 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom426
  %i104 = load i32, i32* %arrayidx427, align 4
  %cmp428 = icmp eq i32 %i104, 13
  br i1 %cmp428, label %for.body429, label %for.end432

for.body429:                                      ; preds = %for.cond425
  br label %for.inc430

for.inc430:                                       ; preds = %for.body429
  %sub431 = sub nsw i32 %l.21, 13
  br label %for.cond425

for.end432:                                       ; preds = %for.cond425
  %idxprom433 = sext i32 %l.21 to i64
  %arrayidx434 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom433
  %i105 = load i32, i32* %arrayidx434, align 4
  %cmp435 = icmp eq i32 %i105, 12
  br i1 %cmp435, label %if.then440, label %lor.lhs.false436

lor.lhs.false436:                                 ; preds = %for.end432
  %idxprom437 = sext i32 %l.21 to i64
  %arrayidx438 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom437
  %i106 = load i32, i32* %arrayidx438, align 4
  %cmp439 = icmp eq i32 %i106, 10
  br i1 %cmp439, label %if.then440, label %if.end441

if.then440:                                       ; preds = %lor.lhs.false436, %for.end432
  br label %return

if.end441:                                        ; preds = %lor.lhs.false436
  br label %if.end461

if.else442:                                       ; preds = %if.then421
  %i107 = load i32, i32* @wking_loc, align 4
  %add443 = add nsw i32 %i107, 13
  br label %for.cond444

for.cond444:                                      ; preds = %for.inc449, %if.else442
  %l.22 = phi i32 [ %add443, %if.else442 ], [ %add450, %for.inc449 ]
  %idxprom445 = sext i32 %l.22 to i64
  %arrayidx446 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom445
  %i108 = load i32, i32* %arrayidx446, align 4
  %cmp447 = icmp eq i32 %i108, 13
  br i1 %cmp447, label %for.body448, label %for.end451

for.body448:                                      ; preds = %for.cond444
  br label %for.inc449

for.inc449:                                       ; preds = %for.body448
  %add450 = add nsw i32 %l.22, 13
  br label %for.cond444

for.end451:                                       ; preds = %for.cond444
  %idxprom452 = sext i32 %l.22 to i64
  %arrayidx453 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom452
  %i109 = load i32, i32* %arrayidx453, align 4
  %cmp454 = icmp eq i32 %i109, 12
  br i1 %cmp454, label %if.then459, label %lor.lhs.false455

lor.lhs.false455:                                 ; preds = %for.end451
  %idxprom456 = sext i32 %l.22 to i64
  %arrayidx457 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom456
  %i110 = load i32, i32* %arrayidx457, align 4
  %cmp458 = icmp eq i32 %i110, 10
  br i1 %cmp458, label %if.then459, label %if.end460

if.then459:                                       ; preds = %lor.lhs.false455, %for.end451
  br label %return

if.end460:                                        ; preds = %lor.lhs.false455
  br label %if.end461

if.end461:                                        ; preds = %if.end460, %if.end441
  br label %if.end510

if.else462:                                       ; preds = %if.else415
  %idxprom463 = sext i32 %i1 to i64
  %arrayidx464 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xdiagr to [144 x i32]*), i64 0, i64 %idxprom463
  %i111 = load i32, i32* %arrayidx464, align 4
  %i112 = load i32, i32* @wking_loc, align 4
  %idxprom465 = sext i32 %i112 to i64
  %arrayidx466 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xdiagr to [144 x i32]*), i64 0, i64 %idxprom465
  %i113 = load i32, i32* %arrayidx466, align 4
  %cmp467 = icmp eq i32 %i111, %i113
  br i1 %cmp467, label %if.then468, label %if.end509

if.then468:                                       ; preds = %if.else462
  %i114 = load i32, i32* @wking_loc, align 4
  %cmp469 = icmp sgt i32 %i114, %i1
  br i1 %cmp469, label %if.then470, label %if.else489

if.then470:                                       ; preds = %if.then468
  %i115 = load i32, i32* @wking_loc, align 4
  %sub471 = sub nsw i32 %i115, 11
  br label %for.cond472

for.cond472:                                      ; preds = %for.inc477, %if.then470
  %l.23 = phi i32 [ %sub471, %if.then470 ], [ %sub478, %for.inc477 ]
  %idxprom473 = sext i32 %l.23 to i64
  %arrayidx474 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom473
  %i116 = load i32, i32* %arrayidx474, align 4
  %cmp475 = icmp eq i32 %i116, 13
  br i1 %cmp475, label %for.body476, label %for.end479

for.body476:                                      ; preds = %for.cond472
  br label %for.inc477

for.inc477:                                       ; preds = %for.body476
  %sub478 = sub nsw i32 %l.23, 11
  br label %for.cond472

for.end479:                                       ; preds = %for.cond472
  %idxprom480 = sext i32 %l.23 to i64
  %arrayidx481 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom480
  %i117 = load i32, i32* %arrayidx481, align 4
  %cmp482 = icmp eq i32 %i117, 12
  br i1 %cmp482, label %if.then487, label %lor.lhs.false483

lor.lhs.false483:                                 ; preds = %for.end479
  %idxprom484 = sext i32 %l.23 to i64
  %arrayidx485 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom484
  %i118 = load i32, i32* %arrayidx485, align 4
  %cmp486 = icmp eq i32 %i118, 10
  br i1 %cmp486, label %if.then487, label %if.end488

if.then487:                                       ; preds = %lor.lhs.false483, %for.end479
  br label %return

if.end488:                                        ; preds = %lor.lhs.false483
  br label %if.end508

if.else489:                                       ; preds = %if.then468
  %i119 = load i32, i32* @wking_loc, align 4
  %add490 = add nsw i32 %i119, 11
  br label %for.cond491

for.cond491:                                      ; preds = %for.inc496, %if.else489
  %l.24 = phi i32 [ %add490, %if.else489 ], [ %add497, %for.inc496 ]
  %idxprom492 = sext i32 %l.24 to i64
  %arrayidx493 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom492
  %i120 = load i32, i32* %arrayidx493, align 4
  %cmp494 = icmp eq i32 %i120, 13
  br i1 %cmp494, label %for.body495, label %for.end498

for.body495:                                      ; preds = %for.cond491
  br label %for.inc496

for.inc496:                                       ; preds = %for.body495
  %add497 = add nsw i32 %l.24, 11
  br label %for.cond491

for.end498:                                       ; preds = %for.cond491
  %idxprom499 = sext i32 %l.24 to i64
  %arrayidx500 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom499
  %i121 = load i32, i32* %arrayidx500, align 4
  %cmp501 = icmp eq i32 %i121, 12
  br i1 %cmp501, label %if.then506, label %lor.lhs.false502

lor.lhs.false502:                                 ; preds = %for.end498
  %idxprom503 = sext i32 %l.24 to i64
  %arrayidx504 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom503
  %i122 = load i32, i32* %arrayidx504, align 4
  %cmp505 = icmp eq i32 %i122, 10
  br i1 %cmp505, label %if.then506, label %if.end507

if.then506:                                       ; preds = %lor.lhs.false502, %for.end498
  br label %return

if.end507:                                        ; preds = %lor.lhs.false502
  br label %if.end508

if.end508:                                        ; preds = %if.end507, %if.end488
  br label %if.end509

if.end509:                                        ; preds = %if.end508, %if.else462
  br label %if.end510

if.end510:                                        ; preds = %if.end509, %if.end461
  br label %if.end511

if.end511:                                        ; preds = %if.end510, %if.end414
  br label %if.end512

if.end512:                                        ; preds = %if.end511, %if.end367
  br label %return

if.else513:                                       ; preds = %if.end
  %idxprom514 = sext i32 %i to i64
  %arrayidx515 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom514
  %i123 = load i32, i32* %arrayidx515, align 4
  switch i32 %i123, label %sw.epilog840 [
    i32 1, label %sw.bb516
    i32 11, label %sw.bb528
    i32 7, label %sw.bb600
    i32 3, label %sw.bb672
    i32 9, label %sw.bb685
    i32 5, label %sw.bb829
  ]

sw.bb516:                                         ; preds = %if.else513
  %add517 = add nsw i32 %i, 11
  %idxprom518 = sext i32 %add517 to i64
  %arrayidx519 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom518
  %i124 = load i32, i32* %arrayidx519, align 4
  %cmp520 = icmp eq i32 %i124, 6
  br i1 %cmp520, label %if.then526, label %lor.lhs.false521

lor.lhs.false521:                                 ; preds = %sw.bb516
  %add522 = add nsw i32 %i, 13
  %idxprom523 = sext i32 %add522 to i64
  %arrayidx524 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom523
  %i125 = load i32, i32* %arrayidx524, align 4
  %cmp525 = icmp eq i32 %i125, 6
  br i1 %cmp525, label %if.then526, label %if.end527

if.then526:                                       ; preds = %lor.lhs.false521, %sw.bb516
  br label %return

if.end527:                                        ; preds = %lor.lhs.false521
  br label %sw.epilog840

sw.bb528:                                         ; preds = %if.else513
  %idxprom529 = sext i32 %i to i64
  %arrayidx530 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xdiagl to [144 x i32]*), i64 0, i64 %idxprom529
  %i126 = load i32, i32* %arrayidx530, align 4
  %i127 = load i32, i32* @bking_loc, align 4
  %idxprom531 = sext i32 %i127 to i64
  %arrayidx532 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xdiagl to [144 x i32]*), i64 0, i64 %idxprom531
  %i128 = load i32, i32* %arrayidx532, align 4
  %cmp533 = icmp eq i32 %i126, %i128
  br i1 %cmp533, label %if.then534, label %if.else563

if.then534:                                       ; preds = %sw.bb528
  %i129 = load i32, i32* @bking_loc, align 4
  %cmp535 = icmp slt i32 %i129, %i
  br i1 %cmp535, label %if.then536, label %if.else549

if.then536:                                       ; preds = %if.then534
  %i130 = load i32, i32* @bking_loc, align 4
  %add537 = add nsw i32 %i130, 13
  br label %for.cond538

for.cond538:                                      ; preds = %for.inc543, %if.then536
  %l.25 = phi i32 [ %add537, %if.then536 ], [ %add544, %for.inc543 ]
  %idxprom539 = sext i32 %l.25 to i64
  %arrayidx540 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom539
  %i131 = load i32, i32* %arrayidx540, align 4
  %cmp541 = icmp eq i32 %i131, 13
  br i1 %cmp541, label %for.body542, label %for.end545

for.body542:                                      ; preds = %for.cond538
  br label %for.inc543

for.inc543:                                       ; preds = %for.body542
  %add544 = add nsw i32 %l.25, 13
  br label %for.cond538

for.end545:                                       ; preds = %for.cond538
  %cmp546 = icmp eq i32 %l.25, %i
  br i1 %cmp546, label %if.then547, label %if.end548

if.then547:                                       ; preds = %for.end545
  br label %return

if.end548:                                        ; preds = %for.end545
  br label %if.end562

if.else549:                                       ; preds = %if.then534
  %i132 = load i32, i32* @bking_loc, align 4
  %sub550 = sub nsw i32 %i132, 13
  br label %for.cond551

for.cond551:                                      ; preds = %for.inc556, %if.else549
  %l.26 = phi i32 [ %sub550, %if.else549 ], [ %sub557, %for.inc556 ]
  %idxprom552 = sext i32 %l.26 to i64
  %arrayidx553 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom552
  %i133 = load i32, i32* %arrayidx553, align 4
  %cmp554 = icmp eq i32 %i133, 13
  br i1 %cmp554, label %for.body555, label %for.end558

for.body555:                                      ; preds = %for.cond551
  br label %for.inc556

for.inc556:                                       ; preds = %for.body555
  %sub557 = sub nsw i32 %l.26, 13
  br label %for.cond551

for.end558:                                       ; preds = %for.cond551
  %cmp559 = icmp eq i32 %l.26, %i
  br i1 %cmp559, label %if.then560, label %if.end561

if.then560:                                       ; preds = %for.end558
  br label %return

if.end561:                                        ; preds = %for.end558
  br label %if.end562

if.end562:                                        ; preds = %if.end561, %if.end548
  br label %if.end599

if.else563:                                       ; preds = %sw.bb528
  %idxprom564 = sext i32 %i to i64
  %arrayidx565 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xdiagr to [144 x i32]*), i64 0, i64 %idxprom564
  %i134 = load i32, i32* %arrayidx565, align 4
  %i135 = load i32, i32* @bking_loc, align 4
  %idxprom566 = sext i32 %i135 to i64
  %arrayidx567 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xdiagr to [144 x i32]*), i64 0, i64 %idxprom566
  %i136 = load i32, i32* %arrayidx567, align 4
  %cmp568 = icmp eq i32 %i134, %i136
  br i1 %cmp568, label %if.then569, label %if.end598

if.then569:                                       ; preds = %if.else563
  %i137 = load i32, i32* @bking_loc, align 4
  %cmp570 = icmp slt i32 %i137, %i
  br i1 %cmp570, label %if.then571, label %if.else584

if.then571:                                       ; preds = %if.then569
  %i138 = load i32, i32* @bking_loc, align 4
  %add572 = add nsw i32 %i138, 11
  br label %for.cond573

for.cond573:                                      ; preds = %for.inc578, %if.then571
  %l.27 = phi i32 [ %add572, %if.then571 ], [ %add579, %for.inc578 ]
  %idxprom574 = sext i32 %l.27 to i64
  %arrayidx575 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom574
  %i139 = load i32, i32* %arrayidx575, align 4
  %cmp576 = icmp eq i32 %i139, 13
  br i1 %cmp576, label %for.body577, label %for.end580

for.body577:                                      ; preds = %for.cond573
  br label %for.inc578

for.inc578:                                       ; preds = %for.body577
  %add579 = add nsw i32 %l.27, 11
  br label %for.cond573

for.end580:                                       ; preds = %for.cond573
  %cmp581 = icmp eq i32 %l.27, %i
  br i1 %cmp581, label %if.then582, label %if.end583

if.then582:                                       ; preds = %for.end580
  br label %return

if.end583:                                        ; preds = %for.end580
  br label %if.end597

if.else584:                                       ; preds = %if.then569
  %i140 = load i32, i32* @bking_loc, align 4
  %sub585 = sub nsw i32 %i140, 11
  br label %for.cond586

for.cond586:                                      ; preds = %for.inc591, %if.else584
  %l.28 = phi i32 [ %sub585, %if.else584 ], [ %sub592, %for.inc591 ]
  %idxprom587 = sext i32 %l.28 to i64
  %arrayidx588 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom587
  %i141 = load i32, i32* %arrayidx588, align 4
  %cmp589 = icmp eq i32 %i141, 13
  br i1 %cmp589, label %for.body590, label %for.end593

for.body590:                                      ; preds = %for.cond586
  br label %for.inc591

for.inc591:                                       ; preds = %for.body590
  %sub592 = sub nsw i32 %l.28, 11
  br label %for.cond586

for.end593:                                       ; preds = %for.cond586
  %cmp594 = icmp eq i32 %l.28, %i
  br i1 %cmp594, label %if.then595, label %if.end596

if.then595:                                       ; preds = %for.end593
  br label %return

if.end596:                                        ; preds = %for.end593
  br label %if.end597

if.end597:                                        ; preds = %if.end596, %if.end583
  br label %if.end598

if.end598:                                        ; preds = %if.end597, %if.else563
  br label %if.end599

if.end599:                                        ; preds = %if.end598, %if.end562
  br label %sw.epilog840

sw.bb600:                                         ; preds = %if.else513
  %idxprom601 = sext i32 %i to i64
  %arrayidx602 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xfile to [144 x i32]*), i64 0, i64 %idxprom601
  %i142 = load i32, i32* %arrayidx602, align 4
  %i143 = load i32, i32* @bking_loc, align 4
  %idxprom603 = sext i32 %i143 to i64
  %arrayidx604 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xfile to [144 x i32]*), i64 0, i64 %idxprom603
  %i144 = load i32, i32* %arrayidx604, align 4
  %cmp605 = icmp eq i32 %i142, %i144
  br i1 %cmp605, label %if.then606, label %if.else635

if.then606:                                       ; preds = %sw.bb600
  %i145 = load i32, i32* @bking_loc, align 4
  %cmp607 = icmp slt i32 %i145, %i
  br i1 %cmp607, label %if.then608, label %if.else621

if.then608:                                       ; preds = %if.then606
  %i146 = load i32, i32* @bking_loc, align 4
  %add609 = add nsw i32 %i146, 12
  br label %for.cond610

for.cond610:                                      ; preds = %for.inc615, %if.then608
  %l.29 = phi i32 [ %add609, %if.then608 ], [ %add616, %for.inc615 ]
  %idxprom611 = sext i32 %l.29 to i64
  %arrayidx612 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom611
  %i147 = load i32, i32* %arrayidx612, align 4
  %cmp613 = icmp eq i32 %i147, 13
  br i1 %cmp613, label %for.body614, label %for.end617

for.body614:                                      ; preds = %for.cond610
  br label %for.inc615

for.inc615:                                       ; preds = %for.body614
  %add616 = add nsw i32 %l.29, 12
  br label %for.cond610

for.end617:                                       ; preds = %for.cond610
  %cmp618 = icmp eq i32 %l.29, %i
  br i1 %cmp618, label %if.then619, label %if.end620

if.then619:                                       ; preds = %for.end617
  br label %return

if.end620:                                        ; preds = %for.end617
  br label %if.end634

if.else621:                                       ; preds = %if.then606
  %i148 = load i32, i32* @bking_loc, align 4
  %sub622 = sub nsw i32 %i148, 12
  br label %for.cond623

for.cond623:                                      ; preds = %for.inc628, %if.else621
  %l.30 = phi i32 [ %sub622, %if.else621 ], [ %sub629, %for.inc628 ]
  %idxprom624 = sext i32 %l.30 to i64
  %arrayidx625 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom624
  %i149 = load i32, i32* %arrayidx625, align 4
  %cmp626 = icmp eq i32 %i149, 13
  br i1 %cmp626, label %for.body627, label %for.end630

for.body627:                                      ; preds = %for.cond623
  br label %for.inc628

for.inc628:                                       ; preds = %for.body627
  %sub629 = sub nsw i32 %l.30, 12
  br label %for.cond623

for.end630:                                       ; preds = %for.cond623
  %cmp631 = icmp eq i32 %l.30, %i
  br i1 %cmp631, label %if.then632, label %if.end633

if.then632:                                       ; preds = %for.end630
  br label %return

if.end633:                                        ; preds = %for.end630
  br label %if.end634

if.end634:                                        ; preds = %if.end633, %if.end620
  br label %if.end671

if.else635:                                       ; preds = %sw.bb600
  %idxprom636 = sext i32 %i to i64
  %arrayidx637 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xrank to [144 x i32]*), i64 0, i64 %idxprom636
  %i150 = load i32, i32* %arrayidx637, align 4
  %i151 = load i32, i32* @bking_loc, align 4
  %idxprom638 = sext i32 %i151 to i64
  %arrayidx639 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xrank to [144 x i32]*), i64 0, i64 %idxprom638
  %i152 = load i32, i32* %arrayidx639, align 4
  %cmp640 = icmp eq i32 %i150, %i152
  br i1 %cmp640, label %if.then641, label %if.end670

if.then641:                                       ; preds = %if.else635
  %i153 = load i32, i32* @bking_loc, align 4
  %cmp642 = icmp slt i32 %i153, %i
  br i1 %cmp642, label %if.then643, label %if.else656

if.then643:                                       ; preds = %if.then641
  %i154 = load i32, i32* @bking_loc, align 4
  %add644 = add nsw i32 %i154, 1
  br label %for.cond645

for.cond645:                                      ; preds = %for.inc650, %if.then643
  %l.31 = phi i32 [ %add644, %if.then643 ], [ %inc651, %for.inc650 ]
  %idxprom646 = sext i32 %l.31 to i64
  %arrayidx647 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom646
  %i155 = load i32, i32* %arrayidx647, align 4
  %cmp648 = icmp eq i32 %i155, 13
  br i1 %cmp648, label %for.body649, label %for.end652

for.body649:                                      ; preds = %for.cond645
  br label %for.inc650

for.inc650:                                       ; preds = %for.body649
  %inc651 = add nsw i32 %l.31, 1
  br label %for.cond645

for.end652:                                       ; preds = %for.cond645
  %cmp653 = icmp eq i32 %l.31, %i
  br i1 %cmp653, label %if.then654, label %if.end655

if.then654:                                       ; preds = %for.end652
  br label %return

if.end655:                                        ; preds = %for.end652
  br label %if.end669

if.else656:                                       ; preds = %if.then641
  %i156 = load i32, i32* @bking_loc, align 4
  %sub657 = sub nsw i32 %i156, 1
  br label %for.cond658

for.cond658:                                      ; preds = %for.inc663, %if.else656
  %l.32 = phi i32 [ %sub657, %if.else656 ], [ %dec664, %for.inc663 ]
  %idxprom659 = sext i32 %l.32 to i64
  %arrayidx660 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom659
  %i157 = load i32, i32* %arrayidx660, align 4
  %cmp661 = icmp eq i32 %i157, 13
  br i1 %cmp661, label %for.body662, label %for.end665

for.body662:                                      ; preds = %for.cond658
  br label %for.inc663

for.inc663:                                       ; preds = %for.body662
  %dec664 = add nsw i32 %l.32, -1
  br label %for.cond658

for.end665:                                       ; preds = %for.cond658
  %cmp666 = icmp eq i32 %l.32, %i
  br i1 %cmp666, label %if.then667, label %if.end668

if.then667:                                       ; preds = %for.end665
  br label %return

if.end668:                                        ; preds = %for.end665
  br label %if.end669

if.end669:                                        ; preds = %if.end668, %if.end655
  br label %if.end670

if.end670:                                        ; preds = %if.end669, %if.else635
  br label %if.end671

if.end671:                                        ; preds = %if.end670, %if.end634
  br label %sw.epilog840

sw.bb672:                                         ; preds = %if.else513
  br label %for.cond673

for.cond673:                                      ; preds = %for.inc682, %sw.bb672
  %l.33 = phi i32 [ 0, %sw.bb672 ], [ %inc683, %for.inc682 ]
  %cmp674 = icmp slt i32 %l.33, 8
  br i1 %cmp674, label %for.body675, label %for.end684

for.body675:                                      ; preds = %for.cond673
  %i158 = load i32, i32* @bking_loc, align 4
  %idxprom676 = sext i32 %l.33 to i64
  %arrayidx677 = getelementptr inbounds [8 x i32], [8 x i32]* @f_in_check.knight_o, i64 0, i64 %idxprom676
  %i159 = load i32, i32* %arrayidx677, align 4
  %add678 = add nsw i32 %i158, %i159
  %cmp679 = icmp eq i32 %add678, %i
  br i1 %cmp679, label %if.then680, label %if.end681

if.then680:                                       ; preds = %for.body675
  br label %return

if.end681:                                        ; preds = %for.body675
  br label %for.inc682

for.inc682:                                       ; preds = %if.end681
  %inc683 = add nsw i32 %l.33, 1
  br label %for.cond673

for.end684:                                       ; preds = %for.cond673
  br label %sw.epilog840

sw.bb685:                                         ; preds = %if.else513
  %idxprom686 = sext i32 %i to i64
  %arrayidx687 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xfile to [144 x i32]*), i64 0, i64 %idxprom686
  %i160 = load i32, i32* %arrayidx687, align 4
  %i161 = load i32, i32* @bking_loc, align 4
  %idxprom688 = sext i32 %i161 to i64
  %arrayidx689 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xfile to [144 x i32]*), i64 0, i64 %idxprom688
  %i162 = load i32, i32* %arrayidx689, align 4
  %cmp690 = icmp eq i32 %i160, %i162
  br i1 %cmp690, label %if.then691, label %if.else720

if.then691:                                       ; preds = %sw.bb685
  %i163 = load i32, i32* @bking_loc, align 4
  %cmp692 = icmp slt i32 %i163, %i
  br i1 %cmp692, label %if.then693, label %if.else706

if.then693:                                       ; preds = %if.then691
  %i164 = load i32, i32* @bking_loc, align 4
  %add694 = add nsw i32 %i164, 12
  br label %for.cond695

for.cond695:                                      ; preds = %for.inc700, %if.then693
  %l.34 = phi i32 [ %add694, %if.then693 ], [ %add701, %for.inc700 ]
  %idxprom696 = sext i32 %l.34 to i64
  %arrayidx697 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom696
  %i165 = load i32, i32* %arrayidx697, align 4
  %cmp698 = icmp eq i32 %i165, 13
  br i1 %cmp698, label %for.body699, label %for.end702

for.body699:                                      ; preds = %for.cond695
  br label %for.inc700

for.inc700:                                       ; preds = %for.body699
  %add701 = add nsw i32 %l.34, 12
  br label %for.cond695

for.end702:                                       ; preds = %for.cond695
  %cmp703 = icmp eq i32 %l.34, %i
  br i1 %cmp703, label %if.then704, label %if.end705

if.then704:                                       ; preds = %for.end702
  br label %return

if.end705:                                        ; preds = %for.end702
  br label %if.end719

if.else706:                                       ; preds = %if.then691
  %i166 = load i32, i32* @bking_loc, align 4
  %sub707 = sub nsw i32 %i166, 12
  br label %for.cond708

for.cond708:                                      ; preds = %for.inc713, %if.else706
  %l.35 = phi i32 [ %sub707, %if.else706 ], [ %sub714, %for.inc713 ]
  %idxprom709 = sext i32 %l.35 to i64
  %arrayidx710 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom709
  %i167 = load i32, i32* %arrayidx710, align 4
  %cmp711 = icmp eq i32 %i167, 13
  br i1 %cmp711, label %for.body712, label %for.end715

for.body712:                                      ; preds = %for.cond708
  br label %for.inc713

for.inc713:                                       ; preds = %for.body712
  %sub714 = sub nsw i32 %l.35, 12
  br label %for.cond708

for.end715:                                       ; preds = %for.cond708
  %cmp716 = icmp eq i32 %l.35, %i
  br i1 %cmp716, label %if.then717, label %if.end718

if.then717:                                       ; preds = %for.end715
  br label %return

if.end718:                                        ; preds = %for.end715
  br label %if.end719

if.end719:                                        ; preds = %if.end718, %if.end705
  br label %if.end828

if.else720:                                       ; preds = %sw.bb685
  %idxprom721 = sext i32 %i to i64
  %arrayidx722 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xrank to [144 x i32]*), i64 0, i64 %idxprom721
  %i168 = load i32, i32* %arrayidx722, align 4
  %i169 = load i32, i32* @bking_loc, align 4
  %idxprom723 = sext i32 %i169 to i64
  %arrayidx724 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xrank to [144 x i32]*), i64 0, i64 %idxprom723
  %i170 = load i32, i32* %arrayidx724, align 4
  %cmp725 = icmp eq i32 %i168, %i170
  br i1 %cmp725, label %if.then726, label %if.else755

if.then726:                                       ; preds = %if.else720
  %i171 = load i32, i32* @bking_loc, align 4
  %cmp727 = icmp slt i32 %i171, %i
  br i1 %cmp727, label %if.then728, label %if.else741

if.then728:                                       ; preds = %if.then726
  %i172 = load i32, i32* @bking_loc, align 4
  %add729 = add nsw i32 %i172, 1
  br label %for.cond730

for.cond730:                                      ; preds = %for.inc735, %if.then728
  %l.36 = phi i32 [ %add729, %if.then728 ], [ %add736, %for.inc735 ]
  %idxprom731 = sext i32 %l.36 to i64
  %arrayidx732 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom731
  %i173 = load i32, i32* %arrayidx732, align 4
  %cmp733 = icmp eq i32 %i173, 13
  br i1 %cmp733, label %for.body734, label %for.end737

for.body734:                                      ; preds = %for.cond730
  br label %for.inc735

for.inc735:                                       ; preds = %for.body734
  %add736 = add nsw i32 %l.36, 1
  br label %for.cond730

for.end737:                                       ; preds = %for.cond730
  %cmp738 = icmp eq i32 %l.36, %i
  br i1 %cmp738, label %if.then739, label %if.end740

if.then739:                                       ; preds = %for.end737
  br label %return

if.end740:                                        ; preds = %for.end737
  br label %if.end754

if.else741:                                       ; preds = %if.then726
  %i174 = load i32, i32* @bking_loc, align 4
  %sub742 = sub nsw i32 %i174, 1
  br label %for.cond743

for.cond743:                                      ; preds = %for.inc748, %if.else741
  %l.37 = phi i32 [ %sub742, %if.else741 ], [ %sub749, %for.inc748 ]
  %idxprom744 = sext i32 %l.37 to i64
  %arrayidx745 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom744
  %i175 = load i32, i32* %arrayidx745, align 4
  %cmp746 = icmp eq i32 %i175, 13
  br i1 %cmp746, label %for.body747, label %for.end750

for.body747:                                      ; preds = %for.cond743
  br label %for.inc748

for.inc748:                                       ; preds = %for.body747
  %sub749 = sub nsw i32 %l.37, 1
  br label %for.cond743

for.end750:                                       ; preds = %for.cond743
  %cmp751 = icmp eq i32 %l.37, %i
  br i1 %cmp751, label %if.then752, label %if.end753

if.then752:                                       ; preds = %for.end750
  br label %return

if.end753:                                        ; preds = %for.end750
  br label %if.end754

if.end754:                                        ; preds = %if.end753, %if.end740
  br label %if.end827

if.else755:                                       ; preds = %if.else720
  %idxprom756 = sext i32 %i to i64
  %arrayidx757 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xdiagl to [144 x i32]*), i64 0, i64 %idxprom756
  %i176 = load i32, i32* %arrayidx757, align 4
  %i177 = load i32, i32* @bking_loc, align 4
  %idxprom758 = sext i32 %i177 to i64
  %arrayidx759 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xdiagl to [144 x i32]*), i64 0, i64 %idxprom758
  %i178 = load i32, i32* %arrayidx759, align 4
  %cmp760 = icmp eq i32 %i176, %i178
  br i1 %cmp760, label %if.then761, label %if.else790

if.then761:                                       ; preds = %if.else755
  %i179 = load i32, i32* @bking_loc, align 4
  %cmp762 = icmp slt i32 %i179, %i
  br i1 %cmp762, label %if.then763, label %if.else776

if.then763:                                       ; preds = %if.then761
  %i180 = load i32, i32* @bking_loc, align 4
  %add764 = add nsw i32 %i180, 13
  br label %for.cond765

for.cond765:                                      ; preds = %for.inc770, %if.then763
  %l.38 = phi i32 [ %add764, %if.then763 ], [ %add771, %for.inc770 ]
  %idxprom766 = sext i32 %l.38 to i64
  %arrayidx767 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom766
  %i181 = load i32, i32* %arrayidx767, align 4
  %cmp768 = icmp eq i32 %i181, 13
  br i1 %cmp768, label %for.body769, label %for.end772

for.body769:                                      ; preds = %for.cond765
  br label %for.inc770

for.inc770:                                       ; preds = %for.body769
  %add771 = add nsw i32 %l.38, 13
  br label %for.cond765

for.end772:                                       ; preds = %for.cond765
  %cmp773 = icmp eq i32 %l.38, %i
  br i1 %cmp773, label %if.then774, label %if.end775

if.then774:                                       ; preds = %for.end772
  br label %return

if.end775:                                        ; preds = %for.end772
  br label %if.end789

if.else776:                                       ; preds = %if.then761
  %i182 = load i32, i32* @bking_loc, align 4
  %sub777 = sub nsw i32 %i182, 13
  br label %for.cond778

for.cond778:                                      ; preds = %for.inc783, %if.else776
  %l.39 = phi i32 [ %sub777, %if.else776 ], [ %sub784, %for.inc783 ]
  %idxprom779 = sext i32 %l.39 to i64
  %arrayidx780 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom779
  %i183 = load i32, i32* %arrayidx780, align 4
  %cmp781 = icmp eq i32 %i183, 13
  br i1 %cmp781, label %for.body782, label %for.end785

for.body782:                                      ; preds = %for.cond778
  br label %for.inc783

for.inc783:                                       ; preds = %for.body782
  %sub784 = sub nsw i32 %l.39, 13
  br label %for.cond778

for.end785:                                       ; preds = %for.cond778
  %cmp786 = icmp eq i32 %l.39, %i
  br i1 %cmp786, label %if.then787, label %if.end788

if.then787:                                       ; preds = %for.end785
  br label %return

if.end788:                                        ; preds = %for.end785
  br label %if.end789

if.end789:                                        ; preds = %if.end788, %if.end775
  br label %if.end826

if.else790:                                       ; preds = %if.else755
  %idxprom791 = sext i32 %i to i64
  %arrayidx792 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xdiagr to [144 x i32]*), i64 0, i64 %idxprom791
  %i184 = load i32, i32* %arrayidx792, align 4
  %i185 = load i32, i32* @bking_loc, align 4
  %idxprom793 = sext i32 %i185 to i64
  %arrayidx794 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xdiagr to [144 x i32]*), i64 0, i64 %idxprom793
  %i186 = load i32, i32* %arrayidx794, align 4
  %cmp795 = icmp eq i32 %i184, %i186
  br i1 %cmp795, label %if.then796, label %if.end825

if.then796:                                       ; preds = %if.else790
  %i187 = load i32, i32* @bking_loc, align 4
  %cmp797 = icmp slt i32 %i187, %i
  br i1 %cmp797, label %if.then798, label %if.else811

if.then798:                                       ; preds = %if.then796
  %i188 = load i32, i32* @bking_loc, align 4
  %add799 = add nsw i32 %i188, 11
  br label %for.cond800

for.cond800:                                      ; preds = %for.inc805, %if.then798
  %l.40 = phi i32 [ %add799, %if.then798 ], [ %add806, %for.inc805 ]
  %idxprom801 = sext i32 %l.40 to i64
  %arrayidx802 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom801
  %i189 = load i32, i32* %arrayidx802, align 4
  %cmp803 = icmp eq i32 %i189, 13
  br i1 %cmp803, label %for.body804, label %for.end807

for.body804:                                      ; preds = %for.cond800
  br label %for.inc805

for.inc805:                                       ; preds = %for.body804
  %add806 = add nsw i32 %l.40, 11
  br label %for.cond800

for.end807:                                       ; preds = %for.cond800
  %cmp808 = icmp eq i32 %l.40, %i
  br i1 %cmp808, label %if.then809, label %if.end810

if.then809:                                       ; preds = %for.end807
  br label %return

if.end810:                                        ; preds = %for.end807
  br label %if.end824

if.else811:                                       ; preds = %if.then796
  %i190 = load i32, i32* @bking_loc, align 4
  %sub812 = sub nsw i32 %i190, 11
  br label %for.cond813

for.cond813:                                      ; preds = %for.inc818, %if.else811
  %l.41 = phi i32 [ %sub812, %if.else811 ], [ %sub819, %for.inc818 ]
  %idxprom814 = sext i32 %l.41 to i64
  %arrayidx815 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom814
  %i191 = load i32, i32* %arrayidx815, align 4
  %cmp816 = icmp eq i32 %i191, 13
  br i1 %cmp816, label %for.body817, label %for.end820

for.body817:                                      ; preds = %for.cond813
  br label %for.inc818

for.inc818:                                       ; preds = %for.body817
  %sub819 = sub nsw i32 %l.41, 11
  br label %for.cond813

for.end820:                                       ; preds = %for.cond813
  %cmp821 = icmp eq i32 %l.41, %i
  br i1 %cmp821, label %if.then822, label %if.end823

if.then822:                                       ; preds = %for.end820
  br label %return

if.end823:                                        ; preds = %for.end820
  br label %if.end824

if.end824:                                        ; preds = %if.end823, %if.end810
  br label %if.end825

if.end825:                                        ; preds = %if.end824, %if.else790
  br label %if.end826

if.end826:                                        ; preds = %if.end825, %if.end789
  br label %if.end827

if.end827:                                        ; preds = %if.end826, %if.end754
  br label %if.end828

if.end828:                                        ; preds = %if.end827, %if.end719
  br label %sw.epilog840

sw.bb829:                                         ; preds = %if.else513
  %idxprom830 = sext i32 %m to i64
  %arrayidx831 = getelementptr inbounds %struct.move_s, %struct.move_s* %moves, i64 %idxprom830
  %castled832 = getelementptr inbounds %struct.move_s, %struct.move_s* %arrayidx831, i32 0, i32 4
  %i192 = load i32, i32* %castled832, align 4
  %tobool833 = icmp ne i32 %i192, 0
  br i1 %tobool833, label %if.then834, label %if.end839

if.then834:                                       ; preds = %sw.bb829
  %i193 = load i32, i32* @bking_loc, align 4
  %call835 = call i32 @is_attacked(i32 %i193, i32 1)
  %tobool836 = icmp ne i32 %call835, 0
  br i1 %tobool836, label %if.then837, label %if.else838

if.then837:                                       ; preds = %if.then834
  br label %return

if.else838:                                       ; preds = %if.then834
  br label %return

if.end839:                                        ; preds = %sw.bb829
  br label %sw.epilog840

sw.epilog840:                                     ; preds = %if.end839, %if.end828, %for.end684, %if.end671, %if.end599, %if.end527, %if.else513
  %cmp841 = icmp eq i32 %i1, 0
  br i1 %cmp841, label %if.then842, label %if.end843

if.then842:                                       ; preds = %sw.epilog840
  br label %return

if.end843:                                        ; preds = %sw.epilog840
  %idxprom844 = sext i32 %i1 to i64
  %arrayidx845 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xrank to [144 x i32]*), i64 0, i64 %idxprom844
  %i194 = load i32, i32* %arrayidx845, align 4
  %i195 = load i32, i32* @bking_loc, align 4
  %idxprom846 = sext i32 %i195 to i64
  %arrayidx847 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xrank to [144 x i32]*), i64 0, i64 %idxprom846
  %i196 = load i32, i32* %arrayidx847, align 4
  %cmp848 = icmp eq i32 %i194, %i196
  br i1 %cmp848, label %if.then849, label %if.else890

if.then849:                                       ; preds = %if.end843
  %i197 = load i32, i32* @bking_loc, align 4
  %cmp850 = icmp sgt i32 %i197, %i1
  br i1 %cmp850, label %if.then851, label %if.else870

if.then851:                                       ; preds = %if.then849
  %i198 = load i32, i32* @bking_loc, align 4
  %sub852 = sub nsw i32 %i198, 1
  br label %for.cond853

for.cond853:                                      ; preds = %for.inc858, %if.then851
  %l.42 = phi i32 [ %sub852, %if.then851 ], [ %dec859, %for.inc858 ]
  %idxprom854 = sext i32 %l.42 to i64
  %arrayidx855 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom854
  %i199 = load i32, i32* %arrayidx855, align 4
  %cmp856 = icmp eq i32 %i199, 13
  br i1 %cmp856, label %for.body857, label %for.end860

for.body857:                                      ; preds = %for.cond853
  br label %for.inc858

for.inc858:                                       ; preds = %for.body857
  %dec859 = add nsw i32 %l.42, -1
  br label %for.cond853

for.end860:                                       ; preds = %for.cond853
  %idxprom861 = sext i32 %l.42 to i64
  %arrayidx862 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom861
  %i200 = load i32, i32* %arrayidx862, align 4
  %cmp863 = icmp eq i32 %i200, 7
  br i1 %cmp863, label %if.then868, label %lor.lhs.false864

lor.lhs.false864:                                 ; preds = %for.end860
  %idxprom865 = sext i32 %l.42 to i64
  %arrayidx866 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom865
  %i201 = load i32, i32* %arrayidx866, align 4
  %cmp867 = icmp eq i32 %i201, 9
  br i1 %cmp867, label %if.then868, label %if.end869

if.then868:                                       ; preds = %lor.lhs.false864, %for.end860
  br label %return

if.end869:                                        ; preds = %lor.lhs.false864
  br label %if.end889

if.else870:                                       ; preds = %if.then849
  %i202 = load i32, i32* @bking_loc, align 4
  %add871 = add nsw i32 %i202, 1
  br label %for.cond872

for.cond872:                                      ; preds = %for.inc877, %if.else870
  %l.43 = phi i32 [ %add871, %if.else870 ], [ %inc878, %for.inc877 ]
  %idxprom873 = sext i32 %l.43 to i64
  %arrayidx874 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom873
  %i203 = load i32, i32* %arrayidx874, align 4
  %cmp875 = icmp eq i32 %i203, 13
  br i1 %cmp875, label %for.body876, label %for.end879

for.body876:                                      ; preds = %for.cond872
  br label %for.inc877

for.inc877:                                       ; preds = %for.body876
  %inc878 = add nsw i32 %l.43, 1
  br label %for.cond872

for.end879:                                       ; preds = %for.cond872
  %idxprom880 = sext i32 %l.43 to i64
  %arrayidx881 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom880
  %i204 = load i32, i32* %arrayidx881, align 4
  %cmp882 = icmp eq i32 %i204, 7
  br i1 %cmp882, label %if.then887, label %lor.lhs.false883

lor.lhs.false883:                                 ; preds = %for.end879
  %idxprom884 = sext i32 %l.43 to i64
  %arrayidx885 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom884
  %i205 = load i32, i32* %arrayidx885, align 4
  %cmp886 = icmp eq i32 %i205, 9
  br i1 %cmp886, label %if.then887, label %if.end888

if.then887:                                       ; preds = %lor.lhs.false883, %for.end879
  br label %return

if.end888:                                        ; preds = %lor.lhs.false883
  br label %if.end889

if.end889:                                        ; preds = %if.end888, %if.end869
  br label %if.end1034

if.else890:                                       ; preds = %if.end843
  %idxprom891 = sext i32 %i1 to i64
  %arrayidx892 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xfile to [144 x i32]*), i64 0, i64 %idxprom891
  %i206 = load i32, i32* %arrayidx892, align 4
  %i207 = load i32, i32* @bking_loc, align 4
  %idxprom893 = sext i32 %i207 to i64
  %arrayidx894 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xfile to [144 x i32]*), i64 0, i64 %idxprom893
  %i208 = load i32, i32* %arrayidx894, align 4
  %cmp895 = icmp eq i32 %i206, %i208
  br i1 %cmp895, label %if.then896, label %if.else937

if.then896:                                       ; preds = %if.else890
  %i209 = load i32, i32* @bking_loc, align 4
  %cmp897 = icmp sgt i32 %i209, %i1
  br i1 %cmp897, label %if.then898, label %if.else917

if.then898:                                       ; preds = %if.then896
  %i210 = load i32, i32* @bking_loc, align 4
  %sub899 = sub nsw i32 %i210, 12
  br label %for.cond900

for.cond900:                                      ; preds = %for.inc905, %if.then898
  %l.44 = phi i32 [ %sub899, %if.then898 ], [ %sub906, %for.inc905 ]
  %idxprom901 = sext i32 %l.44 to i64
  %arrayidx902 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom901
  %i211 = load i32, i32* %arrayidx902, align 4
  %cmp903 = icmp eq i32 %i211, 13
  br i1 %cmp903, label %for.body904, label %for.end907

for.body904:                                      ; preds = %for.cond900
  br label %for.inc905

for.inc905:                                       ; preds = %for.body904
  %sub906 = sub nsw i32 %l.44, 12
  br label %for.cond900

for.end907:                                       ; preds = %for.cond900
  %idxprom908 = sext i32 %l.44 to i64
  %arrayidx909 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom908
  %i212 = load i32, i32* %arrayidx909, align 4
  %cmp910 = icmp eq i32 %i212, 7
  br i1 %cmp910, label %if.then915, label %lor.lhs.false911

lor.lhs.false911:                                 ; preds = %for.end907
  %idxprom912 = sext i32 %l.44 to i64
  %arrayidx913 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom912
  %i213 = load i32, i32* %arrayidx913, align 4
  %cmp914 = icmp eq i32 %i213, 9
  br i1 %cmp914, label %if.then915, label %if.end916

if.then915:                                       ; preds = %lor.lhs.false911, %for.end907
  br label %return

if.end916:                                        ; preds = %lor.lhs.false911
  br label %if.end936

if.else917:                                       ; preds = %if.then896
  %i214 = load i32, i32* @bking_loc, align 4
  %add918 = add nsw i32 %i214, 12
  br label %for.cond919

for.cond919:                                      ; preds = %for.inc924, %if.else917
  %l.45 = phi i32 [ %add918, %if.else917 ], [ %add925, %for.inc924 ]
  %idxprom920 = sext i32 %l.45 to i64
  %arrayidx921 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom920
  %i215 = load i32, i32* %arrayidx921, align 4
  %cmp922 = icmp eq i32 %i215, 13
  br i1 %cmp922, label %for.body923, label %for.end926

for.body923:                                      ; preds = %for.cond919
  br label %for.inc924

for.inc924:                                       ; preds = %for.body923
  %add925 = add nsw i32 %l.45, 12
  br label %for.cond919

for.end926:                                       ; preds = %for.cond919
  %idxprom927 = sext i32 %l.45 to i64
  %arrayidx928 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom927
  %i216 = load i32, i32* %arrayidx928, align 4
  %cmp929 = icmp eq i32 %i216, 7
  br i1 %cmp929, label %if.then934, label %lor.lhs.false930

lor.lhs.false930:                                 ; preds = %for.end926
  %idxprom931 = sext i32 %l.45 to i64
  %arrayidx932 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom931
  %i217 = load i32, i32* %arrayidx932, align 4
  %cmp933 = icmp eq i32 %i217, 9
  br i1 %cmp933, label %if.then934, label %if.end935

if.then934:                                       ; preds = %lor.lhs.false930, %for.end926
  br label %return

if.end935:                                        ; preds = %lor.lhs.false930
  br label %if.end936

if.end936:                                        ; preds = %if.end935, %if.end916
  br label %if.end1033

if.else937:                                       ; preds = %if.else890
  %idxprom938 = sext i32 %i1 to i64
  %arrayidx939 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xdiagl to [144 x i32]*), i64 0, i64 %idxprom938
  %i218 = load i32, i32* %arrayidx939, align 4
  %i219 = load i32, i32* @bking_loc, align 4
  %idxprom940 = sext i32 %i219 to i64
  %arrayidx941 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xdiagl to [144 x i32]*), i64 0, i64 %idxprom940
  %i220 = load i32, i32* %arrayidx941, align 4
  %cmp942 = icmp eq i32 %i218, %i220
  br i1 %cmp942, label %if.then943, label %if.else984

if.then943:                                       ; preds = %if.else937
  %i221 = load i32, i32* @bking_loc, align 4
  %cmp944 = icmp sgt i32 %i221, %i1
  br i1 %cmp944, label %if.then945, label %if.else964

if.then945:                                       ; preds = %if.then943
  %i222 = load i32, i32* @bking_loc, align 4
  %sub946 = sub nsw i32 %i222, 13
  br label %for.cond947

for.cond947:                                      ; preds = %for.inc952, %if.then945
  %l.46 = phi i32 [ %sub946, %if.then945 ], [ %sub953, %for.inc952 ]
  %idxprom948 = sext i32 %l.46 to i64
  %arrayidx949 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom948
  %i223 = load i32, i32* %arrayidx949, align 4
  %cmp950 = icmp eq i32 %i223, 13
  br i1 %cmp950, label %for.body951, label %for.end954

for.body951:                                      ; preds = %for.cond947
  br label %for.inc952

for.inc952:                                       ; preds = %for.body951
  %sub953 = sub nsw i32 %l.46, 13
  br label %for.cond947

for.end954:                                       ; preds = %for.cond947
  %idxprom955 = sext i32 %l.46 to i64
  %arrayidx956 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom955
  %i224 = load i32, i32* %arrayidx956, align 4
  %cmp957 = icmp eq i32 %i224, 11
  br i1 %cmp957, label %if.then962, label %lor.lhs.false958

lor.lhs.false958:                                 ; preds = %for.end954
  %idxprom959 = sext i32 %l.46 to i64
  %arrayidx960 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom959
  %i225 = load i32, i32* %arrayidx960, align 4
  %cmp961 = icmp eq i32 %i225, 9
  br i1 %cmp961, label %if.then962, label %if.end963

if.then962:                                       ; preds = %lor.lhs.false958, %for.end954
  br label %return

if.end963:                                        ; preds = %lor.lhs.false958
  br label %if.end983

if.else964:                                       ; preds = %if.then943
  %i226 = load i32, i32* @bking_loc, align 4
  %add965 = add nsw i32 %i226, 13
  br label %for.cond966

for.cond966:                                      ; preds = %for.inc971, %if.else964
  %l.47 = phi i32 [ %add965, %if.else964 ], [ %add972, %for.inc971 ]
  %idxprom967 = sext i32 %l.47 to i64
  %arrayidx968 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom967
  %i227 = load i32, i32* %arrayidx968, align 4
  %cmp969 = icmp eq i32 %i227, 13
  br i1 %cmp969, label %for.body970, label %for.end973

for.body970:                                      ; preds = %for.cond966
  br label %for.inc971

for.inc971:                                       ; preds = %for.body970
  %add972 = add nsw i32 %l.47, 13
  br label %for.cond966

for.end973:                                       ; preds = %for.cond966
  %idxprom974 = sext i32 %l.47 to i64
  %arrayidx975 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom974
  %i228 = load i32, i32* %arrayidx975, align 4
  %cmp976 = icmp eq i32 %i228, 11
  br i1 %cmp976, label %if.then981, label %lor.lhs.false977

lor.lhs.false977:                                 ; preds = %for.end973
  %idxprom978 = sext i32 %l.47 to i64
  %arrayidx979 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom978
  %i229 = load i32, i32* %arrayidx979, align 4
  %cmp980 = icmp eq i32 %i229, 9
  br i1 %cmp980, label %if.then981, label %if.end982

if.then981:                                       ; preds = %lor.lhs.false977, %for.end973
  br label %return

if.end982:                                        ; preds = %lor.lhs.false977
  br label %if.end983

if.end983:                                        ; preds = %if.end982, %if.end963
  br label %if.end1032

if.else984:                                       ; preds = %if.else937
  %idxprom985 = sext i32 %i1 to i64
  %arrayidx986 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xdiagr to [144 x i32]*), i64 0, i64 %idxprom985
  %i230 = load i32, i32* %arrayidx986, align 4
  %i231 = load i32, i32* @bking_loc, align 4
  %idxprom987 = sext i32 %i231 to i64
  %arrayidx988 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xdiagr to [144 x i32]*), i64 0, i64 %idxprom987
  %i232 = load i32, i32* %arrayidx988, align 4
  %cmp989 = icmp eq i32 %i230, %i232
  br i1 %cmp989, label %if.then990, label %if.end1031

if.then990:                                       ; preds = %if.else984
  %i233 = load i32, i32* @bking_loc, align 4
  %cmp991 = icmp sgt i32 %i233, %i1
  br i1 %cmp991, label %if.then992, label %if.else1011

if.then992:                                       ; preds = %if.then990
  %i234 = load i32, i32* @bking_loc, align 4
  %sub993 = sub nsw i32 %i234, 11
  br label %for.cond994

for.cond994:                                      ; preds = %for.inc999, %if.then992
  %l.48 = phi i32 [ %sub993, %if.then992 ], [ %sub1000, %for.inc999 ]
  %idxprom995 = sext i32 %l.48 to i64
  %arrayidx996 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom995
  %i235 = load i32, i32* %arrayidx996, align 4
  %cmp997 = icmp eq i32 %i235, 13
  br i1 %cmp997, label %for.body998, label %for.end1001

for.body998:                                      ; preds = %for.cond994
  br label %for.inc999

for.inc999:                                       ; preds = %for.body998
  %sub1000 = sub nsw i32 %l.48, 11
  br label %for.cond994

for.end1001:                                      ; preds = %for.cond994
  %idxprom1002 = sext i32 %l.48 to i64
  %arrayidx1003 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom1002
  %i236 = load i32, i32* %arrayidx1003, align 4
  %cmp1004 = icmp eq i32 %i236, 11
  br i1 %cmp1004, label %if.then1009, label %lor.lhs.false1005

lor.lhs.false1005:                                ; preds = %for.end1001
  %idxprom1006 = sext i32 %l.48 to i64
  %arrayidx1007 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom1006
  %i237 = load i32, i32* %arrayidx1007, align 4
  %cmp1008 = icmp eq i32 %i237, 9
  br i1 %cmp1008, label %if.then1009, label %if.end1010

if.then1009:                                      ; preds = %lor.lhs.false1005, %for.end1001
  br label %return

if.end1010:                                       ; preds = %lor.lhs.false1005
  br label %if.end1030

if.else1011:                                      ; preds = %if.then990
  %i238 = load i32, i32* @bking_loc, align 4
  %add1012 = add nsw i32 %i238, 11
  br label %for.cond1013

for.cond1013:                                     ; preds = %for.inc1018, %if.else1011
  %l.49 = phi i32 [ %add1012, %if.else1011 ], [ %add1019, %for.inc1018 ]
  %idxprom1014 = sext i32 %l.49 to i64
  %arrayidx1015 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom1014
  %i239 = load i32, i32* %arrayidx1015, align 4
  %cmp1016 = icmp eq i32 %i239, 13
  br i1 %cmp1016, label %for.body1017, label %for.end1020

for.body1017:                                     ; preds = %for.cond1013
  br label %for.inc1018

for.inc1018:                                      ; preds = %for.body1017
  %add1019 = add nsw i32 %l.49, 11
  br label %for.cond1013

for.end1020:                                      ; preds = %for.cond1013
  %idxprom1021 = sext i32 %l.49 to i64
  %arrayidx1022 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom1021
  %i240 = load i32, i32* %arrayidx1022, align 4
  %cmp1023 = icmp eq i32 %i240, 11
  br i1 %cmp1023, label %if.then1028, label %lor.lhs.false1024

lor.lhs.false1024:                                ; preds = %for.end1020
  %idxprom1025 = sext i32 %l.49 to i64
  %arrayidx1026 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom1025
  %i241 = load i32, i32* %arrayidx1026, align 4
  %cmp1027 = icmp eq i32 %i241, 9
  br i1 %cmp1027, label %if.then1028, label %if.end1029

if.then1028:                                      ; preds = %lor.lhs.false1024, %for.end1020
  br label %return

if.end1029:                                       ; preds = %lor.lhs.false1024
  br label %if.end1030

if.end1030:                                       ; preds = %if.end1029, %if.end1010
  br label %if.end1031

if.end1031:                                       ; preds = %if.end1030, %if.else984
  br label %if.end1032

if.end1032:                                       ; preds = %if.end1031, %if.end983
  br label %if.end1033

if.end1033:                                       ; preds = %if.end1032, %if.end936
  br label %if.end1034

if.end1034:                                       ; preds = %if.end1033, %if.end889
  br label %return

return:                                           ; preds = %if.end1034, %if.then1028, %if.then1009, %if.then981, %if.then962, %if.then934, %if.then915, %if.then887, %if.then868, %if.then842, %if.else838, %if.then837, %if.then822, %if.then809, %if.then787, %if.then774, %if.then752, %if.then739, %if.then717, %if.then704, %if.then680, %if.then667, %if.then654, %if.then632, %if.then619, %if.then595, %if.then582, %if.then560, %if.then547, %if.then526, %if.end512, %if.then506, %if.then487, %if.then459, %if.then440, %if.then412, %if.then393, %if.then365, %if.then346, %if.then320, %if.else317, %if.then316, %if.then304, %if.then291, %if.then269, %if.then256, %if.then234, %if.then221, %if.then199, %if.then186, %if.then162, %if.then149, %if.then137, %if.then116, %if.then103, %if.then79, %if.then66, %if.then44, %if.then32, %if.then16, %if.then
  %retval.0 = phi i32 [ 0, %if.then ], [ 0, %if.then320 ], [ 1, %if.then346 ], [ 0, %if.end512 ], [ 1, %if.then365 ], [ 1, %if.then393 ], [ 1, %if.then412 ], [ 1, %if.then440 ], [ 1, %if.then459 ], [ 1, %if.then487 ], [ 1, %if.then506 ], [ 1, %if.then316 ], [ 0, %if.else317 ], [ 1, %if.then186 ], [ 1, %if.then199 ], [ 1, %if.then221 ], [ 1, %if.then234 ], [ 1, %if.then256 ], [ 1, %if.then269 ], [ 1, %if.then291 ], [ 1, %if.then304 ], [ 1, %if.then162 ], [ 1, %if.then103 ], [ 1, %if.then116 ], [ 1, %if.then137 ], [ 1, %if.then149 ], [ 1, %if.then32 ], [ 1, %if.then44 ], [ 1, %if.then66 ], [ 1, %if.then79 ], [ 1, %if.then16 ], [ 0, %if.then842 ], [ 1, %if.then868 ], [ 0, %if.end1034 ], [ 1, %if.then887 ], [ 1, %if.then915 ], [ 1, %if.then934 ], [ 1, %if.then962 ], [ 1, %if.then981 ], [ 1, %if.then1009 ], [ 1, %if.then1028 ], [ 1, %if.then837 ], [ 0, %if.else838 ], [ 1, %if.then704 ], [ 1, %if.then717 ], [ 1, %if.then739 ], [ 1, %if.then752 ], [ 1, %if.then774 ], [ 1, %if.then787 ], [ 1, %if.then809 ], [ 1, %if.then822 ], [ 1, %if.then680 ], [ 1, %if.then619 ], [ 1, %if.then632 ], [ 1, %if.then654 ], [ 1, %if.then667 ], [ 1, %if.then547 ], [ 1, %if.then560 ], [ 1, %if.then582 ], [ 1, %if.then595 ], [ 1, %if.then526 ]
  ret i32 %retval.0
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @extended_in_check() #0 {
entry:
  %i = load i32, i32* @Variant, align 4
  %cmp = icmp eq i32 %i, 3
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %return

if.end:                                           ; preds = %entry
  %i1 = load i32, i32* @white_to_move, align 4
  %cmp1 = icmp eq i32 %i1, 1
  br i1 %cmp1, label %if.then2, label %if.else81

if.then2:                                         ; preds = %if.end
  %i2 = load i32, i32* @wking_loc, align 4
  %sub = sub nsw i32 %i2, 12
  %idxprom = sext i32 %sub to i64
  %arrayidx = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom
  %i3 = load i32, i32* %arrayidx, align 4
  %cmp3 = icmp eq i32 %i3, 8
  br i1 %cmp3, label %if.then5, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.then2
  %cmp4 = icmp eq i32 %i3, 10
  br i1 %cmp4, label %if.then5, label %if.end6

if.then5:                                         ; preds = %lor.lhs.false, %if.then2
  br label %return

if.end6:                                          ; preds = %lor.lhs.false
  %i4 = load i32, i32* @wking_loc, align 4
  %sub7 = sub nsw i32 %i4, 1
  %idxprom8 = sext i32 %sub7 to i64
  %arrayidx9 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom8
  %i5 = load i32, i32* %arrayidx9, align 4
  %cmp10 = icmp eq i32 %i5, 8
  br i1 %cmp10, label %if.then13, label %lor.lhs.false11

lor.lhs.false11:                                  ; preds = %if.end6
  %cmp12 = icmp eq i32 %i5, 10
  br i1 %cmp12, label %if.then13, label %if.end14

if.then13:                                        ; preds = %lor.lhs.false11, %if.end6
  br label %return

if.end14:                                         ; preds = %lor.lhs.false11
  %i6 = load i32, i32* @wking_loc, align 4
  %add = add nsw i32 %i6, 1
  %idxprom15 = sext i32 %add to i64
  %arrayidx16 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom15
  %i7 = load i32, i32* %arrayidx16, align 4
  %cmp17 = icmp eq i32 %i7, 8
  br i1 %cmp17, label %if.then20, label %lor.lhs.false18

lor.lhs.false18:                                  ; preds = %if.end14
  %cmp19 = icmp eq i32 %i7, 10
  br i1 %cmp19, label %if.then20, label %if.end21

if.then20:                                        ; preds = %lor.lhs.false18, %if.end14
  br label %return

if.end21:                                         ; preds = %lor.lhs.false18
  %i8 = load i32, i32* @wking_loc, align 4
  %add22 = add nsw i32 %i8, 12
  %idxprom23 = sext i32 %add22 to i64
  %arrayidx24 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom23
  %i9 = load i32, i32* %arrayidx24, align 4
  %cmp25 = icmp eq i32 %i9, 8
  br i1 %cmp25, label %if.then28, label %lor.lhs.false26

lor.lhs.false26:                                  ; preds = %if.end21
  %cmp27 = icmp eq i32 %i9, 10
  br i1 %cmp27, label %if.then28, label %if.end29

if.then28:                                        ; preds = %lor.lhs.false26, %if.end21
  br label %return

if.end29:                                         ; preds = %lor.lhs.false26
  %i10 = load i32, i32* @wking_loc, align 4
  %add30 = add nsw i32 %i10, 13
  %idxprom31 = sext i32 %add30 to i64
  %arrayidx32 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom31
  %i11 = load i32, i32* %arrayidx32, align 4
  %cmp33 = icmp eq i32 %i11, 12
  br i1 %cmp33, label %if.then38, label %lor.lhs.false34

lor.lhs.false34:                                  ; preds = %if.end29
  %cmp35 = icmp eq i32 %i11, 10
  br i1 %cmp35, label %if.then38, label %lor.lhs.false36

lor.lhs.false36:                                  ; preds = %lor.lhs.false34
  %cmp37 = icmp eq i32 %i11, 2
  br i1 %cmp37, label %if.then38, label %if.end39

if.then38:                                        ; preds = %lor.lhs.false36, %lor.lhs.false34, %if.end29
  br label %return

if.end39:                                         ; preds = %lor.lhs.false36
  %i12 = load i32, i32* @wking_loc, align 4
  %add40 = add nsw i32 %i12, 11
  %idxprom41 = sext i32 %add40 to i64
  %arrayidx42 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom41
  %i13 = load i32, i32* %arrayidx42, align 4
  %cmp43 = icmp eq i32 %i13, 12
  br i1 %cmp43, label %if.then48, label %lor.lhs.false44

lor.lhs.false44:                                  ; preds = %if.end39
  %cmp45 = icmp eq i32 %i13, 10
  br i1 %cmp45, label %if.then48, label %lor.lhs.false46

lor.lhs.false46:                                  ; preds = %lor.lhs.false44
  %cmp47 = icmp eq i32 %i13, 2
  br i1 %cmp47, label %if.then48, label %if.end49

if.then48:                                        ; preds = %lor.lhs.false46, %lor.lhs.false44, %if.end39
  br label %return

if.end49:                                         ; preds = %lor.lhs.false46
  %i14 = load i32, i32* @wking_loc, align 4
  %sub50 = sub nsw i32 %i14, 11
  %idxprom51 = sext i32 %sub50 to i64
  %arrayidx52 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom51
  %i15 = load i32, i32* %arrayidx52, align 4
  %cmp53 = icmp eq i32 %i15, 12
  br i1 %cmp53, label %if.then56, label %lor.lhs.false54

lor.lhs.false54:                                  ; preds = %if.end49
  %cmp55 = icmp eq i32 %i15, 10
  br i1 %cmp55, label %if.then56, label %if.end57

if.then56:                                        ; preds = %lor.lhs.false54, %if.end49
  br label %return

if.end57:                                         ; preds = %lor.lhs.false54
  %i16 = load i32, i32* @wking_loc, align 4
  %sub58 = sub nsw i32 %i16, 13
  %idxprom59 = sext i32 %sub58 to i64
  %arrayidx60 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom59
  %i17 = load i32, i32* %arrayidx60, align 4
  %cmp61 = icmp eq i32 %i17, 12
  br i1 %cmp61, label %if.then64, label %lor.lhs.false62

lor.lhs.false62:                                  ; preds = %if.end57
  %cmp63 = icmp eq i32 %i17, 10
  br i1 %cmp63, label %if.then64, label %if.end65

if.then64:                                        ; preds = %lor.lhs.false62, %if.end57
  br label %return

if.end65:                                         ; preds = %lor.lhs.false62
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end65
  %sq.0 = phi i32 [ 0, %if.end65 ], [ %inc, %for.inc ]
  %cmp66 = icmp slt i32 %sq.0, 8
  br i1 %cmp66, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %i18 = load i32, i32* @wking_loc, align 4
  %idxprom67 = sext i32 %sq.0 to i64
  %arrayidx68 = getelementptr inbounds [8 x i32], [8 x i32]* @extended_in_check.knight_o, i64 0, i64 %idxprom67
  %i19 = load i32, i32* %arrayidx68, align 4
  %add69 = add nsw i32 %i18, %i19
  %idxprom70 = sext i32 %add69 to i64
  %arrayidx71 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom70
  %i20 = load i32, i32* %arrayidx71, align 4
  %cmp72 = icmp eq i32 %i20, 4
  br i1 %cmp72, label %if.then73, label %if.end74

if.then73:                                        ; preds = %for.body
  br label %return

if.end74:                                         ; preds = %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end74
  %inc = add nsw i32 %sq.0, 1
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %i21 = load i32, i32* @wking_loc, align 4
  %call = call i32 @is_attacked(i32 %i21, i32 0)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then75, label %if.end80

if.then75:                                        ; preds = %for.end
  %i22 = load i32, i32* @Variant, align 4
  %cmp76 = icmp eq i32 %i22, 2
  br i1 %cmp76, label %if.then79, label %lor.lhs.false77

lor.lhs.false77:                                  ; preds = %if.then75
  %i23 = load i32, i32* @Variant, align 4
  %cmp78 = icmp eq i32 %i23, 4
  br i1 %cmp78, label %if.then79, label %if.else

if.then79:                                        ; preds = %lor.lhs.false77, %if.then75
  br label %return

if.else:                                          ; preds = %lor.lhs.false77
  br label %return

if.end80:                                         ; preds = %for.end
  br label %if.end173

if.else81:                                        ; preds = %if.end
  %i24 = load i32, i32* @bking_loc, align 4
  %sub82 = sub nsw i32 %i24, 12
  %idxprom83 = sext i32 %sub82 to i64
  %arrayidx84 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom83
  %i25 = load i32, i32* %arrayidx84, align 4
  %cmp85 = icmp eq i32 %i25, 7
  br i1 %cmp85, label %if.then88, label %lor.lhs.false86

lor.lhs.false86:                                  ; preds = %if.else81
  %cmp87 = icmp eq i32 %i25, 9
  br i1 %cmp87, label %if.then88, label %if.end89

if.then88:                                        ; preds = %lor.lhs.false86, %if.else81
  br label %return

if.end89:                                         ; preds = %lor.lhs.false86
  %i26 = load i32, i32* @bking_loc, align 4
  %sub90 = sub nsw i32 %i26, 1
  %idxprom91 = sext i32 %sub90 to i64
  %arrayidx92 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom91
  %i27 = load i32, i32* %arrayidx92, align 4
  %cmp93 = icmp eq i32 %i27, 7
  br i1 %cmp93, label %if.then96, label %lor.lhs.false94

lor.lhs.false94:                                  ; preds = %if.end89
  %cmp95 = icmp eq i32 %i27, 9
  br i1 %cmp95, label %if.then96, label %if.end97

if.then96:                                        ; preds = %lor.lhs.false94, %if.end89
  br label %return

if.end97:                                         ; preds = %lor.lhs.false94
  %i28 = load i32, i32* @bking_loc, align 4
  %add98 = add nsw i32 %i28, 1
  %idxprom99 = sext i32 %add98 to i64
  %arrayidx100 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom99
  %i29 = load i32, i32* %arrayidx100, align 4
  %cmp101 = icmp eq i32 %i29, 7
  br i1 %cmp101, label %if.then104, label %lor.lhs.false102

lor.lhs.false102:                                 ; preds = %if.end97
  %cmp103 = icmp eq i32 %i29, 9
  br i1 %cmp103, label %if.then104, label %if.end105

if.then104:                                       ; preds = %lor.lhs.false102, %if.end97
  br label %return

if.end105:                                        ; preds = %lor.lhs.false102
  %i30 = load i32, i32* @bking_loc, align 4
  %add106 = add nsw i32 %i30, 12
  %idxprom107 = sext i32 %add106 to i64
  %arrayidx108 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom107
  %i31 = load i32, i32* %arrayidx108, align 4
  %cmp109 = icmp eq i32 %i31, 7
  br i1 %cmp109, label %if.then112, label %lor.lhs.false110

lor.lhs.false110:                                 ; preds = %if.end105
  %cmp111 = icmp eq i32 %i31, 9
  br i1 %cmp111, label %if.then112, label %if.end113

if.then112:                                       ; preds = %lor.lhs.false110, %if.end105
  br label %return

if.end113:                                        ; preds = %lor.lhs.false110
  %i32 = load i32, i32* @bking_loc, align 4
  %sub114 = sub nsw i32 %i32, 13
  %idxprom115 = sext i32 %sub114 to i64
  %arrayidx116 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom115
  %i33 = load i32, i32* %arrayidx116, align 4
  %cmp117 = icmp eq i32 %i33, 11
  br i1 %cmp117, label %if.then122, label %lor.lhs.false118

lor.lhs.false118:                                 ; preds = %if.end113
  %cmp119 = icmp eq i32 %i33, 9
  br i1 %cmp119, label %if.then122, label %lor.lhs.false120

lor.lhs.false120:                                 ; preds = %lor.lhs.false118
  %cmp121 = icmp eq i32 %i33, 1
  br i1 %cmp121, label %if.then122, label %if.end123

if.then122:                                       ; preds = %lor.lhs.false120, %lor.lhs.false118, %if.end113
  br label %return

if.end123:                                        ; preds = %lor.lhs.false120
  %i34 = load i32, i32* @bking_loc, align 4
  %sub124 = sub nsw i32 %i34, 11
  %idxprom125 = sext i32 %sub124 to i64
  %arrayidx126 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom125
  %i35 = load i32, i32* %arrayidx126, align 4
  %cmp127 = icmp eq i32 %i35, 11
  br i1 %cmp127, label %if.then132, label %lor.lhs.false128

lor.lhs.false128:                                 ; preds = %if.end123
  %cmp129 = icmp eq i32 %i35, 9
  br i1 %cmp129, label %if.then132, label %lor.lhs.false130

lor.lhs.false130:                                 ; preds = %lor.lhs.false128
  %cmp131 = icmp eq i32 %i35, 1
  br i1 %cmp131, label %if.then132, label %if.end133

if.then132:                                       ; preds = %lor.lhs.false130, %lor.lhs.false128, %if.end123
  br label %return

if.end133:                                        ; preds = %lor.lhs.false130
  %i36 = load i32, i32* @bking_loc, align 4
  %add134 = add nsw i32 %i36, 11
  %idxprom135 = sext i32 %add134 to i64
  %arrayidx136 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom135
  %i37 = load i32, i32* %arrayidx136, align 4
  %cmp137 = icmp eq i32 %i37, 11
  br i1 %cmp137, label %if.then140, label %lor.lhs.false138

lor.lhs.false138:                                 ; preds = %if.end133
  %cmp139 = icmp eq i32 %i37, 9
  br i1 %cmp139, label %if.then140, label %if.end141

if.then140:                                       ; preds = %lor.lhs.false138, %if.end133
  br label %return

if.end141:                                        ; preds = %lor.lhs.false138
  %i38 = load i32, i32* @bking_loc, align 4
  %add142 = add nsw i32 %i38, 13
  %idxprom143 = sext i32 %add142 to i64
  %arrayidx144 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom143
  %i39 = load i32, i32* %arrayidx144, align 4
  %cmp145 = icmp eq i32 %i39, 11
  br i1 %cmp145, label %if.then148, label %lor.lhs.false146

lor.lhs.false146:                                 ; preds = %if.end141
  %cmp147 = icmp eq i32 %i39, 9
  br i1 %cmp147, label %if.then148, label %if.end149

if.then148:                                       ; preds = %lor.lhs.false146, %if.end141
  br label %return

if.end149:                                        ; preds = %lor.lhs.false146
  br label %for.cond150

for.cond150:                                      ; preds = %for.inc161, %if.end149
  %sq.1 = phi i32 [ 0, %if.end149 ], [ %inc162, %for.inc161 ]
  %cmp151 = icmp slt i32 %sq.1, 8
  br i1 %cmp151, label %for.body152, label %for.end163

for.body152:                                      ; preds = %for.cond150
  %i40 = load i32, i32* @bking_loc, align 4
  %idxprom153 = sext i32 %sq.1 to i64
  %arrayidx154 = getelementptr inbounds [8 x i32], [8 x i32]* @extended_in_check.knight_o, i64 0, i64 %idxprom153
  %i41 = load i32, i32* %arrayidx154, align 4
  %add155 = add nsw i32 %i40, %i41
  %idxprom156 = sext i32 %add155 to i64
  %arrayidx157 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom156
  %i42 = load i32, i32* %arrayidx157, align 4
  %cmp158 = icmp eq i32 %i42, 3
  br i1 %cmp158, label %if.then159, label %if.end160

if.then159:                                       ; preds = %for.body152
  br label %return

if.end160:                                        ; preds = %for.body152
  br label %for.inc161

for.inc161:                                       ; preds = %if.end160
  %inc162 = add nsw i32 %sq.1, 1
  br label %for.cond150

for.end163:                                       ; preds = %for.cond150
  %i43 = load i32, i32* @bking_loc, align 4
  %call164 = call i32 @is_attacked(i32 %i43, i32 1)
  %tobool165 = icmp ne i32 %call164, 0
  br i1 %tobool165, label %if.then166, label %if.end172

if.then166:                                       ; preds = %for.end163
  %i44 = load i32, i32* @Variant, align 4
  %cmp167 = icmp eq i32 %i44, 2
  br i1 %cmp167, label %if.then170, label %lor.lhs.false168

lor.lhs.false168:                                 ; preds = %if.then166
  %i45 = load i32, i32* @Variant, align 4
  %cmp169 = icmp eq i32 %i45, 4
  br i1 %cmp169, label %if.then170, label %if.else171

if.then170:                                       ; preds = %lor.lhs.false168, %if.then166
  br label %return

if.else171:                                       ; preds = %lor.lhs.false168
  br label %return

if.end172:                                        ; preds = %for.end163
  br label %if.end173

if.end173:                                        ; preds = %if.end172, %if.end80
  br label %return

return:                                           ; preds = %if.end173, %if.else171, %if.then170, %if.then159, %if.then148, %if.then140, %if.then132, %if.then122, %if.then112, %if.then104, %if.then96, %if.then88, %if.else, %if.then79, %if.then73, %if.then64, %if.then56, %if.then48, %if.then38, %if.then28, %if.then20, %if.then13, %if.then5, %if.then
  %retval.0 = phi i32 [ 0, %if.then ], [ 2, %if.then5 ], [ 2, %if.then13 ], [ 2, %if.then20 ], [ 2, %if.then28 ], [ 2, %if.then38 ], [ 2, %if.then48 ], [ 2, %if.then56 ], [ 2, %if.then64 ], [ 2, %if.then73 ], [ 2, %if.then79 ], [ 1, %if.else ], [ 0, %if.end173 ], [ 2, %if.then88 ], [ 2, %if.then96 ], [ 2, %if.then104 ], [ 2, %if.then112 ], [ 2, %if.then122 ], [ 2, %if.then132 ], [ 2, %if.then140 ], [ 2, %if.then148 ], [ 2, %if.then159 ], [ 2, %if.then170 ], [ 1, %if.else171 ]
  ret i32 %retval.0
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @make(%struct.move_s* %moves, i32 %i) #0 {
entry:
  %idxprom = sext i32 %i to i64
  %arrayidx = getelementptr inbounds %struct.move_s, %struct.move_s* %moves, i64 %idxprom
  %ep1 = getelementptr inbounds %struct.move_s, %struct.move_s* %arrayidx, i32 0, i32 5
  %i1 = load i32, i32* %ep1, align 4
  %idxprom2 = sext i32 %i to i64
  %arrayidx3 = getelementptr inbounds %struct.move_s, %struct.move_s* %moves, i64 %idxprom2
  %from4 = getelementptr inbounds %struct.move_s, %struct.move_s* %arrayidx3, i32 0, i32 0
  %i2 = load i32, i32* %from4, align 4
  %idxprom5 = sext i32 %i to i64
  %arrayidx6 = getelementptr inbounds %struct.move_s, %struct.move_s* %moves, i64 %idxprom5
  %target7 = getelementptr inbounds %struct.move_s, %struct.move_s* %arrayidx6, i32 0, i32 1
  %i3 = load i32, i32* %target7, align 4
  %idxprom8 = sext i32 %i to i64
  %arrayidx9 = getelementptr inbounds %struct.move_s, %struct.move_s* %moves, i64 %idxprom8
  %captured10 = getelementptr inbounds %struct.move_s, %struct.move_s* %arrayidx9, i32 0, i32 2
  %i4 = load i32, i32* %captured10, align 4
  %idxprom11 = sext i32 %i to i64
  %arrayidx12 = getelementptr inbounds %struct.move_s, %struct.move_s* %moves, i64 %idxprom11
  %promoted13 = getelementptr inbounds %struct.move_s, %struct.move_s* %arrayidx12, i32 0, i32 3
  %i5 = load i32, i32* %promoted13, align 4
  %idxprom14 = sext i32 %i to i64
  %arrayidx15 = getelementptr inbounds %struct.move_s, %struct.move_s* %moves, i64 %idxprom14
  %castled16 = getelementptr inbounds %struct.move_s, %struct.move_s* %arrayidx15, i32 0, i32 4
  %i6 = load i32, i32* %castled16, align 4
  %i7 = load i32, i32* @ep_square, align 4
  %i8 = load i32, i32* @ply, align 4
  %idxprom17 = sext i32 %i8 to i64
  %arrayidx18 = getelementptr inbounds [300 x %struct.move_x], [300 x %struct.move_x]* @path_x, i64 0, i64 %idxprom17
  %epsq = getelementptr inbounds %struct.move_x, %struct.move_x* %arrayidx18, i32 0, i32 2
  store i32 %i7, i32* %epsq, align 8
  store i32 0, i32* @ep_square, align 4
  %i9 = load i32, i32* @fifty, align 4
  %i10 = load i32, i32* @ply, align 4
  %idxprom19 = sext i32 %i10 to i64
  %arrayidx20 = getelementptr inbounds [300 x %struct.move_x], [300 x %struct.move_x]* @path_x, i64 0, i64 %idxprom19
  %fifty = getelementptr inbounds %struct.move_x, %struct.move_x* %arrayidx20, i32 0, i32 3
  store i32 %i9, i32* %fifty, align 4
  %idxprom21 = sext i32 %i2 to i64
  %arrayidx22 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom21
  %i11 = load i32, i32* %arrayidx22, align 4
  %cmp = icmp eq i32 %i11, 1
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %idxprom23 = sext i32 %i2 to i64
  %arrayidx24 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom23
  %i12 = load i32, i32* %arrayidx24, align 4
  %cmp25 = icmp eq i32 %i12, 2
  br i1 %cmp25, label %if.then, label %lor.lhs.false26

lor.lhs.false26:                                  ; preds = %lor.lhs.false
  %idxprom27 = sext i32 %i3 to i64
  %arrayidx28 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom27
  %i13 = load i32, i32* %arrayidx28, align 4
  %cmp29 = icmp ne i32 %i13, 13
  br i1 %cmp29, label %if.then, label %if.else

if.then:                                          ; preds = %lor.lhs.false26, %lor.lhs.false, %entry
  store i32 0, i32* @fifty, align 4
  br label %if.end

if.else:                                          ; preds = %lor.lhs.false26
  %i14 = load i32, i32* @fifty, align 4
  %inc = add nsw i32 %i14, 1
  store i32 %inc, i32* @fifty, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %cmp30 = icmp eq i32 %i2, 0
  br i1 %cmp30, label %if.then31, label %if.else57

if.then31:                                        ; preds = %if.end
  %i15 = load i32, i32* @piece_count, align 4
  %inc32 = add nsw i32 %i15, 1
  store i32 %inc32, i32* @piece_count, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then31
  %find_slot.0 = phi i32 [ 1, %if.then31 ], [ %inc36, %for.inc ]
  %idxprom33 = sext i32 %find_slot.0 to i64
  %arrayidx34 = getelementptr inbounds [62 x i32], [62 x i32]* @pieces, i64 0, i64 %idxprom33
  %i16 = load i32, i32* %arrayidx34, align 4
  %cmp35 = icmp ne i32 %i16, 0
  br i1 %cmp35, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %inc36 = add nsw i32 %find_slot.0, 1
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %idxprom37 = sext i32 %find_slot.0 to i64
  %arrayidx38 = getelementptr inbounds [62 x i32], [62 x i32]* @pieces, i64 0, i64 %idxprom37
  store i32 %i3, i32* %arrayidx38, align 4
  %idxprom39 = sext i32 %find_slot.0 to i64
  %arrayidx40 = getelementptr inbounds [62 x i32], [62 x i32]* @is_promoted, i64 0, i64 %idxprom39
  %i17 = load i32, i32* %arrayidx40, align 4
  %i18 = load i32, i32* @ply, align 4
  %idxprom41 = sext i32 %i18 to i64
  %arrayidx42 = getelementptr inbounds [300 x %struct.move_x], [300 x %struct.move_x]* @path_x, i64 0, i64 %idxprom41
  %was_promoted = getelementptr inbounds %struct.move_x, %struct.move_x* %arrayidx42, i32 0, i32 1
  store i32 %i17, i32* %was_promoted, align 4
  %idxprom43 = sext i32 %find_slot.0 to i64
  %arrayidx44 = getelementptr inbounds [62 x i32], [62 x i32]* @is_promoted, i64 0, i64 %idxprom43
  store i32 0, i32* %arrayidx44, align 4
  %idxprom45 = sext i32 %i3 to i64
  %arrayidx46 = getelementptr inbounds [144 x i32], [144 x i32]* @squares, i64 0, i64 %idxprom45
  store i32 %find_slot.0, i32* %arrayidx46, align 4
  %i19 = load i32, i32* @white_to_move, align 4
  %tobool = icmp ne i32 %i19, 0
  %i20 = zext i1 %tobool to i64
  %cond = select i1 %tobool, i32 0, i32 1
  call void @DropremoveHolding(i32 %i5, i32 %cond)
  %idxprom47 = sext i32 %i5 to i64
  %arrayidx48 = getelementptr inbounds [14 x i32], [14 x i32]* @material, i64 0, i64 %idxprom47
  %i21 = load i32, i32* %arrayidx48, align 4
  %i22 = load i32, i32* @Material, align 4
  %add = add nsw i32 %i22, %i21
  store i32 %add, i32* @Material, align 4
  %idxprom49 = sext i32 %i3 to i64
  %arrayidx50 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom49
  store i32 %i5, i32* %arrayidx50, align 4
  %idxprom51 = sext i32 %i5 to i64
  %arrayidx52 = getelementptr inbounds [14 x [144 x i32]], [14 x [144 x i32]]* @zobrist, i64 0, i64 %idxprom51
  %idxprom53 = sext i32 %i3 to i64
  %arrayidx54 = getelementptr inbounds [144 x i32], [144 x i32]* %arrayidx52, i64 0, i64 %idxprom53
  %i23 = load i32, i32* %arrayidx54, align 4
  %i24 = load i32, i32* @hash, align 4
  %xor = xor i32 %i24, %i23
  store i32 %xor, i32* @hash, align 4
  %i25 = load i32, i32* @white_to_move, align 4
  %xor55 = xor i32 %i25, 1
  store i32 %xor55, i32* @white_to_move, align 4
  %i26 = load i32, i32* @ply, align 4
  %inc56 = add nsw i32 %i26, 1
  store i32 %inc56, i32* @ply, align 4
  br label %return

if.else57:                                        ; preds = %if.end
  %idxprom58 = sext i32 %i3 to i64
  %arrayidx59 = getelementptr inbounds [144 x i32], [144 x i32]* @squares, i64 0, i64 %idxprom58
  %i27 = load i32, i32* %arrayidx59, align 4
  %idxprom60 = sext i32 %i27 to i64
  %arrayidx61 = getelementptr inbounds [62 x i32], [62 x i32]* @is_promoted, i64 0, i64 %idxprom60
  %i28 = load i32, i32* %arrayidx61, align 4
  %i29 = load i32, i32* @ply, align 4
  %idxprom62 = sext i32 %i29 to i64
  %arrayidx63 = getelementptr inbounds [300 x %struct.move_x], [300 x %struct.move_x]* @path_x, i64 0, i64 %idxprom62
  %was_promoted64 = getelementptr inbounds %struct.move_x, %struct.move_x* %arrayidx63, i32 0, i32 1
  store i32 %i28, i32* %was_promoted64, align 4
  %idxprom65 = sext i32 %i3 to i64
  %arrayidx66 = getelementptr inbounds [144 x i32], [144 x i32]* @squares, i64 0, i64 %idxprom65
  %i30 = load i32, i32* %arrayidx66, align 4
  %i31 = load i32, i32* @ply, align 4
  %idxprom67 = sext i32 %i31 to i64
  %arrayidx68 = getelementptr inbounds [300 x %struct.move_x], [300 x %struct.move_x]* @path_x, i64 0, i64 %idxprom67
  %cap_num = getelementptr inbounds %struct.move_x, %struct.move_x* %arrayidx68, i32 0, i32 0
  store i32 %i30, i32* %cap_num, align 16
  %idxprom69 = sext i32 %i3 to i64
  %arrayidx70 = getelementptr inbounds [144 x i32], [144 x i32]* @squares, i64 0, i64 %idxprom69
  %i32 = load i32, i32* %arrayidx70, align 4
  %idxprom71 = sext i32 %i32 to i64
  %arrayidx72 = getelementptr inbounds [62 x i32], [62 x i32]* @pieces, i64 0, i64 %idxprom71
  store i32 0, i32* %arrayidx72, align 4
  %idxprom73 = sext i32 %i2 to i64
  %arrayidx74 = getelementptr inbounds [144 x i32], [144 x i32]* @squares, i64 0, i64 %idxprom73
  %i33 = load i32, i32* %arrayidx74, align 4
  %idxprom75 = sext i32 %i33 to i64
  %arrayidx76 = getelementptr inbounds [62 x i32], [62 x i32]* @pieces, i64 0, i64 %idxprom75
  store i32 %i3, i32* %arrayidx76, align 4
  %idxprom77 = sext i32 %i2 to i64
  %arrayidx78 = getelementptr inbounds [144 x i32], [144 x i32]* @squares, i64 0, i64 %idxprom77
  %i34 = load i32, i32* %arrayidx78, align 4
  %idxprom79 = sext i32 %i3 to i64
  %arrayidx80 = getelementptr inbounds [144 x i32], [144 x i32]* @squares, i64 0, i64 %idxprom79
  store i32 %i34, i32* %arrayidx80, align 4
  %idxprom81 = sext i32 %i2 to i64
  %arrayidx82 = getelementptr inbounds [144 x i32], [144 x i32]* @squares, i64 0, i64 %idxprom81
  store i32 0, i32* %arrayidx82, align 4
  %tobool83 = icmp ne i32 %i1, 0
  br i1 %tobool83, label %if.end119, label %if.then84

if.then84:                                        ; preds = %if.else57
  %idxprom85 = sext i32 %i3 to i64
  %arrayidx86 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom85
  %i35 = load i32, i32* %arrayidx86, align 4
  switch i32 %i35, label %sw.default [
    i32 13, label %sw.bb
  ]

sw.bb:                                            ; preds = %if.then84
  br label %sw.epilog

sw.default:                                       ; preds = %if.then84
  %i36 = load i32, i32* @Variant, align 4
  %cmp87 = icmp eq i32 %i36, 1
  br i1 %cmp87, label %if.then90, label %lor.lhs.false88

lor.lhs.false88:                                  ; preds = %sw.default
  %i37 = load i32, i32* @Variant, align 4
  %cmp89 = icmp eq i32 %i37, 0
  br i1 %cmp89, label %if.then90, label %if.end107

if.then90:                                        ; preds = %lor.lhs.false88, %sw.default
  %i38 = load i32, i32* @ply, align 4
  %idxprom91 = sext i32 %i38 to i64
  %arrayidx92 = getelementptr inbounds [300 x %struct.move_x], [300 x %struct.move_x]* @path_x, i64 0, i64 %idxprom91
  %was_promoted93 = getelementptr inbounds %struct.move_x, %struct.move_x* %arrayidx92, i32 0, i32 1
  %i39 = load i32, i32* %was_promoted93, align 4
  %tobool94 = icmp ne i32 %i39, 0
  br i1 %tobool94, label %if.then95, label %if.else100

if.then95:                                        ; preds = %if.then90
  %idxprom96 = sext i32 %i3 to i64
  %arrayidx97 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom96
  %i40 = load i32, i32* %arrayidx97, align 4
  %call = call i32 @SwitchPromoted(i32 %i40)
  %i41 = load i32, i32* @white_to_move, align 4
  %tobool98 = icmp ne i32 %i41, 0
  %i42 = zext i1 %tobool98 to i64
  %cond99 = select i1 %tobool98, i32 0, i32 1
  call void @addHolding(i32 %call, i32 %cond99)
  br label %if.end106

if.else100:                                       ; preds = %if.then90
  %idxprom101 = sext i32 %i3 to i64
  %arrayidx102 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom101
  %i43 = load i32, i32* %arrayidx102, align 4
  %call103 = call i32 @SwitchColor(i32 %i43)
  %i44 = load i32, i32* @white_to_move, align 4
  %tobool104 = icmp ne i32 %i44, 0
  %i45 = zext i1 %tobool104 to i64
  %cond105 = select i1 %tobool104, i32 0, i32 1
  call void @addHolding(i32 %call103, i32 %cond105)
  br label %if.end106

if.end106:                                        ; preds = %if.else100, %if.then95
  br label %if.end107

if.end107:                                        ; preds = %if.end106, %lor.lhs.false88
  %idxprom108 = sext i32 %i3 to i64
  %arrayidx109 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom108
  %i46 = load i32, i32* %arrayidx109, align 4
  %idxprom110 = sext i32 %i46 to i64
  %arrayidx111 = getelementptr inbounds [14 x i32], [14 x i32]* @material, i64 0, i64 %idxprom110
  %i47 = load i32, i32* %arrayidx111, align 4
  %i48 = load i32, i32* @Material, align 4
  %sub = sub nsw i32 %i48, %i47
  store i32 %sub, i32* @Material, align 4
  %idxprom112 = sext i32 %i3 to i64
  %arrayidx113 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom112
  %i49 = load i32, i32* %arrayidx113, align 4
  %idxprom114 = sext i32 %i49 to i64
  %arrayidx115 = getelementptr inbounds [14 x [144 x i32]], [14 x [144 x i32]]* @zobrist, i64 0, i64 %idxprom114
  %idxprom116 = sext i32 %i3 to i64
  %arrayidx117 = getelementptr inbounds [144 x i32], [144 x i32]* %arrayidx115, i64 0, i64 %idxprom116
  %i50 = load i32, i32* %arrayidx117, align 4
  %i51 = load i32, i32* @hash, align 4
  %xor118 = xor i32 %i51, %i50
  store i32 %xor118, i32* @hash, align 4
  %i52 = load i32, i32* @piece_count, align 4
  %dec = add nsw i32 %i52, -1
  store i32 %dec, i32* @piece_count, align 4
  br label %sw.epilog

sw.epilog:                                        ; preds = %if.end107, %sw.bb
  br label %if.end119

if.end119:                                        ; preds = %sw.epilog, %if.else57
  %idxprom120 = sext i32 %i2 to i64
  %arrayidx121 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom120
  %i53 = load i32, i32* %arrayidx121, align 4
  %cmp122 = icmp eq i32 %i53, 1
  br i1 %cmp122, label %if.then123, label %if.end226

if.then123:                                       ; preds = %if.end119
  %tobool124 = icmp ne i32 %i5, 0
  br i1 %tobool124, label %if.then125, label %if.end154

if.then125:                                       ; preds = %if.then123
  %idxprom126 = sext i32 %i3 to i64
  %arrayidx127 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom126
  store i32 %i5, i32* %arrayidx127, align 4
  %idxprom128 = sext i32 %i2 to i64
  %arrayidx129 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom128
  store i32 13, i32* %arrayidx129, align 4
  %idxprom130 = sext i32 %i3 to i64
  %arrayidx131 = getelementptr inbounds [144 x i32], [144 x i32]* @moved, i64 0, i64 %idxprom130
  %i54 = load i32, i32* %arrayidx131, align 4
  %inc132 = add nsw i32 %i54, 1
  store i32 %inc132, i32* %arrayidx131, align 4
  %idxprom133 = sext i32 %i2 to i64
  %arrayidx134 = getelementptr inbounds [144 x i32], [144 x i32]* @moved, i64 0, i64 %idxprom133
  %i55 = load i32, i32* %arrayidx134, align 4
  %inc135 = add nsw i32 %i55, 1
  store i32 %inc135, i32* %arrayidx134, align 4
  %i56 = load i32, i32* @white_to_move, align 4
  %xor136 = xor i32 %i56, 1
  store i32 %xor136, i32* @white_to_move, align 4
  %idxprom137 = sext i32 %i3 to i64
  %arrayidx138 = getelementptr inbounds [144 x i32], [144 x i32]* @squares, i64 0, i64 %idxprom137
  %i57 = load i32, i32* %arrayidx138, align 4
  %idxprom139 = sext i32 %i57 to i64
  %arrayidx140 = getelementptr inbounds [62 x i32], [62 x i32]* @is_promoted, i64 0, i64 %idxprom139
  store i32 1, i32* %arrayidx140, align 4
  %idxprom141 = sext i32 %i2 to i64
  %arrayidx142 = getelementptr inbounds [144 x i32], [144 x i32]* getelementptr inbounds ([14 x [144 x i32]], [14 x [144 x i32]]* @zobrist, i64 0, i64 1), i64 0, i64 %idxprom141
  %i58 = load i32, i32* %arrayidx142, align 4
  %i59 = load i32, i32* @hash, align 4
  %xor143 = xor i32 %i59, %i58
  store i32 %xor143, i32* @hash, align 4
  %idxprom144 = sext i32 %i5 to i64
  %arrayidx145 = getelementptr inbounds [14 x [144 x i32]], [14 x [144 x i32]]* @zobrist, i64 0, i64 %idxprom144
  %idxprom146 = sext i32 %i3 to i64
  %arrayidx147 = getelementptr inbounds [144 x i32], [144 x i32]* %arrayidx145, i64 0, i64 %idxprom146
  %i60 = load i32, i32* %arrayidx147, align 4
  %i61 = load i32, i32* @hash, align 4
  %xor148 = xor i32 %i61, %i60
  store i32 %xor148, i32* @hash, align 4
  %i62 = load i32, i32* getelementptr inbounds ([14 x i32], [14 x i32]* @material, i64 0, i64 1), align 4
  %i63 = load i32, i32* @Material, align 4
  %sub149 = sub nsw i32 %i63, %i62
  store i32 %sub149, i32* @Material, align 4
  %idxprom150 = sext i32 %i5 to i64
  %arrayidx151 = getelementptr inbounds [14 x i32], [14 x i32]* @material, i64 0, i64 %idxprom150
  %i64 = load i32, i32* %arrayidx151, align 4
  %i65 = load i32, i32* @Material, align 4
  %add152 = add nsw i32 %i65, %i64
  store i32 %add152, i32* @Material, align 4
  %i66 = load i32, i32* @ply, align 4
  %inc153 = add nsw i32 %i66, 1
  store i32 %inc153, i32* @ply, align 4
  br label %return

if.end154:                                        ; preds = %if.then123
  %tobool155 = icmp ne i32 %i1, 0
  br i1 %tobool155, label %if.then156, label %if.end202

if.then156:                                       ; preds = %if.end154
  %idxprom157 = sext i32 %i2 to i64
  %arrayidx158 = getelementptr inbounds [144 x i32], [144 x i32]* getelementptr inbounds ([14 x [144 x i32]], [14 x [144 x i32]]* @zobrist, i64 0, i64 1), i64 0, i64 %idxprom157
  %i67 = load i32, i32* %arrayidx158, align 4
  %i68 = load i32, i32* @hash, align 4
  %xor159 = xor i32 %i68, %i67
  store i32 %xor159, i32* @hash, align 4
  %sub160 = sub nsw i32 %i3, 12
  %idxprom161 = sext i32 %sub160 to i64
  %arrayidx162 = getelementptr inbounds [144 x i32], [144 x i32]* getelementptr inbounds ([14 x [144 x i32]], [14 x [144 x i32]]* @zobrist, i64 0, i64 2), i64 0, i64 %idxprom161
  %i69 = load i32, i32* %arrayidx162, align 4
  %i70 = load i32, i32* @hash, align 4
  %xor163 = xor i32 %i70, %i69
  store i32 %xor163, i32* @hash, align 4
  %idxprom164 = sext i32 %i3 to i64
  %arrayidx165 = getelementptr inbounds [144 x i32], [144 x i32]* getelementptr inbounds ([14 x [144 x i32]], [14 x [144 x i32]]* @zobrist, i64 0, i64 1), i64 0, i64 %idxprom164
  %i71 = load i32, i32* %arrayidx165, align 4
  %i72 = load i32, i32* @hash, align 4
  %xor166 = xor i32 %i72, %i71
  store i32 %xor166, i32* @hash, align 4
  %i73 = load i32, i32* getelementptr inbounds ([14 x i32], [14 x i32]* @material, i64 0, i64 2), align 8
  %i74 = load i32, i32* @Material, align 4
  %sub167 = sub nsw i32 %i74, %i73
  store i32 %sub167, i32* @Material, align 4
  %idxprom168 = sext i32 %i3 to i64
  %arrayidx169 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom168
  store i32 1, i32* %arrayidx169, align 4
  %idxprom170 = sext i32 %i2 to i64
  %arrayidx171 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom170
  store i32 13, i32* %arrayidx171, align 4
  call void @addHolding(i32 1, i32 0)
  %i75 = load i32, i32* @piece_count, align 4
  %dec172 = add nsw i32 %i75, -1
  store i32 %dec172, i32* @piece_count, align 4
  %sub173 = sub nsw i32 %i3, 12
  %idxprom174 = sext i32 %sub173 to i64
  %arrayidx175 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom174
  store i32 13, i32* %arrayidx175, align 4
  %idxprom176 = sext i32 %i3 to i64
  %arrayidx177 = getelementptr inbounds [144 x i32], [144 x i32]* @moved, i64 0, i64 %idxprom176
  %i76 = load i32, i32* %arrayidx177, align 4
  %inc178 = add nsw i32 %i76, 1
  store i32 %inc178, i32* %arrayidx177, align 4
  %idxprom179 = sext i32 %i2 to i64
  %arrayidx180 = getelementptr inbounds [144 x i32], [144 x i32]* @moved, i64 0, i64 %idxprom179
  %i77 = load i32, i32* %arrayidx180, align 4
  %inc181 = add nsw i32 %i77, 1
  store i32 %inc181, i32* %arrayidx180, align 4
  %sub182 = sub nsw i32 %i3, 12
  %idxprom183 = sext i32 %sub182 to i64
  %arrayidx184 = getelementptr inbounds [144 x i32], [144 x i32]* @moved, i64 0, i64 %idxprom183
  %i78 = load i32, i32* %arrayidx184, align 4
  %inc185 = add nsw i32 %i78, 1
  store i32 %inc185, i32* %arrayidx184, align 4
  %i79 = load i32, i32* @white_to_move, align 4
  %xor186 = xor i32 %i79, 1
  store i32 %xor186, i32* @white_to_move, align 4
  %sub187 = sub nsw i32 %i3, 12
  %idxprom188 = sext i32 %sub187 to i64
  %arrayidx189 = getelementptr inbounds [144 x i32], [144 x i32]* @squares, i64 0, i64 %idxprom188
  %i80 = load i32, i32* %arrayidx189, align 4
  %i81 = load i32, i32* @ply, align 4
  %idxprom190 = sext i32 %i81 to i64
  %arrayidx191 = getelementptr inbounds [300 x %struct.move_x], [300 x %struct.move_x]* @path_x, i64 0, i64 %idxprom190
  %cap_num192 = getelementptr inbounds %struct.move_x, %struct.move_x* %arrayidx191, i32 0, i32 0
  store i32 %i80, i32* %cap_num192, align 16
  %sub193 = sub nsw i32 %i3, 12
  %idxprom194 = sext i32 %sub193 to i64
  %arrayidx195 = getelementptr inbounds [144 x i32], [144 x i32]* @squares, i64 0, i64 %idxprom194
  %i82 = load i32, i32* %arrayidx195, align 4
  %idxprom196 = sext i32 %i82 to i64
  %arrayidx197 = getelementptr inbounds [62 x i32], [62 x i32]* @pieces, i64 0, i64 %idxprom196
  store i32 0, i32* %arrayidx197, align 4
  %sub198 = sub nsw i32 %i3, 12
  %idxprom199 = sext i32 %sub198 to i64
  %arrayidx200 = getelementptr inbounds [144 x i32], [144 x i32]* @squares, i64 0, i64 %idxprom199
  store i32 0, i32* %arrayidx200, align 4
  %i83 = load i32, i32* @ply, align 4
  %inc201 = add nsw i32 %i83, 1
  store i32 %inc201, i32* @ply, align 4
  br label %return

if.end202:                                        ; preds = %if.end154
  %add203 = add nsw i32 %i2, 24
  %cmp204 = icmp eq i32 %i3, %add203
  br i1 %cmp204, label %if.then205, label %if.end207

if.then205:                                       ; preds = %if.end202
  %add206 = add nsw i32 %i2, 12
  store i32 %add206, i32* @ep_square, align 4
  br label %if.end207

if.end207:                                        ; preds = %if.then205, %if.end202
  %idxprom208 = sext i32 %i2 to i64
  %arrayidx209 = getelementptr inbounds [144 x i32], [144 x i32]* getelementptr inbounds ([14 x [144 x i32]], [14 x [144 x i32]]* @zobrist, i64 0, i64 1), i64 0, i64 %idxprom208
  %i84 = load i32, i32* %arrayidx209, align 4
  %i85 = load i32, i32* @hash, align 4
  %xor210 = xor i32 %i85, %i84
  store i32 %xor210, i32* @hash, align 4
  %idxprom211 = sext i32 %i3 to i64
  %arrayidx212 = getelementptr inbounds [144 x i32], [144 x i32]* getelementptr inbounds ([14 x [144 x i32]], [14 x [144 x i32]]* @zobrist, i64 0, i64 1), i64 0, i64 %idxprom211
  %i86 = load i32, i32* %arrayidx212, align 4
  %i87 = load i32, i32* @hash, align 4
  %xor213 = xor i32 %i87, %i86
  store i32 %xor213, i32* @hash, align 4
  %idxprom214 = sext i32 %i3 to i64
  %arrayidx215 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom214
  store i32 1, i32* %arrayidx215, align 4
  %idxprom216 = sext i32 %i2 to i64
  %arrayidx217 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom216
  store i32 13, i32* %arrayidx217, align 4
  %idxprom218 = sext i32 %i3 to i64
  %arrayidx219 = getelementptr inbounds [144 x i32], [144 x i32]* @moved, i64 0, i64 %idxprom218
  %i88 = load i32, i32* %arrayidx219, align 4
  %inc220 = add nsw i32 %i88, 1
  store i32 %inc220, i32* %arrayidx219, align 4
  %idxprom221 = sext i32 %i2 to i64
  %arrayidx222 = getelementptr inbounds [144 x i32], [144 x i32]* @moved, i64 0, i64 %idxprom221
  %i89 = load i32, i32* %arrayidx222, align 4
  %inc223 = add nsw i32 %i89, 1
  store i32 %inc223, i32* %arrayidx222, align 4
  %i90 = load i32, i32* @white_to_move, align 4
  %xor224 = xor i32 %i90, 1
  store i32 %xor224, i32* @white_to_move, align 4
  %i91 = load i32, i32* @ply, align 4
  %inc225 = add nsw i32 %i91, 1
  store i32 %inc225, i32* @ply, align 4
  br label %return

if.end226:                                        ; preds = %if.end119
  %idxprom227 = sext i32 %i2 to i64
  %arrayidx228 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom227
  %i92 = load i32, i32* %arrayidx228, align 4
  %cmp229 = icmp eq i32 %i92, 2
  br i1 %cmp229, label %if.then230, label %if.end333

if.then230:                                       ; preds = %if.end226
  %tobool231 = icmp ne i32 %i5, 0
  br i1 %tobool231, label %if.then232, label %if.end261

if.then232:                                       ; preds = %if.then230
  %idxprom233 = sext i32 %i3 to i64
  %arrayidx234 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom233
  store i32 %i5, i32* %arrayidx234, align 4
  %idxprom235 = sext i32 %i2 to i64
  %arrayidx236 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom235
  store i32 13, i32* %arrayidx236, align 4
  %idxprom237 = sext i32 %i3 to i64
  %arrayidx238 = getelementptr inbounds [144 x i32], [144 x i32]* @moved, i64 0, i64 %idxprom237
  %i93 = load i32, i32* %arrayidx238, align 4
  %inc239 = add nsw i32 %i93, 1
  store i32 %inc239, i32* %arrayidx238, align 4
  %idxprom240 = sext i32 %i2 to i64
  %arrayidx241 = getelementptr inbounds [144 x i32], [144 x i32]* @moved, i64 0, i64 %idxprom240
  %i94 = load i32, i32* %arrayidx241, align 4
  %inc242 = add nsw i32 %i94, 1
  store i32 %inc242, i32* %arrayidx241, align 4
  %i95 = load i32, i32* @white_to_move, align 4
  %xor243 = xor i32 %i95, 1
  store i32 %xor243, i32* @white_to_move, align 4
  %idxprom244 = sext i32 %i3 to i64
  %arrayidx245 = getelementptr inbounds [144 x i32], [144 x i32]* @squares, i64 0, i64 %idxprom244
  %i96 = load i32, i32* %arrayidx245, align 4
  %idxprom246 = sext i32 %i96 to i64
  %arrayidx247 = getelementptr inbounds [62 x i32], [62 x i32]* @is_promoted, i64 0, i64 %idxprom246
  store i32 1, i32* %arrayidx247, align 4
  %idxprom248 = sext i32 %i2 to i64
  %arrayidx249 = getelementptr inbounds [144 x i32], [144 x i32]* getelementptr inbounds ([14 x [144 x i32]], [14 x [144 x i32]]* @zobrist, i64 0, i64 2), i64 0, i64 %idxprom248
  %i97 = load i32, i32* %arrayidx249, align 4
  %i98 = load i32, i32* @hash, align 4
  %xor250 = xor i32 %i98, %i97
  store i32 %xor250, i32* @hash, align 4
  %idxprom251 = sext i32 %i5 to i64
  %arrayidx252 = getelementptr inbounds [14 x [144 x i32]], [14 x [144 x i32]]* @zobrist, i64 0, i64 %idxprom251
  %idxprom253 = sext i32 %i3 to i64
  %arrayidx254 = getelementptr inbounds [144 x i32], [144 x i32]* %arrayidx252, i64 0, i64 %idxprom253
  %i99 = load i32, i32* %arrayidx254, align 4
  %i100 = load i32, i32* @hash, align 4
  %xor255 = xor i32 %i100, %i99
  store i32 %xor255, i32* @hash, align 4
  %i101 = load i32, i32* getelementptr inbounds ([14 x i32], [14 x i32]* @material, i64 0, i64 2), align 8
  %i102 = load i32, i32* @Material, align 4
  %sub256 = sub nsw i32 %i102, %i101
  store i32 %sub256, i32* @Material, align 4
  %idxprom257 = sext i32 %i5 to i64
  %arrayidx258 = getelementptr inbounds [14 x i32], [14 x i32]* @material, i64 0, i64 %idxprom257
  %i103 = load i32, i32* %arrayidx258, align 4
  %i104 = load i32, i32* @Material, align 4
  %add259 = add nsw i32 %i104, %i103
  store i32 %add259, i32* @Material, align 4
  %i105 = load i32, i32* @ply, align 4
  %inc260 = add nsw i32 %i105, 1
  store i32 %inc260, i32* @ply, align 4
  br label %return

if.end261:                                        ; preds = %if.then230
  %tobool262 = icmp ne i32 %i1, 0
  br i1 %tobool262, label %if.then263, label %if.end309

if.then263:                                       ; preds = %if.end261
  %idxprom264 = sext i32 %i2 to i64
  %arrayidx265 = getelementptr inbounds [144 x i32], [144 x i32]* getelementptr inbounds ([14 x [144 x i32]], [14 x [144 x i32]]* @zobrist, i64 0, i64 2), i64 0, i64 %idxprom264
  %i106 = load i32, i32* %arrayidx265, align 4
  %i107 = load i32, i32* @hash, align 4
  %xor266 = xor i32 %i107, %i106
  store i32 %xor266, i32* @hash, align 4
  %add267 = add nsw i32 %i3, 12
  %idxprom268 = sext i32 %add267 to i64
  %arrayidx269 = getelementptr inbounds [144 x i32], [144 x i32]* getelementptr inbounds ([14 x [144 x i32]], [14 x [144 x i32]]* @zobrist, i64 0, i64 1), i64 0, i64 %idxprom268
  %i108 = load i32, i32* %arrayidx269, align 4
  %i109 = load i32, i32* @hash, align 4
  %xor270 = xor i32 %i109, %i108
  store i32 %xor270, i32* @hash, align 4
  %idxprom271 = sext i32 %i3 to i64
  %arrayidx272 = getelementptr inbounds [144 x i32], [144 x i32]* getelementptr inbounds ([14 x [144 x i32]], [14 x [144 x i32]]* @zobrist, i64 0, i64 2), i64 0, i64 %idxprom271
  %i110 = load i32, i32* %arrayidx272, align 4
  %i111 = load i32, i32* @hash, align 4
  %xor273 = xor i32 %i111, %i110
  store i32 %xor273, i32* @hash, align 4
  %i112 = load i32, i32* getelementptr inbounds ([14 x i32], [14 x i32]* @material, i64 0, i64 1), align 4
  %i113 = load i32, i32* @Material, align 4
  %sub274 = sub nsw i32 %i113, %i112
  store i32 %sub274, i32* @Material, align 4
  %idxprom275 = sext i32 %i3 to i64
  %arrayidx276 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom275
  store i32 2, i32* %arrayidx276, align 4
  %idxprom277 = sext i32 %i2 to i64
  %arrayidx278 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom277
  store i32 13, i32* %arrayidx278, align 4
  call void @addHolding(i32 2, i32 1)
  %i114 = load i32, i32* @piece_count, align 4
  %dec279 = add nsw i32 %i114, -1
  store i32 %dec279, i32* @piece_count, align 4
  %add280 = add nsw i32 %i3, 12
  %idxprom281 = sext i32 %add280 to i64
  %arrayidx282 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom281
  store i32 13, i32* %arrayidx282, align 4
  %idxprom283 = sext i32 %i3 to i64
  %arrayidx284 = getelementptr inbounds [144 x i32], [144 x i32]* @moved, i64 0, i64 %idxprom283
  %i115 = load i32, i32* %arrayidx284, align 4
  %inc285 = add nsw i32 %i115, 1
  store i32 %inc285, i32* %arrayidx284, align 4
  %idxprom286 = sext i32 %i2 to i64
  %arrayidx287 = getelementptr inbounds [144 x i32], [144 x i32]* @moved, i64 0, i64 %idxprom286
  %i116 = load i32, i32* %arrayidx287, align 4
  %inc288 = add nsw i32 %i116, 1
  store i32 %inc288, i32* %arrayidx287, align 4
  %add289 = add nsw i32 %i3, 12
  %idxprom290 = sext i32 %add289 to i64
  %arrayidx291 = getelementptr inbounds [144 x i32], [144 x i32]* @moved, i64 0, i64 %idxprom290
  %i117 = load i32, i32* %arrayidx291, align 4
  %inc292 = add nsw i32 %i117, 1
  store i32 %inc292, i32* %arrayidx291, align 4
  %i118 = load i32, i32* @white_to_move, align 4
  %xor293 = xor i32 %i118, 1
  store i32 %xor293, i32* @white_to_move, align 4
  %add294 = add nsw i32 %i3, 12
  %idxprom295 = sext i32 %add294 to i64
  %arrayidx296 = getelementptr inbounds [144 x i32], [144 x i32]* @squares, i64 0, i64 %idxprom295
  %i119 = load i32, i32* %arrayidx296, align 4
  %i120 = load i32, i32* @ply, align 4
  %idxprom297 = sext i32 %i120 to i64
  %arrayidx298 = getelementptr inbounds [300 x %struct.move_x], [300 x %struct.move_x]* @path_x, i64 0, i64 %idxprom297
  %cap_num299 = getelementptr inbounds %struct.move_x, %struct.move_x* %arrayidx298, i32 0, i32 0
  store i32 %i119, i32* %cap_num299, align 16
  %add300 = add nsw i32 %i3, 12
  %idxprom301 = sext i32 %add300 to i64
  %arrayidx302 = getelementptr inbounds [144 x i32], [144 x i32]* @squares, i64 0, i64 %idxprom301
  %i121 = load i32, i32* %arrayidx302, align 4
  %idxprom303 = sext i32 %i121 to i64
  %arrayidx304 = getelementptr inbounds [62 x i32], [62 x i32]* @pieces, i64 0, i64 %idxprom303
  store i32 0, i32* %arrayidx304, align 4
  %add305 = add nsw i32 %i3, 12
  %idxprom306 = sext i32 %add305 to i64
  %arrayidx307 = getelementptr inbounds [144 x i32], [144 x i32]* @squares, i64 0, i64 %idxprom306
  store i32 0, i32* %arrayidx307, align 4
  %i122 = load i32, i32* @ply, align 4
  %inc308 = add nsw i32 %i122, 1
  store i32 %inc308, i32* @ply, align 4
  br label %return

if.end309:                                        ; preds = %if.end261
  %sub310 = sub nsw i32 %i2, 24
  %cmp311 = icmp eq i32 %i3, %sub310
  br i1 %cmp311, label %if.then312, label %if.end314

if.then312:                                       ; preds = %if.end309
  %sub313 = sub nsw i32 %i2, 12
  store i32 %sub313, i32* @ep_square, align 4
  br label %if.end314

if.end314:                                        ; preds = %if.then312, %if.end309
  %idxprom315 = sext i32 %i3 to i64
  %arrayidx316 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom315
  store i32 2, i32* %arrayidx316, align 4
  %idxprom317 = sext i32 %i2 to i64
  %arrayidx318 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom317
  store i32 13, i32* %arrayidx318, align 4
  %idxprom319 = sext i32 %i3 to i64
  %arrayidx320 = getelementptr inbounds [144 x i32], [144 x i32]* @moved, i64 0, i64 %idxprom319
  %i123 = load i32, i32* %arrayidx320, align 4
  %inc321 = add nsw i32 %i123, 1
  store i32 %inc321, i32* %arrayidx320, align 4
  %idxprom322 = sext i32 %i2 to i64
  %arrayidx323 = getelementptr inbounds [144 x i32], [144 x i32]* @moved, i64 0, i64 %idxprom322
  %i124 = load i32, i32* %arrayidx323, align 4
  %inc324 = add nsw i32 %i124, 1
  store i32 %inc324, i32* %arrayidx323, align 4
  %i125 = load i32, i32* @white_to_move, align 4
  %xor325 = xor i32 %i125, 1
  store i32 %xor325, i32* @white_to_move, align 4
  %idxprom326 = sext i32 %i2 to i64
  %arrayidx327 = getelementptr inbounds [144 x i32], [144 x i32]* getelementptr inbounds ([14 x [144 x i32]], [14 x [144 x i32]]* @zobrist, i64 0, i64 2), i64 0, i64 %idxprom326
  %i126 = load i32, i32* %arrayidx327, align 4
  %i127 = load i32, i32* @hash, align 4
  %xor328 = xor i32 %i127, %i126
  store i32 %xor328, i32* @hash, align 4
  %idxprom329 = sext i32 %i3 to i64
  %arrayidx330 = getelementptr inbounds [144 x i32], [144 x i32]* getelementptr inbounds ([14 x [144 x i32]], [14 x [144 x i32]]* @zobrist, i64 0, i64 2), i64 0, i64 %idxprom329
  %i128 = load i32, i32* %arrayidx330, align 4
  %i129 = load i32, i32* @hash, align 4
  %xor331 = xor i32 %i129, %i128
  store i32 %xor331, i32* @hash, align 4
  %i130 = load i32, i32* @ply, align 4
  %inc332 = add nsw i32 %i130, 1
  store i32 %inc332, i32* @ply, align 4
  br label %return

if.end333:                                        ; preds = %if.end226
  %idxprom334 = sext i32 %i2 to i64
  %arrayidx335 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom334
  %i131 = load i32, i32* %arrayidx335, align 4
  %cmp336 = icmp ne i32 %i131, 5
  br i1 %cmp336, label %land.lhs.true, label %if.end369

land.lhs.true:                                    ; preds = %if.end333
  %idxprom337 = sext i32 %i2 to i64
  %arrayidx338 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom337
  %i132 = load i32, i32* %arrayidx338, align 4
  %cmp339 = icmp ne i32 %i132, 6
  br i1 %cmp339, label %if.then340, label %if.end369

if.then340:                                       ; preds = %land.lhs.true
  %idxprom341 = sext i32 %i2 to i64
  %arrayidx342 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom341
  %i133 = load i32, i32* %arrayidx342, align 4
  %idxprom343 = sext i32 %i133 to i64
  %arrayidx344 = getelementptr inbounds [14 x [144 x i32]], [14 x [144 x i32]]* @zobrist, i64 0, i64 %idxprom343
  %idxprom345 = sext i32 %i2 to i64
  %arrayidx346 = getelementptr inbounds [144 x i32], [144 x i32]* %arrayidx344, i64 0, i64 %idxprom345
  %i134 = load i32, i32* %arrayidx346, align 4
  %i135 = load i32, i32* @hash, align 4
  %xor347 = xor i32 %i135, %i134
  store i32 %xor347, i32* @hash, align 4
  %idxprom348 = sext i32 %i2 to i64
  %arrayidx349 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom348
  %i136 = load i32, i32* %arrayidx349, align 4
  %idxprom350 = sext i32 %i136 to i64
  %arrayidx351 = getelementptr inbounds [14 x [144 x i32]], [14 x [144 x i32]]* @zobrist, i64 0, i64 %idxprom350
  %idxprom352 = sext i32 %i3 to i64
  %arrayidx353 = getelementptr inbounds [144 x i32], [144 x i32]* %arrayidx351, i64 0, i64 %idxprom352
  %i137 = load i32, i32* %arrayidx353, align 4
  %i138 = load i32, i32* @hash, align 4
  %xor354 = xor i32 %i138, %i137
  store i32 %xor354, i32* @hash, align 4
  %idxprom355 = sext i32 %i2 to i64
  %arrayidx356 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom355
  %i139 = load i32, i32* %arrayidx356, align 4
  %idxprom357 = sext i32 %i3 to i64
  %arrayidx358 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom357
  store i32 %i139, i32* %arrayidx358, align 4
  %idxprom359 = sext i32 %i2 to i64
  %arrayidx360 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom359
  store i32 13, i32* %arrayidx360, align 4
  %idxprom361 = sext i32 %i3 to i64
  %arrayidx362 = getelementptr inbounds [144 x i32], [144 x i32]* @moved, i64 0, i64 %idxprom361
  %i140 = load i32, i32* %arrayidx362, align 4
  %inc363 = add nsw i32 %i140, 1
  store i32 %inc363, i32* %arrayidx362, align 4
  %idxprom364 = sext i32 %i2 to i64
  %arrayidx365 = getelementptr inbounds [144 x i32], [144 x i32]* @moved, i64 0, i64 %idxprom364
  %i141 = load i32, i32* %arrayidx365, align 4
  %inc366 = add nsw i32 %i141, 1
  store i32 %inc366, i32* %arrayidx365, align 4
  %i142 = load i32, i32* @white_to_move, align 4
  %xor367 = xor i32 %i142, 1
  store i32 %xor367, i32* @white_to_move, align 4
  %i143 = load i32, i32* @ply, align 4
  %inc368 = add nsw i32 %i143, 1
  store i32 %inc368, i32* @ply, align 4
  br label %return

if.end369:                                        ; preds = %land.lhs.true, %if.end333
  %idxprom370 = sext i32 %i2 to i64
  %arrayidx371 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom370
  %i144 = load i32, i32* %arrayidx371, align 4
  %cmp372 = icmp eq i32 %i144, 5
  br i1 %cmp372, label %if.then373, label %if.else413

if.then373:                                       ; preds = %if.end369
  store i32 %i3, i32* @wking_loc, align 4
  %idxprom374 = sext i32 %i3 to i64
  %arrayidx375 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom374
  store i32 5, i32* %arrayidx375, align 4
  %idxprom376 = sext i32 %i2 to i64
  %arrayidx377 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom376
  store i32 13, i32* %arrayidx377, align 4
  %idxprom378 = sext i32 %i3 to i64
  %arrayidx379 = getelementptr inbounds [144 x i32], [144 x i32]* @moved, i64 0, i64 %idxprom378
  %i145 = load i32, i32* %arrayidx379, align 4
  %inc380 = add nsw i32 %i145, 1
  store i32 %inc380, i32* %arrayidx379, align 4
  %idxprom381 = sext i32 %i2 to i64
  %arrayidx382 = getelementptr inbounds [144 x i32], [144 x i32]* @moved, i64 0, i64 %idxprom381
  %i146 = load i32, i32* %arrayidx382, align 4
  %inc383 = add nsw i32 %i146, 1
  store i32 %inc383, i32* %arrayidx382, align 4
  %i147 = load i32, i32* @white_to_move, align 4
  %xor384 = xor i32 %i147, 1
  store i32 %xor384, i32* @white_to_move, align 4
  %idxprom385 = sext i32 %i2 to i64
  %arrayidx386 = getelementptr inbounds [144 x i32], [144 x i32]* getelementptr inbounds ([14 x [144 x i32]], [14 x [144 x i32]]* @zobrist, i64 0, i64 5), i64 0, i64 %idxprom385
  %i148 = load i32, i32* %arrayidx386, align 4
  %i149 = load i32, i32* @hash, align 4
  %xor387 = xor i32 %i149, %i148
  store i32 %xor387, i32* @hash, align 4
  %idxprom388 = sext i32 %i3 to i64
  %arrayidx389 = getelementptr inbounds [144 x i32], [144 x i32]* getelementptr inbounds ([14 x [144 x i32]], [14 x [144 x i32]]* @zobrist, i64 0, i64 5), i64 0, i64 %idxprom388
  %i150 = load i32, i32* %arrayidx389, align 4
  %i151 = load i32, i32* @hash, align 4
  %xor390 = xor i32 %i151, %i150
  store i32 %xor390, i32* @hash, align 4
  %cmp391 = icmp eq i32 %i6, 1
  br i1 %cmp391, label %if.then392, label %if.else400

if.then392:                                       ; preds = %if.then373
  store i32 13, i32* getelementptr inbounds ([144 x i32], [144 x i32]* @board, i64 0, i64 33), align 4
  store i32 7, i32* getelementptr inbounds ([144 x i32], [144 x i32]* @board, i64 0, i64 31), align 4
  %i152 = load i32, i32* getelementptr inbounds ([144 x i32], [144 x i32]* @moved, i64 0, i64 33), align 4
  %inc393 = add nsw i32 %i152, 1
  store i32 %inc393, i32* getelementptr inbounds ([144 x i32], [144 x i32]* @moved, i64 0, i64 33), align 4
  %i153 = load i32, i32* getelementptr inbounds ([144 x i32], [144 x i32]* @moved, i64 0, i64 31), align 4
  %inc394 = add nsw i32 %i153, 1
  store i32 %inc394, i32* getelementptr inbounds ([144 x i32], [144 x i32]* @moved, i64 0, i64 31), align 4
  store i32 1, i32* @white_castled, align 4
  %i154 = load i32, i32* getelementptr inbounds ([144 x i32], [144 x i32]* @squares, i64 0, i64 33), align 4
  %idxprom395 = sext i32 %i154 to i64
  %arrayidx396 = getelementptr inbounds [62 x i32], [62 x i32]* @pieces, i64 0, i64 %idxprom395
  store i32 31, i32* %arrayidx396, align 4
  %i155 = load i32, i32* getelementptr inbounds ([144 x i32], [144 x i32]* @squares, i64 0, i64 33), align 4
  store i32 %i155, i32* getelementptr inbounds ([144 x i32], [144 x i32]* @squares, i64 0, i64 31), align 4
  store i32 0, i32* getelementptr inbounds ([144 x i32], [144 x i32]* @squares, i64 0, i64 33), align 4
  %i156 = load i32, i32* getelementptr inbounds ([14 x [144 x i32]], [14 x [144 x i32]]* @zobrist, i64 0, i64 7, i64 33), align 4
  %i157 = load i32, i32* @hash, align 4
  %xor397 = xor i32 %i157, %i156
  store i32 %xor397, i32* @hash, align 4
  %i158 = load i32, i32* getelementptr inbounds ([14 x [144 x i32]], [14 x [144 x i32]]* @zobrist, i64 0, i64 7, i64 31), align 4
  %i159 = load i32, i32* @hash, align 4
  %xor398 = xor i32 %i159, %i158
  store i32 %xor398, i32* @hash, align 4
  %i160 = load i32, i32* @ply, align 4
  %inc399 = add nsw i32 %i160, 1
  store i32 %inc399, i32* @ply, align 4
  br label %return

if.else400:                                       ; preds = %if.then373
  %cmp401 = icmp eq i32 %i6, 2
  br i1 %cmp401, label %if.then402, label %if.end410

if.then402:                                       ; preds = %if.else400
  store i32 13, i32* getelementptr inbounds ([144 x i32], [144 x i32]* @board, i64 0, i64 26), align 8
  store i32 7, i32* getelementptr inbounds ([144 x i32], [144 x i32]* @board, i64 0, i64 29), align 4
  %i161 = load i32, i32* getelementptr inbounds ([144 x i32], [144 x i32]* @moved, i64 0, i64 26), align 8
  %inc403 = add nsw i32 %i161, 1
  store i32 %inc403, i32* getelementptr inbounds ([144 x i32], [144 x i32]* @moved, i64 0, i64 26), align 8
  %i162 = load i32, i32* getelementptr inbounds ([144 x i32], [144 x i32]* @moved, i64 0, i64 29), align 4
  %inc404 = add nsw i32 %i162, 1
  store i32 %inc404, i32* getelementptr inbounds ([144 x i32], [144 x i32]* @moved, i64 0, i64 29), align 4
  store i32 2, i32* @white_castled, align 4
  %i163 = load i32, i32* getelementptr inbounds ([144 x i32], [144 x i32]* @squares, i64 0, i64 26), align 8
  %idxprom405 = sext i32 %i163 to i64
  %arrayidx406 = getelementptr inbounds [62 x i32], [62 x i32]* @pieces, i64 0, i64 %idxprom405
  store i32 29, i32* %arrayidx406, align 4
  %i164 = load i32, i32* getelementptr inbounds ([144 x i32], [144 x i32]* @squares, i64 0, i64 26), align 8
  store i32 %i164, i32* getelementptr inbounds ([144 x i32], [144 x i32]* @squares, i64 0, i64 29), align 4
  store i32 0, i32* getelementptr inbounds ([144 x i32], [144 x i32]* @squares, i64 0, i64 26), align 8
  %i165 = load i32, i32* getelementptr inbounds ([14 x [144 x i32]], [14 x [144 x i32]]* @zobrist, i64 0, i64 7, i64 26), align 8
  %i166 = load i32, i32* @hash, align 4
  %xor407 = xor i32 %i166, %i165
  store i32 %xor407, i32* @hash, align 4
  %i167 = load i32, i32* getelementptr inbounds ([14 x [144 x i32]], [14 x [144 x i32]]* @zobrist, i64 0, i64 7, i64 29), align 4
  %i168 = load i32, i32* @hash, align 4
  %xor408 = xor i32 %i168, %i167
  store i32 %xor408, i32* @hash, align 4
  %i169 = load i32, i32* @ply, align 4
  %inc409 = add nsw i32 %i169, 1
  store i32 %inc409, i32* @ply, align 4
  br label %return

if.end410:                                        ; preds = %if.else400
  br label %if.end411

if.end411:                                        ; preds = %if.end410
  %i170 = load i32, i32* @ply, align 4
  %inc412 = add nsw i32 %i170, 1
  store i32 %inc412, i32* @ply, align 4
  br label %return

if.else413:                                       ; preds = %if.end369
  store i32 %i3, i32* @bking_loc, align 4
  %idxprom414 = sext i32 %i3 to i64
  %arrayidx415 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom414
  store i32 6, i32* %arrayidx415, align 4
  %idxprom416 = sext i32 %i2 to i64
  %arrayidx417 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom416
  store i32 13, i32* %arrayidx417, align 4
  %idxprom418 = sext i32 %i3 to i64
  %arrayidx419 = getelementptr inbounds [144 x i32], [144 x i32]* @moved, i64 0, i64 %idxprom418
  %i171 = load i32, i32* %arrayidx419, align 4
  %inc420 = add nsw i32 %i171, 1
  store i32 %inc420, i32* %arrayidx419, align 4
  %idxprom421 = sext i32 %i2 to i64
  %arrayidx422 = getelementptr inbounds [144 x i32], [144 x i32]* @moved, i64 0, i64 %idxprom421
  %i172 = load i32, i32* %arrayidx422, align 4
  %inc423 = add nsw i32 %i172, 1
  store i32 %inc423, i32* %arrayidx422, align 4
  %i173 = load i32, i32* @white_to_move, align 4
  %xor424 = xor i32 %i173, 1
  store i32 %xor424, i32* @white_to_move, align 4
  %idxprom425 = sext i32 %i2 to i64
  %arrayidx426 = getelementptr inbounds [144 x i32], [144 x i32]* getelementptr inbounds ([14 x [144 x i32]], [14 x [144 x i32]]* @zobrist, i64 0, i64 6), i64 0, i64 %idxprom425
  %i174 = load i32, i32* %arrayidx426, align 4
  %i175 = load i32, i32* @hash, align 4
  %xor427 = xor i32 %i175, %i174
  store i32 %xor427, i32* @hash, align 4
  %idxprom428 = sext i32 %i3 to i64
  %arrayidx429 = getelementptr inbounds [144 x i32], [144 x i32]* getelementptr inbounds ([14 x [144 x i32]], [14 x [144 x i32]]* @zobrist, i64 0, i64 6), i64 0, i64 %idxprom428
  %i176 = load i32, i32* %arrayidx429, align 4
  %i177 = load i32, i32* @hash, align 4
  %xor430 = xor i32 %i177, %i176
  store i32 %xor430, i32* @hash, align 4
  %cmp431 = icmp eq i32 %i6, 3
  br i1 %cmp431, label %if.then432, label %if.else440

if.then432:                                       ; preds = %if.else413
  store i32 13, i32* getelementptr inbounds ([144 x i32], [144 x i32]* @board, i64 0, i64 117), align 4
  store i32 8, i32* getelementptr inbounds ([144 x i32], [144 x i32]* @board, i64 0, i64 115), align 4
  %i178 = load i32, i32* getelementptr inbounds ([144 x i32], [144 x i32]* @moved, i64 0, i64 117), align 4
  %inc433 = add nsw i32 %i178, 1
  store i32 %inc433, i32* getelementptr inbounds ([144 x i32], [144 x i32]* @moved, i64 0, i64 117), align 4
  %i179 = load i32, i32* getelementptr inbounds ([144 x i32], [144 x i32]* @moved, i64 0, i64 115), align 4
  %inc434 = add nsw i32 %i179, 1
  store i32 %inc434, i32* getelementptr inbounds ([144 x i32], [144 x i32]* @moved, i64 0, i64 115), align 4
  store i32 3, i32* @black_castled, align 4
  %i180 = load i32, i32* getelementptr inbounds ([144 x i32], [144 x i32]* @squares, i64 0, i64 117), align 4
  %idxprom435 = sext i32 %i180 to i64
  %arrayidx436 = getelementptr inbounds [62 x i32], [62 x i32]* @pieces, i64 0, i64 %idxprom435
  store i32 115, i32* %arrayidx436, align 4
  %i181 = load i32, i32* getelementptr inbounds ([144 x i32], [144 x i32]* @squares, i64 0, i64 117), align 4
  store i32 %i181, i32* getelementptr inbounds ([144 x i32], [144 x i32]* @squares, i64 0, i64 115), align 4
  store i32 0, i32* getelementptr inbounds ([144 x i32], [144 x i32]* @squares, i64 0, i64 117), align 4
  %i182 = load i32, i32* getelementptr inbounds ([14 x [144 x i32]], [14 x [144 x i32]]* @zobrist, i64 0, i64 8, i64 117), align 4
  %i183 = load i32, i32* @hash, align 4
  %xor437 = xor i32 %i183, %i182
  store i32 %xor437, i32* @hash, align 4
  %i184 = load i32, i32* getelementptr inbounds ([14 x [144 x i32]], [14 x [144 x i32]]* @zobrist, i64 0, i64 8, i64 115), align 4
  %i185 = load i32, i32* @hash, align 4
  %xor438 = xor i32 %i185, %i184
  store i32 %xor438, i32* @hash, align 4
  %i186 = load i32, i32* @ply, align 4
  %inc439 = add nsw i32 %i186, 1
  store i32 %inc439, i32* @ply, align 4
  br label %return

if.else440:                                       ; preds = %if.else413
  %cmp441 = icmp eq i32 %i6, 4
  br i1 %cmp441, label %if.then442, label %if.end450

if.then442:                                       ; preds = %if.else440
  store i32 13, i32* getelementptr inbounds ([144 x i32], [144 x i32]* @board, i64 0, i64 110), align 8
  store i32 8, i32* getelementptr inbounds ([144 x i32], [144 x i32]* @board, i64 0, i64 113), align 4
  %i187 = load i32, i32* getelementptr inbounds ([144 x i32], [144 x i32]* @moved, i64 0, i64 110), align 8
  %inc443 = add nsw i32 %i187, 1
  store i32 %inc443, i32* getelementptr inbounds ([144 x i32], [144 x i32]* @moved, i64 0, i64 110), align 8
  %i188 = load i32, i32* getelementptr inbounds ([144 x i32], [144 x i32]* @moved, i64 0, i64 113), align 4
  %inc444 = add nsw i32 %i188, 1
  store i32 %inc444, i32* getelementptr inbounds ([144 x i32], [144 x i32]* @moved, i64 0, i64 113), align 4
  store i32 4, i32* @black_castled, align 4
  %i189 = load i32, i32* getelementptr inbounds ([144 x i32], [144 x i32]* @squares, i64 0, i64 110), align 8
  %idxprom445 = sext i32 %i189 to i64
  %arrayidx446 = getelementptr inbounds [62 x i32], [62 x i32]* @pieces, i64 0, i64 %idxprom445
  store i32 113, i32* %arrayidx446, align 4
  %i190 = load i32, i32* getelementptr inbounds ([144 x i32], [144 x i32]* @squares, i64 0, i64 110), align 8
  store i32 %i190, i32* getelementptr inbounds ([144 x i32], [144 x i32]* @squares, i64 0, i64 113), align 4
  store i32 0, i32* getelementptr inbounds ([144 x i32], [144 x i32]* @squares, i64 0, i64 110), align 8
  %i191 = load i32, i32* getelementptr inbounds ([14 x [144 x i32]], [14 x [144 x i32]]* @zobrist, i64 0, i64 8, i64 110), align 8
  %i192 = load i32, i32* @hash, align 4
  %xor447 = xor i32 %i192, %i191
  store i32 %xor447, i32* @hash, align 4
  %i193 = load i32, i32* getelementptr inbounds ([14 x [144 x i32]], [14 x [144 x i32]]* @zobrist, i64 0, i64 8, i64 113), align 4
  %i194 = load i32, i32* @hash, align 4
  %xor448 = xor i32 %i194, %i193
  store i32 %xor448, i32* @hash, align 4
  %i195 = load i32, i32* @ply, align 4
  %inc449 = add nsw i32 %i195, 1
  store i32 %inc449, i32* @ply, align 4
  br label %return

if.end450:                                        ; preds = %if.else440
  br label %if.end451

if.end451:                                        ; preds = %if.end450
  br label %if.end452

if.end452:                                        ; preds = %if.end451
  %i196 = load i32, i32* @ply, align 4
  %inc453 = add nsw i32 %i196, 1
  store i32 %inc453, i32* @ply, align 4
  br label %return

return:                                           ; preds = %if.end452, %if.then442, %if.then432, %if.end411, %if.then402, %if.then392, %if.then340, %if.end314, %if.then263, %if.then232, %if.end207, %if.then156, %if.then125, %for.end
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @unmake(%struct.move_s* %moves, i32 %i) #0 {
entry:
  %idxprom = sext i32 %i to i64
  %arrayidx = getelementptr inbounds %struct.move_s, %struct.move_s* %moves, i64 %idxprom
  %ep1 = getelementptr inbounds %struct.move_s, %struct.move_s* %arrayidx, i32 0, i32 5
  %i1 = load i32, i32* %ep1, align 4
  %idxprom2 = sext i32 %i to i64
  %arrayidx3 = getelementptr inbounds %struct.move_s, %struct.move_s* %moves, i64 %idxprom2
  %from4 = getelementptr inbounds %struct.move_s, %struct.move_s* %arrayidx3, i32 0, i32 0
  %i2 = load i32, i32* %from4, align 4
  %idxprom5 = sext i32 %i to i64
  %arrayidx6 = getelementptr inbounds %struct.move_s, %struct.move_s* %moves, i64 %idxprom5
  %target7 = getelementptr inbounds %struct.move_s, %struct.move_s* %arrayidx6, i32 0, i32 1
  %i3 = load i32, i32* %target7, align 4
  %idxprom8 = sext i32 %i to i64
  %arrayidx9 = getelementptr inbounds %struct.move_s, %struct.move_s* %moves, i64 %idxprom8
  %captured10 = getelementptr inbounds %struct.move_s, %struct.move_s* %arrayidx9, i32 0, i32 2
  %i4 = load i32, i32* %captured10, align 4
  %idxprom11 = sext i32 %i to i64
  %arrayidx12 = getelementptr inbounds %struct.move_s, %struct.move_s* %moves, i64 %idxprom11
  %promoted13 = getelementptr inbounds %struct.move_s, %struct.move_s* %arrayidx12, i32 0, i32 3
  %i5 = load i32, i32* %promoted13, align 4
  %idxprom14 = sext i32 %i to i64
  %arrayidx15 = getelementptr inbounds %struct.move_s, %struct.move_s* %moves, i64 %idxprom14
  %castled16 = getelementptr inbounds %struct.move_s, %struct.move_s* %arrayidx15, i32 0, i32 4
  %i6 = load i32, i32* %castled16, align 4
  %i7 = load i32, i32* @ply, align 4
  %dec = add nsw i32 %i7, -1
  store i32 %dec, i32* @ply, align 4
  %i8 = load i32, i32* @ply, align 4
  %idxprom17 = sext i32 %i8 to i64
  %arrayidx18 = getelementptr inbounds [300 x %struct.move_x], [300 x %struct.move_x]* @path_x, i64 0, i64 %idxprom17
  %epsq = getelementptr inbounds %struct.move_x, %struct.move_x* %arrayidx18, i32 0, i32 2
  %i9 = load i32, i32* %epsq, align 8
  store i32 %i9, i32* @ep_square, align 4
  %i10 = load i32, i32* @ply, align 4
  %idxprom19 = sext i32 %i10 to i64
  %arrayidx20 = getelementptr inbounds [300 x %struct.move_x], [300 x %struct.move_x]* @path_x, i64 0, i64 %idxprom19
  %fifty = getelementptr inbounds %struct.move_x, %struct.move_x* %arrayidx20, i32 0, i32 3
  %i11 = load i32, i32* %fifty, align 4
  store i32 %i11, i32* @fifty, align 4
  %cmp = icmp eq i32 %i2, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %idxprom21 = sext i32 %i3 to i64
  %arrayidx22 = getelementptr inbounds [144 x i32], [144 x i32]* @squares, i64 0, i64 %idxprom21
  %i12 = load i32, i32* %arrayidx22, align 4
  %idxprom23 = sext i32 %i12 to i64
  %arrayidx24 = getelementptr inbounds [62 x i32], [62 x i32]* @pieces, i64 0, i64 %idxprom23
  store i32 0, i32* %arrayidx24, align 4
  %i13 = load i32, i32* @ply, align 4
  %idxprom25 = sext i32 %i13 to i64
  %arrayidx26 = getelementptr inbounds [300 x %struct.move_x], [300 x %struct.move_x]* @path_x, i64 0, i64 %idxprom25
  %was_promoted = getelementptr inbounds %struct.move_x, %struct.move_x* %arrayidx26, i32 0, i32 1
  %i14 = load i32, i32* %was_promoted, align 4
  %idxprom27 = sext i32 %i3 to i64
  %arrayidx28 = getelementptr inbounds [144 x i32], [144 x i32]* @squares, i64 0, i64 %idxprom27
  %i15 = load i32, i32* %arrayidx28, align 4
  %idxprom29 = sext i32 %i15 to i64
  %arrayidx30 = getelementptr inbounds [62 x i32], [62 x i32]* @is_promoted, i64 0, i64 %idxprom29
  store i32 %i14, i32* %arrayidx30, align 4
  %idxprom31 = sext i32 %i3 to i64
  %arrayidx32 = getelementptr inbounds [144 x i32], [144 x i32]* @squares, i64 0, i64 %idxprom31
  store i32 0, i32* %arrayidx32, align 4
  %i16 = load i32, i32* @piece_count, align 4
  %dec33 = add nsw i32 %i16, -1
  store i32 %dec33, i32* @piece_count, align 4
  %i17 = load i32, i32* @white_to_move, align 4
  %tobool = icmp ne i32 %i17, 0
  %i18 = zext i1 %tobool to i64
  %cond = select i1 %tobool, i32 1, i32 0
  call void @DropaddHolding(i32 %i5, i32 %cond)
  %idxprom34 = sext i32 %i5 to i64
  %arrayidx35 = getelementptr inbounds [14 x i32], [14 x i32]* @material, i64 0, i64 %idxprom34
  %i19 = load i32, i32* %arrayidx35, align 4
  %i20 = load i32, i32* @Material, align 4
  %sub = sub nsw i32 %i20, %i19
  store i32 %sub, i32* @Material, align 4
  %idxprom36 = sext i32 %i3 to i64
  %arrayidx37 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom36
  store i32 %i4, i32* %arrayidx37, align 4
  %idxprom38 = sext i32 %i5 to i64
  %arrayidx39 = getelementptr inbounds [14 x [144 x i32]], [14 x [144 x i32]]* @zobrist, i64 0, i64 %idxprom38
  %idxprom40 = sext i32 %i3 to i64
  %arrayidx41 = getelementptr inbounds [144 x i32], [144 x i32]* %arrayidx39, i64 0, i64 %idxprom40
  %i21 = load i32, i32* %arrayidx41, align 4
  %i22 = load i32, i32* @hash, align 4
  %xor = xor i32 %i22, %i21
  store i32 %xor, i32* @hash, align 4
  %i23 = load i32, i32* @white_to_move, align 4
  %xor42 = xor i32 %i23, 1
  store i32 %xor42, i32* @white_to_move, align 4
  br label %return

if.else:                                          ; preds = %entry
  %idxprom43 = sext i32 %i3 to i64
  %arrayidx44 = getelementptr inbounds [144 x i32], [144 x i32]* @squares, i64 0, i64 %idxprom43
  %i24 = load i32, i32* %arrayidx44, align 4
  %idxprom45 = sext i32 %i2 to i64
  %arrayidx46 = getelementptr inbounds [144 x i32], [144 x i32]* @squares, i64 0, i64 %idxprom45
  store i32 %i24, i32* %arrayidx46, align 4
  %i25 = load i32, i32* @ply, align 4
  %idxprom47 = sext i32 %i25 to i64
  %arrayidx48 = getelementptr inbounds [300 x %struct.move_x], [300 x %struct.move_x]* @path_x, i64 0, i64 %idxprom47
  %cap_num = getelementptr inbounds %struct.move_x, %struct.move_x* %arrayidx48, i32 0, i32 0
  %i26 = load i32, i32* %cap_num, align 16
  %idxprom49 = sext i32 %i3 to i64
  %arrayidx50 = getelementptr inbounds [144 x i32], [144 x i32]* @squares, i64 0, i64 %idxprom49
  store i32 %i26, i32* %arrayidx50, align 4
  %idxprom51 = sext i32 %i3 to i64
  %arrayidx52 = getelementptr inbounds [144 x i32], [144 x i32]* @squares, i64 0, i64 %idxprom51
  %i27 = load i32, i32* %arrayidx52, align 4
  %idxprom53 = sext i32 %i27 to i64
  %arrayidx54 = getelementptr inbounds [62 x i32], [62 x i32]* @pieces, i64 0, i64 %idxprom53
  store i32 %i3, i32* %arrayidx54, align 4
  %idxprom55 = sext i32 %i2 to i64
  %arrayidx56 = getelementptr inbounds [144 x i32], [144 x i32]* @squares, i64 0, i64 %idxprom55
  %i28 = load i32, i32* %arrayidx56, align 4
  %idxprom57 = sext i32 %i28 to i64
  %arrayidx58 = getelementptr inbounds [62 x i32], [62 x i32]* @pieces, i64 0, i64 %idxprom57
  store i32 %i2, i32* %arrayidx58, align 4
  %i29 = load i32, i32* @ply, align 4
  %idxprom59 = sext i32 %i29 to i64
  %arrayidx60 = getelementptr inbounds [300 x %struct.move_x], [300 x %struct.move_x]* @path_x, i64 0, i64 %idxprom59
  %was_promoted61 = getelementptr inbounds %struct.move_x, %struct.move_x* %arrayidx60, i32 0, i32 1
  %i30 = load i32, i32* %was_promoted61, align 4
  %idxprom62 = sext i32 %i3 to i64
  %arrayidx63 = getelementptr inbounds [144 x i32], [144 x i32]* @squares, i64 0, i64 %idxprom62
  %i31 = load i32, i32* %arrayidx63, align 4
  %idxprom64 = sext i32 %i31 to i64
  %arrayidx65 = getelementptr inbounds [62 x i32], [62 x i32]* @is_promoted, i64 0, i64 %idxprom64
  store i32 %i30, i32* %arrayidx65, align 4
  %tobool66 = icmp ne i32 %i1, 0
  br i1 %tobool66, label %if.end91, label %if.then67

if.then67:                                        ; preds = %if.else
  switch i32 %i4, label %sw.default [
    i32 13, label %sw.bb
  ]

sw.bb:                                            ; preds = %if.then67
  br label %sw.epilog

sw.default:                                       ; preds = %if.then67
  %i32 = load i32, i32* @Variant, align 4
  %cmp68 = icmp eq i32 %i32, 1
  br i1 %cmp68, label %if.then70, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %sw.default
  %i33 = load i32, i32* @Variant, align 4
  %cmp69 = icmp eq i32 %i33, 0
  br i1 %cmp69, label %if.then70, label %if.end83

if.then70:                                        ; preds = %lor.lhs.false, %sw.default
  %idxprom71 = sext i32 %i3 to i64
  %arrayidx72 = getelementptr inbounds [144 x i32], [144 x i32]* @squares, i64 0, i64 %idxprom71
  %i34 = load i32, i32* %arrayidx72, align 4
  %idxprom73 = sext i32 %i34 to i64
  %arrayidx74 = getelementptr inbounds [62 x i32], [62 x i32]* @is_promoted, i64 0, i64 %idxprom73
  %i35 = load i32, i32* %arrayidx74, align 4
  %tobool75 = icmp ne i32 %i35, 0
  br i1 %tobool75, label %if.then76, label %if.else79

if.then76:                                        ; preds = %if.then70
  %call = call i32 @SwitchPromoted(i32 %i4)
  %i36 = load i32, i32* @white_to_move, align 4
  %tobool77 = icmp ne i32 %i36, 0
  %i37 = zext i1 %tobool77 to i64
  %cond78 = select i1 %tobool77, i32 1, i32 0
  call void @removeHolding(i32 %call, i32 %cond78)
  br label %if.end

if.else79:                                        ; preds = %if.then70
  %call80 = call i32 @SwitchColor(i32 %i4)
  %i38 = load i32, i32* @white_to_move, align 4
  %tobool81 = icmp ne i32 %i38, 0
  %i39 = zext i1 %tobool81 to i64
  %cond82 = select i1 %tobool81, i32 1, i32 0
  call void @removeHolding(i32 %call80, i32 %cond82)
  br label %if.end

if.end:                                           ; preds = %if.else79, %if.then76
  br label %if.end83

if.end83:                                         ; preds = %if.end, %lor.lhs.false
  %idxprom84 = sext i32 %i4 to i64
  %arrayidx85 = getelementptr inbounds [14 x [144 x i32]], [14 x [144 x i32]]* @zobrist, i64 0, i64 %idxprom84
  %idxprom86 = sext i32 %i3 to i64
  %arrayidx87 = getelementptr inbounds [144 x i32], [144 x i32]* %arrayidx85, i64 0, i64 %idxprom86
  %i40 = load i32, i32* %arrayidx87, align 4
  %i41 = load i32, i32* @hash, align 4
  %xor88 = xor i32 %i41, %i40
  store i32 %xor88, i32* @hash, align 4
  %idxprom89 = sext i32 %i4 to i64
  %arrayidx90 = getelementptr inbounds [14 x i32], [14 x i32]* @material, i64 0, i64 %idxprom89
  %i42 = load i32, i32* %arrayidx90, align 4
  %i43 = load i32, i32* @Material, align 4
  %add = add nsw i32 %i43, %i42
  store i32 %add, i32* @Material, align 4
  %i44 = load i32, i32* @piece_count, align 4
  %inc = add nsw i32 %i44, 1
  store i32 %inc, i32* @piece_count, align 4
  br label %sw.epilog

sw.epilog:                                        ; preds = %if.end83, %sw.bb
  br label %if.end91

if.end91:                                         ; preds = %sw.epilog, %if.else
  %idxprom92 = sext i32 %i3 to i64
  %arrayidx93 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom92
  %i45 = load i32, i32* %arrayidx93, align 4
  %cmp94 = icmp eq i32 %i45, 1
  br i1 %cmp94, label %if.then95, label %if.end160

if.then95:                                        ; preds = %if.end91
  %tobool96 = icmp ne i32 %i1, 0
  br i1 %tobool96, label %if.then97, label %if.end142

if.then97:                                        ; preds = %if.then95
  %idxprom98 = sext i32 %i3 to i64
  %arrayidx99 = getelementptr inbounds [144 x i32], [144 x i32]* getelementptr inbounds ([14 x [144 x i32]], [14 x [144 x i32]]* @zobrist, i64 0, i64 1), i64 0, i64 %idxprom98
  %i46 = load i32, i32* %arrayidx99, align 4
  %i47 = load i32, i32* @hash, align 4
  %xor100 = xor i32 %i47, %i46
  store i32 %xor100, i32* @hash, align 4
  %idxprom101 = sext i32 %i2 to i64
  %arrayidx102 = getelementptr inbounds [144 x i32], [144 x i32]* getelementptr inbounds ([14 x [144 x i32]], [14 x [144 x i32]]* @zobrist, i64 0, i64 1), i64 0, i64 %idxprom101
  %i48 = load i32, i32* %arrayidx102, align 4
  %i49 = load i32, i32* @hash, align 4
  %xor103 = xor i32 %i49, %i48
  store i32 %xor103, i32* @hash, align 4
  %sub104 = sub nsw i32 %i3, 12
  %idxprom105 = sext i32 %sub104 to i64
  %arrayidx106 = getelementptr inbounds [144 x i32], [144 x i32]* getelementptr inbounds ([14 x [144 x i32]], [14 x [144 x i32]]* @zobrist, i64 0, i64 2), i64 0, i64 %idxprom105
  %i50 = load i32, i32* %arrayidx106, align 4
  %i51 = load i32, i32* @hash, align 4
  %xor107 = xor i32 %i51, %i50
  store i32 %xor107, i32* @hash, align 4
  %idxprom108 = sext i32 %i3 to i64
  %arrayidx109 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom108
  store i32 13, i32* %arrayidx109, align 4
  %idxprom110 = sext i32 %i2 to i64
  %arrayidx111 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom110
  store i32 1, i32* %arrayidx111, align 4
  %i52 = load i32, i32* getelementptr inbounds ([14 x i32], [14 x i32]* @material, i64 0, i64 2), align 8
  %i53 = load i32, i32* @Material, align 4
  %add112 = add nsw i32 %i53, %i52
  store i32 %add112, i32* @Material, align 4
  call void @removeHolding(i32 1, i32 0)
  %i54 = load i32, i32* @piece_count, align 4
  %inc113 = add nsw i32 %i54, 1
  store i32 %inc113, i32* @piece_count, align 4
  %sub114 = sub nsw i32 %i3, 12
  %idxprom115 = sext i32 %sub114 to i64
  %arrayidx116 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom115
  store i32 2, i32* %arrayidx116, align 4
  %idxprom117 = sext i32 %i3 to i64
  %arrayidx118 = getelementptr inbounds [144 x i32], [144 x i32]* @moved, i64 0, i64 %idxprom117
  %i55 = load i32, i32* %arrayidx118, align 4
  %dec119 = add nsw i32 %i55, -1
  store i32 %dec119, i32* %arrayidx118, align 4
  %idxprom120 = sext i32 %i2 to i64
  %arrayidx121 = getelementptr inbounds [144 x i32], [144 x i32]* @moved, i64 0, i64 %idxprom120
  %i56 = load i32, i32* %arrayidx121, align 4
  %dec122 = add nsw i32 %i56, -1
  store i32 %dec122, i32* %arrayidx121, align 4
  %sub123 = sub nsw i32 %i3, 12
  %idxprom124 = sext i32 %sub123 to i64
  %arrayidx125 = getelementptr inbounds [144 x i32], [144 x i32]* @moved, i64 0, i64 %idxprom124
  %i57 = load i32, i32* %arrayidx125, align 4
  %dec126 = add nsw i32 %i57, -1
  store i32 %dec126, i32* %arrayidx125, align 4
  %i58 = load i32, i32* @white_to_move, align 4
  %xor127 = xor i32 %i58, 1
  store i32 %xor127, i32* @white_to_move, align 4
  %i59 = load i32, i32* @ply, align 4
  %idxprom128 = sext i32 %i59 to i64
  %arrayidx129 = getelementptr inbounds [300 x %struct.move_x], [300 x %struct.move_x]* @path_x, i64 0, i64 %idxprom128
  %cap_num130 = getelementptr inbounds %struct.move_x, %struct.move_x* %arrayidx129, i32 0, i32 0
  %i60 = load i32, i32* %cap_num130, align 16
  %sub131 = sub nsw i32 %i3, 12
  %idxprom132 = sext i32 %sub131 to i64
  %arrayidx133 = getelementptr inbounds [144 x i32], [144 x i32]* @squares, i64 0, i64 %idxprom132
  store i32 %i60, i32* %arrayidx133, align 4
  %sub134 = sub nsw i32 %i3, 12
  %i61 = load i32, i32* @ply, align 4
  %idxprom135 = sext i32 %i61 to i64
  %arrayidx136 = getelementptr inbounds [300 x %struct.move_x], [300 x %struct.move_x]* @path_x, i64 0, i64 %idxprom135
  %cap_num137 = getelementptr inbounds %struct.move_x, %struct.move_x* %arrayidx136, i32 0, i32 0
  %i62 = load i32, i32* %cap_num137, align 16
  %idxprom138 = sext i32 %i62 to i64
  %arrayidx139 = getelementptr inbounds [62 x i32], [62 x i32]* @pieces, i64 0, i64 %idxprom138
  store i32 %sub134, i32* %arrayidx139, align 4
  %idxprom140 = sext i32 %i3 to i64
  %arrayidx141 = getelementptr inbounds [144 x i32], [144 x i32]* @squares, i64 0, i64 %idxprom140
  store i32 0, i32* %arrayidx141, align 4
  br label %return

if.end142:                                        ; preds = %if.then95
  %idxprom143 = sext i32 %i2 to i64
  %arrayidx144 = getelementptr inbounds [144 x i32], [144 x i32]* getelementptr inbounds ([14 x [144 x i32]], [14 x [144 x i32]]* @zobrist, i64 0, i64 1), i64 0, i64 %idxprom143
  %i63 = load i32, i32* %arrayidx144, align 4
  %i64 = load i32, i32* @hash, align 4
  %xor145 = xor i32 %i64, %i63
  store i32 %xor145, i32* @hash, align 4
  %idxprom146 = sext i32 %i3 to i64
  %arrayidx147 = getelementptr inbounds [144 x i32], [144 x i32]* getelementptr inbounds ([14 x [144 x i32]], [14 x [144 x i32]]* @zobrist, i64 0, i64 1), i64 0, i64 %idxprom146
  %i65 = load i32, i32* %arrayidx147, align 4
  %i66 = load i32, i32* @hash, align 4
  %xor148 = xor i32 %i66, %i65
  store i32 %xor148, i32* @hash, align 4
  %idxprom149 = sext i32 %i3 to i64
  %arrayidx150 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom149
  store i32 %i4, i32* %arrayidx150, align 4
  %idxprom151 = sext i32 %i2 to i64
  %arrayidx152 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom151
  store i32 1, i32* %arrayidx152, align 4
  %idxprom153 = sext i32 %i3 to i64
  %arrayidx154 = getelementptr inbounds [144 x i32], [144 x i32]* @moved, i64 0, i64 %idxprom153
  %i67 = load i32, i32* %arrayidx154, align 4
  %dec155 = add nsw i32 %i67, -1
  store i32 %dec155, i32* %arrayidx154, align 4
  %idxprom156 = sext i32 %i2 to i64
  %arrayidx157 = getelementptr inbounds [144 x i32], [144 x i32]* @moved, i64 0, i64 %idxprom156
  %i68 = load i32, i32* %arrayidx157, align 4
  %dec158 = add nsw i32 %i68, -1
  store i32 %dec158, i32* %arrayidx157, align 4
  %i69 = load i32, i32* @white_to_move, align 4
  %xor159 = xor i32 %i69, 1
  store i32 %xor159, i32* @white_to_move, align 4
  br label %return

if.end160:                                        ; preds = %if.end91
  %idxprom161 = sext i32 %i3 to i64
  %arrayidx162 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom161
  %i70 = load i32, i32* %arrayidx162, align 4
  %cmp163 = icmp eq i32 %i70, 2
  br i1 %cmp163, label %if.then164, label %if.end229

if.then164:                                       ; preds = %if.end160
  %tobool165 = icmp ne i32 %i1, 0
  br i1 %tobool165, label %if.then166, label %if.end211

if.then166:                                       ; preds = %if.then164
  %idxprom167 = sext i32 %i3 to i64
  %arrayidx168 = getelementptr inbounds [144 x i32], [144 x i32]* getelementptr inbounds ([14 x [144 x i32]], [14 x [144 x i32]]* @zobrist, i64 0, i64 2), i64 0, i64 %idxprom167
  %i71 = load i32, i32* %arrayidx168, align 4
  %i72 = load i32, i32* @hash, align 4
  %xor169 = xor i32 %i72, %i71
  store i32 %xor169, i32* @hash, align 4
  %idxprom170 = sext i32 %i2 to i64
  %arrayidx171 = getelementptr inbounds [144 x i32], [144 x i32]* getelementptr inbounds ([14 x [144 x i32]], [14 x [144 x i32]]* @zobrist, i64 0, i64 2), i64 0, i64 %idxprom170
  %i73 = load i32, i32* %arrayidx171, align 4
  %i74 = load i32, i32* @hash, align 4
  %xor172 = xor i32 %i74, %i73
  store i32 %xor172, i32* @hash, align 4
  %add173 = add nsw i32 %i3, 12
  %idxprom174 = sext i32 %add173 to i64
  %arrayidx175 = getelementptr inbounds [144 x i32], [144 x i32]* getelementptr inbounds ([14 x [144 x i32]], [14 x [144 x i32]]* @zobrist, i64 0, i64 1), i64 0, i64 %idxprom174
  %i75 = load i32, i32* %arrayidx175, align 4
  %i76 = load i32, i32* @hash, align 4
  %xor176 = xor i32 %i76, %i75
  store i32 %xor176, i32* @hash, align 4
  %idxprom177 = sext i32 %i3 to i64
  %arrayidx178 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom177
  store i32 13, i32* %arrayidx178, align 4
  %idxprom179 = sext i32 %i2 to i64
  %arrayidx180 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom179
  store i32 2, i32* %arrayidx180, align 4
  %i77 = load i32, i32* getelementptr inbounds ([14 x i32], [14 x i32]* @material, i64 0, i64 1), align 4
  %i78 = load i32, i32* @Material, align 4
  %add181 = add nsw i32 %i78, %i77
  store i32 %add181, i32* @Material, align 4
  call void @removeHolding(i32 2, i32 1)
  %i79 = load i32, i32* @piece_count, align 4
  %inc182 = add nsw i32 %i79, 1
  store i32 %inc182, i32* @piece_count, align 4
  %add183 = add nsw i32 %i3, 12
  %idxprom184 = sext i32 %add183 to i64
  %arrayidx185 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom184
  store i32 1, i32* %arrayidx185, align 4
  %idxprom186 = sext i32 %i3 to i64
  %arrayidx187 = getelementptr inbounds [144 x i32], [144 x i32]* @moved, i64 0, i64 %idxprom186
  %i80 = load i32, i32* %arrayidx187, align 4
  %dec188 = add nsw i32 %i80, -1
  store i32 %dec188, i32* %arrayidx187, align 4
  %idxprom189 = sext i32 %i2 to i64
  %arrayidx190 = getelementptr inbounds [144 x i32], [144 x i32]* @moved, i64 0, i64 %idxprom189
  %i81 = load i32, i32* %arrayidx190, align 4
  %dec191 = add nsw i32 %i81, -1
  store i32 %dec191, i32* %arrayidx190, align 4
  %add192 = add nsw i32 %i3, 12
  %idxprom193 = sext i32 %add192 to i64
  %arrayidx194 = getelementptr inbounds [144 x i32], [144 x i32]* @moved, i64 0, i64 %idxprom193
  %i82 = load i32, i32* %arrayidx194, align 4
  %dec195 = add nsw i32 %i82, -1
  store i32 %dec195, i32* %arrayidx194, align 4
  %i83 = load i32, i32* @white_to_move, align 4
  %xor196 = xor i32 %i83, 1
  store i32 %xor196, i32* @white_to_move, align 4
  %i84 = load i32, i32* @ply, align 4
  %idxprom197 = sext i32 %i84 to i64
  %arrayidx198 = getelementptr inbounds [300 x %struct.move_x], [300 x %struct.move_x]* @path_x, i64 0, i64 %idxprom197
  %cap_num199 = getelementptr inbounds %struct.move_x, %struct.move_x* %arrayidx198, i32 0, i32 0
  %i85 = load i32, i32* %cap_num199, align 16
  %add200 = add nsw i32 %i3, 12
  %idxprom201 = sext i32 %add200 to i64
  %arrayidx202 = getelementptr inbounds [144 x i32], [144 x i32]* @squares, i64 0, i64 %idxprom201
  store i32 %i85, i32* %arrayidx202, align 4
  %add203 = add nsw i32 %i3, 12
  %i86 = load i32, i32* @ply, align 4
  %idxprom204 = sext i32 %i86 to i64
  %arrayidx205 = getelementptr inbounds [300 x %struct.move_x], [300 x %struct.move_x]* @path_x, i64 0, i64 %idxprom204
  %cap_num206 = getelementptr inbounds %struct.move_x, %struct.move_x* %arrayidx205, i32 0, i32 0
  %i87 = load i32, i32* %cap_num206, align 16
  %idxprom207 = sext i32 %i87 to i64
  %arrayidx208 = getelementptr inbounds [62 x i32], [62 x i32]* @pieces, i64 0, i64 %idxprom207
  store i32 %add203, i32* %arrayidx208, align 4
  %idxprom209 = sext i32 %i3 to i64
  %arrayidx210 = getelementptr inbounds [144 x i32], [144 x i32]* @squares, i64 0, i64 %idxprom209
  store i32 0, i32* %arrayidx210, align 4
  br label %return

if.end211:                                        ; preds = %if.then164
  %idxprom212 = sext i32 %i2 to i64
  %arrayidx213 = getelementptr inbounds [144 x i32], [144 x i32]* getelementptr inbounds ([14 x [144 x i32]], [14 x [144 x i32]]* @zobrist, i64 0, i64 2), i64 0, i64 %idxprom212
  %i88 = load i32, i32* %arrayidx213, align 4
  %i89 = load i32, i32* @hash, align 4
  %xor214 = xor i32 %i89, %i88
  store i32 %xor214, i32* @hash, align 4
  %idxprom215 = sext i32 %i3 to i64
  %arrayidx216 = getelementptr inbounds [144 x i32], [144 x i32]* getelementptr inbounds ([14 x [144 x i32]], [14 x [144 x i32]]* @zobrist, i64 0, i64 2), i64 0, i64 %idxprom215
  %i90 = load i32, i32* %arrayidx216, align 4
  %i91 = load i32, i32* @hash, align 4
  %xor217 = xor i32 %i91, %i90
  store i32 %xor217, i32* @hash, align 4
  %idxprom218 = sext i32 %i3 to i64
  %arrayidx219 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom218
  store i32 %i4, i32* %arrayidx219, align 4
  %idxprom220 = sext i32 %i2 to i64
  %arrayidx221 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom220
  store i32 2, i32* %arrayidx221, align 4
  %idxprom222 = sext i32 %i3 to i64
  %arrayidx223 = getelementptr inbounds [144 x i32], [144 x i32]* @moved, i64 0, i64 %idxprom222
  %i92 = load i32, i32* %arrayidx223, align 4
  %dec224 = add nsw i32 %i92, -1
  store i32 %dec224, i32* %arrayidx223, align 4
  %idxprom225 = sext i32 %i2 to i64
  %arrayidx226 = getelementptr inbounds [144 x i32], [144 x i32]* @moved, i64 0, i64 %idxprom225
  %i93 = load i32, i32* %arrayidx226, align 4
  %dec227 = add nsw i32 %i93, -1
  store i32 %dec227, i32* %arrayidx226, align 4
  %i94 = load i32, i32* @white_to_move, align 4
  %xor228 = xor i32 %i94, 1
  store i32 %xor228, i32* @white_to_move, align 4
  br label %return

if.end229:                                        ; preds = %if.end160
  %idxprom230 = sext i32 %i3 to i64
  %arrayidx231 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom230
  %i95 = load i32, i32* %arrayidx231, align 4
  %cmp232 = icmp ne i32 %i95, 5
  br i1 %cmp232, label %land.lhs.true, label %if.end266

land.lhs.true:                                    ; preds = %if.end229
  %idxprom233 = sext i32 %i3 to i64
  %arrayidx234 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom233
  %i96 = load i32, i32* %arrayidx234, align 4
  %cmp235 = icmp ne i32 %i96, 6
  br i1 %cmp235, label %land.lhs.true236, label %if.end266

land.lhs.true236:                                 ; preds = %land.lhs.true
  %tobool237 = icmp ne i32 %i5, 0
  br i1 %tobool237, label %if.end266, label %if.then238

if.then238:                                       ; preds = %land.lhs.true236
  %idxprom239 = sext i32 %i3 to i64
  %arrayidx240 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom239
  %i97 = load i32, i32* %arrayidx240, align 4
  %idxprom241 = sext i32 %i2 to i64
  %arrayidx242 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom241
  store i32 %i97, i32* %arrayidx242, align 4
  %idxprom243 = sext i32 %i3 to i64
  %arrayidx244 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom243
  store i32 %i4, i32* %arrayidx244, align 4
  %idxprom245 = sext i32 %i3 to i64
  %arrayidx246 = getelementptr inbounds [144 x i32], [144 x i32]* @moved, i64 0, i64 %idxprom245
  %i98 = load i32, i32* %arrayidx246, align 4
  %dec247 = add nsw i32 %i98, -1
  store i32 %dec247, i32* %arrayidx246, align 4
  %idxprom248 = sext i32 %i2 to i64
  %arrayidx249 = getelementptr inbounds [144 x i32], [144 x i32]* @moved, i64 0, i64 %idxprom248
  %i99 = load i32, i32* %arrayidx249, align 4
  %dec250 = add nsw i32 %i99, -1
  store i32 %dec250, i32* %arrayidx249, align 4
  %i100 = load i32, i32* @white_to_move, align 4
  %xor251 = xor i32 %i100, 1
  store i32 %xor251, i32* @white_to_move, align 4
  %idxprom252 = sext i32 %i2 to i64
  %arrayidx253 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom252
  %i101 = load i32, i32* %arrayidx253, align 4
  %idxprom254 = sext i32 %i101 to i64
  %arrayidx255 = getelementptr inbounds [14 x [144 x i32]], [14 x [144 x i32]]* @zobrist, i64 0, i64 %idxprom254
  %idxprom256 = sext i32 %i3 to i64
  %arrayidx257 = getelementptr inbounds [144 x i32], [144 x i32]* %arrayidx255, i64 0, i64 %idxprom256
  %i102 = load i32, i32* %arrayidx257, align 4
  %i103 = load i32, i32* @hash, align 4
  %xor258 = xor i32 %i103, %i102
  store i32 %xor258, i32* @hash, align 4
  %idxprom259 = sext i32 %i2 to i64
  %arrayidx260 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom259
  %i104 = load i32, i32* %arrayidx260, align 4
  %idxprom261 = sext i32 %i104 to i64
  %arrayidx262 = getelementptr inbounds [14 x [144 x i32]], [14 x [144 x i32]]* @zobrist, i64 0, i64 %idxprom261
  %idxprom263 = sext i32 %i2 to i64
  %arrayidx264 = getelementptr inbounds [144 x i32], [144 x i32]* %arrayidx262, i64 0, i64 %idxprom263
  %i105 = load i32, i32* %arrayidx264, align 4
  %i106 = load i32, i32* @hash, align 4
  %xor265 = xor i32 %i106, %i105
  store i32 %xor265, i32* @hash, align 4
  br label %return

if.end266:                                        ; preds = %land.lhs.true236, %land.lhs.true, %if.end229
  %tobool267 = icmp ne i32 %i5, 0
  br i1 %tobool267, label %if.then268, label %if.end320

if.then268:                                       ; preds = %if.end266
  %idxprom269 = sext i32 %i3 to i64
  %arrayidx270 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom269
  %i107 = load i32, i32* %arrayidx270, align 4
  %rem = srem i32 %i107, 2
  %tobool271 = icmp ne i32 %rem, 0
  br i1 %tobool271, label %if.then272, label %if.end296

if.then272:                                       ; preds = %if.then268
  %idxprom273 = sext i32 %i3 to i64
  %arrayidx274 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom273
  store i32 %i4, i32* %arrayidx274, align 4
  %idxprom275 = sext i32 %i2 to i64
  %arrayidx276 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom275
  store i32 1, i32* %arrayidx276, align 4
  %idxprom277 = sext i32 %i3 to i64
  %arrayidx278 = getelementptr inbounds [144 x i32], [144 x i32]* @moved, i64 0, i64 %idxprom277
  %i108 = load i32, i32* %arrayidx278, align 4
  %dec279 = add nsw i32 %i108, -1
  store i32 %dec279, i32* %arrayidx278, align 4
  %idxprom280 = sext i32 %i2 to i64
  %arrayidx281 = getelementptr inbounds [144 x i32], [144 x i32]* @moved, i64 0, i64 %idxprom280
  %i109 = load i32, i32* %arrayidx281, align 4
  %dec282 = add nsw i32 %i109, -1
  store i32 %dec282, i32* %arrayidx281, align 4
  %i110 = load i32, i32* @white_to_move, align 4
  %xor283 = xor i32 %i110, 1
  store i32 %xor283, i32* @white_to_move, align 4
  %idxprom284 = sext i32 %i2 to i64
  %arrayidx285 = getelementptr inbounds [144 x i32], [144 x i32]* getelementptr inbounds ([14 x [144 x i32]], [14 x [144 x i32]]* @zobrist, i64 0, i64 1), i64 0, i64 %idxprom284
  %i111 = load i32, i32* %arrayidx285, align 4
  %i112 = load i32, i32* @hash, align 4
  %xor286 = xor i32 %i112, %i111
  store i32 %xor286, i32* @hash, align 4
  %idxprom287 = sext i32 %i5 to i64
  %arrayidx288 = getelementptr inbounds [14 x [144 x i32]], [14 x [144 x i32]]* @zobrist, i64 0, i64 %idxprom287
  %idxprom289 = sext i32 %i3 to i64
  %arrayidx290 = getelementptr inbounds [144 x i32], [144 x i32]* %arrayidx288, i64 0, i64 %idxprom289
  %i113 = load i32, i32* %arrayidx290, align 4
  %i114 = load i32, i32* @hash, align 4
  %xor291 = xor i32 %i114, %i113
  store i32 %xor291, i32* @hash, align 4
  %idxprom292 = sext i32 %i5 to i64
  %arrayidx293 = getelementptr inbounds [14 x i32], [14 x i32]* @material, i64 0, i64 %idxprom292
  %i115 = load i32, i32* %arrayidx293, align 4
  %i116 = load i32, i32* @Material, align 4
  %sub294 = sub nsw i32 %i116, %i115
  store i32 %sub294, i32* @Material, align 4
  %i117 = load i32, i32* getelementptr inbounds ([14 x i32], [14 x i32]* @material, i64 0, i64 1), align 4
  %i118 = load i32, i32* @Material, align 4
  %add295 = add nsw i32 %i118, %i117
  store i32 %add295, i32* @Material, align 4
  br label %return

if.end296:                                        ; preds = %if.then268
  %idxprom297 = sext i32 %i3 to i64
  %arrayidx298 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom297
  store i32 %i4, i32* %arrayidx298, align 4
  %idxprom299 = sext i32 %i2 to i64
  %arrayidx300 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom299
  store i32 2, i32* %arrayidx300, align 4
  %idxprom301 = sext i32 %i3 to i64
  %arrayidx302 = getelementptr inbounds [144 x i32], [144 x i32]* @moved, i64 0, i64 %idxprom301
  %i119 = load i32, i32* %arrayidx302, align 4
  %dec303 = add nsw i32 %i119, -1
  store i32 %dec303, i32* %arrayidx302, align 4
  %idxprom304 = sext i32 %i2 to i64
  %arrayidx305 = getelementptr inbounds [144 x i32], [144 x i32]* @moved, i64 0, i64 %idxprom304
  %i120 = load i32, i32* %arrayidx305, align 4
  %dec306 = add nsw i32 %i120, -1
  store i32 %dec306, i32* %arrayidx305, align 4
  %i121 = load i32, i32* @white_to_move, align 4
  %xor307 = xor i32 %i121, 1
  store i32 %xor307, i32* @white_to_move, align 4
  %idxprom308 = sext i32 %i2 to i64
  %arrayidx309 = getelementptr inbounds [144 x i32], [144 x i32]* getelementptr inbounds ([14 x [144 x i32]], [14 x [144 x i32]]* @zobrist, i64 0, i64 2), i64 0, i64 %idxprom308
  %i122 = load i32, i32* %arrayidx309, align 4
  %i123 = load i32, i32* @hash, align 4
  %xor310 = xor i32 %i123, %i122
  store i32 %xor310, i32* @hash, align 4
  %idxprom311 = sext i32 %i5 to i64
  %arrayidx312 = getelementptr inbounds [14 x [144 x i32]], [14 x [144 x i32]]* @zobrist, i64 0, i64 %idxprom311
  %idxprom313 = sext i32 %i3 to i64
  %arrayidx314 = getelementptr inbounds [144 x i32], [144 x i32]* %arrayidx312, i64 0, i64 %idxprom313
  %i124 = load i32, i32* %arrayidx314, align 4
  %i125 = load i32, i32* @hash, align 4
  %xor315 = xor i32 %i125, %i124
  store i32 %xor315, i32* @hash, align 4
  %idxprom316 = sext i32 %i5 to i64
  %arrayidx317 = getelementptr inbounds [14 x i32], [14 x i32]* @material, i64 0, i64 %idxprom316
  %i126 = load i32, i32* %arrayidx317, align 4
  %i127 = load i32, i32* @Material, align 4
  %sub318 = sub nsw i32 %i127, %i126
  store i32 %sub318, i32* @Material, align 4
  %i128 = load i32, i32* getelementptr inbounds ([14 x i32], [14 x i32]* @material, i64 0, i64 2), align 8
  %i129 = load i32, i32* @Material, align 4
  %add319 = add nsw i32 %i129, %i128
  store i32 %add319, i32* @Material, align 4
  br label %return

if.end320:                                        ; preds = %if.end266
  %idxprom321 = sext i32 %i3 to i64
  %arrayidx322 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom321
  %i130 = load i32, i32* %arrayidx322, align 4
  %cmp323 = icmp eq i32 %i130, 5
  br i1 %cmp323, label %if.then324, label %if.else361

if.then324:                                       ; preds = %if.end320
  store i32 %i2, i32* @wking_loc, align 4
  %idxprom325 = sext i32 %i3 to i64
  %arrayidx326 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom325
  store i32 %i4, i32* %arrayidx326, align 4
  %idxprom327 = sext i32 %i2 to i64
  %arrayidx328 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom327
  store i32 5, i32* %arrayidx328, align 4
  %idxprom329 = sext i32 %i3 to i64
  %arrayidx330 = getelementptr inbounds [144 x i32], [144 x i32]* @moved, i64 0, i64 %idxprom329
  %i131 = load i32, i32* %arrayidx330, align 4
  %dec331 = add nsw i32 %i131, -1
  store i32 %dec331, i32* %arrayidx330, align 4
  %idxprom332 = sext i32 %i2 to i64
  %arrayidx333 = getelementptr inbounds [144 x i32], [144 x i32]* @moved, i64 0, i64 %idxprom332
  %i132 = load i32, i32* %arrayidx333, align 4
  %dec334 = add nsw i32 %i132, -1
  store i32 %dec334, i32* %arrayidx333, align 4
  %i133 = load i32, i32* @white_to_move, align 4
  %xor335 = xor i32 %i133, 1
  store i32 %xor335, i32* @white_to_move, align 4
  %idxprom336 = sext i32 %i2 to i64
  %arrayidx337 = getelementptr inbounds [144 x i32], [144 x i32]* getelementptr inbounds ([14 x [144 x i32]], [14 x [144 x i32]]* @zobrist, i64 0, i64 5), i64 0, i64 %idxprom336
  %i134 = load i32, i32* %arrayidx337, align 4
  %i135 = load i32, i32* @hash, align 4
  %xor338 = xor i32 %i135, %i134
  store i32 %xor338, i32* @hash, align 4
  %idxprom339 = sext i32 %i3 to i64
  %arrayidx340 = getelementptr inbounds [144 x i32], [144 x i32]* getelementptr inbounds ([14 x [144 x i32]], [14 x [144 x i32]]* @zobrist, i64 0, i64 5), i64 0, i64 %idxprom339
  %i136 = load i32, i32* %arrayidx340, align 4
  %i137 = load i32, i32* @hash, align 4
  %xor341 = xor i32 %i137, %i136
  store i32 %xor341, i32* @hash, align 4
  %cmp342 = icmp eq i32 %i6, 1
  br i1 %cmp342, label %if.then343, label %if.else350

if.then343:                                       ; preds = %if.then324
  store i32 7, i32* getelementptr inbounds ([144 x i32], [144 x i32]* @board, i64 0, i64 33), align 4
  store i32 13, i32* getelementptr inbounds ([144 x i32], [144 x i32]* @board, i64 0, i64 31), align 4
  %i138 = load i32, i32* getelementptr inbounds ([144 x i32], [144 x i32]* @moved, i64 0, i64 33), align 4
  %dec344 = add nsw i32 %i138, -1
  store i32 %dec344, i32* getelementptr inbounds ([144 x i32], [144 x i32]* @moved, i64 0, i64 33), align 4
  %i139 = load i32, i32* getelementptr inbounds ([144 x i32], [144 x i32]* @moved, i64 0, i64 31), align 4
  %dec345 = add nsw i32 %i139, -1
  store i32 %dec345, i32* getelementptr inbounds ([144 x i32], [144 x i32]* @moved, i64 0, i64 31), align 4
  store i32 0, i32* @white_castled, align 4
  %i140 = load i32, i32* getelementptr inbounds ([144 x i32], [144 x i32]* @squares, i64 0, i64 31), align 4
  store i32 %i140, i32* getelementptr inbounds ([144 x i32], [144 x i32]* @squares, i64 0, i64 33), align 4
  store i32 0, i32* getelementptr inbounds ([144 x i32], [144 x i32]* @squares, i64 0, i64 31), align 4
  %i141 = load i32, i32* getelementptr inbounds ([144 x i32], [144 x i32]* @squares, i64 0, i64 33), align 4
  %idxprom346 = sext i32 %i141 to i64
  %arrayidx347 = getelementptr inbounds [62 x i32], [62 x i32]* @pieces, i64 0, i64 %idxprom346
  store i32 33, i32* %arrayidx347, align 4
  %i142 = load i32, i32* getelementptr inbounds ([14 x [144 x i32]], [14 x [144 x i32]]* @zobrist, i64 0, i64 7, i64 33), align 4
  %i143 = load i32, i32* @hash, align 4
  %xor348 = xor i32 %i143, %i142
  store i32 %xor348, i32* @hash, align 4
  %i144 = load i32, i32* getelementptr inbounds ([14 x [144 x i32]], [14 x [144 x i32]]* @zobrist, i64 0, i64 7, i64 31), align 4
  %i145 = load i32, i32* @hash, align 4
  %xor349 = xor i32 %i145, %i144
  store i32 %xor349, i32* @hash, align 4
  br label %return

if.else350:                                       ; preds = %if.then324
  %cmp351 = icmp eq i32 %i6, 2
  br i1 %cmp351, label %if.then352, label %if.end359

if.then352:                                       ; preds = %if.else350
  store i32 7, i32* getelementptr inbounds ([144 x i32], [144 x i32]* @board, i64 0, i64 26), align 8
  store i32 13, i32* getelementptr inbounds ([144 x i32], [144 x i32]* @board, i64 0, i64 29), align 4
  %i146 = load i32, i32* getelementptr inbounds ([144 x i32], [144 x i32]* @moved, i64 0, i64 26), align 8
  %dec353 = add nsw i32 %i146, -1
  store i32 %dec353, i32* getelementptr inbounds ([144 x i32], [144 x i32]* @moved, i64 0, i64 26), align 8
  %i147 = load i32, i32* getelementptr inbounds ([144 x i32], [144 x i32]* @moved, i64 0, i64 29), align 4
  %dec354 = add nsw i32 %i147, -1
  store i32 %dec354, i32* getelementptr inbounds ([144 x i32], [144 x i32]* @moved, i64 0, i64 29), align 4
  store i32 0, i32* @white_castled, align 4
  %i148 = load i32, i32* getelementptr inbounds ([144 x i32], [144 x i32]* @squares, i64 0, i64 29), align 4
  store i32 %i148, i32* getelementptr inbounds ([144 x i32], [144 x i32]* @squares, i64 0, i64 26), align 8
  store i32 0, i32* getelementptr inbounds ([144 x i32], [144 x i32]* @squares, i64 0, i64 29), align 4
  %i149 = load i32, i32* getelementptr inbounds ([144 x i32], [144 x i32]* @squares, i64 0, i64 26), align 8
  %idxprom355 = sext i32 %i149 to i64
  %arrayidx356 = getelementptr inbounds [62 x i32], [62 x i32]* @pieces, i64 0, i64 %idxprom355
  store i32 26, i32* %arrayidx356, align 4
  %i150 = load i32, i32* getelementptr inbounds ([14 x [144 x i32]], [14 x [144 x i32]]* @zobrist, i64 0, i64 7, i64 29), align 4
  %i151 = load i32, i32* @hash, align 4
  %xor357 = xor i32 %i151, %i150
  store i32 %xor357, i32* @hash, align 4
  %i152 = load i32, i32* getelementptr inbounds ([14 x [144 x i32]], [14 x [144 x i32]]* @zobrist, i64 0, i64 7, i64 26), align 8
  %i153 = load i32, i32* @hash, align 4
  %xor358 = xor i32 %i153, %i152
  store i32 %xor358, i32* @hash, align 4
  br label %return

if.end359:                                        ; preds = %if.else350
  br label %if.end360

if.end360:                                        ; preds = %if.end359
  br label %return

if.else361:                                       ; preds = %if.end320
  store i32 %i2, i32* @bking_loc, align 4
  %idxprom362 = sext i32 %i3 to i64
  %arrayidx363 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom362
  store i32 %i4, i32* %arrayidx363, align 4
  %idxprom364 = sext i32 %i2 to i64
  %arrayidx365 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom364
  store i32 6, i32* %arrayidx365, align 4
  %idxprom366 = sext i32 %i3 to i64
  %arrayidx367 = getelementptr inbounds [144 x i32], [144 x i32]* @moved, i64 0, i64 %idxprom366
  %i154 = load i32, i32* %arrayidx367, align 4
  %dec368 = add nsw i32 %i154, -1
  store i32 %dec368, i32* %arrayidx367, align 4
  %idxprom369 = sext i32 %i2 to i64
  %arrayidx370 = getelementptr inbounds [144 x i32], [144 x i32]* @moved, i64 0, i64 %idxprom369
  %i155 = load i32, i32* %arrayidx370, align 4
  %dec371 = add nsw i32 %i155, -1
  store i32 %dec371, i32* %arrayidx370, align 4
  %i156 = load i32, i32* @white_to_move, align 4
  %xor372 = xor i32 %i156, 1
  store i32 %xor372, i32* @white_to_move, align 4
  %idxprom373 = sext i32 %i2 to i64
  %arrayidx374 = getelementptr inbounds [144 x i32], [144 x i32]* getelementptr inbounds ([14 x [144 x i32]], [14 x [144 x i32]]* @zobrist, i64 0, i64 6), i64 0, i64 %idxprom373
  %i157 = load i32, i32* %arrayidx374, align 4
  %i158 = load i32, i32* @hash, align 4
  %xor375 = xor i32 %i158, %i157
  store i32 %xor375, i32* @hash, align 4
  %idxprom376 = sext i32 %i3 to i64
  %arrayidx377 = getelementptr inbounds [144 x i32], [144 x i32]* getelementptr inbounds ([14 x [144 x i32]], [14 x [144 x i32]]* @zobrist, i64 0, i64 6), i64 0, i64 %idxprom376
  %i159 = load i32, i32* %arrayidx377, align 4
  %i160 = load i32, i32* @hash, align 4
  %xor378 = xor i32 %i160, %i159
  store i32 %xor378, i32* @hash, align 4
  %cmp379 = icmp eq i32 %i6, 3
  br i1 %cmp379, label %if.then380, label %if.else387

if.then380:                                       ; preds = %if.else361
  store i32 8, i32* getelementptr inbounds ([144 x i32], [144 x i32]* @board, i64 0, i64 117), align 4
  store i32 13, i32* getelementptr inbounds ([144 x i32], [144 x i32]* @board, i64 0, i64 115), align 4
  %i161 = load i32, i32* getelementptr inbounds ([144 x i32], [144 x i32]* @moved, i64 0, i64 117), align 4
  %dec381 = add nsw i32 %i161, -1
  store i32 %dec381, i32* getelementptr inbounds ([144 x i32], [144 x i32]* @moved, i64 0, i64 117), align 4
  %i162 = load i32, i32* getelementptr inbounds ([144 x i32], [144 x i32]* @moved, i64 0, i64 115), align 4
  %dec382 = add nsw i32 %i162, -1
  store i32 %dec382, i32* getelementptr inbounds ([144 x i32], [144 x i32]* @moved, i64 0, i64 115), align 4
  store i32 0, i32* @black_castled, align 4
  %i163 = load i32, i32* getelementptr inbounds ([144 x i32], [144 x i32]* @squares, i64 0, i64 115), align 4
  store i32 %i163, i32* getelementptr inbounds ([144 x i32], [144 x i32]* @squares, i64 0, i64 117), align 4
  store i32 0, i32* getelementptr inbounds ([144 x i32], [144 x i32]* @squares, i64 0, i64 115), align 4
  %i164 = load i32, i32* getelementptr inbounds ([144 x i32], [144 x i32]* @squares, i64 0, i64 117), align 4
  %idxprom383 = sext i32 %i164 to i64
  %arrayidx384 = getelementptr inbounds [62 x i32], [62 x i32]* @pieces, i64 0, i64 %idxprom383
  store i32 117, i32* %arrayidx384, align 4
  %i165 = load i32, i32* getelementptr inbounds ([14 x [144 x i32]], [14 x [144 x i32]]* @zobrist, i64 0, i64 8, i64 117), align 4
  %i166 = load i32, i32* @hash, align 4
  %xor385 = xor i32 %i166, %i165
  store i32 %xor385, i32* @hash, align 4
  %i167 = load i32, i32* getelementptr inbounds ([14 x [144 x i32]], [14 x [144 x i32]]* @zobrist, i64 0, i64 8, i64 115), align 4
  %i168 = load i32, i32* @hash, align 4
  %xor386 = xor i32 %i168, %i167
  store i32 %xor386, i32* @hash, align 4
  br label %return

if.else387:                                       ; preds = %if.else361
  %cmp388 = icmp eq i32 %i6, 4
  br i1 %cmp388, label %if.then389, label %if.end396

if.then389:                                       ; preds = %if.else387
  store i32 8, i32* getelementptr inbounds ([144 x i32], [144 x i32]* @board, i64 0, i64 110), align 8
  store i32 13, i32* getelementptr inbounds ([144 x i32], [144 x i32]* @board, i64 0, i64 113), align 4
  %i169 = load i32, i32* getelementptr inbounds ([144 x i32], [144 x i32]* @moved, i64 0, i64 110), align 8
  %dec390 = add nsw i32 %i169, -1
  store i32 %dec390, i32* getelementptr inbounds ([144 x i32], [144 x i32]* @moved, i64 0, i64 110), align 8
  %i170 = load i32, i32* getelementptr inbounds ([144 x i32], [144 x i32]* @moved, i64 0, i64 113), align 4
  %dec391 = add nsw i32 %i170, -1
  store i32 %dec391, i32* getelementptr inbounds ([144 x i32], [144 x i32]* @moved, i64 0, i64 113), align 4
  store i32 0, i32* @black_castled, align 4
  %i171 = load i32, i32* getelementptr inbounds ([144 x i32], [144 x i32]* @squares, i64 0, i64 113), align 4
  store i32 %i171, i32* getelementptr inbounds ([144 x i32], [144 x i32]* @squares, i64 0, i64 110), align 8
  store i32 0, i32* getelementptr inbounds ([144 x i32], [144 x i32]* @squares, i64 0, i64 113), align 4
  %i172 = load i32, i32* getelementptr inbounds ([144 x i32], [144 x i32]* @squares, i64 0, i64 110), align 8
  %idxprom392 = sext i32 %i172 to i64
  %arrayidx393 = getelementptr inbounds [62 x i32], [62 x i32]* @pieces, i64 0, i64 %idxprom392
  store i32 110, i32* %arrayidx393, align 4
  %i173 = load i32, i32* getelementptr inbounds ([14 x [144 x i32]], [14 x [144 x i32]]* @zobrist, i64 0, i64 8, i64 110), align 8
  %i174 = load i32, i32* @hash, align 4
  %xor394 = xor i32 %i174, %i173
  store i32 %xor394, i32* @hash, align 4
  %i175 = load i32, i32* getelementptr inbounds ([14 x [144 x i32]], [14 x [144 x i32]]* @zobrist, i64 0, i64 8, i64 113), align 4
  %i176 = load i32, i32* @hash, align 4
  %xor395 = xor i32 %i176, %i175
  store i32 %xor395, i32* @hash, align 4
  br label %return

if.end396:                                        ; preds = %if.else387
  br label %if.end397

if.end397:                                        ; preds = %if.end396
  br label %if.end398

if.end398:                                        ; preds = %if.end397
  br label %if.end399

if.end399:                                        ; preds = %if.end398
  br label %return

return:                                           ; preds = %if.end399, %if.then389, %if.then380, %if.end360, %if.then352, %if.then343, %if.end296, %if.then272, %if.then238, %if.end211, %if.then166, %if.end142, %if.then97, %if.then
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @check_phase() #0 {
entry:
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %a.0 = phi i32 [ 1, %entry ], [ %a.1, %for.inc ]
  %j.0 = phi i32 [ 1, %entry ], [ %inc18, %for.inc ]
  %xnum_pieces.0 = phi i32 [ 0, %entry ], [ %xnum_pieces.2, %for.inc ]
  %i = load i32, i32* @piece_count, align 4
  %cmp = icmp sle i32 %a.0, %i
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %idxprom = sext i32 %j.0 to i64
  %arrayidx = getelementptr inbounds [62 x i32], [62 x i32]* @pieces, i64 0, i64 %idxprom
  %i1 = load i32, i32* %arrayidx, align 4
  %tobool = icmp ne i32 %i1, 0
  br i1 %tobool, label %if.else, label %if.then

if.then:                                          ; preds = %for.body
  br label %for.inc

if.else:                                          ; preds = %for.body
  %inc = add nsw i32 %a.0, 1
  br label %if.end

if.end:                                           ; preds = %if.else
  %idxprom1 = sext i32 %i1 to i64
  %arrayidx2 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom1
  %i2 = load i32, i32* %arrayidx2, align 4
  %cmp3 = icmp ne i32 %i2, 1
  br i1 %cmp3, label %land.lhs.true, label %if.end17

land.lhs.true:                                    ; preds = %if.end
  %idxprom4 = sext i32 %i1 to i64
  %arrayidx5 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom4
  %i3 = load i32, i32* %arrayidx5, align 4
  %cmp6 = icmp ne i32 %i3, 2
  br i1 %cmp6, label %land.lhs.true7, label %if.end17

land.lhs.true7:                                   ; preds = %land.lhs.true
  %idxprom8 = sext i32 %i1 to i64
  %arrayidx9 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom8
  %i4 = load i32, i32* %arrayidx9, align 4
  %cmp10 = icmp ne i32 %i4, 13
  br i1 %cmp10, label %land.lhs.true11, label %if.end17

land.lhs.true11:                                  ; preds = %land.lhs.true7
  %idxprom12 = sext i32 %i1 to i64
  %arrayidx13 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom12
  %i5 = load i32, i32* %arrayidx13, align 4
  %cmp14 = icmp ne i32 %i5, 0
  br i1 %cmp14, label %if.then15, label %if.end17

if.then15:                                        ; preds = %land.lhs.true11
  %inc16 = add nsw i32 %xnum_pieces.0, 1
  br label %if.end17

if.end17:                                         ; preds = %if.then15, %land.lhs.true11, %land.lhs.true7, %land.lhs.true, %if.end
  %xnum_pieces.1 = phi i32 [ %inc16, %if.then15 ], [ %xnum_pieces.0, %land.lhs.true11 ], [ %xnum_pieces.0, %land.lhs.true7 ], [ %xnum_pieces.0, %land.lhs.true ], [ %xnum_pieces.0, %if.end ]
  br label %for.inc

for.inc:                                          ; preds = %if.end17, %if.then
  %a.1 = phi i32 [ %inc, %if.end17 ], [ %a.0, %if.then ]
  %xnum_pieces.2 = phi i32 [ %xnum_pieces.1, %if.end17 ], [ %xnum_pieces.0, %if.then ]
  %inc18 = add nsw i32 %j.0, 1
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %cmp19 = icmp sge i32 %xnum_pieces.0, 12
  br i1 %cmp19, label %land.lhs.true20, label %if.else28

land.lhs.true20:                                  ; preds = %for.end
  %i6 = load i32, i32* @white_castled, align 4
  %tobool21 = icmp ne i32 %i6, 0
  br i1 %tobool21, label %lor.lhs.false, label %land.lhs.true23

lor.lhs.false:                                    ; preds = %land.lhs.true20
  %i7 = load i32, i32* @black_castled, align 4
  %tobool22 = icmp ne i32 %i7, 0
  br i1 %tobool22, label %if.else28, label %land.lhs.true23

land.lhs.true23:                                  ; preds = %lor.lhs.false, %land.lhs.true20
  %i8 = load i32, i32* getelementptr inbounds ([144 x i32], [144 x i32]* @board, i64 0, i64 30), align 8
  %cmp24 = icmp eq i32 %i8, 5
  br i1 %cmp24, label %if.then27, label %lor.lhs.false25

lor.lhs.false25:                                  ; preds = %land.lhs.true23
  %i9 = load i32, i32* getelementptr inbounds ([144 x i32], [144 x i32]* @board, i64 0, i64 114), align 8
  %cmp26 = icmp eq i32 %i9, 6
  br i1 %cmp26, label %if.then27, label %if.else28

if.then27:                                        ; preds = %lor.lhs.false25, %land.lhs.true23
  store i32 0, i32* @phase, align 4
  br label %if.end33

if.else28:                                        ; preds = %lor.lhs.false25, %lor.lhs.false, %for.end
  %cmp29 = icmp sle i32 %xnum_pieces.0, 6
  br i1 %cmp29, label %if.then30, label %if.else31

if.then30:                                        ; preds = %if.else28
  store i32 2, i32* @phase, align 4
  br label %if.end32

if.else31:                                        ; preds = %if.else28
  store i32 1, i32* @phase, align 4
  br label %if.end32

if.end32:                                         ; preds = %if.else31, %if.then30
  br label %if.end33

if.end33:                                         ; preds = %if.end32, %if.then27
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @King(i32 %sq, i32 %c) #0 {
entry:
  %idxprom = sext i32 %sq to i64
  %arrayidx = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xfile to [144 x i32]*), i64 0, i64 %idxprom
  %i = load i32, i32* %arrayidx, align 4
  %cmp = icmp sge i32 %i, 6
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %sub = sub nsw i32 %sq, 1
  %idxprom1 = sext i32 %sub to i64
  %arrayidx2 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom1
  %i1 = load i32, i32* %arrayidx2, align 4
  %add = add nsw i32 %i1, 1
  %shr = ashr i32 %add, 1
  %cmp3 = icmp eq i32 %shr, 4
  br i1 %cmp3, label %land.lhs.true4, label %if.end

land.lhs.true4:                                   ; preds = %land.lhs.true
  %sub5 = sub nsw i32 %sq, 1
  %idxprom6 = sext i32 %sub5 to i64
  %arrayidx7 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom6
  %i2 = load i32, i32* %arrayidx7, align 4
  %add8 = add nsw i32 %i2, 1
  %and = and i32 %add8, 1
  %cmp9 = icmp eq i32 %and, %c
  br i1 %cmp9, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true4
  %add10 = add nsw i32 0, 2
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true4, %land.lhs.true, %entry
  %s.0 = phi i32 [ %add10, %if.then ], [ 0, %land.lhs.true4 ], [ 0, %land.lhs.true ], [ 0, %entry ]
  %idxprom11 = sext i32 %sq to i64
  %arrayidx12 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xfile to [144 x i32]*), i64 0, i64 %idxprom11
  %i3 = load i32, i32* %arrayidx12, align 4
  %cmp13 = icmp sge i32 %i3, 6
  br i1 %cmp13, label %land.lhs.true14, label %if.end30

land.lhs.true14:                                  ; preds = %if.end
  %add15 = add nsw i32 %sq, 1
  %idxprom16 = sext i32 %add15 to i64
  %arrayidx17 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom16
  %i4 = load i32, i32* %arrayidx17, align 4
  %add18 = add nsw i32 %i4, 1
  %shr19 = ashr i32 %add18, 1
  %cmp20 = icmp eq i32 %shr19, 4
  br i1 %cmp20, label %land.lhs.true21, label %if.end30

land.lhs.true21:                                  ; preds = %land.lhs.true14
  %add22 = add nsw i32 %sq, 1
  %idxprom23 = sext i32 %add22 to i64
  %arrayidx24 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom23
  %i5 = load i32, i32* %arrayidx24, align 4
  %add25 = add nsw i32 %i5, 1
  %and26 = and i32 %add25, 1
  %cmp27 = icmp eq i32 %and26, %c
  br i1 %cmp27, label %if.then28, label %if.end30

if.then28:                                        ; preds = %land.lhs.true21
  %add29 = add nsw i32 %s.0, 2
  br label %if.end30

if.end30:                                         ; preds = %if.then28, %land.lhs.true21, %land.lhs.true14, %if.end
  %s.1 = phi i32 [ %add29, %if.then28 ], [ %s.0, %land.lhs.true21 ], [ %s.0, %land.lhs.true14 ], [ %s.0, %if.end ]
  %cmp31 = icmp eq i32 %c, 1
  br i1 %cmp31, label %if.then32, label %if.end34

if.then32:                                        ; preds = %if.end30
  %sub33 = sub nsw i32 0, %s.1
  br label %if.end34

if.end34:                                         ; preds = %if.then32, %if.end30
  %s.2 = phi i32 [ %sub33, %if.then32 ], [ %s.1, %if.end30 ]
  ret i32 %s.2
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @Queen(i32 %sq, i32 %c) #0 {
entry:
  %xor = xor i32 %c, 1
  %add = add nsw i32 0, 900
  %idxprom = sext i32 %sq to i64
  %arrayidx = getelementptr inbounds [144 x [144 x i32]], [144 x [144 x i32]]* @distance, i64 0, i64 %idxprom
  %idxprom1 = sext i32 %xor to i64
  %arrayidx2 = getelementptr inbounds [2 x i32], [2 x i32]* @king_locs, i64 0, i64 %idxprom1
  %i = load i32, i32* %arrayidx2, align 4
  %idxprom3 = sext i32 %i to i64
  %arrayidx4 = getelementptr inbounds [144 x i32], [144 x i32]* %arrayidx, i64 0, i64 %idxprom3
  %i1 = load i32, i32* %arrayidx4, align 4
  %idxprom5 = sext i32 %i1 to i64
  %arrayidx6 = getelementptr inbounds [8 x i32], [8 x i32]* @std_q_tropism, i64 0, i64 %idxprom5
  %i2 = load i32, i32* %arrayidx6, align 4
  %add7 = add nsw i32 %add, %i2
  %call = call i32 @rook_mobility(i32 %sq)
  %shl = shl i32 %call, 1
  %call8 = call i32 @bishop_mobility(i32 %sq)
  %shl9 = shl i32 %call8, 1
  %add10 = add nsw i32 %shl, %shl9
  %cmp = icmp sle i32 %add10, 4
  br i1 %cmp, label %if.then, label %if.end19

if.then:                                          ; preds = %entry
  %cmp11 = icmp eq i32 %add10, 0
  br i1 %cmp11, label %if.then12, label %if.else

if.then12:                                        ; preds = %if.then
  %sub = sub nsw i32 %add10, 15
  br label %if.end18

if.else:                                          ; preds = %if.then
  %cmp13 = icmp eq i32 %add10, 2
  br i1 %cmp13, label %if.then14, label %if.else16

if.then14:                                        ; preds = %if.else
  %sub15 = sub nsw i32 %add10, 10
  br label %if.end

if.else16:                                        ; preds = %if.else
  %sub17 = sub nsw i32 %add10, 5
  br label %if.end

if.end:                                           ; preds = %if.else16, %if.then14
  %mob.0 = phi i32 [ %sub15, %if.then14 ], [ %sub17, %if.else16 ]
  br label %if.end18

if.end18:                                         ; preds = %if.end, %if.then12
  %mob.1 = phi i32 [ %sub, %if.then12 ], [ %mob.0, %if.end ]
  br label %if.end19

if.end19:                                         ; preds = %if.end18, %entry
  %mob.2 = phi i32 [ %mob.1, %if.end18 ], [ %add10, %entry ]
  %add20 = add nsw i32 %add7, %mob.2
  %cmp21 = icmp eq i32 %c, 1
  br i1 %cmp21, label %if.then22, label %if.end24

if.then22:                                        ; preds = %if.end19
  %sub23 = sub nsw i32 0, %add20
  br label %if.end24

if.end24:                                         ; preds = %if.then22, %if.end19
  %s.0 = phi i32 [ %sub23, %if.then22 ], [ %add20, %if.end19 ]
  ret i32 %s.0
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @rook_mobility(i32 %square) #0 {
entry:
  br label %for.cond

for.cond:                                         ; preds = %for.inc9, %entry
  %m.0 = phi i32 [ 0, %entry ], [ %m.1, %for.inc9 ]
  %diridx.0 = phi i32 [ 0, %entry ], [ %inc10, %for.inc9 ]
  %cmp = icmp slt i32 %diridx.0, 4
  br i1 %cmp, label %for.body, label %for.end11

for.body:                                         ; preds = %for.cond
  %idxprom = sext i32 %diridx.0 to i64
  %arrayidx = getelementptr inbounds [4 x i32], [4 x i32]* @rook_mobility.dir, i64 0, i64 %idxprom
  %i = load i32, i32* %arrayidx, align 4
  %add = add nsw i32 %square, %i
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %m.1 = phi i32 [ %m.0, %for.body ], [ %inc, %for.inc ]
  %l.0 = phi i32 [ %add, %for.body ], [ %add8, %for.inc ]
  %idxprom2 = sext i32 %l.0 to i64
  %arrayidx3 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom2
  %i1 = load i32, i32* %arrayidx3, align 4
  %cmp4 = icmp eq i32 %i1, 13
  br i1 %cmp4, label %for.body5, label %for.end

for.body5:                                        ; preds = %for.cond1
  %inc = add nsw i32 %m.1, 1
  br label %for.inc

for.inc:                                          ; preds = %for.body5
  %idxprom6 = sext i32 %diridx.0 to i64
  %arrayidx7 = getelementptr inbounds [4 x i32], [4 x i32]* @rook_mobility.dir, i64 0, i64 %idxprom6
  %i2 = load i32, i32* %arrayidx7, align 4
  %add8 = add nsw i32 %l.0, %i2
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc9

for.inc9:                                         ; preds = %for.end
  %inc10 = add nsw i32 %diridx.0, 1
  br label %for.cond

for.end11:                                        ; preds = %for.cond
  ret i32 %m.0
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @bishop_mobility(i32 %square) #0 {
entry:
  br label %for.cond

for.cond:                                         ; preds = %for.inc9, %entry
  %m.0 = phi i32 [ 0, %entry ], [ %m.1, %for.inc9 ]
  %diridx.0 = phi i32 [ 0, %entry ], [ %inc10, %for.inc9 ]
  %cmp = icmp slt i32 %diridx.0, 4
  br i1 %cmp, label %for.body, label %for.end11

for.body:                                         ; preds = %for.cond
  %idxprom = sext i32 %diridx.0 to i64
  %arrayidx = getelementptr inbounds [4 x i32], [4 x i32]* @bishop_mobility.dir, i64 0, i64 %idxprom
  %i = load i32, i32* %arrayidx, align 4
  %add = add nsw i32 %square, %i
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %m.1 = phi i32 [ %m.0, %for.body ], [ %inc, %for.inc ]
  %l.0 = phi i32 [ %add, %for.body ], [ %add8, %for.inc ]
  %idxprom2 = sext i32 %l.0 to i64
  %arrayidx3 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom2
  %i1 = load i32, i32* %arrayidx3, align 4
  %cmp4 = icmp eq i32 %i1, 13
  br i1 %cmp4, label %for.body5, label %for.end

for.body5:                                        ; preds = %for.cond1
  %inc = add nsw i32 %m.1, 1
  br label %for.inc

for.inc:                                          ; preds = %for.body5
  %idxprom6 = sext i32 %diridx.0 to i64
  %arrayidx7 = getelementptr inbounds [4 x i32], [4 x i32]* @bishop_mobility.dir, i64 0, i64 %idxprom6
  %i2 = load i32, i32* %arrayidx7, align 4
  %add8 = add nsw i32 %l.0, %i2
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc9

for.inc9:                                         ; preds = %for.end
  %inc10 = add nsw i32 %diridx.0, 1
  br label %for.cond

for.end11:                                        ; preds = %for.cond
  ret i32 %m.0
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @Rook(i32 %sq, i32 %c) #0 {
entry:
  %xor = xor i32 %c, 1
  %add = add nsw i32 0, 500
  %idxprom = sext i32 %sq to i64
  %arrayidx = getelementptr inbounds [144 x [144 x i32]], [144 x [144 x i32]]* @rookdistance, i64 0, i64 %idxprom
  %idxprom1 = sext i32 %xor to i64
  %arrayidx2 = getelementptr inbounds [2 x i32], [2 x i32]* @king_locs, i64 0, i64 %idxprom1
  %i = load i32, i32* %arrayidx2, align 4
  %idxprom3 = sext i32 %i to i64
  %arrayidx4 = getelementptr inbounds [144 x i32], [144 x i32]* %arrayidx, i64 0, i64 %idxprom3
  %i1 = load i32, i32* %arrayidx4, align 4
  %idxprom5 = sext i32 %i1 to i64
  %arrayidx6 = getelementptr inbounds [16 x i32], [16 x i32]* bitcast (<{ i32, i32, i32, i32, i32, i32, [10 x i32] }>* @std_r_tropism to [16 x i32]*), i64 0, i64 %idxprom5
  %i2 = load i32, i32* %arrayidx6, align 4
  %add7 = add nsw i32 %add, %i2
  %call = call i32 @rook_mobility(i32 %sq)
  %shl = shl i32 %call, 1
  %cmp = icmp sle i32 %shl, 2
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %sub = sub nsw i32 %shl, 5
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %mob.0 = phi i32 [ %sub, %if.then ], [ %shl, %entry ]
  %add8 = add nsw i32 %add7, %mob.0
  %sub9 = sub nsw i32 %sq, 1
  %idxprom10 = sext i32 %sub9 to i64
  %arrayidx11 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom10
  %i3 = load i32, i32* %arrayidx11, align 4
  %cmp12 = icmp ne i32 %i3, 13
  br i1 %cmp12, label %land.lhs.true, label %if.end19

land.lhs.true:                                    ; preds = %if.end
  %add13 = add nsw i32 %sq, 1
  %idxprom14 = sext i32 %add13 to i64
  %arrayidx15 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom14
  %i4 = load i32, i32* %arrayidx15, align 4
  %cmp16 = icmp ne i32 %i4, 13
  br i1 %cmp16, label %if.then17, label %if.end19

if.then17:                                        ; preds = %land.lhs.true
  %sub18 = sub nsw i32 %add8, 5
  br label %if.end19

if.end19:                                         ; preds = %if.then17, %land.lhs.true, %if.end
  %s.0 = phi i32 [ %sub18, %if.then17 ], [ %add8, %land.lhs.true ], [ %add8, %if.end ]
  %i5 = load i32, i32* @wmat, align 4
  %cmp20 = icmp ne i32 %i5, 1300
  br i1 %cmp20, label %if.then22, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end19
  %i6 = load i32, i32* @bmat, align 4
  %cmp21 = icmp ne i32 %i6, 1300
  br i1 %cmp21, label %if.then22, label %if.end54

if.then22:                                        ; preds = %lor.lhs.false, %if.end19
  %idxprom23 = sext i32 %c to i64
  %arrayidx24 = getelementptr inbounds [2 x i32], [2 x i32]* @Rook.square_d1, i64 0, i64 %idxprom23
  %i7 = load i32, i32* %arrayidx24, align 4
  %cmp25 = icmp eq i32 %sq, %i7
  br i1 %cmp25, label %if.then26, label %if.end46

if.then26:                                        ; preds = %if.then22
  %add27 = add nsw i32 %s.0, 10
  %idxprom28 = sext i32 %c to i64
  %arrayidx29 = getelementptr inbounds [2 x i32], [2 x i32]* @Rook.square_d1, i64 0, i64 %idxprom28
  %i8 = load i32, i32* %arrayidx29, align 4
  %add30 = add nsw i32 %i8, 1
  %idxprom31 = sext i32 %add30 to i64
  %arrayidx32 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom31
  %i9 = load i32, i32* %arrayidx32, align 4
  %add33 = add nsw i32 %i9, 1
  %shr = ashr i32 %add33, 1
  %cmp34 = icmp eq i32 %shr, 4
  br i1 %cmp34, label %land.lhs.true35, label %if.end45

land.lhs.true35:                                  ; preds = %if.then26
  %idxprom36 = sext i32 %c to i64
  %arrayidx37 = getelementptr inbounds [2 x i32], [2 x i32]* @Rook.square_d1, i64 0, i64 %idxprom36
  %i10 = load i32, i32* %arrayidx37, align 4
  %add38 = add nsw i32 %i10, 1
  %idxprom39 = sext i32 %add38 to i64
  %arrayidx40 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom39
  %i11 = load i32, i32* %arrayidx40, align 4
  %add41 = add nsw i32 %i11, 1
  %and = and i32 %add41, 1
  %cmp42 = icmp eq i32 %and, %c
  br i1 %cmp42, label %if.then43, label %if.end45

if.then43:                                        ; preds = %land.lhs.true35
  %add44 = add nsw i32 %add27, 5
  br label %if.end45

if.end45:                                         ; preds = %if.then43, %land.lhs.true35, %if.then26
  %s.1 = phi i32 [ %add44, %if.then43 ], [ %add27, %land.lhs.true35 ], [ %add27, %if.then26 ]
  br label %if.end46

if.end46:                                         ; preds = %if.end45, %if.then22
  %s.2 = phi i32 [ %s.1, %if.end45 ], [ %s.0, %if.then22 ]
  %idxprom47 = sext i32 %c to i64
  %arrayidx48 = getelementptr inbounds [2 x i32], [2 x i32]* @Rook.square_d1, i64 0, i64 %idxprom47
  %i12 = load i32, i32* %arrayidx48, align 4
  %add49 = add nsw i32 %i12, 1
  %cmp50 = icmp eq i32 %sq, %add49
  br i1 %cmp50, label %if.then51, label %if.end53

if.then51:                                        ; preds = %if.end46
  %add52 = add nsw i32 %s.2, 10
  br label %if.end53

if.end53:                                         ; preds = %if.then51, %if.end46
  %s.3 = phi i32 [ %add52, %if.then51 ], [ %s.2, %if.end46 ]
  br label %if.end54

if.end54:                                         ; preds = %if.end53, %lor.lhs.false
  %s.4 = phi i32 [ %s.3, %if.end53 ], [ %s.0, %lor.lhs.false ]
  %cmp55 = icmp eq i32 %c, 1
  br i1 %cmp55, label %if.then56, label %if.end58

if.then56:                                        ; preds = %if.end54
  %sub57 = sub nsw i32 0, %s.4
  br label %if.end58

if.end58:                                         ; preds = %if.then56, %if.end54
  %s.5 = phi i32 [ %sub57, %if.then56 ], [ %s.4, %if.end54 ]
  ret i32 %s.5
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @Bishop(i32 %sq, i32 %c) #0 {
entry:
  %xor = xor i32 %c, 1
  %add = add nsw i32 0, 325
  %idxprom = sext i32 %sq to i64
  %arrayidx = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @sbishop to [144 x i32]*), i64 0, i64 %idxprom
  %i = load i32, i32* %arrayidx, align 4
  %add1 = add nsw i32 %add, %i
  %idxprom2 = sext i32 %sq to i64
  %arrayidx3 = getelementptr inbounds [144 x [144 x i32]], [144 x [144 x i32]]* @distance, i64 0, i64 %idxprom2
  %idxprom4 = sext i32 %xor to i64
  %arrayidx5 = getelementptr inbounds [2 x i32], [2 x i32]* @king_locs, i64 0, i64 %idxprom4
  %i1 = load i32, i32* %arrayidx5, align 4
  %idxprom6 = sext i32 %i1 to i64
  %arrayidx7 = getelementptr inbounds [144 x i32], [144 x i32]* %arrayidx3, i64 0, i64 %idxprom6
  %i2 = load i32, i32* %arrayidx7, align 4
  %idxprom8 = sext i32 %i2 to i64
  %arrayidx9 = getelementptr inbounds [8 x i32], [8 x i32]* @std_b_tropism, i64 0, i64 %idxprom8
  %i3 = load i32, i32* %arrayidx9, align 4
  %add10 = add nsw i32 %add1, %i3
  %call = call i32 @bishop_mobility(i32 %sq)
  %shl = shl i32 %call, 1
  %cmp = icmp sle i32 %shl, 2
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %sub = sub nsw i32 %shl, 5
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %mob.0 = phi i32 [ %sub, %if.then ], [ %shl, %entry ]
  %add11 = add nsw i32 %add10, %mob.0
  %cmp12 = icmp eq i32 %c, 0
  br i1 %cmp12, label %land.lhs.true, label %lor.lhs.false

land.lhs.true:                                    ; preds = %if.end
  %cmp13 = icmp eq i32 %sq, 39
  br i1 %cmp13, label %land.lhs.true14, label %lor.lhs.false

land.lhs.true14:                                  ; preds = %land.lhs.true
  %i4 = load i32, i32* getelementptr inbounds ([144 x i32], [144 x i32]* @board, i64 0, i64 52), align 16
  %cmp15 = icmp eq i32 %i4, 1
  br i1 %cmp15, label %if.then21, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true14, %land.lhs.true, %if.end
  %cmp16 = icmp eq i32 %c, 1
  br i1 %cmp16, label %land.lhs.true17, label %if.end23

land.lhs.true17:                                  ; preds = %lor.lhs.false
  %cmp18 = icmp eq i32 %sq, 99
  br i1 %cmp18, label %land.lhs.true19, label %if.end23

land.lhs.true19:                                  ; preds = %land.lhs.true17
  %i5 = load i32, i32* getelementptr inbounds ([144 x i32], [144 x i32]* @board, i64 0, i64 88), align 16
  %cmp20 = icmp eq i32 %i5, 2
  br i1 %cmp20, label %if.then21, label %if.end23

if.then21:                                        ; preds = %land.lhs.true19, %land.lhs.true14
  %sub22 = sub nsw i32 %add11, 5
  br label %if.end23

if.end23:                                         ; preds = %if.then21, %land.lhs.true19, %land.lhs.true17, %lor.lhs.false
  %s.0 = phi i32 [ %sub22, %if.then21 ], [ %add11, %land.lhs.true19 ], [ %add11, %land.lhs.true17 ], [ %add11, %lor.lhs.false ]
  %cmp24 = icmp eq i32 %c, 1
  br i1 %cmp24, label %if.then25, label %if.end27

if.then25:                                        ; preds = %if.end23
  %sub26 = sub nsw i32 0, %s.0
  br label %if.end27

if.end27:                                         ; preds = %if.then25, %if.end23
  %s.1 = phi i32 [ %sub26, %if.then25 ], [ %s.0, %if.end23 ]
  ret i32 %s.1
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @Knight(i32 %sq, i32 %c) #0 {
entry:
  %xor = xor i32 %c, 1
  %add = add nsw i32 0, 310
  %idxprom = sext i32 %sq to i64
  %arrayidx = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @sknight to [144 x i32]*), i64 0, i64 %idxprom
  %i = load i32, i32* %arrayidx, align 4
  %add1 = add nsw i32 %add, %i
  %idxprom2 = sext i32 %sq to i64
  %arrayidx3 = getelementptr inbounds [144 x [144 x i32]], [144 x [144 x i32]]* @distance, i64 0, i64 %idxprom2
  %idxprom4 = sext i32 %xor to i64
  %arrayidx5 = getelementptr inbounds [2 x i32], [2 x i32]* @king_locs, i64 0, i64 %idxprom4
  %i1 = load i32, i32* %arrayidx5, align 4
  %idxprom6 = sext i32 %i1 to i64
  %arrayidx7 = getelementptr inbounds [144 x i32], [144 x i32]* %arrayidx3, i64 0, i64 %idxprom6
  %i2 = load i32, i32* %arrayidx7, align 4
  %idxprom8 = sext i32 %i2 to i64
  %arrayidx9 = getelementptr inbounds [8 x i32], [8 x i32]* @std_n_tropism, i64 0, i64 %idxprom8
  %i3 = load i32, i32* %arrayidx9, align 4
  %add10 = add nsw i32 %add1, %i3
  %cmp = icmp eq i32 %c, 1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %sub = sub nsw i32 0, %add10
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  %s.0 = phi i32 [ %sub, %if.then ], [ %add10, %entry ]
  ret i32 %s.0
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @Pawn(i32 %sq, i32 %c) #0 {
entry:
  %xor = xor i32 %c, 1
  %add = add nsw i32 0, 100
  %idxprom = sext i32 %sq to i64
  %arrayidx = getelementptr inbounds [144 x [144 x i32]], [144 x [144 x i32]]* @distance, i64 0, i64 %idxprom
  %idxprom1 = sext i32 %xor to i64
  %arrayidx2 = getelementptr inbounds [2 x i32], [2 x i32]* @king_locs, i64 0, i64 %idxprom1
  %i = load i32, i32* %arrayidx2, align 4
  %idxprom3 = sext i32 %i to i64
  %arrayidx4 = getelementptr inbounds [144 x i32], [144 x i32]* %arrayidx, i64 0, i64 %idxprom3
  %i1 = load i32, i32* %arrayidx4, align 4
  %idxprom5 = sext i32 %i1 to i64
  %arrayidx6 = getelementptr inbounds [8 x i32], [8 x i32]* @std_p_tropism, i64 0, i64 %idxprom5
  %i2 = load i32, i32* %arrayidx6, align 4
  %add7 = add nsw i32 %add, %i2
  %idxprom8 = sext i32 %sq to i64
  %arrayidx9 = getelementptr inbounds [144 x [144 x i32]], [144 x [144 x i32]]* @distance, i64 0, i64 %idxprom8
  %idxprom10 = sext i32 %c to i64
  %arrayidx11 = getelementptr inbounds [2 x i32], [2 x i32]* @king_locs, i64 0, i64 %idxprom10
  %i3 = load i32, i32* %arrayidx11, align 4
  %idxprom12 = sext i32 %i3 to i64
  %arrayidx13 = getelementptr inbounds [144 x i32], [144 x i32]* %arrayidx9, i64 0, i64 %idxprom12
  %i4 = load i32, i32* %arrayidx13, align 4
  %idxprom14 = sext i32 %i4 to i64
  %arrayidx15 = getelementptr inbounds [8 x i32], [8 x i32]* @std_own_p_tropism, i64 0, i64 %idxprom14
  %i5 = load i32, i32* %arrayidx15, align 4
  %add16 = add nsw i32 %add7, %i5
  %add17 = add nsw i32 %sq, 1
  %idxprom18 = sext i32 %add17 to i64
  %arrayidx19 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom18
  %i6 = load i32, i32* %arrayidx19, align 4
  %add20 = add nsw i32 %i6, 1
  %shr = ashr i32 %add20, 1
  %cmp = icmp eq i32 %shr, 1
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %add21 = add nsw i32 %sq, 1
  %idxprom22 = sext i32 %add21 to i64
  %arrayidx23 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom22
  %i7 = load i32, i32* %arrayidx23, align 4
  %add24 = add nsw i32 %i7, 1
  %and = and i32 %add24, 1
  %cmp25 = icmp eq i32 %and, %c
  br i1 %cmp25, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %add26 = add nsw i32 %add16, 5
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %entry
  %s.0 = phi i32 [ %add26, %if.then ], [ %add16, %land.lhs.true ], [ %add16, %entry ]
  %add27 = add nsw i32 %sq, 11
  %idxprom28 = sext i32 %add27 to i64
  %arrayidx29 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom28
  %i8 = load i32, i32* %arrayidx29, align 4
  %add30 = add nsw i32 %i8, 1
  %shr31 = ashr i32 %add30, 1
  %cmp32 = icmp eq i32 %shr31, 1
  br i1 %cmp32, label %land.lhs.true33, label %if.else

land.lhs.true33:                                  ; preds = %if.end
  %add34 = add nsw i32 %sq, 11
  %idxprom35 = sext i32 %add34 to i64
  %arrayidx36 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom35
  %i9 = load i32, i32* %arrayidx36, align 4
  %add37 = add nsw i32 %i9, 1
  %and38 = and i32 %add37, 1
  %cmp39 = icmp eq i32 %and38, %c
  br i1 %cmp39, label %if.then40, label %if.else

if.then40:                                        ; preds = %land.lhs.true33
  %add41 = add nsw i32 %s.0, 1
  br label %if.end58

if.else:                                          ; preds = %land.lhs.true33, %if.end
  %add42 = add nsw i32 %sq, 13
  %idxprom43 = sext i32 %add42 to i64
  %arrayidx44 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom43
  %i10 = load i32, i32* %arrayidx44, align 4
  %add45 = add nsw i32 %i10, 1
  %shr46 = ashr i32 %add45, 1
  %cmp47 = icmp eq i32 %shr46, 1
  br i1 %cmp47, label %land.lhs.true48, label %if.end57

land.lhs.true48:                                  ; preds = %if.else
  %add49 = add nsw i32 %sq, 13
  %idxprom50 = sext i32 %add49 to i64
  %arrayidx51 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom50
  %i11 = load i32, i32* %arrayidx51, align 4
  %add52 = add nsw i32 %i11, 1
  %and53 = and i32 %add52, 1
  %cmp54 = icmp eq i32 %and53, %c
  br i1 %cmp54, label %if.then55, label %if.end57

if.then55:                                        ; preds = %land.lhs.true48
  %add56 = add nsw i32 %s.0, 1
  br label %if.end57

if.end57:                                         ; preds = %if.then55, %land.lhs.true48, %if.else
  %s.1 = phi i32 [ %add56, %if.then55 ], [ %s.0, %land.lhs.true48 ], [ %s.0, %if.else ]
  br label %if.end58

if.end58:                                         ; preds = %if.end57, %if.then40
  %s.2 = phi i32 [ %add41, %if.then40 ], [ %s.1, %if.end57 ]
  %cmp59 = icmp eq i32 %c, 1
  br i1 %cmp59, label %if.then60, label %if.end61

if.then60:                                        ; preds = %if.end58
  %sub = sub nsw i32 0, %s.2
  br label %if.end61

if.end61:                                         ; preds = %if.then60, %if.end58
  %s.3 = phi i32 [ %sub, %if.then60 ], [ %s.2, %if.end58 ]
  ret i32 %s.3
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @ErrorIt(i32 %sq, i32 %c) #0 {
entry:
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.22, i64 0, i64 0), i32 %sq, i32 %c)
  ret i32 0
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @std_eval(i32 %alpha, i32 %beta) #0 {
entry:
  %pawns = alloca [2 x [11 x i32]], align 16
  %white_back_pawn = alloca [11 x i32], align 16
  %black_back_pawn = alloca [11 x i32], align 16
  %score = alloca i32, align 4
  %in_cache = alloca i32, align 4
  store i32 0, i32* %score, align 4
  %i = load i32, i32* @white_to_move, align 4
  %tobool = icmp ne i32 %i, 0
  br i1 %tobool, label %cond.true, label %cond.false

cond.true:                                        ; preds = %entry
  %i1 = load i32, i32* @Material, align 4
  br label %cond.end

cond.false:                                       ; preds = %entry
  %i2 = load i32, i32* @Material, align 4
  %sub = sub nsw i32 0, %i2
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %i1, %cond.true ], [ %sub, %cond.false ]
  %i3 = load i32, i32* @maxposdiff, align 4
  %sub1 = sub nsw i32 %cond, %i3
  %cmp = icmp sge i32 %sub1, %beta
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %cond.end
  %i4 = load i32, i32* @white_to_move, align 4
  %tobool2 = icmp ne i32 %i4, 0
  br i1 %tobool2, label %cond.true3, label %cond.false4

cond.true3:                                       ; preds = %if.then
  %i5 = load i32, i32* @Material, align 4
  br label %cond.end6

cond.false4:                                      ; preds = %if.then
  %i6 = load i32, i32* @Material, align 4
  %sub5 = sub nsw i32 0, %i6
  br label %cond.end6

cond.end6:                                        ; preds = %cond.false4, %cond.true3
  %cond7 = phi i32 [ %i5, %cond.true3 ], [ %sub5, %cond.false4 ]
  %i7 = load i32, i32* @maxposdiff, align 4
  %sub8 = sub nsw i32 %cond7, %i7
  br label %return

if.end:                                           ; preds = %cond.end
  %i8 = load i32, i32* @white_to_move, align 4
  %tobool9 = icmp ne i32 %i8, 0
  br i1 %tobool9, label %cond.true10, label %cond.false11

cond.true10:                                      ; preds = %if.end
  %i9 = load i32, i32* @Material, align 4
  br label %cond.end13

cond.false11:                                     ; preds = %if.end
  %i10 = load i32, i32* @Material, align 4
  %sub12 = sub nsw i32 0, %i10
  br label %cond.end13

cond.end13:                                       ; preds = %cond.false11, %cond.true10
  %cond14 = phi i32 [ %i9, %cond.true10 ], [ %sub12, %cond.false11 ]
  %i11 = load i32, i32* @maxposdiff, align 4
  %add = add nsw i32 %cond14, %i11
  %cmp15 = icmp sle i32 %add, %alpha
  br i1 %cmp15, label %if.then16, label %if.end24

if.then16:                                        ; preds = %cond.end13
  %i12 = load i32, i32* @white_to_move, align 4
  %tobool17 = icmp ne i32 %i12, 0
  br i1 %tobool17, label %cond.true18, label %cond.false19

cond.true18:                                      ; preds = %if.then16
  %i13 = load i32, i32* @Material, align 4
  br label %cond.end21

cond.false19:                                     ; preds = %if.then16
  %i14 = load i32, i32* @Material, align 4
  %sub20 = sub nsw i32 0, %i14
  br label %cond.end21

cond.end21:                                       ; preds = %cond.false19, %cond.true18
  %cond22 = phi i32 [ %i13, %cond.true18 ], [ %sub20, %cond.false19 ]
  %i15 = load i32, i32* @maxposdiff, align 4
  %add23 = add nsw i32 %cond22, %i15
  br label %return

if.end24:                                         ; preds = %cond.end13
  store i32 0, i32* %in_cache, align 4
  call void @checkECache(i32* %score, i32* %in_cache)
  %i16 = load i32, i32* %in_cache, align 4
  %tobool25 = icmp ne i32 %i16, 0
  br i1 %tobool25, label %if.then26, label %if.end31

if.then26:                                        ; preds = %if.end24
  %i17 = load i32, i32* @white_to_move, align 4
  %cmp27 = icmp eq i32 %i17, 1
  br i1 %cmp27, label %if.then28, label %if.end29

if.then28:                                        ; preds = %if.then26
  %i18 = load i32, i32* %score, align 4
  br label %return

if.end29:                                         ; preds = %if.then26
  %i19 = load i32, i32* %score, align 4
  %sub30 = sub nsw i32 0, %i19
  br label %return

if.end31:                                         ; preds = %if.end24
  %arraydecay = getelementptr inbounds [2 x [11 x i32]], [2 x [11 x i32]]* %pawns, i64 0, i64 0
  %i20 = bitcast [11 x i32]* %arraydecay to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %i20, i8 0, i64 88, i1 false)
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end31
  %i.0 = phi i32 [ 0, %if.end31 ], [ %inc, %for.inc ]
  %cmp32 = icmp slt i32 %i.0, 11
  br i1 %cmp32, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %idxprom = sext i32 %i.0 to i64
  %arrayidx = getelementptr inbounds [11 x i32], [11 x i32]* %white_back_pawn, i64 0, i64 %idxprom
  store i32 7, i32* %arrayidx, align 4
  %idxprom33 = sext i32 %i.0 to i64
  %arrayidx34 = getelementptr inbounds [11 x i32], [11 x i32]* %black_back_pawn, i64 0, i64 %idxprom33
  store i32 2, i32* %arrayidx34, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %inc = add nsw i32 %i.0, 1
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* @wmat, align 4
  store i32 0, i32* @bmat, align 4
  %i21 = load i32, i32* @wking_loc, align 4
  store i32 %i21, i32* getelementptr inbounds ([2 x i32], [2 x i32]* @king_locs, i64 0, i64 0), align 4
  %i22 = load i32, i32* @bking_loc, align 4
  store i32 %i22, i32* getelementptr inbounds ([2 x i32], [2 x i32]* @king_locs, i64 0, i64 1), align 4
  br label %for.cond35

for.cond35:                                       ; preds = %for.inc114, %for.end
  %j.0 = phi i32 [ 1, %for.end ], [ %inc115, %for.inc114 ]
  %a.0 = phi i32 [ 1, %for.end ], [ %a.1, %for.inc114 ]
  %i23 = load i32, i32* @piece_count, align 4
  %cmp36 = icmp sle i32 %a.0, %i23
  br i1 %cmp36, label %for.body37, label %for.end116

for.body37:                                       ; preds = %for.cond35
  %idxprom38 = sext i32 %j.0 to i64
  %arrayidx39 = getelementptr inbounds [62 x i32], [62 x i32]* @pieces, i64 0, i64 %idxprom38
  %i24 = load i32, i32* %arrayidx39, align 4
  %tobool40 = icmp ne i32 %i24, 0
  br i1 %tobool40, label %if.else, label %if.then41

if.then41:                                        ; preds = %for.body37
  br label %for.inc114

if.else:                                          ; preds = %for.body37
  %inc42 = add nsw i32 %a.0, 1
  br label %if.end43

if.end43:                                         ; preds = %if.else
  %idxprom44 = sext i32 %i24 to i64
  %arrayidx45 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom44
  %i25 = load i32, i32* %arrayidx45, align 4
  %add46 = add nsw i32 %i25, 1
  %shr = ashr i32 %add46, 1
  %cmp47 = icmp ne i32 %shr, 1
  br i1 %cmp47, label %land.lhs.true, label %if.end71

land.lhs.true:                                    ; preds = %if.end43
  %idxprom48 = sext i32 %i24 to i64
  %arrayidx49 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom48
  %i26 = load i32, i32* %arrayidx49, align 4
  %add50 = add nsw i32 %i26, 1
  %shr51 = ashr i32 %add50, 1
  %cmp52 = icmp ne i32 %shr51, 3
  br i1 %cmp52, label %if.then53, label %if.end71

if.then53:                                        ; preds = %land.lhs.true
  %idxprom54 = sext i32 %i24 to i64
  %arrayidx55 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom54
  %i27 = load i32, i32* %arrayidx55, align 4
  %add56 = add nsw i32 %i27, 1
  %and = and i32 %add56, 1
  %cmp57 = icmp eq i32 %and, 0
  br i1 %cmp57, label %if.then58, label %if.else64

if.then58:                                        ; preds = %if.then53
  %idxprom59 = sext i32 %i24 to i64
  %arrayidx60 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom59
  %i28 = load i32, i32* %arrayidx60, align 4
  %idxprom61 = sext i32 %i28 to i64
  %arrayidx62 = getelementptr inbounds [14 x i32], [14 x i32]* @material, i64 0, i64 %idxprom61
  %i29 = load i32, i32* %arrayidx62, align 4
  %i30 = load i32, i32* @wmat, align 4
  %add63 = add nsw i32 %i30, %i29
  store i32 %add63, i32* @wmat, align 4
  br label %if.end70

if.else64:                                        ; preds = %if.then53
  %idxprom65 = sext i32 %i24 to i64
  %arrayidx66 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom65
  %i31 = load i32, i32* %arrayidx66, align 4
  %idxprom67 = sext i32 %i31 to i64
  %arrayidx68 = getelementptr inbounds [14 x i32], [14 x i32]* @material, i64 0, i64 %idxprom67
  %i32 = load i32, i32* %arrayidx68, align 4
  %call = call i32 @abs(i32 %i32) #10
  %i33 = load i32, i32* @bmat, align 4
  %add69 = add nsw i32 %i33, %call
  store i32 %add69, i32* @bmat, align 4
  br label %if.end70

if.end70:                                         ; preds = %if.else64, %if.then58
  br label %if.end71

if.end71:                                         ; preds = %if.end70, %land.lhs.true, %if.end43
  %idxprom72 = sext i32 %i24 to i64
  %arrayidx73 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom72
  %i34 = load i32, i32* %arrayidx73, align 4
  %add74 = add nsw i32 %i34, 1
  %shr75 = ashr i32 %add74, 1
  %cmp76 = icmp eq i32 %shr75, 1
  br i1 %cmp76, label %if.then77, label %if.end113

if.then77:                                        ; preds = %if.end71
  %idxprom78 = sext i32 %i24 to i64
  %arrayidx79 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xfile to [144 x i32]*), i64 0, i64 %idxprom78
  %i35 = load i32, i32* %arrayidx79, align 4
  %add80 = add nsw i32 %i35, 1
  %idxprom81 = sext i32 %i24 to i64
  %arrayidx82 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xrank to [144 x i32]*), i64 0, i64 %idxprom81
  %i36 = load i32, i32* %arrayidx82, align 4
  %idxprom83 = sext i32 %i24 to i64
  %arrayidx84 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom83
  %i37 = load i32, i32* %arrayidx84, align 4
  %add85 = add nsw i32 %i37, 1
  %and86 = and i32 %add85, 1
  %cmp87 = icmp eq i32 %and86, 0
  br i1 %cmp87, label %if.then88, label %if.else100

if.then88:                                        ; preds = %if.then77
  %arrayidx89 = getelementptr inbounds [2 x [11 x i32]], [2 x [11 x i32]]* %pawns, i64 0, i64 1
  %idxprom90 = sext i32 %add80 to i64
  %arrayidx91 = getelementptr inbounds [11 x i32], [11 x i32]* %arrayidx89, i64 0, i64 %idxprom90
  %i38 = load i32, i32* %arrayidx91, align 4
  %inc92 = add nsw i32 %i38, 1
  store i32 %inc92, i32* %arrayidx91, align 4
  %idxprom93 = sext i32 %add80 to i64
  %arrayidx94 = getelementptr inbounds [11 x i32], [11 x i32]* %white_back_pawn, i64 0, i64 %idxprom93
  %i39 = load i32, i32* %arrayidx94, align 4
  %cmp95 = icmp slt i32 %i36, %i39
  br i1 %cmp95, label %if.then96, label %if.end99

if.then96:                                        ; preds = %if.then88
  %idxprom97 = sext i32 %add80 to i64
  %arrayidx98 = getelementptr inbounds [11 x i32], [11 x i32]* %white_back_pawn, i64 0, i64 %idxprom97
  store i32 %i36, i32* %arrayidx98, align 4
  br label %if.end99

if.end99:                                         ; preds = %if.then96, %if.then88
  br label %if.end112

if.else100:                                       ; preds = %if.then77
  %arrayidx101 = getelementptr inbounds [2 x [11 x i32]], [2 x [11 x i32]]* %pawns, i64 0, i64 0
  %idxprom102 = sext i32 %add80 to i64
  %arrayidx103 = getelementptr inbounds [11 x i32], [11 x i32]* %arrayidx101, i64 0, i64 %idxprom102
  %i40 = load i32, i32* %arrayidx103, align 4
  %inc104 = add nsw i32 %i40, 1
  store i32 %inc104, i32* %arrayidx103, align 4
  %idxprom105 = sext i32 %add80 to i64
  %arrayidx106 = getelementptr inbounds [11 x i32], [11 x i32]* %black_back_pawn, i64 0, i64 %idxprom105
  %i41 = load i32, i32* %arrayidx106, align 4
  %cmp107 = icmp sgt i32 %i36, %i41
  br i1 %cmp107, label %if.then108, label %if.end111

if.then108:                                       ; preds = %if.else100
  %idxprom109 = sext i32 %add80 to i64
  %arrayidx110 = getelementptr inbounds [11 x i32], [11 x i32]* %black_back_pawn, i64 0, i64 %idxprom109
  store i32 %i36, i32* %arrayidx110, align 4
  br label %if.end111

if.end111:                                        ; preds = %if.then108, %if.else100
  br label %if.end112

if.end112:                                        ; preds = %if.end111, %if.end99
  br label %if.end113

if.end113:                                        ; preds = %if.end112, %if.end71
  br label %for.inc114

for.inc114:                                       ; preds = %if.end113, %if.then41
  %a.1 = phi i32 [ %inc42, %if.end113 ], [ %a.0, %if.then41 ]
  %inc115 = add nsw i32 %j.0, 1
  br label %for.cond35

for.end116:                                       ; preds = %for.cond35
  br label %for.cond117

for.cond117:                                      ; preds = %for.inc989, %for.end116
  %wpotential.0 = phi i32 [ 0, %for.end116 ], [ %wpotential.6, %for.inc989 ]
  %fwrook.0 = phi i32 [ 0, %for.end116 ], [ %fwrook.3, %for.inc989 ]
  %rwrook.0 = phi i32 [ 0, %for.end116 ], [ %rwrook.3, %for.inc989 ]
  %fbrook.0 = phi i32 [ 0, %for.end116 ], [ %fbrook.3, %for.inc989 ]
  %rbrook.0 = phi i32 [ 0, %for.end116 ], [ %rbrook.3, %for.inc989 ]
  %br.0 = phi i32 [ 0, %for.end116 ], [ %br.2, %for.inc989 ]
  %wr.0 = phi i32 [ 0, %for.end116 ], [ %wr.2, %for.inc989 ]
  %bq.0 = phi i32 [ 0, %for.end116 ], [ %bq.2, %for.inc989 ]
  %wq.0 = phi i32 [ 0, %for.end116 ], [ %wq.2, %for.inc989 ]
  %bb.0 = phi i32 [ 0, %for.end116 ], [ %bb.2, %for.inc989 ]
  %wb.0 = phi i32 [ 0, %for.end116 ], [ %wb.2, %for.inc989 ]
  %bn.0 = phi i32 [ 0, %for.end116 ], [ %bn.2, %for.inc989 ]
  %wn.0 = phi i32 [ 0, %for.end116 ], [ %wn.2, %for.inc989 ]
  %bp.0 = phi i32 [ 0, %for.end116 ], [ %bp.2, %for.inc989 ]
  %wp.0 = phi i32 [ 0, %for.end116 ], [ %wp.2, %for.inc989 ]
  %j.1 = phi i32 [ 1, %for.end116 ], [ %inc990, %for.inc989 ]
  %bpotential.0 = phi i32 [ 0, %for.end116 ], [ %bpotential.6, %for.inc989 ]
  %a.2 = phi i32 [ 1, %for.end116 ], [ %a.3, %for.inc989 ]
  %i42 = load i32, i32* @piece_count, align 4
  %cmp118 = icmp sle i32 %a.2, %i42
  br i1 %cmp118, label %for.body119, label %for.end991

for.body119:                                      ; preds = %for.cond117
  %idxprom120 = sext i32 %j.1 to i64
  %arrayidx121 = getelementptr inbounds [62 x i32], [62 x i32]* @pieces, i64 0, i64 %idxprom120
  %i43 = load i32, i32* %arrayidx121, align 4
  %tobool122 = icmp ne i32 %i43, 0
  br i1 %tobool122, label %if.else124, label %if.then123

if.then123:                                       ; preds = %for.body119
  br label %for.inc989

if.else124:                                       ; preds = %for.body119
  %inc125 = add nsw i32 %a.2, 1
  br label %if.end126

if.end126:                                        ; preds = %if.else124
  %idxprom127 = sext i32 %i43 to i64
  %arrayidx128 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom127
  %i44 = load i32, i32* %arrayidx128, align 4
  %add129 = add nsw i32 %i44, 1
  %shr130 = ashr i32 %add129, 1
  %idxprom131 = sext i32 %shr130 to i64
  %arrayidx132 = getelementptr inbounds [7 x i32 (i32, i32)*], [7 x i32 (i32, i32)*]* @evalRoutines, i64 0, i64 %idxprom131
  %i45 = load i32 (i32, i32)*, i32 (i32, i32)** %arrayidx132, align 8
  %idxprom133 = sext i32 %i43 to i64
  %arrayidx134 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom133
  %i46 = load i32, i32* %arrayidx134, align 4
  %add135 = add nsw i32 %i46, 1
  %and136 = and i32 %add135, 1
  %call137 = call i32 %i45(i32 %i43, i32 %and136)
  %i47 = load i32, i32* %score, align 4
  %add138 = add nsw i32 %i47, %call137
  store i32 %add138, i32* %score, align 4
  %idxprom139 = sext i32 %i43 to i64
  %arrayidx140 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xfile to [144 x i32]*), i64 0, i64 %idxprom139
  %i48 = load i32, i32* %arrayidx140, align 4
  %add141 = add nsw i32 %i48, 1
  %idxprom142 = sext i32 %i43 to i64
  %arrayidx143 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xrank to [144 x i32]*), i64 0, i64 %idxprom142
  %i49 = load i32, i32* %arrayidx143, align 4
  %idxprom144 = sext i32 %i43 to i64
  %arrayidx145 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom144
  %i50 = load i32, i32* %arrayidx145, align 4
  switch i32 %i50, label %sw.epilog [
    i32 1, label %sw.bb
    i32 2, label %sw.bb412
    i32 7, label %sw.bb683
    i32 8, label %sw.bb724
    i32 11, label %sw.bb765
    i32 12, label %sw.bb767
    i32 3, label %sw.bb769
    i32 4, label %sw.bb771
    i32 9, label %sw.bb773
    i32 10, label %sw.bb775
    i32 5, label %sw.bb777
    i32 6, label %sw.bb880
  ]

sw.bb:                                            ; preds = %if.end126
  %idxprom146 = sext i32 %i43 to i64
  %arrayidx147 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [106 x i32], [38 x i32] }>* @swhite_pawn to [144 x i32]*), i64 0, i64 %idxprom146
  %i51 = load i32, i32* %arrayidx147, align 4
  %i52 = load i32, i32* %score, align 4
  %add148 = add nsw i32 %i52, %i51
  store i32 %add148, i32* %score, align 4
  %inc149 = add nsw i32 %wp.0, 1
  %add150 = add nsw i32 %add141, 1
  %idxprom151 = sext i32 %add150 to i64
  %arrayidx152 = getelementptr inbounds [11 x i32], [11 x i32]* %white_back_pawn, i64 0, i64 %idxprom151
  %i53 = load i32, i32* %arrayidx152, align 4
  %cmp153 = icmp sgt i32 %i53, %i49
  br i1 %cmp153, label %land.lhs.true154, label %if.end175

land.lhs.true154:                                 ; preds = %sw.bb
  %sub155 = sub nsw i32 %add141, 1
  %idxprom156 = sext i32 %sub155 to i64
  %arrayidx157 = getelementptr inbounds [11 x i32], [11 x i32]* %white_back_pawn, i64 0, i64 %idxprom156
  %i54 = load i32, i32* %arrayidx157, align 4
  %cmp158 = icmp sgt i32 %i54, %i49
  br i1 %cmp158, label %if.then159, label %if.end175

if.then159:                                       ; preds = %land.lhs.true154
  %i55 = load i32, i32* %score, align 4
  %sub160 = sub nsw i32 %i55, 8
  store i32 %sub160, i32* %score, align 4
  %arrayidx161 = getelementptr inbounds [2 x [11 x i32]], [2 x [11 x i32]]* %pawns, i64 0, i64 1
  %add162 = add nsw i32 %add141, 1
  %idxprom163 = sext i32 %add162 to i64
  %arrayidx164 = getelementptr inbounds [11 x i32], [11 x i32]* %arrayidx161, i64 0, i64 %idxprom163
  %i56 = load i32, i32* %arrayidx164, align 4
  %tobool165 = icmp ne i32 %i56, 0
  br i1 %tobool165, label %if.end174, label %land.lhs.true166

land.lhs.true166:                                 ; preds = %if.then159
  %arrayidx167 = getelementptr inbounds [2 x [11 x i32]], [2 x [11 x i32]]* %pawns, i64 0, i64 1
  %sub168 = sub nsw i32 %add141, 1
  %idxprom169 = sext i32 %sub168 to i64
  %arrayidx170 = getelementptr inbounds [11 x i32], [11 x i32]* %arrayidx167, i64 0, i64 %idxprom169
  %i57 = load i32, i32* %arrayidx170, align 4
  %tobool171 = icmp ne i32 %i57, 0
  br i1 %tobool171, label %if.end174, label %if.then172

if.then172:                                       ; preds = %land.lhs.true166
  %i58 = load i32, i32* %score, align 4
  %sub173 = sub nsw i32 %i58, 5
  store i32 %sub173, i32* %score, align 4
  br label %if.end174

if.end174:                                        ; preds = %if.then172, %land.lhs.true166, %if.then159
  %isolated.0 = phi i32 [ 0, %if.then159 ], [ 0, %land.lhs.true166 ], [ 1, %if.then172 ]
  br label %if.end175

if.end175:                                        ; preds = %if.end174, %land.lhs.true154, %sw.bb
  %backwards.0 = phi i32 [ 1, %if.end174 ], [ 0, %land.lhs.true154 ], [ 0, %sw.bb ]
  %isolated.1 = phi i32 [ %isolated.0, %if.end174 ], [ 0, %land.lhs.true154 ], [ 0, %sw.bb ]
  %arrayidx176 = getelementptr inbounds [2 x [11 x i32]], [2 x [11 x i32]]* %pawns, i64 0, i64 0
  %idxprom177 = sext i32 %add141 to i64
  %arrayidx178 = getelementptr inbounds [11 x i32], [11 x i32]* %arrayidx176, i64 0, i64 %idxprom177
  %i59 = load i32, i32* %arrayidx178, align 4
  %tobool179 = icmp ne i32 %i59, 0
  br i1 %tobool179, label %if.end189, label %if.then180

if.then180:                                       ; preds = %if.end175
  %tobool181 = icmp ne i32 %backwards.0, 0
  br i1 %tobool181, label %if.then182, label %if.end184

if.then182:                                       ; preds = %if.then180
  %i60 = load i32, i32* %score, align 4
  %sub183 = sub nsw i32 %i60, 3
  store i32 %sub183, i32* %score, align 4
  br label %if.end184

if.end184:                                        ; preds = %if.then182, %if.then180
  %tobool185 = icmp ne i32 %isolated.1, 0
  br i1 %tobool185, label %if.then186, label %if.end188

if.then186:                                       ; preds = %if.end184
  %i61 = load i32, i32* %score, align 4
  %sub187 = sub nsw i32 %i61, 5
  store i32 %sub187, i32* %score, align 4
  br label %if.end188

if.end188:                                        ; preds = %if.then186, %if.end184
  br label %if.end189

if.end189:                                        ; preds = %if.end188, %if.end175
  %arrayidx190 = getelementptr inbounds [2 x [11 x i32]], [2 x [11 x i32]]* %pawns, i64 0, i64 1
  %idxprom191 = sext i32 %add141 to i64
  %arrayidx192 = getelementptr inbounds [11 x i32], [11 x i32]* %arrayidx190, i64 0, i64 %idxprom191
  %i62 = load i32, i32* %arrayidx192, align 4
  %cmp193 = icmp sgt i32 %i62, 1
  br i1 %cmp193, label %if.then194, label %if.end200

if.then194:                                       ; preds = %if.end189
  %arrayidx195 = getelementptr inbounds [2 x [11 x i32]], [2 x [11 x i32]]* %pawns, i64 0, i64 1
  %idxprom196 = sext i32 %add141 to i64
  %arrayidx197 = getelementptr inbounds [11 x i32], [11 x i32]* %arrayidx195, i64 0, i64 %idxprom196
  %i63 = load i32, i32* %arrayidx197, align 4
  %sub198 = sub nsw i32 %i63, 1
  %mul = mul nsw i32 3, %sub198
  %i64 = load i32, i32* %score, align 4
  %sub199 = sub nsw i32 %i64, %mul
  store i32 %sub199, i32* %score, align 4
  br label %if.end200

if.end200:                                        ; preds = %if.then194, %if.end189
  %arrayidx201 = getelementptr inbounds [2 x [11 x i32]], [2 x [11 x i32]]* %pawns, i64 0, i64 0
  %idxprom202 = sext i32 %add141 to i64
  %arrayidx203 = getelementptr inbounds [11 x i32], [11 x i32]* %arrayidx201, i64 0, i64 %idxprom202
  %i65 = load i32, i32* %arrayidx203, align 4
  %tobool204 = icmp ne i32 %i65, 0
  br i1 %tobool204, label %if.end403, label %land.lhs.true205

land.lhs.true205:                                 ; preds = %if.end200
  %sub206 = sub nsw i32 %add141, 1
  %idxprom207 = sext i32 %sub206 to i64
  %arrayidx208 = getelementptr inbounds [11 x i32], [11 x i32]* %black_back_pawn, i64 0, i64 %idxprom207
  %i66 = load i32, i32* %arrayidx208, align 4
  %cmp209 = icmp sge i32 %i49, %i66
  br i1 %cmp209, label %land.lhs.true210, label %if.end403

land.lhs.true210:                                 ; preds = %land.lhs.true205
  %add211 = add nsw i32 %add141, 1
  %idxprom212 = sext i32 %add211 to i64
  %arrayidx213 = getelementptr inbounds [11 x i32], [11 x i32]* %black_back_pawn, i64 0, i64 %idxprom212
  %i67 = load i32, i32* %arrayidx213, align 4
  %cmp214 = icmp sge i32 %i49, %i67
  br i1 %cmp214, label %if.then215, label %if.end403

if.then215:                                       ; preds = %land.lhs.true210
  %idxprom216 = sext i32 %i43 to i64
  %arrayidx217 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [106 x i32], [38 x i32] }>* @swhite_pawn to [144 x i32]*), i64 0, i64 %idxprom216
  %i68 = load i32, i32* %arrayidx217, align 4
  %mul218 = mul nsw i32 3, %i68
  %add219 = add nsw i32 30, %mul218
  %i69 = load i32, i32* %score, align 4
  %add220 = add nsw i32 %i69, %add219
  store i32 %add220, i32* %score, align 4
  %i70 = load i32, i32* @white_to_move, align 4
  %tobool221 = icmp ne i32 %i70, 0
  br i1 %tobool221, label %if.then222, label %if.else266

if.then222:                                       ; preds = %if.then215
  %idxprom223 = sext i32 %i43 to i64
  %arrayidx224 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xfile to [144 x i32]*), i64 0, i64 %idxprom223
  %i71 = load i32, i32* %arrayidx224, align 4
  %add225 = add nsw i32 110, %i71
  %sub226 = sub nsw i32 %add225, 1
  %i72 = load i32, i32* @bking_loc, align 4
  %idxprom227 = sext i32 %i72 to i64
  %arrayidx228 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xfile to [144 x i32]*), i64 0, i64 %idxprom227
  %i73 = load i32, i32* %arrayidx228, align 4
  %idxprom229 = sext i32 %sub226 to i64
  %arrayidx230 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xfile to [144 x i32]*), i64 0, i64 %idxprom229
  %i74 = load i32, i32* %arrayidx230, align 4
  %sub231 = sub nsw i32 %i73, %i74
  %call232 = call i32 @abs(i32 %sub231) #10
  %i75 = load i32, i32* @bking_loc, align 4
  %idxprom233 = sext i32 %i75 to i64
  %arrayidx234 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xrank to [144 x i32]*), i64 0, i64 %idxprom233
  %i76 = load i32, i32* %arrayidx234, align 4
  %idxprom235 = sext i32 %sub226 to i64
  %arrayidx236 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xrank to [144 x i32]*), i64 0, i64 %idxprom235
  %i77 = load i32, i32* %arrayidx236, align 4
  %sub237 = sub nsw i32 %i76, %i77
  %call238 = call i32 @abs(i32 %sub237) #10
  %cmp239 = icmp sgt i32 %call232, %call238
  br i1 %cmp239, label %cond.true240, label %cond.false247

cond.true240:                                     ; preds = %if.then222
  %i78 = load i32, i32* @bking_loc, align 4
  %idxprom241 = sext i32 %i78 to i64
  %arrayidx242 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xfile to [144 x i32]*), i64 0, i64 %idxprom241
  %i79 = load i32, i32* %arrayidx242, align 4
  %idxprom243 = sext i32 %sub226 to i64
  %arrayidx244 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xfile to [144 x i32]*), i64 0, i64 %idxprom243
  %i80 = load i32, i32* %arrayidx244, align 4
  %sub245 = sub nsw i32 %i79, %i80
  %call246 = call i32 @abs(i32 %sub245) #10
  br label %cond.end254

cond.false247:                                    ; preds = %if.then222
  %i81 = load i32, i32* @bking_loc, align 4
  %idxprom248 = sext i32 %i81 to i64
  %arrayidx249 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xrank to [144 x i32]*), i64 0, i64 %idxprom248
  %i82 = load i32, i32* %arrayidx249, align 4
  %idxprom250 = sext i32 %sub226 to i64
  %arrayidx251 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xrank to [144 x i32]*), i64 0, i64 %idxprom250
  %i83 = load i32, i32* %arrayidx251, align 4
  %sub252 = sub nsw i32 %i82, %i83
  %call253 = call i32 @abs(i32 %sub252) #10
  br label %cond.end254

cond.end254:                                      ; preds = %cond.false247, %cond.true240
  %cond255 = phi i32 [ %call246, %cond.true240 ], [ %call253, %cond.false247 ]
  %idxprom256 = sext i32 %sub226 to i64
  %arrayidx257 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xrank to [144 x i32]*), i64 0, i64 %idxprom256
  %i84 = load i32, i32* %arrayidx257, align 4
  %idxprom258 = sext i32 %i43 to i64
  %arrayidx259 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xrank to [144 x i32]*), i64 0, i64 %idxprom258
  %i85 = load i32, i32* %arrayidx259, align 4
  %sub260 = sub nsw i32 %i84, %i85
  %call261 = call i32 @abs(i32 %sub260) #10
  %cmp262 = icmp sgt i32 %cond255, %call261
  br i1 %cmp262, label %if.then263, label %if.end265

if.then263:                                       ; preds = %cond.end254
  %add264 = add nsw i32 %wpotential.0, 800
  br label %if.end265

if.end265:                                        ; preds = %if.then263, %cond.end254
  %wpotential.1 = phi i32 [ %add264, %if.then263 ], [ %wpotential.0, %cond.end254 ]
  br label %if.end311

if.else266:                                       ; preds = %if.then215
  %idxprom267 = sext i32 %i43 to i64
  %arrayidx268 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xfile to [144 x i32]*), i64 0, i64 %idxprom267
  %i86 = load i32, i32* %arrayidx268, align 4
  %add269 = add nsw i32 110, %i86
  %sub270 = sub nsw i32 %add269, 1
  %i87 = load i32, i32* @bking_loc, align 4
  %idxprom271 = sext i32 %i87 to i64
  %arrayidx272 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xfile to [144 x i32]*), i64 0, i64 %idxprom271
  %i88 = load i32, i32* %arrayidx272, align 4
  %idxprom273 = sext i32 %sub270 to i64
  %arrayidx274 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xfile to [144 x i32]*), i64 0, i64 %idxprom273
  %i89 = load i32, i32* %arrayidx274, align 4
  %sub275 = sub nsw i32 %i88, %i89
  %call276 = call i32 @abs(i32 %sub275) #10
  %i90 = load i32, i32* @bking_loc, align 4
  %idxprom277 = sext i32 %i90 to i64
  %arrayidx278 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xrank to [144 x i32]*), i64 0, i64 %idxprom277
  %i91 = load i32, i32* %arrayidx278, align 4
  %idxprom279 = sext i32 %sub270 to i64
  %arrayidx280 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xrank to [144 x i32]*), i64 0, i64 %idxprom279
  %i92 = load i32, i32* %arrayidx280, align 4
  %sub281 = sub nsw i32 %i91, %i92
  %call282 = call i32 @abs(i32 %sub281) #10
  %cmp283 = icmp sgt i32 %call276, %call282
  br i1 %cmp283, label %cond.true284, label %cond.false291

cond.true284:                                     ; preds = %if.else266
  %i93 = load i32, i32* @bking_loc, align 4
  %idxprom285 = sext i32 %i93 to i64
  %arrayidx286 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xfile to [144 x i32]*), i64 0, i64 %idxprom285
  %i94 = load i32, i32* %arrayidx286, align 4
  %idxprom287 = sext i32 %sub270 to i64
  %arrayidx288 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xfile to [144 x i32]*), i64 0, i64 %idxprom287
  %i95 = load i32, i32* %arrayidx288, align 4
  %sub289 = sub nsw i32 %i94, %i95
  %call290 = call i32 @abs(i32 %sub289) #10
  br label %cond.end298

cond.false291:                                    ; preds = %if.else266
  %i96 = load i32, i32* @bking_loc, align 4
  %idxprom292 = sext i32 %i96 to i64
  %arrayidx293 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xrank to [144 x i32]*), i64 0, i64 %idxprom292
  %i97 = load i32, i32* %arrayidx293, align 4
  %idxprom294 = sext i32 %sub270 to i64
  %arrayidx295 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xrank to [144 x i32]*), i64 0, i64 %idxprom294
  %i98 = load i32, i32* %arrayidx295, align 4
  %sub296 = sub nsw i32 %i97, %i98
  %call297 = call i32 @abs(i32 %sub296) #10
  br label %cond.end298

cond.end298:                                      ; preds = %cond.false291, %cond.true284
  %cond299 = phi i32 [ %call290, %cond.true284 ], [ %call297, %cond.false291 ]
  %sub300 = sub nsw i32 %cond299, 1
  %idxprom301 = sext i32 %sub270 to i64
  %arrayidx302 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xrank to [144 x i32]*), i64 0, i64 %idxprom301
  %i99 = load i32, i32* %arrayidx302, align 4
  %idxprom303 = sext i32 %i43 to i64
  %arrayidx304 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xrank to [144 x i32]*), i64 0, i64 %idxprom303
  %i100 = load i32, i32* %arrayidx304, align 4
  %sub305 = sub nsw i32 %i99, %i100
  %call306 = call i32 @abs(i32 %sub305) #10
  %cmp307 = icmp sgt i32 %sub300, %call306
  br i1 %cmp307, label %if.then308, label %if.end310

if.then308:                                       ; preds = %cond.end298
  %add309 = add nsw i32 %wpotential.0, 800
  br label %if.end310

if.end310:                                        ; preds = %if.then308, %cond.end298
  %wpotential.2 = phi i32 [ %add309, %if.then308 ], [ %wpotential.0, %cond.end298 ]
  br label %if.end311

if.end311:                                        ; preds = %if.end310, %if.end265
  %wpotential.3 = phi i32 [ %wpotential.1, %if.end265 ], [ %wpotential.2, %if.end310 ]
  %idxprom312 = sext i32 %i43 to i64
  %arrayidx313 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xfile to [144 x i32]*), i64 0, i64 %idxprom312
  %i101 = load i32, i32* %arrayidx313, align 4
  %cmp314 = icmp eq i32 %i101, 1
  br i1 %cmp314, label %if.then318, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end311
  %idxprom315 = sext i32 %i43 to i64
  %arrayidx316 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xfile to [144 x i32]*), i64 0, i64 %idxprom315
  %i102 = load i32, i32* %arrayidx316, align 4
  %cmp317 = icmp eq i32 %i102, 8
  br i1 %cmp317, label %if.then318, label %if.end324

if.then318:                                       ; preds = %lor.lhs.false, %if.end311
  %idxprom319 = sext i32 %i43 to i64
  %arrayidx320 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [106 x i32], [38 x i32] }>* @swhite_pawn to [144 x i32]*), i64 0, i64 %idxprom319
  %i103 = load i32, i32* %arrayidx320, align 4
  %mul321 = mul nsw i32 2, %i103
  %add322 = add nsw i32 12, %mul321
  %i104 = load i32, i32* %score, align 4
  %add323 = add nsw i32 %i104, %add322
  store i32 %add323, i32* %score, align 4
  br label %if.end324

if.end324:                                        ; preds = %if.then318, %lor.lhs.false
  %tobool325 = icmp ne i32 %isolated.1, 0
  br i1 %tobool325, label %if.end402, label %if.then326

if.then326:                                       ; preds = %if.end324
  %i105 = load i32, i32* %score, align 4
  %add327 = add nsw i32 %i105, 12
  store i32 %add327, i32* %score, align 4
  %arrayidx328 = getelementptr inbounds [2 x [11 x i32]], [2 x [11 x i32]]* %pawns, i64 0, i64 1
  %add329 = add nsw i32 %add141, 1
  %idxprom330 = sext i32 %add329 to i64
  %arrayidx331 = getelementptr inbounds [11 x i32], [11 x i32]* %arrayidx328, i64 0, i64 %idxprom330
  %i106 = load i32, i32* %arrayidx331, align 4
  %tobool332 = icmp ne i32 %i106, 0
  br i1 %tobool332, label %if.then333, label %if.end364

if.then333:                                       ; preds = %if.then326
  %arrayidx334 = getelementptr inbounds [2 x [11 x i32]], [2 x [11 x i32]]* %pawns, i64 0, i64 0
  %add335 = add nsw i32 %add141, 1
  %idxprom336 = sext i32 %add335 to i64
  %arrayidx337 = getelementptr inbounds [11 x i32], [11 x i32]* %arrayidx334, i64 0, i64 %idxprom336
  %i107 = load i32, i32* %arrayidx337, align 4
  %tobool338 = icmp ne i32 %i107, 0
  br i1 %tobool338, label %if.end363, label %land.lhs.true339

land.lhs.true339:                                 ; preds = %if.then333
  %add340 = add nsw i32 %add141, 1
  %idxprom341 = sext i32 %add340 to i64
  %arrayidx342 = getelementptr inbounds [11 x i32], [11 x i32]* %white_back_pawn, i64 0, i64 %idxprom341
  %i108 = load i32, i32* %arrayidx342, align 4
  %add343 = add nsw i32 %add141, 2
  %idxprom344 = sext i32 %add343 to i64
  %arrayidx345 = getelementptr inbounds [11 x i32], [11 x i32]* %black_back_pawn, i64 0, i64 %idxprom344
  %i109 = load i32, i32* %arrayidx345, align 4
  %cmp346 = icmp sge i32 %i108, %i109
  br i1 %cmp346, label %if.then347, label %if.end363

if.then347:                                       ; preds = %land.lhs.true339
  %idxprom348 = sext i32 %i43 to i64
  %arrayidx349 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xrank to [144 x i32]*), i64 0, i64 %idxprom348
  %i110 = load i32, i32* %arrayidx349, align 4
  %mul350 = mul nsw i32 7, %i110
  %i111 = load i32, i32* %score, align 4
  %add351 = add nsw i32 %i111, %mul350
  store i32 %add351, i32* %score, align 4
  %idxprom352 = sext i32 %i43 to i64
  %arrayidx353 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xrank to [144 x i32]*), i64 0, i64 %idxprom352
  %i112 = load i32, i32* %arrayidx353, align 4
  %cmp354 = icmp eq i32 %i112, 7
  br i1 %cmp354, label %land.lhs.true355, label %if.end362

land.lhs.true355:                                 ; preds = %if.then347
  %add356 = add nsw i32 %add141, 1
  %idxprom357 = sext i32 %add356 to i64
  %arrayidx358 = getelementptr inbounds [11 x i32], [11 x i32]* %white_back_pawn, i64 0, i64 %idxprom357
  %i113 = load i32, i32* %arrayidx358, align 4
  %cmp359 = icmp sge i32 %i113, 6
  br i1 %cmp359, label %if.then360, label %if.end362

if.then360:                                       ; preds = %land.lhs.true355
  %i114 = load i32, i32* %score, align 4
  %add361 = add nsw i32 %i114, 50
  store i32 %add361, i32* %score, align 4
  br label %if.end362

if.end362:                                        ; preds = %if.then360, %land.lhs.true355, %if.then347
  br label %if.end363

if.end363:                                        ; preds = %if.end362, %land.lhs.true339, %if.then333
  br label %if.end364

if.end364:                                        ; preds = %if.end363, %if.then326
  %arrayidx365 = getelementptr inbounds [2 x [11 x i32]], [2 x [11 x i32]]* %pawns, i64 0, i64 1
  %sub366 = sub nsw i32 %add141, 1
  %idxprom367 = sext i32 %sub366 to i64
  %arrayidx368 = getelementptr inbounds [11 x i32], [11 x i32]* %arrayidx365, i64 0, i64 %idxprom367
  %i115 = load i32, i32* %arrayidx368, align 4
  %tobool369 = icmp ne i32 %i115, 0
  br i1 %tobool369, label %if.then370, label %if.end401

if.then370:                                       ; preds = %if.end364
  %arrayidx371 = getelementptr inbounds [2 x [11 x i32]], [2 x [11 x i32]]* %pawns, i64 0, i64 0
  %sub372 = sub nsw i32 %add141, 1
  %idxprom373 = sext i32 %sub372 to i64
  %arrayidx374 = getelementptr inbounds [11 x i32], [11 x i32]* %arrayidx371, i64 0, i64 %idxprom373
  %i116 = load i32, i32* %arrayidx374, align 4
  %tobool375 = icmp ne i32 %i116, 0
  br i1 %tobool375, label %if.end400, label %land.lhs.true376

land.lhs.true376:                                 ; preds = %if.then370
  %add377 = add nsw i32 %add141, 1
  %idxprom378 = sext i32 %add377 to i64
  %arrayidx379 = getelementptr inbounds [11 x i32], [11 x i32]* %white_back_pawn, i64 0, i64 %idxprom378
  %i117 = load i32, i32* %arrayidx379, align 4
  %sub380 = sub nsw i32 %add141, 2
  %idxprom381 = sext i32 %sub380 to i64
  %arrayidx382 = getelementptr inbounds [11 x i32], [11 x i32]* %black_back_pawn, i64 0, i64 %idxprom381
  %i118 = load i32, i32* %arrayidx382, align 4
  %cmp383 = icmp sge i32 %i117, %i118
  br i1 %cmp383, label %if.then384, label %if.end400

if.then384:                                       ; preds = %land.lhs.true376
  %idxprom385 = sext i32 %i43 to i64
  %arrayidx386 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xrank to [144 x i32]*), i64 0, i64 %idxprom385
  %i119 = load i32, i32* %arrayidx386, align 4
  %mul387 = mul nsw i32 7, %i119
  %i120 = load i32, i32* %score, align 4
  %add388 = add nsw i32 %i120, %mul387
  store i32 %add388, i32* %score, align 4
  %idxprom389 = sext i32 %i43 to i64
  %arrayidx390 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xrank to [144 x i32]*), i64 0, i64 %idxprom389
  %i121 = load i32, i32* %arrayidx390, align 4
  %cmp391 = icmp eq i32 %i121, 7
  br i1 %cmp391, label %land.lhs.true392, label %if.end399

land.lhs.true392:                                 ; preds = %if.then384
  %sub393 = sub nsw i32 %add141, 1
  %idxprom394 = sext i32 %sub393 to i64
  %arrayidx395 = getelementptr inbounds [11 x i32], [11 x i32]* %white_back_pawn, i64 0, i64 %idxprom394
  %i122 = load i32, i32* %arrayidx395, align 4
  %cmp396 = icmp sge i32 %i122, 6
  br i1 %cmp396, label %if.then397, label %if.end399

if.then397:                                       ; preds = %land.lhs.true392
  %i123 = load i32, i32* %score, align 4
  %add398 = add nsw i32 %i123, 50
  store i32 %add398, i32* %score, align 4
  br label %if.end399

if.end399:                                        ; preds = %if.then397, %land.lhs.true392, %if.then384
  br label %if.end400

if.end400:                                        ; preds = %if.end399, %land.lhs.true376, %if.then370
  br label %if.end401

if.end401:                                        ; preds = %if.end400, %if.end364
  br label %if.end402

if.end402:                                        ; preds = %if.end401, %if.end324
  br label %if.end403

if.end403:                                        ; preds = %if.end402, %land.lhs.true210, %land.lhs.true205, %if.end200
  %wpotential.4 = phi i32 [ %wpotential.0, %if.end200 ], [ %wpotential.3, %if.end402 ], [ %wpotential.0, %land.lhs.true210 ], [ %wpotential.0, %land.lhs.true205 ]
  %arrayidx404 = getelementptr inbounds [2 x [11 x i32]], [2 x [11 x i32]]* %pawns, i64 0, i64 1
  %sub405 = sub nsw i32 %add141, 1
  %idxprom406 = sext i32 %sub405 to i64
  %arrayidx407 = getelementptr inbounds [11 x i32], [11 x i32]* %arrayidx404, i64 0, i64 %idxprom406
  %i124 = load i32, i32* %arrayidx407, align 4
  %tobool408 = icmp ne i32 %i124, 0
  br i1 %tobool408, label %if.end411, label %if.then409

if.then409:                                       ; preds = %if.end403
  %i125 = load i32, i32* %score, align 4
  %sub410 = sub nsw i32 %i125, 7
  store i32 %sub410, i32* %score, align 4
  br label %if.end411

if.end411:                                        ; preds = %if.then409, %if.end403
  br label %sw.epilog

sw.bb412:                                         ; preds = %if.end126
  %idxprom413 = sext i32 %i43 to i64
  %arrayidx414 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [94 x i32], [50 x i32] }>* @sblack_pawn to [144 x i32]*), i64 0, i64 %idxprom413
  %i126 = load i32, i32* %arrayidx414, align 4
  %i127 = load i32, i32* %score, align 4
  %sub415 = sub nsw i32 %i127, %i126
  store i32 %sub415, i32* %score, align 4
  %inc416 = add nsw i32 %bp.0, 1
  %add417 = add nsw i32 %add141, 1
  %idxprom418 = sext i32 %add417 to i64
  %arrayidx419 = getelementptr inbounds [11 x i32], [11 x i32]* %black_back_pawn, i64 0, i64 %idxprom418
  %i128 = load i32, i32* %arrayidx419, align 4
  %cmp420 = icmp slt i32 %i128, %i49
  br i1 %cmp420, label %land.lhs.true421, label %if.end442

land.lhs.true421:                                 ; preds = %sw.bb412
  %sub422 = sub nsw i32 %add141, 1
  %idxprom423 = sext i32 %sub422 to i64
  %arrayidx424 = getelementptr inbounds [11 x i32], [11 x i32]* %black_back_pawn, i64 0, i64 %idxprom423
  %i129 = load i32, i32* %arrayidx424, align 4
  %cmp425 = icmp slt i32 %i129, %i49
  br i1 %cmp425, label %if.then426, label %if.end442

if.then426:                                       ; preds = %land.lhs.true421
  %i130 = load i32, i32* %score, align 4
  %add427 = add nsw i32 %i130, 8
  store i32 %add427, i32* %score, align 4
  %arrayidx428 = getelementptr inbounds [2 x [11 x i32]], [2 x [11 x i32]]* %pawns, i64 0, i64 0
  %add429 = add nsw i32 %add141, 1
  %idxprom430 = sext i32 %add429 to i64
  %arrayidx431 = getelementptr inbounds [11 x i32], [11 x i32]* %arrayidx428, i64 0, i64 %idxprom430
  %i131 = load i32, i32* %arrayidx431, align 4
  %tobool432 = icmp ne i32 %i131, 0
  br i1 %tobool432, label %if.end441, label %land.lhs.true433

land.lhs.true433:                                 ; preds = %if.then426
  %arrayidx434 = getelementptr inbounds [2 x [11 x i32]], [2 x [11 x i32]]* %pawns, i64 0, i64 0
  %sub435 = sub nsw i32 %add141, 1
  %idxprom436 = sext i32 %sub435 to i64
  %arrayidx437 = getelementptr inbounds [11 x i32], [11 x i32]* %arrayidx434, i64 0, i64 %idxprom436
  %i132 = load i32, i32* %arrayidx437, align 4
  %tobool438 = icmp ne i32 %i132, 0
  br i1 %tobool438, label %if.end441, label %if.then439

if.then439:                                       ; preds = %land.lhs.true433
  %i133 = load i32, i32* %score, align 4
  %add440 = add nsw i32 %i133, 5
  store i32 %add440, i32* %score, align 4
  br label %if.end441

if.end441:                                        ; preds = %if.then439, %land.lhs.true433, %if.then426
  %isolated.2 = phi i32 [ 0, %if.then426 ], [ 0, %land.lhs.true433 ], [ 1, %if.then439 ]
  br label %if.end442

if.end442:                                        ; preds = %if.end441, %land.lhs.true421, %sw.bb412
  %backwards.1 = phi i32 [ 1, %if.end441 ], [ 0, %land.lhs.true421 ], [ 0, %sw.bb412 ]
  %isolated.3 = phi i32 [ %isolated.2, %if.end441 ], [ 0, %land.lhs.true421 ], [ 0, %sw.bb412 ]
  %arrayidx443 = getelementptr inbounds [2 x [11 x i32]], [2 x [11 x i32]]* %pawns, i64 0, i64 1
  %idxprom444 = sext i32 %add141 to i64
  %arrayidx445 = getelementptr inbounds [11 x i32], [11 x i32]* %arrayidx443, i64 0, i64 %idxprom444
  %i134 = load i32, i32* %arrayidx445, align 4
  %tobool446 = icmp ne i32 %i134, 0
  br i1 %tobool446, label %if.end456, label %if.then447

if.then447:                                       ; preds = %if.end442
  %tobool448 = icmp ne i32 %backwards.1, 0
  br i1 %tobool448, label %if.then449, label %if.end451

if.then449:                                       ; preds = %if.then447
  %i135 = load i32, i32* %score, align 4
  %add450 = add nsw i32 %i135, 3
  store i32 %add450, i32* %score, align 4
  br label %if.end451

if.end451:                                        ; preds = %if.then449, %if.then447
  %tobool452 = icmp ne i32 %isolated.3, 0
  br i1 %tobool452, label %if.then453, label %if.end455

if.then453:                                       ; preds = %if.end451
  %i136 = load i32, i32* %score, align 4
  %add454 = add nsw i32 %i136, 5
  store i32 %add454, i32* %score, align 4
  br label %if.end455

if.end455:                                        ; preds = %if.then453, %if.end451
  br label %if.end456

if.end456:                                        ; preds = %if.end455, %if.end442
  %arrayidx457 = getelementptr inbounds [2 x [11 x i32]], [2 x [11 x i32]]* %pawns, i64 0, i64 0
  %idxprom458 = sext i32 %add141 to i64
  %arrayidx459 = getelementptr inbounds [11 x i32], [11 x i32]* %arrayidx457, i64 0, i64 %idxprom458
  %i137 = load i32, i32* %arrayidx459, align 4
  %cmp460 = icmp sgt i32 %i137, 1
  br i1 %cmp460, label %if.then461, label %if.end468

if.then461:                                       ; preds = %if.end456
  %arrayidx462 = getelementptr inbounds [2 x [11 x i32]], [2 x [11 x i32]]* %pawns, i64 0, i64 0
  %idxprom463 = sext i32 %add141 to i64
  %arrayidx464 = getelementptr inbounds [11 x i32], [11 x i32]* %arrayidx462, i64 0, i64 %idxprom463
  %i138 = load i32, i32* %arrayidx464, align 4
  %sub465 = sub nsw i32 %i138, 1
  %mul466 = mul nsw i32 3, %sub465
  %i139 = load i32, i32* %score, align 4
  %add467 = add nsw i32 %i139, %mul466
  store i32 %add467, i32* %score, align 4
  br label %if.end468

if.end468:                                        ; preds = %if.then461, %if.end456
  %arrayidx469 = getelementptr inbounds [2 x [11 x i32]], [2 x [11 x i32]]* %pawns, i64 0, i64 1
  %idxprom470 = sext i32 %add141 to i64
  %arrayidx471 = getelementptr inbounds [11 x i32], [11 x i32]* %arrayidx469, i64 0, i64 %idxprom470
  %i140 = load i32, i32* %arrayidx471, align 4
  %tobool472 = icmp ne i32 %i140, 0
  br i1 %tobool472, label %if.end674, label %land.lhs.true473

land.lhs.true473:                                 ; preds = %if.end468
  %sub474 = sub nsw i32 %add141, 1
  %idxprom475 = sext i32 %sub474 to i64
  %arrayidx476 = getelementptr inbounds [11 x i32], [11 x i32]* %white_back_pawn, i64 0, i64 %idxprom475
  %i141 = load i32, i32* %arrayidx476, align 4
  %cmp477 = icmp sle i32 %i49, %i141
  br i1 %cmp477, label %land.lhs.true478, label %if.end674

land.lhs.true478:                                 ; preds = %land.lhs.true473
  %add479 = add nsw i32 %add141, 1
  %idxprom480 = sext i32 %add479 to i64
  %arrayidx481 = getelementptr inbounds [11 x i32], [11 x i32]* %white_back_pawn, i64 0, i64 %idxprom480
  %i142 = load i32, i32* %arrayidx481, align 4
  %cmp482 = icmp sle i32 %i49, %i142
  br i1 %cmp482, label %if.then483, label %if.end674

if.then483:                                       ; preds = %land.lhs.true478
  %idxprom484 = sext i32 %i43 to i64
  %arrayidx485 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [94 x i32], [50 x i32] }>* @sblack_pawn to [144 x i32]*), i64 0, i64 %idxprom484
  %i143 = load i32, i32* %arrayidx485, align 4
  %mul486 = mul nsw i32 3, %i143
  %add487 = add nsw i32 30, %mul486
  %i144 = load i32, i32* %score, align 4
  %sub488 = sub nsw i32 %i144, %add487
  store i32 %sub488, i32* %score, align 4
  %i145 = load i32, i32* @white_to_move, align 4
  %tobool489 = icmp ne i32 %i145, 0
  br i1 %tobool489, label %if.else534, label %if.then490

if.then490:                                       ; preds = %if.then483
  %idxprom491 = sext i32 %i43 to i64
  %arrayidx492 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xfile to [144 x i32]*), i64 0, i64 %idxprom491
  %i146 = load i32, i32* %arrayidx492, align 4
  %add493 = add nsw i32 26, %i146
  %sub494 = sub nsw i32 %add493, 1
  %i147 = load i32, i32* @wking_loc, align 4
  %idxprom495 = sext i32 %i147 to i64
  %arrayidx496 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xfile to [144 x i32]*), i64 0, i64 %idxprom495
  %i148 = load i32, i32* %arrayidx496, align 4
  %idxprom497 = sext i32 %sub494 to i64
  %arrayidx498 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xfile to [144 x i32]*), i64 0, i64 %idxprom497
  %i149 = load i32, i32* %arrayidx498, align 4
  %sub499 = sub nsw i32 %i148, %i149
  %call500 = call i32 @abs(i32 %sub499) #10
  %i150 = load i32, i32* @wking_loc, align 4
  %idxprom501 = sext i32 %i150 to i64
  %arrayidx502 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xrank to [144 x i32]*), i64 0, i64 %idxprom501
  %i151 = load i32, i32* %arrayidx502, align 4
  %idxprom503 = sext i32 %sub494 to i64
  %arrayidx504 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xrank to [144 x i32]*), i64 0, i64 %idxprom503
  %i152 = load i32, i32* %arrayidx504, align 4
  %sub505 = sub nsw i32 %i151, %i152
  %call506 = call i32 @abs(i32 %sub505) #10
  %cmp507 = icmp sgt i32 %call500, %call506
  br i1 %cmp507, label %cond.true508, label %cond.false515

cond.true508:                                     ; preds = %if.then490
  %i153 = load i32, i32* @wking_loc, align 4
  %idxprom509 = sext i32 %i153 to i64
  %arrayidx510 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xfile to [144 x i32]*), i64 0, i64 %idxprom509
  %i154 = load i32, i32* %arrayidx510, align 4
  %idxprom511 = sext i32 %sub494 to i64
  %arrayidx512 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xfile to [144 x i32]*), i64 0, i64 %idxprom511
  %i155 = load i32, i32* %arrayidx512, align 4
  %sub513 = sub nsw i32 %i154, %i155
  %call514 = call i32 @abs(i32 %sub513) #10
  br label %cond.end522

cond.false515:                                    ; preds = %if.then490
  %i156 = load i32, i32* @wking_loc, align 4
  %idxprom516 = sext i32 %i156 to i64
  %arrayidx517 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xrank to [144 x i32]*), i64 0, i64 %idxprom516
  %i157 = load i32, i32* %arrayidx517, align 4
  %idxprom518 = sext i32 %sub494 to i64
  %arrayidx519 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xrank to [144 x i32]*), i64 0, i64 %idxprom518
  %i158 = load i32, i32* %arrayidx519, align 4
  %sub520 = sub nsw i32 %i157, %i158
  %call521 = call i32 @abs(i32 %sub520) #10
  br label %cond.end522

cond.end522:                                      ; preds = %cond.false515, %cond.true508
  %cond523 = phi i32 [ %call514, %cond.true508 ], [ %call521, %cond.false515 ]
  %idxprom524 = sext i32 %sub494 to i64
  %arrayidx525 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xrank to [144 x i32]*), i64 0, i64 %idxprom524
  %i159 = load i32, i32* %arrayidx525, align 4
  %idxprom526 = sext i32 %i43 to i64
  %arrayidx527 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xrank to [144 x i32]*), i64 0, i64 %idxprom526
  %i160 = load i32, i32* %arrayidx527, align 4
  %sub528 = sub nsw i32 %i159, %i160
  %call529 = call i32 @abs(i32 %sub528) #10
  %cmp530 = icmp sgt i32 %cond523, %call529
  br i1 %cmp530, label %if.then531, label %if.end533

if.then531:                                       ; preds = %cond.end522
  %sub532 = sub nsw i32 %bpotential.0, 800
  br label %if.end533

if.end533:                                        ; preds = %if.then531, %cond.end522
  %bpotential.1 = phi i32 [ %sub532, %if.then531 ], [ %bpotential.0, %cond.end522 ]
  br label %if.end579

if.else534:                                       ; preds = %if.then483
  %idxprom535 = sext i32 %i43 to i64
  %arrayidx536 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xfile to [144 x i32]*), i64 0, i64 %idxprom535
  %i161 = load i32, i32* %arrayidx536, align 4
  %add537 = add nsw i32 26, %i161
  %sub538 = sub nsw i32 %add537, 1
  %i162 = load i32, i32* @wking_loc, align 4
  %idxprom539 = sext i32 %i162 to i64
  %arrayidx540 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xfile to [144 x i32]*), i64 0, i64 %idxprom539
  %i163 = load i32, i32* %arrayidx540, align 4
  %idxprom541 = sext i32 %sub538 to i64
  %arrayidx542 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xfile to [144 x i32]*), i64 0, i64 %idxprom541
  %i164 = load i32, i32* %arrayidx542, align 4
  %sub543 = sub nsw i32 %i163, %i164
  %call544 = call i32 @abs(i32 %sub543) #10
  %i165 = load i32, i32* @wking_loc, align 4
  %idxprom545 = sext i32 %i165 to i64
  %arrayidx546 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xrank to [144 x i32]*), i64 0, i64 %idxprom545
  %i166 = load i32, i32* %arrayidx546, align 4
  %idxprom547 = sext i32 %sub538 to i64
  %arrayidx548 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xrank to [144 x i32]*), i64 0, i64 %idxprom547
  %i167 = load i32, i32* %arrayidx548, align 4
  %sub549 = sub nsw i32 %i166, %i167
  %call550 = call i32 @abs(i32 %sub549) #10
  %cmp551 = icmp sgt i32 %call544, %call550
  br i1 %cmp551, label %cond.true552, label %cond.false559

cond.true552:                                     ; preds = %if.else534
  %i168 = load i32, i32* @wking_loc, align 4
  %idxprom553 = sext i32 %i168 to i64
  %arrayidx554 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xfile to [144 x i32]*), i64 0, i64 %idxprom553
  %i169 = load i32, i32* %arrayidx554, align 4
  %idxprom555 = sext i32 %sub538 to i64
  %arrayidx556 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xfile to [144 x i32]*), i64 0, i64 %idxprom555
  %i170 = load i32, i32* %arrayidx556, align 4
  %sub557 = sub nsw i32 %i169, %i170
  %call558 = call i32 @abs(i32 %sub557) #10
  br label %cond.end566

cond.false559:                                    ; preds = %if.else534
  %i171 = load i32, i32* @wking_loc, align 4
  %idxprom560 = sext i32 %i171 to i64
  %arrayidx561 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xrank to [144 x i32]*), i64 0, i64 %idxprom560
  %i172 = load i32, i32* %arrayidx561, align 4
  %idxprom562 = sext i32 %sub538 to i64
  %arrayidx563 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xrank to [144 x i32]*), i64 0, i64 %idxprom562
  %i173 = load i32, i32* %arrayidx563, align 4
  %sub564 = sub nsw i32 %i172, %i173
  %call565 = call i32 @abs(i32 %sub564) #10
  br label %cond.end566

cond.end566:                                      ; preds = %cond.false559, %cond.true552
  %cond567 = phi i32 [ %call558, %cond.true552 ], [ %call565, %cond.false559 ]
  %sub568 = sub nsw i32 %cond567, 1
  %idxprom569 = sext i32 %sub538 to i64
  %arrayidx570 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xrank to [144 x i32]*), i64 0, i64 %idxprom569
  %i174 = load i32, i32* %arrayidx570, align 4
  %idxprom571 = sext i32 %i43 to i64
  %arrayidx572 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xrank to [144 x i32]*), i64 0, i64 %idxprom571
  %i175 = load i32, i32* %arrayidx572, align 4
  %sub573 = sub nsw i32 %i174, %i175
  %call574 = call i32 @abs(i32 %sub573) #10
  %cmp575 = icmp sgt i32 %sub568, %call574
  br i1 %cmp575, label %if.then576, label %if.end578

if.then576:                                       ; preds = %cond.end566
  %sub577 = sub nsw i32 %bpotential.0, 800
  br label %if.end578

if.end578:                                        ; preds = %if.then576, %cond.end566
  %bpotential.2 = phi i32 [ %sub577, %if.then576 ], [ %bpotential.0, %cond.end566 ]
  br label %if.end579

if.end579:                                        ; preds = %if.end578, %if.end533
  %bpotential.3 = phi i32 [ %bpotential.2, %if.end578 ], [ %bpotential.1, %if.end533 ]
  %idxprom580 = sext i32 %i43 to i64
  %arrayidx581 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xfile to [144 x i32]*), i64 0, i64 %idxprom580
  %i176 = load i32, i32* %arrayidx581, align 4
  %cmp582 = icmp eq i32 %i176, 1
  br i1 %cmp582, label %if.then587, label %lor.lhs.false583

lor.lhs.false583:                                 ; preds = %if.end579
  %idxprom584 = sext i32 %i43 to i64
  %arrayidx585 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xfile to [144 x i32]*), i64 0, i64 %idxprom584
  %i177 = load i32, i32* %arrayidx585, align 4
  %cmp586 = icmp eq i32 %i177, 8
  br i1 %cmp586, label %if.then587, label %if.end593

if.then587:                                       ; preds = %lor.lhs.false583, %if.end579
  %idxprom588 = sext i32 %i43 to i64
  %arrayidx589 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [94 x i32], [50 x i32] }>* @sblack_pawn to [144 x i32]*), i64 0, i64 %idxprom588
  %i178 = load i32, i32* %arrayidx589, align 4
  %mul590 = mul nsw i32 2, %i178
  %add591 = add nsw i32 12, %mul590
  %i179 = load i32, i32* %score, align 4
  %sub592 = sub nsw i32 %i179, %add591
  store i32 %sub592, i32* %score, align 4
  br label %if.end593

if.end593:                                        ; preds = %if.then587, %lor.lhs.false583
  %tobool594 = icmp ne i32 %isolated.3, 0
  br i1 %tobool594, label %if.end673, label %if.then595

if.then595:                                       ; preds = %if.end593
  %i180 = load i32, i32* %score, align 4
  %sub596 = sub nsw i32 %i180, 12
  store i32 %sub596, i32* %score, align 4
  %arrayidx597 = getelementptr inbounds [2 x [11 x i32]], [2 x [11 x i32]]* %pawns, i64 0, i64 0
  %add598 = add nsw i32 %add141, 1
  %idxprom599 = sext i32 %add598 to i64
  %arrayidx600 = getelementptr inbounds [11 x i32], [11 x i32]* %arrayidx597, i64 0, i64 %idxprom599
  %i181 = load i32, i32* %arrayidx600, align 4
  %tobool601 = icmp ne i32 %i181, 0
  br i1 %tobool601, label %if.then602, label %if.end634

if.then602:                                       ; preds = %if.then595
  %arrayidx603 = getelementptr inbounds [2 x [11 x i32]], [2 x [11 x i32]]* %pawns, i64 0, i64 1
  %add604 = add nsw i32 %add141, 1
  %idxprom605 = sext i32 %add604 to i64
  %arrayidx606 = getelementptr inbounds [11 x i32], [11 x i32]* %arrayidx603, i64 0, i64 %idxprom605
  %i182 = load i32, i32* %arrayidx606, align 4
  %tobool607 = icmp ne i32 %i182, 0
  br i1 %tobool607, label %if.end633, label %land.lhs.true608

land.lhs.true608:                                 ; preds = %if.then602
  %add609 = add nsw i32 %add141, 1
  %idxprom610 = sext i32 %add609 to i64
  %arrayidx611 = getelementptr inbounds [11 x i32], [11 x i32]* %black_back_pawn, i64 0, i64 %idxprom610
  %i183 = load i32, i32* %arrayidx611, align 4
  %add612 = add nsw i32 %add141, 2
  %idxprom613 = sext i32 %add612 to i64
  %arrayidx614 = getelementptr inbounds [11 x i32], [11 x i32]* %white_back_pawn, i64 0, i64 %idxprom613
  %i184 = load i32, i32* %arrayidx614, align 4
  %cmp615 = icmp sle i32 %i183, %i184
  br i1 %cmp615, label %if.then616, label %if.end633

if.then616:                                       ; preds = %land.lhs.true608
  %idxprom617 = sext i32 %i43 to i64
  %arrayidx618 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xrank to [144 x i32]*), i64 0, i64 %idxprom617
  %i185 = load i32, i32* %arrayidx618, align 4
  %sub619 = sub nsw i32 9, %i185
  %mul620 = mul nsw i32 7, %sub619
  %i186 = load i32, i32* %score, align 4
  %sub621 = sub nsw i32 %i186, %mul620
  store i32 %sub621, i32* %score, align 4
  %idxprom622 = sext i32 %i43 to i64
  %arrayidx623 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xrank to [144 x i32]*), i64 0, i64 %idxprom622
  %i187 = load i32, i32* %arrayidx623, align 4
  %cmp624 = icmp eq i32 %i187, 2
  br i1 %cmp624, label %land.lhs.true625, label %if.end632

land.lhs.true625:                                 ; preds = %if.then616
  %add626 = add nsw i32 %add141, 1
  %idxprom627 = sext i32 %add626 to i64
  %arrayidx628 = getelementptr inbounds [11 x i32], [11 x i32]* %black_back_pawn, i64 0, i64 %idxprom627
  %i188 = load i32, i32* %arrayidx628, align 4
  %cmp629 = icmp sle i32 %i188, 3
  br i1 %cmp629, label %if.then630, label %if.end632

if.then630:                                       ; preds = %land.lhs.true625
  %i189 = load i32, i32* %score, align 4
  %sub631 = sub nsw i32 %i189, 50
  store i32 %sub631, i32* %score, align 4
  br label %if.end632

if.end632:                                        ; preds = %if.then630, %land.lhs.true625, %if.then616
  br label %if.end633

if.end633:                                        ; preds = %if.end632, %land.lhs.true608, %if.then602
  br label %if.end634

if.end634:                                        ; preds = %if.end633, %if.then595
  %arrayidx635 = getelementptr inbounds [2 x [11 x i32]], [2 x [11 x i32]]* %pawns, i64 0, i64 0
  %sub636 = sub nsw i32 %add141, 1
  %idxprom637 = sext i32 %sub636 to i64
  %arrayidx638 = getelementptr inbounds [11 x i32], [11 x i32]* %arrayidx635, i64 0, i64 %idxprom637
  %i190 = load i32, i32* %arrayidx638, align 4
  %tobool639 = icmp ne i32 %i190, 0
  br i1 %tobool639, label %if.then640, label %if.end672

if.then640:                                       ; preds = %if.end634
  %arrayidx641 = getelementptr inbounds [2 x [11 x i32]], [2 x [11 x i32]]* %pawns, i64 0, i64 1
  %sub642 = sub nsw i32 %add141, 1
  %idxprom643 = sext i32 %sub642 to i64
  %arrayidx644 = getelementptr inbounds [11 x i32], [11 x i32]* %arrayidx641, i64 0, i64 %idxprom643
  %i191 = load i32, i32* %arrayidx644, align 4
  %tobool645 = icmp ne i32 %i191, 0
  br i1 %tobool645, label %if.end671, label %land.lhs.true646

land.lhs.true646:                                 ; preds = %if.then640
  %sub647 = sub nsw i32 %add141, 1
  %idxprom648 = sext i32 %sub647 to i64
  %arrayidx649 = getelementptr inbounds [11 x i32], [11 x i32]* %black_back_pawn, i64 0, i64 %idxprom648
  %i192 = load i32, i32* %arrayidx649, align 4
  %sub650 = sub nsw i32 %add141, 2
  %idxprom651 = sext i32 %sub650 to i64
  %arrayidx652 = getelementptr inbounds [11 x i32], [11 x i32]* %white_back_pawn, i64 0, i64 %idxprom651
  %i193 = load i32, i32* %arrayidx652, align 4
  %cmp653 = icmp sle i32 %i192, %i193
  br i1 %cmp653, label %if.then654, label %if.end671

if.then654:                                       ; preds = %land.lhs.true646
  %idxprom655 = sext i32 %i43 to i64
  %arrayidx656 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xrank to [144 x i32]*), i64 0, i64 %idxprom655
  %i194 = load i32, i32* %arrayidx656, align 4
  %sub657 = sub nsw i32 9, %i194
  %mul658 = mul nsw i32 7, %sub657
  %i195 = load i32, i32* %score, align 4
  %sub659 = sub nsw i32 %i195, %mul658
  store i32 %sub659, i32* %score, align 4
  %idxprom660 = sext i32 %i43 to i64
  %arrayidx661 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xrank to [144 x i32]*), i64 0, i64 %idxprom660
  %i196 = load i32, i32* %arrayidx661, align 4
  %cmp662 = icmp eq i32 %i196, 2
  br i1 %cmp662, label %land.lhs.true663, label %if.end670

land.lhs.true663:                                 ; preds = %if.then654
  %sub664 = sub nsw i32 %add141, 1
  %idxprom665 = sext i32 %sub664 to i64
  %arrayidx666 = getelementptr inbounds [11 x i32], [11 x i32]* %black_back_pawn, i64 0, i64 %idxprom665
  %i197 = load i32, i32* %arrayidx666, align 4
  %cmp667 = icmp sle i32 %i197, 3
  br i1 %cmp667, label %if.then668, label %if.end670

if.then668:                                       ; preds = %land.lhs.true663
  %i198 = load i32, i32* %score, align 4
  %sub669 = sub nsw i32 %i198, 50
  store i32 %sub669, i32* %score, align 4
  br label %if.end670

if.end670:                                        ; preds = %if.then668, %land.lhs.true663, %if.then654
  br label %if.end671

if.end671:                                        ; preds = %if.end670, %land.lhs.true646, %if.then640
  br label %if.end672

if.end672:                                        ; preds = %if.end671, %if.end634
  br label %if.end673

if.end673:                                        ; preds = %if.end672, %if.end593
  br label %if.end674

if.end674:                                        ; preds = %if.end673, %land.lhs.true478, %land.lhs.true473, %if.end468
  %bpotential.4 = phi i32 [ %bpotential.0, %if.end468 ], [ %bpotential.3, %if.end673 ], [ %bpotential.0, %land.lhs.true478 ], [ %bpotential.0, %land.lhs.true473 ]
  %arrayidx675 = getelementptr inbounds [2 x [11 x i32]], [2 x [11 x i32]]* %pawns, i64 0, i64 0
  %sub676 = sub nsw i32 %add141, 1
  %idxprom677 = sext i32 %sub676 to i64
  %arrayidx678 = getelementptr inbounds [11 x i32], [11 x i32]* %arrayidx675, i64 0, i64 %idxprom677
  %i199 = load i32, i32* %arrayidx678, align 4
  %tobool679 = icmp ne i32 %i199, 0
  br i1 %tobool679, label %if.end682, label %if.then680

if.then680:                                       ; preds = %if.end674
  %i200 = load i32, i32* %score, align 4
  %add681 = add nsw i32 %i200, 7
  store i32 %add681, i32* %score, align 4
  br label %if.end682

if.end682:                                        ; preds = %if.then680, %if.end674
  br label %sw.epilog

sw.bb683:                                         ; preds = %if.end126
  %inc684 = add nsw i32 %wr.0, 1
  %cmp685 = icmp eq i32 %inc684, 1
  br i1 %cmp685, label %if.then686, label %if.end691

if.then686:                                       ; preds = %sw.bb683
  %idxprom687 = sext i32 %i43 to i64
  %arrayidx688 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xfile to [144 x i32]*), i64 0, i64 %idxprom687
  %i201 = load i32, i32* %arrayidx688, align 4
  %idxprom689 = sext i32 %i43 to i64
  %arrayidx690 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xrank to [144 x i32]*), i64 0, i64 %idxprom689
  %i202 = load i32, i32* %arrayidx690, align 4
  br label %if.end691

if.end691:                                        ; preds = %if.then686, %sw.bb683
  %fwrook.1 = phi i32 [ %i201, %if.then686 ], [ %fwrook.0, %sw.bb683 ]
  %rwrook.1 = phi i32 [ %i202, %if.then686 ], [ %rwrook.0, %sw.bb683 ]
  %cmp692 = icmp eq i32 %i49, 7
  br i1 %cmp692, label %if.then693, label %if.end701

if.then693:                                       ; preds = %if.end691
  %i203 = load i32, i32* %score, align 4
  %add694 = add nsw i32 %i203, 25
  store i32 %add694, i32* %score, align 4
  %cmp695 = icmp eq i32 %inc684, 2
  br i1 %cmp695, label %land.lhs.true696, label %if.end700

land.lhs.true696:                                 ; preds = %if.then693
  %cmp697 = icmp eq i32 %rwrook.1, 7
  br i1 %cmp697, label %if.then698, label %if.end700

if.then698:                                       ; preds = %land.lhs.true696
  %i204 = load i32, i32* %score, align 4
  %add699 = add nsw i32 %i204, 10
  store i32 %add699, i32* %score, align 4
  br label %if.end700

if.end700:                                        ; preds = %if.then698, %land.lhs.true696, %if.then693
  br label %if.end701

if.end701:                                        ; preds = %if.end700, %if.end691
  %arrayidx702 = getelementptr inbounds [2 x [11 x i32]], [2 x [11 x i32]]* %pawns, i64 0, i64 1
  %idxprom703 = sext i32 %add141 to i64
  %arrayidx704 = getelementptr inbounds [11 x i32], [11 x i32]* %arrayidx702, i64 0, i64 %idxprom703
  %i205 = load i32, i32* %arrayidx704, align 4
  %tobool705 = icmp ne i32 %i205, 0
  br i1 %tobool705, label %if.end723, label %if.then706

if.then706:                                       ; preds = %if.end701
  %i206 = load i32, i32* %score, align 4
  %add707 = add nsw i32 %i206, 5
  store i32 %add707, i32* %score, align 4
  %cmp708 = icmp eq i32 %inc684, 2
  br i1 %cmp708, label %land.lhs.true709, label %if.end715

land.lhs.true709:                                 ; preds = %if.then706
  %idxprom710 = sext i32 %i43 to i64
  %arrayidx711 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xfile to [144 x i32]*), i64 0, i64 %idxprom710
  %i207 = load i32, i32* %arrayidx711, align 4
  %cmp712 = icmp eq i32 %i207, %fwrook.1
  br i1 %cmp712, label %if.then713, label %if.end715

if.then713:                                       ; preds = %land.lhs.true709
  %i208 = load i32, i32* %score, align 4
  %add714 = add nsw i32 %i208, 12
  store i32 %add714, i32* %score, align 4
  br label %if.end715

if.end715:                                        ; preds = %if.then713, %land.lhs.true709, %if.then706
  %arrayidx716 = getelementptr inbounds [2 x [11 x i32]], [2 x [11 x i32]]* %pawns, i64 0, i64 0
  %idxprom717 = sext i32 %add141 to i64
  %arrayidx718 = getelementptr inbounds [11 x i32], [11 x i32]* %arrayidx716, i64 0, i64 %idxprom717
  %i209 = load i32, i32* %arrayidx718, align 4
  %tobool719 = icmp ne i32 %i209, 0
  br i1 %tobool719, label %if.end722, label %if.then720

if.then720:                                       ; preds = %if.end715
  %i210 = load i32, i32* %score, align 4
  %add721 = add nsw i32 %i210, 3
  store i32 %add721, i32* %score, align 4
  br label %if.end722

if.end722:                                        ; preds = %if.then720, %if.end715
  br label %if.end723

if.end723:                                        ; preds = %if.end722, %if.end701
  br label %sw.epilog

sw.bb724:                                         ; preds = %if.end126
  %inc725 = add nsw i32 %br.0, 1
  %cmp726 = icmp eq i32 %inc725, 1
  br i1 %cmp726, label %if.then727, label %if.end732

if.then727:                                       ; preds = %sw.bb724
  %idxprom728 = sext i32 %i43 to i64
  %arrayidx729 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xfile to [144 x i32]*), i64 0, i64 %idxprom728
  %i211 = load i32, i32* %arrayidx729, align 4
  %idxprom730 = sext i32 %i43 to i64
  %arrayidx731 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xrank to [144 x i32]*), i64 0, i64 %idxprom730
  %i212 = load i32, i32* %arrayidx731, align 4
  br label %if.end732

if.end732:                                        ; preds = %if.then727, %sw.bb724
  %fbrook.1 = phi i32 [ %i211, %if.then727 ], [ %fbrook.0, %sw.bb724 ]
  %rbrook.1 = phi i32 [ %i212, %if.then727 ], [ %rbrook.0, %sw.bb724 ]
  %cmp733 = icmp eq i32 %i49, 2
  br i1 %cmp733, label %if.then734, label %if.end742

if.then734:                                       ; preds = %if.end732
  %i213 = load i32, i32* %score, align 4
  %sub735 = sub nsw i32 %i213, 25
  store i32 %sub735, i32* %score, align 4
  %cmp736 = icmp eq i32 %wr.0, 2
  br i1 %cmp736, label %land.lhs.true737, label %if.end741

land.lhs.true737:                                 ; preds = %if.then734
  %cmp738 = icmp eq i32 %rbrook.1, 2
  br i1 %cmp738, label %if.then739, label %if.end741

if.then739:                                       ; preds = %land.lhs.true737
  %i214 = load i32, i32* %score, align 4
  %sub740 = sub nsw i32 %i214, 10
  store i32 %sub740, i32* %score, align 4
  br label %if.end741

if.end741:                                        ; preds = %if.then739, %land.lhs.true737, %if.then734
  br label %if.end742

if.end742:                                        ; preds = %if.end741, %if.end732
  %arrayidx743 = getelementptr inbounds [2 x [11 x i32]], [2 x [11 x i32]]* %pawns, i64 0, i64 0
  %idxprom744 = sext i32 %add141 to i64
  %arrayidx745 = getelementptr inbounds [11 x i32], [11 x i32]* %arrayidx743, i64 0, i64 %idxprom744
  %i215 = load i32, i32* %arrayidx745, align 4
  %tobool746 = icmp ne i32 %i215, 0
  br i1 %tobool746, label %if.end764, label %if.then747

if.then747:                                       ; preds = %if.end742
  %i216 = load i32, i32* %score, align 4
  %sub748 = sub nsw i32 %i216, 5
  store i32 %sub748, i32* %score, align 4
  %cmp749 = icmp eq i32 %inc725, 2
  br i1 %cmp749, label %land.lhs.true750, label %if.end756

land.lhs.true750:                                 ; preds = %if.then747
  %idxprom751 = sext i32 %i43 to i64
  %arrayidx752 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xfile to [144 x i32]*), i64 0, i64 %idxprom751
  %i217 = load i32, i32* %arrayidx752, align 4
  %cmp753 = icmp eq i32 %i217, %fbrook.1
  br i1 %cmp753, label %if.then754, label %if.end756

if.then754:                                       ; preds = %land.lhs.true750
  %i218 = load i32, i32* %score, align 4
  %sub755 = sub nsw i32 %i218, 12
  store i32 %sub755, i32* %score, align 4
  br label %if.end756

if.end756:                                        ; preds = %if.then754, %land.lhs.true750, %if.then747
  %arrayidx757 = getelementptr inbounds [2 x [11 x i32]], [2 x [11 x i32]]* %pawns, i64 0, i64 1
  %idxprom758 = sext i32 %add141 to i64
  %arrayidx759 = getelementptr inbounds [11 x i32], [11 x i32]* %arrayidx757, i64 0, i64 %idxprom758
  %i219 = load i32, i32* %arrayidx759, align 4
  %tobool760 = icmp ne i32 %i219, 0
  br i1 %tobool760, label %if.end763, label %if.then761

if.then761:                                       ; preds = %if.end756
  %i220 = load i32, i32* %score, align 4
  %sub762 = sub nsw i32 %i220, 3
  store i32 %sub762, i32* %score, align 4
  br label %if.end763

if.end763:                                        ; preds = %if.then761, %if.end756
  br label %if.end764

if.end764:                                        ; preds = %if.end763, %if.end742
  br label %sw.epilog

sw.bb765:                                         ; preds = %if.end126
  %inc766 = add nsw i32 %wb.0, 1
  br label %sw.epilog

sw.bb767:                                         ; preds = %if.end126
  %inc768 = add nsw i32 %bb.0, 1
  br label %sw.epilog

sw.bb769:                                         ; preds = %if.end126
  %inc770 = add nsw i32 %wn.0, 1
  br label %sw.epilog

sw.bb771:                                         ; preds = %if.end126
  %inc772 = add nsw i32 %bn.0, 1
  br label %sw.epilog

sw.bb773:                                         ; preds = %if.end126
  %inc774 = add nsw i32 %wq.0, 1
  br label %sw.epilog

sw.bb775:                                         ; preds = %if.end126
  %inc776 = add nsw i32 %bq.0, 1
  br label %sw.epilog

sw.bb777:                                         ; preds = %if.end126
  %i221 = load i32, i32* @wmat, align 4
  %cmp778 = icmp sgt i32 %i221, 1300
  br i1 %cmp778, label %if.then779, label %if.else875

if.then779:                                       ; preds = %sw.bb777
  %idxprom780 = sext i32 %i43 to i64
  %arrayidx781 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @swhite_king to [144 x i32]*), i64 0, i64 %idxprom780
  %i222 = load i32, i32* %arrayidx781, align 4
  %i223 = load i32, i32* %score, align 4
  %add782 = add nsw i32 %i223, %i222
  store i32 %add782, i32* %score, align 4
  %i224 = load i32, i32* @white_castled, align 4
  %cmp783 = icmp eq i32 %i224, 2
  br i1 %cmp783, label %if.then784, label %if.else786

if.then784:                                       ; preds = %if.then779
  %i225 = load i32, i32* %score, align 4
  %add785 = add nsw i32 %i225, 15
  store i32 %add785, i32* %score, align 4
  br label %if.end803

if.else786:                                       ; preds = %if.then779
  %i226 = load i32, i32* @white_castled, align 4
  %cmp787 = icmp eq i32 %i226, 1
  br i1 %cmp787, label %if.then788, label %if.else790

if.then788:                                       ; preds = %if.else786
  %i227 = load i32, i32* %score, align 4
  %add789 = add nsw i32 %i227, 25
  store i32 %add789, i32* %score, align 4
  br label %if.end802

if.else790:                                       ; preds = %if.else786
  %i228 = load i32, i32* getelementptr inbounds ([144 x i32], [144 x i32]* @moved, i64 0, i64 30), align 8
  %tobool791 = icmp ne i32 %i228, 0
  br i1 %tobool791, label %if.then792, label %if.end801

if.then792:                                       ; preds = %if.else790
  %i229 = load i32, i32* %score, align 4
  %sub793 = sub nsw i32 %i229, 10
  store i32 %sub793, i32* %score, align 4
  %arrayidx794 = getelementptr inbounds [2 x [11 x i32]], [2 x [11 x i32]]* %pawns, i64 0, i64 1
  %idxprom795 = sext i32 %add141 to i64
  %arrayidx796 = getelementptr inbounds [11 x i32], [11 x i32]* %arrayidx794, i64 0, i64 %idxprom795
  %i230 = load i32, i32* %arrayidx796, align 4
  %tobool797 = icmp ne i32 %i230, 0
  br i1 %tobool797, label %if.end800, label %if.then798

if.then798:                                       ; preds = %if.then792
  %i231 = load i32, i32* %score, align 4
  %sub799 = sub nsw i32 %i231, 15
  store i32 %sub799, i32* %score, align 4
  br label %if.end800

if.end800:                                        ; preds = %if.then798, %if.then792
  br label %if.end801

if.end801:                                        ; preds = %if.end800, %if.else790
  br label %if.end802

if.end802:                                        ; preds = %if.end801, %if.then788
  br label %if.end803

if.end803:                                        ; preds = %if.end802, %if.then784
  %i232 = load i32, i32* @wking_loc, align 4
  %idxprom804 = sext i32 %i232 to i64
  %arrayidx805 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xfile to [144 x i32]*), i64 0, i64 %idxprom804
  %i233 = load i32, i32* %arrayidx805, align 4
  %cmp806 = icmp ne i32 %i233, 4
  br i1 %cmp806, label %land.lhs.true807, label %if.else872

land.lhs.true807:                                 ; preds = %if.end803
  %i234 = load i32, i32* @wking_loc, align 4
  %idxprom808 = sext i32 %i234 to i64
  %arrayidx809 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xfile to [144 x i32]*), i64 0, i64 %idxprom808
  %i235 = load i32, i32* %arrayidx809, align 4
  %cmp810 = icmp ne i32 %i235, 5
  br i1 %cmp810, label %if.then811, label %if.else872

if.then811:                                       ; preds = %land.lhs.true807
  %idxprom812 = sext i32 %add141 to i64
  %arrayidx813 = getelementptr inbounds [11 x i32], [11 x i32]* %white_back_pawn, i64 0, i64 %idxprom812
  %i236 = load i32, i32* %arrayidx813, align 4
  %cmp814 = icmp slt i32 %i49, %i236
  br i1 %cmp814, label %land.lhs.true815, label %if.else827

land.lhs.true815:                                 ; preds = %if.then811
  %arrayidx816 = getelementptr inbounds [2 x [11 x i32]], [2 x [11 x i32]]* %pawns, i64 0, i64 1
  %idxprom817 = sext i32 %add141 to i64
  %arrayidx818 = getelementptr inbounds [11 x i32], [11 x i32]* %arrayidx816, i64 0, i64 %idxprom817
  %i237 = load i32, i32* %arrayidx818, align 4
  %tobool819 = icmp ne i32 %i237, 0
  br i1 %tobool819, label %if.then820, label %if.else827

if.then820:                                       ; preds = %land.lhs.true815
  %idxprom821 = sext i32 %add141 to i64
  %arrayidx822 = getelementptr inbounds [11 x i32], [11 x i32]* %white_back_pawn, i64 0, i64 %idxprom821
  %i238 = load i32, i32* %arrayidx822, align 4
  %sub823 = sub nsw i32 %i238, %i49
  %sub824 = sub nsw i32 %sub823, 1
  %mul825 = mul nsw i32 9, %sub824
  %i239 = load i32, i32* %score, align 4
  %sub826 = sub nsw i32 %i239, %mul825
  store i32 %sub826, i32* %score, align 4
  br label %if.end829

if.else827:                                       ; preds = %land.lhs.true815, %if.then811
  %i240 = load i32, i32* %score, align 4
  %sub828 = sub nsw i32 %i240, 22
  store i32 %sub828, i32* %score, align 4
  br label %if.end829

if.end829:                                        ; preds = %if.else827, %if.then820
  %add830 = add nsw i32 %add141, 1
  %idxprom831 = sext i32 %add830 to i64
  %arrayidx832 = getelementptr inbounds [11 x i32], [11 x i32]* %white_back_pawn, i64 0, i64 %idxprom831
  %i241 = load i32, i32* %arrayidx832, align 4
  %cmp833 = icmp slt i32 %i49, %i241
  br i1 %cmp833, label %land.lhs.true834, label %if.else848

land.lhs.true834:                                 ; preds = %if.end829
  %arrayidx835 = getelementptr inbounds [2 x [11 x i32]], [2 x [11 x i32]]* %pawns, i64 0, i64 1
  %add836 = add nsw i32 %add141, 1
  %idxprom837 = sext i32 %add836 to i64
  %arrayidx838 = getelementptr inbounds [11 x i32], [11 x i32]* %arrayidx835, i64 0, i64 %idxprom837
  %i242 = load i32, i32* %arrayidx838, align 4
  %tobool839 = icmp ne i32 %i242, 0
  br i1 %tobool839, label %if.then840, label %if.else848

if.then840:                                       ; preds = %land.lhs.true834
  %add841 = add nsw i32 %add141, 1
  %idxprom842 = sext i32 %add841 to i64
  %arrayidx843 = getelementptr inbounds [11 x i32], [11 x i32]* %white_back_pawn, i64 0, i64 %idxprom842
  %i243 = load i32, i32* %arrayidx843, align 4
  %sub844 = sub nsw i32 %i243, %i49
  %sub845 = sub nsw i32 %sub844, 1
  %mul846 = mul nsw i32 8, %sub845
  %i244 = load i32, i32* %score, align 4
  %sub847 = sub nsw i32 %i244, %mul846
  store i32 %sub847, i32* %score, align 4
  br label %if.end850

if.else848:                                       ; preds = %land.lhs.true834, %if.end829
  %i245 = load i32, i32* %score, align 4
  %sub849 = sub nsw i32 %i245, 16
  store i32 %sub849, i32* %score, align 4
  br label %if.end850

if.end850:                                        ; preds = %if.else848, %if.then840
  %sub851 = sub nsw i32 %add141, 1
  %idxprom852 = sext i32 %sub851 to i64
  %arrayidx853 = getelementptr inbounds [11 x i32], [11 x i32]* %white_back_pawn, i64 0, i64 %idxprom852
  %i246 = load i32, i32* %arrayidx853, align 4
  %cmp854 = icmp slt i32 %i49, %i246
  br i1 %cmp854, label %land.lhs.true855, label %if.else869

land.lhs.true855:                                 ; preds = %if.end850
  %arrayidx856 = getelementptr inbounds [2 x [11 x i32]], [2 x [11 x i32]]* %pawns, i64 0, i64 1
  %sub857 = sub nsw i32 %add141, 1
  %idxprom858 = sext i32 %sub857 to i64
  %arrayidx859 = getelementptr inbounds [11 x i32], [11 x i32]* %arrayidx856, i64 0, i64 %idxprom858
  %i247 = load i32, i32* %arrayidx859, align 4
  %tobool860 = icmp ne i32 %i247, 0
  br i1 %tobool860, label %if.then861, label %if.else869

if.then861:                                       ; preds = %land.lhs.true855
  %sub862 = sub nsw i32 %add141, 1
  %idxprom863 = sext i32 %sub862 to i64
  %arrayidx864 = getelementptr inbounds [11 x i32], [11 x i32]* %white_back_pawn, i64 0, i64 %idxprom863
  %i248 = load i32, i32* %arrayidx864, align 4
  %sub865 = sub nsw i32 %i248, %i49
  %sub866 = sub nsw i32 %sub865, 1
  %mul867 = mul nsw i32 8, %sub866
  %i249 = load i32, i32* %score, align 4
  %sub868 = sub nsw i32 %i249, %mul867
  store i32 %sub868, i32* %score, align 4
  br label %if.end871

if.else869:                                       ; preds = %land.lhs.true855, %if.end850
  %i250 = load i32, i32* %score, align 4
  %sub870 = sub nsw i32 %i250, 16
  store i32 %sub870, i32* %score, align 4
  br label %if.end871

if.end871:                                        ; preds = %if.else869, %if.then861
  br label %if.end874

if.else872:                                       ; preds = %land.lhs.true807, %if.end803
  %i251 = load i32, i32* %score, align 4
  %sub873 = sub nsw i32 %i251, 10
  store i32 %sub873, i32* %score, align 4
  br label %if.end874

if.end874:                                        ; preds = %if.else872, %if.end871
  br label %if.end879

if.else875:                                       ; preds = %sw.bb777
  %idxprom876 = sext i32 %i43 to i64
  %arrayidx877 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @send_king to [144 x i32]*), i64 0, i64 %idxprom876
  %i252 = load i32, i32* %arrayidx877, align 4
  %i253 = load i32, i32* %score, align 4
  %add878 = add nsw i32 %i253, %i252
  store i32 %add878, i32* %score, align 4
  br label %if.end879

if.end879:                                        ; preds = %if.else875, %if.end874
  br label %sw.epilog

sw.bb880:                                         ; preds = %if.end126
  %i254 = load i32, i32* @bmat, align 4
  %cmp881 = icmp sgt i32 %i254, 1300
  br i1 %cmp881, label %if.then882, label %if.else984

if.then882:                                       ; preds = %sw.bb880
  %idxprom883 = sext i32 %i43 to i64
  %arrayidx884 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @sblack_king to [144 x i32]*), i64 0, i64 %idxprom883
  %i255 = load i32, i32* %arrayidx884, align 4
  %i256 = load i32, i32* %score, align 4
  %sub885 = sub nsw i32 %i256, %i255
  store i32 %sub885, i32* %score, align 4
  %i257 = load i32, i32* @black_castled, align 4
  %cmp886 = icmp eq i32 %i257, 4
  br i1 %cmp886, label %if.then887, label %if.else889

if.then887:                                       ; preds = %if.then882
  %i258 = load i32, i32* %score, align 4
  %sub888 = sub nsw i32 %i258, 15
  store i32 %sub888, i32* %score, align 4
  br label %if.end906

if.else889:                                       ; preds = %if.then882
  %i259 = load i32, i32* @black_castled, align 4
  %cmp890 = icmp eq i32 %i259, 3
  br i1 %cmp890, label %if.then891, label %if.else893

if.then891:                                       ; preds = %if.else889
  %i260 = load i32, i32* %score, align 4
  %sub892 = sub nsw i32 %i260, 25
  store i32 %sub892, i32* %score, align 4
  br label %if.end905

if.else893:                                       ; preds = %if.else889
  %i261 = load i32, i32* getelementptr inbounds ([144 x i32], [144 x i32]* @moved, i64 0, i64 114), align 8
  %tobool894 = icmp ne i32 %i261, 0
  br i1 %tobool894, label %if.then895, label %if.end904

if.then895:                                       ; preds = %if.else893
  %i262 = load i32, i32* %score, align 4
  %add896 = add nsw i32 %i262, 10
  store i32 %add896, i32* %score, align 4
  %arrayidx897 = getelementptr inbounds [2 x [11 x i32]], [2 x [11 x i32]]* %pawns, i64 0, i64 0
  %idxprom898 = sext i32 %add141 to i64
  %arrayidx899 = getelementptr inbounds [11 x i32], [11 x i32]* %arrayidx897, i64 0, i64 %idxprom898
  %i263 = load i32, i32* %arrayidx899, align 4
  %tobool900 = icmp ne i32 %i263, 0
  br i1 %tobool900, label %if.end903, label %if.then901

if.then901:                                       ; preds = %if.then895
  %i264 = load i32, i32* %score, align 4
  %add902 = add nsw i32 %i264, 15
  store i32 %add902, i32* %score, align 4
  br label %if.end903

if.end903:                                        ; preds = %if.then901, %if.then895
  br label %if.end904

if.end904:                                        ; preds = %if.end903, %if.else893
  br label %if.end905

if.end905:                                        ; preds = %if.end904, %if.then891
  br label %if.end906

if.end906:                                        ; preds = %if.end905, %if.then887
  %i265 = load i32, i32* @bking_loc, align 4
  %idxprom907 = sext i32 %i265 to i64
  %arrayidx908 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xfile to [144 x i32]*), i64 0, i64 %idxprom907
  %i266 = load i32, i32* %arrayidx908, align 4
  %cmp909 = icmp ne i32 %i266, 4
  br i1 %cmp909, label %land.lhs.true910, label %if.else981

land.lhs.true910:                                 ; preds = %if.end906
  %i267 = load i32, i32* @bking_loc, align 4
  %idxprom911 = sext i32 %i267 to i64
  %arrayidx912 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xfile to [144 x i32]*), i64 0, i64 %idxprom911
  %i268 = load i32, i32* %arrayidx912, align 4
  %cmp913 = icmp ne i32 %i268, 5
  br i1 %cmp913, label %if.then914, label %if.else981

if.then914:                                       ; preds = %land.lhs.true910
  %idxprom915 = sext i32 %add141 to i64
  %arrayidx916 = getelementptr inbounds [11 x i32], [11 x i32]* %black_back_pawn, i64 0, i64 %idxprom915
  %i269 = load i32, i32* %arrayidx916, align 4
  %cmp917 = icmp sgt i32 %i49, %i269
  br i1 %cmp917, label %land.lhs.true918, label %if.else932

land.lhs.true918:                                 ; preds = %if.then914
  %arrayidx919 = getelementptr inbounds [2 x [11 x i32]], [2 x [11 x i32]]* %pawns, i64 0, i64 0
  %idxprom920 = sext i32 %add141 to i64
  %arrayidx921 = getelementptr inbounds [11 x i32], [11 x i32]* %arrayidx919, i64 0, i64 %idxprom920
  %i270 = load i32, i32* %arrayidx921, align 4
  %tobool922 = icmp ne i32 %i270, 0
  br i1 %tobool922, label %if.then923, label %if.else932

if.then923:                                       ; preds = %land.lhs.true918
  %idxprom924 = sext i32 %add141 to i64
  %arrayidx925 = getelementptr inbounds [11 x i32], [11 x i32]* %black_back_pawn, i64 0, i64 %idxprom924
  %i271 = load i32, i32* %arrayidx925, align 4
  %sub926 = sub nsw i32 %i49, %i271
  %sub927 = sub nsw i32 %sub926, 1
  %idxprom928 = sext i32 %sub927 to i64
  %arrayidx929 = getelementptr inbounds [9 x i32], [9 x i32]* @srev_rank, i64 0, i64 %idxprom928
  %i272 = load i32, i32* %arrayidx929, align 4
  %mul930 = mul nsw i32 9, %i272
  %i273 = load i32, i32* %score, align 4
  %add931 = add nsw i32 %i273, %mul930
  store i32 %add931, i32* %score, align 4
  br label %if.end934

if.else932:                                       ; preds = %land.lhs.true918, %if.then914
  %i274 = load i32, i32* %score, align 4
  %add933 = add nsw i32 %i274, 22
  store i32 %add933, i32* %score, align 4
  br label %if.end934

if.end934:                                        ; preds = %if.else932, %if.then923
  %add935 = add nsw i32 %add141, 1
  %idxprom936 = sext i32 %add935 to i64
  %arrayidx937 = getelementptr inbounds [11 x i32], [11 x i32]* %black_back_pawn, i64 0, i64 %idxprom936
  %i275 = load i32, i32* %arrayidx937, align 4
  %cmp938 = icmp sgt i32 %i49, %i275
  br i1 %cmp938, label %land.lhs.true939, label %if.else955

land.lhs.true939:                                 ; preds = %if.end934
  %arrayidx940 = getelementptr inbounds [2 x [11 x i32]], [2 x [11 x i32]]* %pawns, i64 0, i64 0
  %add941 = add nsw i32 %add141, 1
  %idxprom942 = sext i32 %add941 to i64
  %arrayidx943 = getelementptr inbounds [11 x i32], [11 x i32]* %arrayidx940, i64 0, i64 %idxprom942
  %i276 = load i32, i32* %arrayidx943, align 4
  %tobool944 = icmp ne i32 %i276, 0
  br i1 %tobool944, label %if.then945, label %if.else955

if.then945:                                       ; preds = %land.lhs.true939
  %add946 = add nsw i32 %add141, 1
  %idxprom947 = sext i32 %add946 to i64
  %arrayidx948 = getelementptr inbounds [11 x i32], [11 x i32]* %black_back_pawn, i64 0, i64 %idxprom947
  %i277 = load i32, i32* %arrayidx948, align 4
  %sub949 = sub nsw i32 %i49, %i277
  %sub950 = sub nsw i32 %sub949, 1
  %idxprom951 = sext i32 %sub950 to i64
  %arrayidx952 = getelementptr inbounds [9 x i32], [9 x i32]* @srev_rank, i64 0, i64 %idxprom951
  %i278 = load i32, i32* %arrayidx952, align 4
  %mul953 = mul nsw i32 8, %i278
  %i279 = load i32, i32* %score, align 4
  %add954 = add nsw i32 %i279, %mul953
  store i32 %add954, i32* %score, align 4
  br label %if.end957

if.else955:                                       ; preds = %land.lhs.true939, %if.end934
  %i280 = load i32, i32* %score, align 4
  %add956 = add nsw i32 %i280, 16
  store i32 %add956, i32* %score, align 4
  br label %if.end957

if.end957:                                        ; preds = %if.else955, %if.then945
  %sub958 = sub nsw i32 %add141, 1
  %idxprom959 = sext i32 %sub958 to i64
  %arrayidx960 = getelementptr inbounds [11 x i32], [11 x i32]* %black_back_pawn, i64 0, i64 %idxprom959
  %i281 = load i32, i32* %arrayidx960, align 4
  %cmp961 = icmp sgt i32 %i49, %i281
  br i1 %cmp961, label %land.lhs.true962, label %if.else978

land.lhs.true962:                                 ; preds = %if.end957
  %arrayidx963 = getelementptr inbounds [2 x [11 x i32]], [2 x [11 x i32]]* %pawns, i64 0, i64 0
  %sub964 = sub nsw i32 %add141, 1
  %idxprom965 = sext i32 %sub964 to i64
  %arrayidx966 = getelementptr inbounds [11 x i32], [11 x i32]* %arrayidx963, i64 0, i64 %idxprom965
  %i282 = load i32, i32* %arrayidx966, align 4
  %tobool967 = icmp ne i32 %i282, 0
  br i1 %tobool967, label %if.then968, label %if.else978

if.then968:                                       ; preds = %land.lhs.true962
  %sub969 = sub nsw i32 %add141, 1
  %idxprom970 = sext i32 %sub969 to i64
  %arrayidx971 = getelementptr inbounds [11 x i32], [11 x i32]* %black_back_pawn, i64 0, i64 %idxprom970
  %i283 = load i32, i32* %arrayidx971, align 4
  %sub972 = sub nsw i32 %i49, %i283
  %sub973 = sub nsw i32 %sub972, 1
  %idxprom974 = sext i32 %sub973 to i64
  %arrayidx975 = getelementptr inbounds [9 x i32], [9 x i32]* @srev_rank, i64 0, i64 %idxprom974
  %i284 = load i32, i32* %arrayidx975, align 4
  %mul976 = mul nsw i32 8, %i284
  %i285 = load i32, i32* %score, align 4
  %add977 = add nsw i32 %i285, %mul976
  store i32 %add977, i32* %score, align 4
  br label %if.end980

if.else978:                                       ; preds = %land.lhs.true962, %if.end957
  %i286 = load i32, i32* %score, align 4
  %add979 = add nsw i32 %i286, 16
  store i32 %add979, i32* %score, align 4
  br label %if.end980

if.end980:                                        ; preds = %if.else978, %if.then968
  br label %if.end983

if.else981:                                       ; preds = %land.lhs.true910, %if.end906
  %i287 = load i32, i32* %score, align 4
  %add982 = add nsw i32 %i287, 10
  store i32 %add982, i32* %score, align 4
  br label %if.end983

if.end983:                                        ; preds = %if.else981, %if.end980
  br label %if.end988

if.else984:                                       ; preds = %sw.bb880
  %idxprom985 = sext i32 %i43 to i64
  %arrayidx986 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @send_king to [144 x i32]*), i64 0, i64 %idxprom985
  %i288 = load i32, i32* %arrayidx986, align 4
  %i289 = load i32, i32* %score, align 4
  %sub987 = sub nsw i32 %i289, %i288
  store i32 %sub987, i32* %score, align 4
  br label %if.end988

if.end988:                                        ; preds = %if.else984, %if.end983
  br label %sw.epilog

sw.epilog:                                        ; preds = %if.end988, %if.end879, %sw.bb775, %sw.bb773, %sw.bb771, %sw.bb769, %sw.bb767, %sw.bb765, %if.end764, %if.end723, %if.end682, %if.end411, %if.end126
  %wpotential.5 = phi i32 [ %wpotential.0, %if.end126 ], [ %wpotential.0, %if.end988 ], [ %wpotential.0, %if.end879 ], [ %wpotential.0, %sw.bb775 ], [ %wpotential.0, %sw.bb773 ], [ %wpotential.0, %sw.bb771 ], [ %wpotential.0, %sw.bb769 ], [ %wpotential.0, %sw.bb767 ], [ %wpotential.0, %sw.bb765 ], [ %wpotential.0, %if.end764 ], [ %wpotential.0, %if.end723 ], [ %wpotential.0, %if.end682 ], [ %wpotential.4, %if.end411 ]
  %fwrook.2 = phi i32 [ %fwrook.0, %if.end126 ], [ %fwrook.0, %if.end988 ], [ %fwrook.0, %if.end879 ], [ %fwrook.0, %sw.bb775 ], [ %fwrook.0, %sw.bb773 ], [ %fwrook.0, %sw.bb771 ], [ %fwrook.0, %sw.bb769 ], [ %fwrook.0, %sw.bb767 ], [ %fwrook.0, %sw.bb765 ], [ %fwrook.0, %if.end764 ], [ %fwrook.1, %if.end723 ], [ %fwrook.0, %if.end682 ], [ %fwrook.0, %if.end411 ]
  %rwrook.2 = phi i32 [ %rwrook.0, %if.end126 ], [ %rwrook.0, %if.end988 ], [ %rwrook.0, %if.end879 ], [ %rwrook.0, %sw.bb775 ], [ %rwrook.0, %sw.bb773 ], [ %rwrook.0, %sw.bb771 ], [ %rwrook.0, %sw.bb769 ], [ %rwrook.0, %sw.bb767 ], [ %rwrook.0, %sw.bb765 ], [ %rwrook.0, %if.end764 ], [ %rwrook.1, %if.end723 ], [ %rwrook.0, %if.end682 ], [ %rwrook.0, %if.end411 ]
  %fbrook.2 = phi i32 [ %fbrook.0, %if.end126 ], [ %fbrook.0, %if.end988 ], [ %fbrook.0, %if.end879 ], [ %fbrook.0, %sw.bb775 ], [ %fbrook.0, %sw.bb773 ], [ %fbrook.0, %sw.bb771 ], [ %fbrook.0, %sw.bb769 ], [ %fbrook.0, %sw.bb767 ], [ %fbrook.0, %sw.bb765 ], [ %fbrook.1, %if.end764 ], [ %fbrook.0, %if.end723 ], [ %fbrook.0, %if.end682 ], [ %fbrook.0, %if.end411 ]
  %rbrook.2 = phi i32 [ %rbrook.0, %if.end126 ], [ %rbrook.0, %if.end988 ], [ %rbrook.0, %if.end879 ], [ %rbrook.0, %sw.bb775 ], [ %rbrook.0, %sw.bb773 ], [ %rbrook.0, %sw.bb771 ], [ %rbrook.0, %sw.bb769 ], [ %rbrook.0, %sw.bb767 ], [ %rbrook.0, %sw.bb765 ], [ %rbrook.1, %if.end764 ], [ %rbrook.0, %if.end723 ], [ %rbrook.0, %if.end682 ], [ %rbrook.0, %if.end411 ]
  %br.1 = phi i32 [ %br.0, %if.end126 ], [ %br.0, %if.end988 ], [ %br.0, %if.end879 ], [ %br.0, %sw.bb775 ], [ %br.0, %sw.bb773 ], [ %br.0, %sw.bb771 ], [ %br.0, %sw.bb769 ], [ %br.0, %sw.bb767 ], [ %br.0, %sw.bb765 ], [ %inc725, %if.end764 ], [ %br.0, %if.end723 ], [ %br.0, %if.end682 ], [ %br.0, %if.end411 ]
  %wr.1 = phi i32 [ %wr.0, %if.end126 ], [ %wr.0, %if.end988 ], [ %wr.0, %if.end879 ], [ %wr.0, %sw.bb775 ], [ %wr.0, %sw.bb773 ], [ %wr.0, %sw.bb771 ], [ %wr.0, %sw.bb769 ], [ %wr.0, %sw.bb767 ], [ %wr.0, %sw.bb765 ], [ %wr.0, %if.end764 ], [ %inc684, %if.end723 ], [ %wr.0, %if.end682 ], [ %wr.0, %if.end411 ]
  %bq.1 = phi i32 [ %bq.0, %if.end126 ], [ %bq.0, %if.end988 ], [ %bq.0, %if.end879 ], [ %inc776, %sw.bb775 ], [ %bq.0, %sw.bb773 ], [ %bq.0, %sw.bb771 ], [ %bq.0, %sw.bb769 ], [ %bq.0, %sw.bb767 ], [ %bq.0, %sw.bb765 ], [ %bq.0, %if.end764 ], [ %bq.0, %if.end723 ], [ %bq.0, %if.end682 ], [ %bq.0, %if.end411 ]
  %wq.1 = phi i32 [ %wq.0, %if.end126 ], [ %wq.0, %if.end988 ], [ %wq.0, %if.end879 ], [ %wq.0, %sw.bb775 ], [ %inc774, %sw.bb773 ], [ %wq.0, %sw.bb771 ], [ %wq.0, %sw.bb769 ], [ %wq.0, %sw.bb767 ], [ %wq.0, %sw.bb765 ], [ %wq.0, %if.end764 ], [ %wq.0, %if.end723 ], [ %wq.0, %if.end682 ], [ %wq.0, %if.end411 ]
  %bb.1 = phi i32 [ %bb.0, %if.end126 ], [ %bb.0, %if.end988 ], [ %bb.0, %if.end879 ], [ %bb.0, %sw.bb775 ], [ %bb.0, %sw.bb773 ], [ %bb.0, %sw.bb771 ], [ %bb.0, %sw.bb769 ], [ %inc768, %sw.bb767 ], [ %bb.0, %sw.bb765 ], [ %bb.0, %if.end764 ], [ %bb.0, %if.end723 ], [ %bb.0, %if.end682 ], [ %bb.0, %if.end411 ]
  %wb.1 = phi i32 [ %wb.0, %if.end126 ], [ %wb.0, %if.end988 ], [ %wb.0, %if.end879 ], [ %wb.0, %sw.bb775 ], [ %wb.0, %sw.bb773 ], [ %wb.0, %sw.bb771 ], [ %wb.0, %sw.bb769 ], [ %wb.0, %sw.bb767 ], [ %inc766, %sw.bb765 ], [ %wb.0, %if.end764 ], [ %wb.0, %if.end723 ], [ %wb.0, %if.end682 ], [ %wb.0, %if.end411 ]
  %bn.1 = phi i32 [ %bn.0, %if.end126 ], [ %bn.0, %if.end988 ], [ %bn.0, %if.end879 ], [ %bn.0, %sw.bb775 ], [ %bn.0, %sw.bb773 ], [ %inc772, %sw.bb771 ], [ %bn.0, %sw.bb769 ], [ %bn.0, %sw.bb767 ], [ %bn.0, %sw.bb765 ], [ %bn.0, %if.end764 ], [ %bn.0, %if.end723 ], [ %bn.0, %if.end682 ], [ %bn.0, %if.end411 ]
  %wn.1 = phi i32 [ %wn.0, %if.end126 ], [ %wn.0, %if.end988 ], [ %wn.0, %if.end879 ], [ %wn.0, %sw.bb775 ], [ %wn.0, %sw.bb773 ], [ %wn.0, %sw.bb771 ], [ %inc770, %sw.bb769 ], [ %wn.0, %sw.bb767 ], [ %wn.0, %sw.bb765 ], [ %wn.0, %if.end764 ], [ %wn.0, %if.end723 ], [ %wn.0, %if.end682 ], [ %wn.0, %if.end411 ]
  %bp.1 = phi i32 [ %bp.0, %if.end126 ], [ %bp.0, %if.end988 ], [ %bp.0, %if.end879 ], [ %bp.0, %sw.bb775 ], [ %bp.0, %sw.bb773 ], [ %bp.0, %sw.bb771 ], [ %bp.0, %sw.bb769 ], [ %bp.0, %sw.bb767 ], [ %bp.0, %sw.bb765 ], [ %bp.0, %if.end764 ], [ %bp.0, %if.end723 ], [ %inc416, %if.end682 ], [ %bp.0, %if.end411 ]
  %wp.1 = phi i32 [ %wp.0, %if.end126 ], [ %wp.0, %if.end988 ], [ %wp.0, %if.end879 ], [ %wp.0, %sw.bb775 ], [ %wp.0, %sw.bb773 ], [ %wp.0, %sw.bb771 ], [ %wp.0, %sw.bb769 ], [ %wp.0, %sw.bb767 ], [ %wp.0, %sw.bb765 ], [ %wp.0, %if.end764 ], [ %wp.0, %if.end723 ], [ %wp.0, %if.end682 ], [ %inc149, %if.end411 ]
  %bpotential.5 = phi i32 [ %bpotential.0, %if.end126 ], [ %bpotential.0, %if.end988 ], [ %bpotential.0, %if.end879 ], [ %bpotential.0, %sw.bb775 ], [ %bpotential.0, %sw.bb773 ], [ %bpotential.0, %sw.bb771 ], [ %bpotential.0, %sw.bb769 ], [ %bpotential.0, %sw.bb767 ], [ %bpotential.0, %sw.bb765 ], [ %bpotential.0, %if.end764 ], [ %bpotential.0, %if.end723 ], [ %bpotential.4, %if.end682 ], [ %bpotential.0, %if.end411 ]
  br label %for.inc989

for.inc989:                                       ; preds = %sw.epilog, %if.then123
  %wpotential.6 = phi i32 [ %wpotential.5, %sw.epilog ], [ %wpotential.0, %if.then123 ]
  %fwrook.3 = phi i32 [ %fwrook.2, %sw.epilog ], [ %fwrook.0, %if.then123 ]
  %rwrook.3 = phi i32 [ %rwrook.2, %sw.epilog ], [ %rwrook.0, %if.then123 ]
  %fbrook.3 = phi i32 [ %fbrook.2, %sw.epilog ], [ %fbrook.0, %if.then123 ]
  %rbrook.3 = phi i32 [ %rbrook.2, %sw.epilog ], [ %rbrook.0, %if.then123 ]
  %br.2 = phi i32 [ %br.1, %sw.epilog ], [ %br.0, %if.then123 ]
  %wr.2 = phi i32 [ %wr.1, %sw.epilog ], [ %wr.0, %if.then123 ]
  %bq.2 = phi i32 [ %bq.1, %sw.epilog ], [ %bq.0, %if.then123 ]
  %wq.2 = phi i32 [ %wq.1, %sw.epilog ], [ %wq.0, %if.then123 ]
  %bb.2 = phi i32 [ %bb.1, %sw.epilog ], [ %bb.0, %if.then123 ]
  %wb.2 = phi i32 [ %wb.1, %sw.epilog ], [ %wb.0, %if.then123 ]
  %bn.2 = phi i32 [ %bn.1, %sw.epilog ], [ %bn.0, %if.then123 ]
  %wn.2 = phi i32 [ %wn.1, %sw.epilog ], [ %wn.0, %if.then123 ]
  %bp.2 = phi i32 [ %bp.1, %sw.epilog ], [ %bp.0, %if.then123 ]
  %wp.2 = phi i32 [ %wp.1, %sw.epilog ], [ %wp.0, %if.then123 ]
  %bpotential.6 = phi i32 [ %bpotential.5, %sw.epilog ], [ %bpotential.0, %if.then123 ]
  %a.3 = phi i32 [ %inc125, %sw.epilog ], [ %a.2, %if.then123 ]
  %inc990 = add nsw i32 %j.1, 1
  br label %for.cond117

for.end991:                                       ; preds = %for.cond117
  %i290 = load i32, i32* @wmat, align 4
  %cmp992 = icmp sgt i32 %i290, 2200
  br i1 %cmp992, label %if.then995, label %lor.lhs.false993

lor.lhs.false993:                                 ; preds = %for.end991
  %i291 = load i32, i32* @bmat, align 4
  %cmp994 = icmp sgt i32 %i291, 2200
  br i1 %cmp994, label %if.then995, label %if.end1020

if.then995:                                       ; preds = %lor.lhs.false993, %for.end991
  %i292 = load i32, i32* getelementptr inbounds ([144 x i32], [144 x i32]* @moved, i64 0, i64 41), align 4
  %tobool996 = icmp ne i32 %i292, 0
  br i1 %tobool996, label %if.end1001, label %land.lhs.true997

land.lhs.true997:                                 ; preds = %if.then995
  %i293 = load i32, i32* getelementptr inbounds ([144 x i32], [144 x i32]* @board, i64 0, i64 53), align 4
  %cmp998 = icmp ne i32 %i293, 13
  br i1 %cmp998, label %if.then999, label %if.end1001

if.then999:                                       ; preds = %land.lhs.true997
  %i294 = load i32, i32* %score, align 4
  %sub1000 = sub nsw i32 %i294, 5
  store i32 %sub1000, i32* %score, align 4
  br label %if.end1001

if.end1001:                                       ; preds = %if.then999, %land.lhs.true997, %if.then995
  %i295 = load i32, i32* getelementptr inbounds ([144 x i32], [144 x i32]* @moved, i64 0, i64 42), align 8
  %tobool1002 = icmp ne i32 %i295, 0
  br i1 %tobool1002, label %if.end1007, label %land.lhs.true1003

land.lhs.true1003:                                ; preds = %if.end1001
  %i296 = load i32, i32* getelementptr inbounds ([144 x i32], [144 x i32]* @board, i64 0, i64 54), align 8
  %cmp1004 = icmp ne i32 %i296, 13
  br i1 %cmp1004, label %if.then1005, label %if.end1007

if.then1005:                                      ; preds = %land.lhs.true1003
  %i297 = load i32, i32* %score, align 4
  %sub1006 = sub nsw i32 %i297, 5
  store i32 %sub1006, i32* %score, align 4
  br label %if.end1007

if.end1007:                                       ; preds = %if.then1005, %land.lhs.true1003, %if.end1001
  %i298 = load i32, i32* getelementptr inbounds ([144 x i32], [144 x i32]* @moved, i64 0, i64 101), align 4
  %tobool1008 = icmp ne i32 %i298, 0
  br i1 %tobool1008, label %if.end1013, label %land.lhs.true1009

land.lhs.true1009:                                ; preds = %if.end1007
  %i299 = load i32, i32* getelementptr inbounds ([144 x i32], [144 x i32]* @board, i64 0, i64 89), align 4
  %cmp1010 = icmp ne i32 %i299, 13
  br i1 %cmp1010, label %if.then1011, label %if.end1013

if.then1011:                                      ; preds = %land.lhs.true1009
  %i300 = load i32, i32* %score, align 4
  %add1012 = add nsw i32 %i300, 5
  store i32 %add1012, i32* %score, align 4
  br label %if.end1013

if.end1013:                                       ; preds = %if.then1011, %land.lhs.true1009, %if.end1007
  %i301 = load i32, i32* getelementptr inbounds ([144 x i32], [144 x i32]* @moved, i64 0, i64 102), align 8
  %tobool1014 = icmp ne i32 %i301, 0
  br i1 %tobool1014, label %if.end1019, label %land.lhs.true1015

land.lhs.true1015:                                ; preds = %if.end1013
  %i302 = load i32, i32* getelementptr inbounds ([144 x i32], [144 x i32]* @board, i64 0, i64 90), align 8
  %cmp1016 = icmp ne i32 %i302, 13
  br i1 %cmp1016, label %if.then1017, label %if.end1019

if.then1017:                                      ; preds = %land.lhs.true1015
  %i303 = load i32, i32* %score, align 4
  %add1018 = add nsw i32 %i303, 5
  store i32 %add1018, i32* %score, align 4
  br label %if.end1019

if.end1019:                                       ; preds = %if.then1017, %land.lhs.true1015, %if.end1013
  br label %if.end1020

if.end1020:                                       ; preds = %if.end1019, %lor.lhs.false993
  %i304 = load i32, i32* @wmat, align 4
  %cmp1021 = icmp sgt i32 %i304, 1300
  br i1 %cmp1021, label %if.then1024, label %lor.lhs.false1022

lor.lhs.false1022:                                ; preds = %if.end1020
  %i305 = load i32, i32* @bmat, align 4
  %cmp1023 = icmp sgt i32 %i305, 1300
  br i1 %cmp1023, label %if.then1024, label %if.end1122

if.then1024:                                      ; preds = %lor.lhs.false1022, %if.end1020
  %i306 = load i32, i32* @wking_loc, align 4
  %idxprom1025 = sext i32 %i306 to i64
  %arrayidx1026 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xfile to [144 x i32]*), i64 0, i64 %idxprom1025
  %i307 = load i32, i32* %arrayidx1026, align 4
  %add1027 = add nsw i32 %i307, 1
  %i308 = load i32, i32* @bking_loc, align 4
  %idxprom1028 = sext i32 %i308 to i64
  %arrayidx1029 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xfile to [144 x i32]*), i64 0, i64 %idxprom1028
  %i309 = load i32, i32* %arrayidx1029, align 4
  %add1030 = add nsw i32 %i309, 1
  %sub1031 = sub nsw i32 %add1027, %add1030
  %call1032 = call i32 @abs(i32 %sub1031) #10
  %cmp1033 = icmp sgt i32 %call1032, 2
  br i1 %cmp1033, label %if.then1034, label %if.end1121

if.then1034:                                      ; preds = %if.then1024
  %idxprom1035 = sext i32 %add1027 to i64
  %arrayidx1036 = getelementptr inbounds [11 x i32], [11 x i32]* %black_back_pawn, i64 0, i64 %idxprom1035
  %i310 = load i32, i32* %arrayidx1036, align 4
  %idxprom1037 = sext i32 %i310 to i64
  %arrayidx1038 = getelementptr inbounds [9 x i32], [9 x i32]* @srev_rank, i64 0, i64 %idxprom1037
  %i311 = load i32, i32* %arrayidx1038, align 4
  %sub1039 = sub nsw i32 %i311, 2
  %mul1040 = mul nsw i32 3, %sub1039
  %add1041 = add nsw i32 0, %mul1040
  %add1042 = add nsw i32 %add1027, 1
  %idxprom1043 = sext i32 %add1042 to i64
  %arrayidx1044 = getelementptr inbounds [11 x i32], [11 x i32]* %black_back_pawn, i64 0, i64 %idxprom1043
  %i312 = load i32, i32* %arrayidx1044, align 4
  %idxprom1045 = sext i32 %i312 to i64
  %arrayidx1046 = getelementptr inbounds [9 x i32], [9 x i32]* @srev_rank, i64 0, i64 %idxprom1045
  %i313 = load i32, i32* %arrayidx1046, align 4
  %sub1047 = sub nsw i32 %i313, 2
  %mul1048 = mul nsw i32 3, %sub1047
  %add1049 = add nsw i32 %add1041, %mul1048
  %sub1050 = sub nsw i32 %add1027, 1
  %idxprom1051 = sext i32 %sub1050 to i64
  %arrayidx1052 = getelementptr inbounds [11 x i32], [11 x i32]* %black_back_pawn, i64 0, i64 %idxprom1051
  %i314 = load i32, i32* %arrayidx1052, align 4
  %idxprom1053 = sext i32 %i314 to i64
  %arrayidx1054 = getelementptr inbounds [9 x i32], [9 x i32]* @srev_rank, i64 0, i64 %idxprom1053
  %i315 = load i32, i32* %arrayidx1054, align 4
  %sub1055 = sub nsw i32 %i315, 2
  %mul1056 = mul nsw i32 3, %sub1055
  %add1057 = add nsw i32 %add1049, %mul1056
  %idxprom1058 = sext i32 %add1030 to i64
  %arrayidx1059 = getelementptr inbounds [11 x i32], [11 x i32]* %white_back_pawn, i64 0, i64 %idxprom1058
  %i316 = load i32, i32* %arrayidx1059, align 4
  %sub1060 = sub nsw i32 %i316, 2
  %mul1061 = mul nsw i32 3, %sub1060
  %add1062 = add nsw i32 0, %mul1061
  %add1063 = add nsw i32 %add1030, 1
  %idxprom1064 = sext i32 %add1063 to i64
  %arrayidx1065 = getelementptr inbounds [11 x i32], [11 x i32]* %white_back_pawn, i64 0, i64 %idxprom1064
  %i317 = load i32, i32* %arrayidx1065, align 4
  %sub1066 = sub nsw i32 %i317, 2
  %mul1067 = mul nsw i32 3, %sub1066
  %add1068 = add nsw i32 %add1062, %mul1067
  %sub1069 = sub nsw i32 %add1030, 1
  %idxprom1070 = sext i32 %sub1069 to i64
  %arrayidx1071 = getelementptr inbounds [11 x i32], [11 x i32]* %white_back_pawn, i64 0, i64 %idxprom1070
  %i318 = load i32, i32* %arrayidx1071, align 4
  %sub1072 = sub nsw i32 %i318, 2
  %mul1073 = mul nsw i32 3, %sub1072
  %add1074 = add nsw i32 %add1068, %mul1073
  %arrayidx1075 = getelementptr inbounds [2 x [11 x i32]], [2 x [11 x i32]]* %pawns, i64 0, i64 0
  %idxprom1076 = sext i32 %add1027 to i64
  %arrayidx1077 = getelementptr inbounds [11 x i32], [11 x i32]* %arrayidx1075, i64 0, i64 %idxprom1076
  %i319 = load i32, i32* %arrayidx1077, align 4
  %tobool1078 = icmp ne i32 %i319, 0
  br i1 %tobool1078, label %if.end1081, label %if.then1079

if.then1079:                                      ; preds = %if.then1034
  %add1080 = add nsw i32 %add1057, 8
  br label %if.end1081

if.end1081:                                       ; preds = %if.then1079, %if.then1034
  %wksafety.0 = phi i32 [ %add1057, %if.then1034 ], [ %add1080, %if.then1079 ]
  %arrayidx1082 = getelementptr inbounds [2 x [11 x i32]], [2 x [11 x i32]]* %pawns, i64 0, i64 0
  %add1083 = add nsw i32 %add1027, 1
  %idxprom1084 = sext i32 %add1083 to i64
  %arrayidx1085 = getelementptr inbounds [11 x i32], [11 x i32]* %arrayidx1082, i64 0, i64 %idxprom1084
  %i320 = load i32, i32* %arrayidx1085, align 4
  %tobool1086 = icmp ne i32 %i320, 0
  br i1 %tobool1086, label %if.end1089, label %if.then1087

if.then1087:                                      ; preds = %if.end1081
  %add1088 = add nsw i32 %wksafety.0, 6
  br label %if.end1089

if.end1089:                                       ; preds = %if.then1087, %if.end1081
  %wksafety.1 = phi i32 [ %wksafety.0, %if.end1081 ], [ %add1088, %if.then1087 ]
  %arrayidx1090 = getelementptr inbounds [2 x [11 x i32]], [2 x [11 x i32]]* %pawns, i64 0, i64 0
  %sub1091 = sub nsw i32 %add1027, 1
  %idxprom1092 = sext i32 %sub1091 to i64
  %arrayidx1093 = getelementptr inbounds [11 x i32], [11 x i32]* %arrayidx1090, i64 0, i64 %idxprom1092
  %i321 = load i32, i32* %arrayidx1093, align 4
  %tobool1094 = icmp ne i32 %i321, 0
  br i1 %tobool1094, label %if.end1097, label %if.then1095

if.then1095:                                      ; preds = %if.end1089
  %add1096 = add nsw i32 %wksafety.1, 6
  br label %if.end1097

if.end1097:                                       ; preds = %if.then1095, %if.end1089
  %wksafety.2 = phi i32 [ %wksafety.1, %if.end1089 ], [ %add1096, %if.then1095 ]
  %arrayidx1098 = getelementptr inbounds [2 x [11 x i32]], [2 x [11 x i32]]* %pawns, i64 0, i64 1
  %idxprom1099 = sext i32 %add1030 to i64
  %arrayidx1100 = getelementptr inbounds [11 x i32], [11 x i32]* %arrayidx1098, i64 0, i64 %idxprom1099
  %i322 = load i32, i32* %arrayidx1100, align 4
  %tobool1101 = icmp ne i32 %i322, 0
  br i1 %tobool1101, label %if.end1104, label %if.then1102

if.then1102:                                      ; preds = %if.end1097
  %add1103 = add nsw i32 %add1074, 8
  br label %if.end1104

if.end1104:                                       ; preds = %if.then1102, %if.end1097
  %bksafety.0 = phi i32 [ %add1074, %if.end1097 ], [ %add1103, %if.then1102 ]
  %arrayidx1105 = getelementptr inbounds [2 x [11 x i32]], [2 x [11 x i32]]* %pawns, i64 0, i64 1
  %add1106 = add nsw i32 %add1030, 1
  %idxprom1107 = sext i32 %add1106 to i64
  %arrayidx1108 = getelementptr inbounds [11 x i32], [11 x i32]* %arrayidx1105, i64 0, i64 %idxprom1107
  %i323 = load i32, i32* %arrayidx1108, align 4
  %tobool1109 = icmp ne i32 %i323, 0
  br i1 %tobool1109, label %if.end1112, label %if.then1110

if.then1110:                                      ; preds = %if.end1104
  %add1111 = add nsw i32 %bksafety.0, 6
  br label %if.end1112

if.end1112:                                       ; preds = %if.then1110, %if.end1104
  %bksafety.1 = phi i32 [ %bksafety.0, %if.end1104 ], [ %add1111, %if.then1110 ]
  %arrayidx1113 = getelementptr inbounds [2 x [11 x i32]], [2 x [11 x i32]]* %pawns, i64 0, i64 1
  %sub1114 = sub nsw i32 %add1030, 1
  %idxprom1115 = sext i32 %sub1114 to i64
  %arrayidx1116 = getelementptr inbounds [11 x i32], [11 x i32]* %arrayidx1113, i64 0, i64 %idxprom1115
  %i324 = load i32, i32* %arrayidx1116, align 4
  %tobool1117 = icmp ne i32 %i324, 0
  br i1 %tobool1117, label %if.end1120, label %if.then1118

if.then1118:                                      ; preds = %if.end1112
  %add1119 = add nsw i32 %bksafety.1, 6
  br label %if.end1120

if.end1120:                                       ; preds = %if.then1118, %if.end1112
  %bksafety.2 = phi i32 [ %bksafety.1, %if.end1112 ], [ %add1119, %if.then1118 ]
  br label %if.end1121

if.end1121:                                       ; preds = %if.end1120, %if.then1024
  %wksafety.3 = phi i32 [ %wksafety.2, %if.end1120 ], [ 0, %if.then1024 ]
  %bksafety.3 = phi i32 [ %bksafety.2, %if.end1120 ], [ 0, %if.then1024 ]
  br label %if.end1122

if.end1122:                                       ; preds = %if.end1121, %lor.lhs.false1022
  %wksafety.4 = phi i32 [ %wksafety.3, %if.end1121 ], [ 0, %lor.lhs.false1022 ]
  %bksafety.4 = phi i32 [ %bksafety.3, %if.end1121 ], [ 0, %lor.lhs.false1022 ]
  %i325 = load i32, i32* @bmat, align 4
  %cmp1123 = icmp sgt i32 %i325, 1300
  br i1 %cmp1123, label %land.lhs.true1124, label %if.end1128

land.lhs.true1124:                                ; preds = %if.end1122
  %tobool1125 = icmp ne i32 %bq.0, 0
  br i1 %tobool1125, label %if.then1126, label %if.end1128

if.then1126:                                      ; preds = %land.lhs.true1124
  %i326 = load i32, i32* %score, align 4
  %sub1127 = sub nsw i32 %i326, %wksafety.4
  store i32 %sub1127, i32* %score, align 4
  br label %if.end1128

if.end1128:                                       ; preds = %if.then1126, %land.lhs.true1124, %if.end1122
  %i327 = load i32, i32* @wmat, align 4
  %cmp1129 = icmp sgt i32 %i327, 1300
  br i1 %cmp1129, label %land.lhs.true1130, label %if.end1134

land.lhs.true1130:                                ; preds = %if.end1128
  %tobool1131 = icmp ne i32 %wq.0, 0
  br i1 %tobool1131, label %if.then1132, label %if.end1134

if.then1132:                                      ; preds = %land.lhs.true1130
  %i328 = load i32, i32* %score, align 4
  %add1133 = add nsw i32 %i328, %bksafety.4
  store i32 %add1133, i32* %score, align 4
  br label %if.end1134

if.end1134:                                       ; preds = %if.then1132, %land.lhs.true1130, %if.end1128
  %tobool1135 = icmp ne i32 %wr.0, 0
  br i1 %tobool1135, label %if.end1144, label %land.lhs.true1136

land.lhs.true1136:                                ; preds = %if.end1134
  %tobool1137 = icmp ne i32 %wq.0, 0
  br i1 %tobool1137, label %if.end1144, label %land.lhs.true1138

land.lhs.true1138:                                ; preds = %land.lhs.true1136
  %tobool1139 = icmp ne i32 %wb.0, 0
  br i1 %tobool1139, label %if.end1144, label %land.lhs.true1140

land.lhs.true1140:                                ; preds = %land.lhs.true1138
  %tobool1141 = icmp ne i32 %wn.0, 0
  br i1 %tobool1141, label %if.end1144, label %if.then1142

if.then1142:                                      ; preds = %land.lhs.true1140
  %i329 = load i32, i32* %score, align 4
  %add1143 = add nsw i32 %i329, %bpotential.0
  store i32 %add1143, i32* %score, align 4
  br label %if.end1144

if.end1144:                                       ; preds = %if.then1142, %land.lhs.true1140, %land.lhs.true1138, %land.lhs.true1136, %if.end1134
  %tobool1145 = icmp ne i32 %br.0, 0
  br i1 %tobool1145, label %if.end1154, label %land.lhs.true1146

land.lhs.true1146:                                ; preds = %if.end1144
  %tobool1147 = icmp ne i32 %bq.0, 0
  br i1 %tobool1147, label %if.end1154, label %land.lhs.true1148

land.lhs.true1148:                                ; preds = %land.lhs.true1146
  %tobool1149 = icmp ne i32 %bb.0, 0
  br i1 %tobool1149, label %if.end1154, label %land.lhs.true1150

land.lhs.true1150:                                ; preds = %land.lhs.true1148
  %tobool1151 = icmp ne i32 %bn.0, 0
  br i1 %tobool1151, label %if.end1154, label %if.then1152

if.then1152:                                      ; preds = %land.lhs.true1150
  %i330 = load i32, i32* %score, align 4
  %add1153 = add nsw i32 %i330, %wpotential.0
  store i32 %add1153, i32* %score, align 4
  br label %if.end1154

if.end1154:                                       ; preds = %if.then1152, %land.lhs.true1150, %land.lhs.true1148, %land.lhs.true1146, %if.end1144
  %tobool1155 = icmp ne i32 %wp.0, 0
  br i1 %tobool1155, label %if.else1258, label %land.lhs.true1156

land.lhs.true1156:                                ; preds = %if.end1154
  %tobool1157 = icmp ne i32 %bp.0, 0
  br i1 %tobool1157, label %if.else1258, label %if.then1158

if.then1158:                                      ; preds = %land.lhs.true1156
  %tobool1159 = icmp ne i32 %wr.0, 0
  br i1 %tobool1159, label %if.else1207, label %land.lhs.true1160

land.lhs.true1160:                                ; preds = %if.then1158
  %tobool1161 = icmp ne i32 %br.0, 0
  br i1 %tobool1161, label %if.else1207, label %land.lhs.true1162

land.lhs.true1162:                                ; preds = %land.lhs.true1160
  %tobool1163 = icmp ne i32 %wq.0, 0
  br i1 %tobool1163, label %if.else1207, label %land.lhs.true1164

land.lhs.true1164:                                ; preds = %land.lhs.true1162
  %tobool1165 = icmp ne i32 %bq.0, 0
  br i1 %tobool1165, label %if.else1207, label %if.then1166

if.then1166:                                      ; preds = %land.lhs.true1164
  %tobool1167 = icmp ne i32 %bb.0, 0
  br i1 %tobool1167, label %if.else1176, label %land.lhs.true1168

land.lhs.true1168:                                ; preds = %if.then1166
  %tobool1169 = icmp ne i32 %wb.0, 0
  br i1 %tobool1169, label %if.else1176, label %if.then1170

if.then1170:                                      ; preds = %land.lhs.true1168
  %cmp1171 = icmp slt i32 %wn.0, 3
  br i1 %cmp1171, label %land.lhs.true1172, label %if.end1175

land.lhs.true1172:                                ; preds = %if.then1170
  %cmp1173 = icmp slt i32 %bn.0, 3
  br i1 %cmp1173, label %if.then1174, label %if.end1175

if.then1174:                                      ; preds = %land.lhs.true1172
  store i32 0, i32* %score, align 4
  br label %if.end1175

if.end1175:                                       ; preds = %if.then1174, %land.lhs.true1172, %if.then1170
  br label %if.end1206

if.else1176:                                      ; preds = %land.lhs.true1168, %if.then1166
  %tobool1177 = icmp ne i32 %wn.0, 0
  br i1 %tobool1177, label %if.else1186, label %land.lhs.true1178

land.lhs.true1178:                                ; preds = %if.else1176
  %tobool1179 = icmp ne i32 %bn.0, 0
  br i1 %tobool1179, label %if.else1186, label %if.then1180

if.then1180:                                      ; preds = %land.lhs.true1178
  %sub1181 = sub nsw i32 %wb.0, %bb.0
  %call1182 = call i32 @abs(i32 %sub1181) #10
  %cmp1183 = icmp slt i32 %call1182, 2
  br i1 %cmp1183, label %if.then1184, label %if.end1185

if.then1184:                                      ; preds = %if.then1180
  store i32 0, i32* %score, align 4
  br label %if.end1185

if.end1185:                                       ; preds = %if.then1184, %if.then1180
  br label %if.end1205

if.else1186:                                      ; preds = %land.lhs.true1178, %if.else1176
  %cmp1187 = icmp slt i32 %wn.0, 3
  br i1 %cmp1187, label %land.lhs.true1188, label %lor.lhs.false1190

land.lhs.true1188:                                ; preds = %if.else1186
  %tobool1189 = icmp ne i32 %wb.0, 0
  br i1 %tobool1189, label %lor.lhs.false1190, label %if.then1194

lor.lhs.false1190:                                ; preds = %land.lhs.true1188, %if.else1186
  %cmp1191 = icmp eq i32 %wb.0, 1
  br i1 %cmp1191, label %land.lhs.true1192, label %if.end1204

land.lhs.true1192:                                ; preds = %lor.lhs.false1190
  %tobool1193 = icmp ne i32 %wn.0, 0
  br i1 %tobool1193, label %if.end1204, label %if.then1194

if.then1194:                                      ; preds = %land.lhs.true1192, %land.lhs.true1188
  %cmp1195 = icmp slt i32 %bn.0, 3
  br i1 %cmp1195, label %land.lhs.true1196, label %lor.lhs.false1198

land.lhs.true1196:                                ; preds = %if.then1194
  %tobool1197 = icmp ne i32 %bb.0, 0
  br i1 %tobool1197, label %lor.lhs.false1198, label %if.then1202

lor.lhs.false1198:                                ; preds = %land.lhs.true1196, %if.then1194
  %cmp1199 = icmp eq i32 %bb.0, 1
  br i1 %cmp1199, label %land.lhs.true1200, label %if.end1203

land.lhs.true1200:                                ; preds = %lor.lhs.false1198
  %tobool1201 = icmp ne i32 %bn.0, 0
  br i1 %tobool1201, label %if.end1203, label %if.then1202

if.then1202:                                      ; preds = %land.lhs.true1200, %land.lhs.true1196
  store i32 0, i32* %score, align 4
  br label %if.end1203

if.end1203:                                       ; preds = %if.then1202, %land.lhs.true1200, %lor.lhs.false1198
  br label %if.end1204

if.end1204:                                       ; preds = %if.end1203, %land.lhs.true1192, %lor.lhs.false1190
  br label %if.end1205

if.end1205:                                       ; preds = %if.end1204, %if.end1185
  br label %if.end1206

if.end1206:                                       ; preds = %if.end1205, %if.end1175
  br label %if.end1257

if.else1207:                                      ; preds = %land.lhs.true1164, %land.lhs.true1162, %land.lhs.true1160, %if.then1158
  %tobool1208 = icmp ne i32 %wq.0, 0
  br i1 %tobool1208, label %if.end1256, label %land.lhs.true1209

land.lhs.true1209:                                ; preds = %if.else1207
  %tobool1210 = icmp ne i32 %bq.0, 0
  br i1 %tobool1210, label %if.end1256, label %if.then1211

if.then1211:                                      ; preds = %land.lhs.true1209
  %cmp1212 = icmp eq i32 %wr.0, 1
  br i1 %cmp1212, label %land.lhs.true1213, label %if.else1223

land.lhs.true1213:                                ; preds = %if.then1211
  %cmp1214 = icmp eq i32 %br.0, 1
  br i1 %cmp1214, label %if.then1215, label %if.else1223

if.then1215:                                      ; preds = %land.lhs.true1213
  %add1216 = add nsw i32 %wn.0, %wb.0
  %cmp1217 = icmp slt i32 %add1216, 2
  br i1 %cmp1217, label %land.lhs.true1218, label %if.end1222

land.lhs.true1218:                                ; preds = %if.then1215
  %add1219 = add nsw i32 %bn.0, %bb.0
  %cmp1220 = icmp slt i32 %add1219, 2
  br i1 %cmp1220, label %if.then1221, label %if.end1222

if.then1221:                                      ; preds = %land.lhs.true1218
  store i32 0, i32* %score, align 4
  br label %if.end1222

if.end1222:                                       ; preds = %if.then1221, %land.lhs.true1218, %if.then1215
  br label %if.end1255

if.else1223:                                      ; preds = %land.lhs.true1213, %if.then1211
  %cmp1224 = icmp eq i32 %wr.0, 1
  br i1 %cmp1224, label %land.lhs.true1225, label %if.else1238

land.lhs.true1225:                                ; preds = %if.else1223
  %tobool1226 = icmp ne i32 %br.0, 0
  br i1 %tobool1226, label %if.else1238, label %if.then1227

if.then1227:                                      ; preds = %land.lhs.true1225
  %add1228 = add nsw i32 %wn.0, %wb.0
  %cmp1229 = icmp eq i32 %add1228, 0
  br i1 %cmp1229, label %land.lhs.true1230, label %if.end1237

land.lhs.true1230:                                ; preds = %if.then1227
  %add1231 = add nsw i32 %bn.0, %bb.0
  %cmp1232 = icmp eq i32 %add1231, 1
  br i1 %cmp1232, label %if.then1236, label %lor.lhs.false1233

lor.lhs.false1233:                                ; preds = %land.lhs.true1230
  %add1234 = add nsw i32 %bn.0, %bb.0
  %cmp1235 = icmp eq i32 %add1234, 2
  br i1 %cmp1235, label %if.then1236, label %if.end1237

if.then1236:                                      ; preds = %lor.lhs.false1233, %land.lhs.true1230
  store i32 0, i32* %score, align 4
  br label %if.end1237

if.end1237:                                       ; preds = %if.then1236, %lor.lhs.false1233, %if.then1227
  br label %if.end1254

if.else1238:                                      ; preds = %land.lhs.true1225, %if.else1223
  %cmp1239 = icmp eq i32 %br.0, 1
  br i1 %cmp1239, label %land.lhs.true1240, label %if.end1253

land.lhs.true1240:                                ; preds = %if.else1238
  %tobool1241 = icmp ne i32 %wr.0, 0
  br i1 %tobool1241, label %if.end1253, label %if.then1242

if.then1242:                                      ; preds = %land.lhs.true1240
  %add1243 = add nsw i32 %bn.0, %bb.0
  %cmp1244 = icmp eq i32 %add1243, 0
  br i1 %cmp1244, label %land.lhs.true1245, label %if.end1252

land.lhs.true1245:                                ; preds = %if.then1242
  %add1246 = add nsw i32 %wn.0, %wb.0
  %cmp1247 = icmp eq i32 %add1246, 1
  br i1 %cmp1247, label %if.then1251, label %lor.lhs.false1248

lor.lhs.false1248:                                ; preds = %land.lhs.true1245
  %add1249 = add nsw i32 %wn.0, %wb.0
  %cmp1250 = icmp eq i32 %add1249, 2
  br i1 %cmp1250, label %if.then1251, label %if.end1252

if.then1251:                                      ; preds = %lor.lhs.false1248, %land.lhs.true1245
  store i32 0, i32* %score, align 4
  br label %if.end1252

if.end1252:                                       ; preds = %if.then1251, %lor.lhs.false1248, %if.then1242
  br label %if.end1253

if.end1253:                                       ; preds = %if.end1252, %land.lhs.true1240, %if.else1238
  br label %if.end1254

if.end1254:                                       ; preds = %if.end1253, %if.end1237
  br label %if.end1255

if.end1255:                                       ; preds = %if.end1254, %if.end1222
  br label %if.end1256

if.end1256:                                       ; preds = %if.end1255, %land.lhs.true1209, %if.else1207
  br label %if.end1257

if.end1257:                                       ; preds = %if.end1256, %if.end1206
  br label %if.end1342

if.else1258:                                      ; preds = %land.lhs.true1156, %if.end1154
  %add1259 = add nsw i32 %wn.0, %wb.0
  %add1260 = add nsw i32 %bn.0, %bb.0
  %cmp1261 = icmp ne i32 %add1259, %add1260
  br i1 %cmp1261, label %if.then1262, label %if.else1322

if.then1262:                                      ; preds = %if.else1258
  %add1263 = add nsw i32 %wq.0, %wr.0
  %add1264 = add nsw i32 %bq.0, %br.0
  %cmp1265 = icmp eq i32 %add1263, %add1264
  br i1 %cmp1265, label %if.then1266, label %if.else1275

if.then1266:                                      ; preds = %if.then1262
  %add1267 = add nsw i32 %wn.0, %wb.0
  %add1268 = add nsw i32 %bn.0, %bb.0
  %cmp1269 = icmp sgt i32 %add1267, %add1268
  br i1 %cmp1269, label %if.then1270, label %if.else1272

if.then1270:                                      ; preds = %if.then1266
  %i331 = load i32, i32* %score, align 4
  %add1271 = add nsw i32 %i331, 120
  store i32 %add1271, i32* %score, align 4
  br label %if.end1274

if.else1272:                                      ; preds = %if.then1266
  %i332 = load i32, i32* %score, align 4
  %sub1273 = sub nsw i32 %i332, 120
  store i32 %sub1273, i32* %score, align 4
  br label %if.end1274

if.end1274:                                       ; preds = %if.else1272, %if.then1270
  br label %if.end1321

if.else1275:                                      ; preds = %if.then1262
  %add1276 = add nsw i32 %wr.0, %wq.0
  %add1277 = add nsw i32 %br.0, %bq.0
  %sub1278 = sub nsw i32 %add1276, %add1277
  %call1279 = call i32 @abs(i32 %sub1278) #10
  %cmp1280 = icmp eq i32 %call1279, 1
  br i1 %cmp1280, label %if.then1281, label %if.else1297

if.then1281:                                      ; preds = %if.else1275
  %add1282 = add nsw i32 %wb.0, %wn.0
  %add1283 = add nsw i32 %bb.0, %bn.0
  %add1284 = add nsw i32 %add1283, 1
  %cmp1285 = icmp sgt i32 %add1282, %add1284
  br i1 %cmp1285, label %if.then1286, label %if.else1288

if.then1286:                                      ; preds = %if.then1281
  %i333 = load i32, i32* %score, align 4
  %add1287 = add nsw i32 %i333, 120
  store i32 %add1287, i32* %score, align 4
  br label %if.end1296

if.else1288:                                      ; preds = %if.then1281
  %add1289 = add nsw i32 %bb.0, %bn.0
  %add1290 = add nsw i32 %wb.0, %wn.0
  %add1291 = add nsw i32 %add1290, 1
  %cmp1292 = icmp sgt i32 %add1289, %add1291
  br i1 %cmp1292, label %if.then1293, label %if.end1295

if.then1293:                                      ; preds = %if.else1288
  %i334 = load i32, i32* %score, align 4
  %sub1294 = sub nsw i32 %i334, 120
  store i32 %sub1294, i32* %score, align 4
  br label %if.end1295

if.end1295:                                       ; preds = %if.then1293, %if.else1288
  br label %if.end1296

if.end1296:                                       ; preds = %if.end1295, %if.then1286
  br label %if.end1320

if.else1297:                                      ; preds = %if.else1275
  %add1298 = add nsw i32 %wr.0, %wq.0
  %add1299 = add nsw i32 %br.0, %bq.0
  %sub1300 = sub nsw i32 %add1298, %add1299
  %call1301 = call i32 @abs(i32 %sub1300) #10
  %cmp1302 = icmp eq i32 %call1301, 2
  br i1 %cmp1302, label %if.then1303, label %if.end1319

if.then1303:                                      ; preds = %if.else1297
  %add1304 = add nsw i32 %wb.0, %wn.0
  %add1305 = add nsw i32 %bb.0, %bn.0
  %add1306 = add nsw i32 %add1305, 2
  %cmp1307 = icmp sgt i32 %add1304, %add1306
  br i1 %cmp1307, label %if.then1308, label %if.else1310

if.then1308:                                      ; preds = %if.then1303
  %i335 = load i32, i32* %score, align 4
  %add1309 = add nsw i32 %i335, 120
  store i32 %add1309, i32* %score, align 4
  br label %if.end1318

if.else1310:                                      ; preds = %if.then1303
  %add1311 = add nsw i32 %bb.0, %bn.0
  %add1312 = add nsw i32 %wb.0, %wn.0
  %add1313 = add nsw i32 %add1312, 2
  %cmp1314 = icmp sgt i32 %add1311, %add1313
  br i1 %cmp1314, label %if.then1315, label %if.end1317

if.then1315:                                      ; preds = %if.else1310
  %i336 = load i32, i32* %score, align 4
  %sub1316 = sub nsw i32 %i336, 120
  store i32 %sub1316, i32* %score, align 4
  br label %if.end1317

if.end1317:                                       ; preds = %if.then1315, %if.else1310
  br label %if.end1318

if.end1318:                                       ; preds = %if.end1317, %if.then1308
  br label %if.end1319

if.end1319:                                       ; preds = %if.end1318, %if.else1297
  br label %if.end1320

if.end1320:                                       ; preds = %if.end1319, %if.end1296
  br label %if.end1321

if.end1321:                                       ; preds = %if.end1320, %if.end1274
  br label %if.end1341

if.else1322:                                      ; preds = %if.else1258
  %add1323 = add nsw i32 %wq.0, %wr.0
  %add1324 = add nsw i32 %bq.0, %br.0
  %cmp1325 = icmp eq i32 %add1323, %add1324
  br i1 %cmp1325, label %if.then1326, label %if.end1340

if.then1326:                                      ; preds = %if.else1322
  %tobool1327 = icmp ne i32 %wq.0, 0
  br i1 %tobool1327, label %land.lhs.true1328, label %if.else1332

land.lhs.true1328:                                ; preds = %if.then1326
  %tobool1329 = icmp ne i32 %bq.0, 0
  br i1 %tobool1329, label %if.else1332, label %if.then1330

if.then1330:                                      ; preds = %land.lhs.true1328
  %i337 = load i32, i32* %score, align 4
  %add1331 = add nsw i32 %i337, 120
  store i32 %add1331, i32* %score, align 4
  br label %if.end1339

if.else1332:                                      ; preds = %land.lhs.true1328, %if.then1326
  %tobool1333 = icmp ne i32 %wq.0, 0
  br i1 %tobool1333, label %if.end1338, label %land.lhs.true1334

land.lhs.true1334:                                ; preds = %if.else1332
  %tobool1335 = icmp ne i32 %bq.0, 0
  br i1 %tobool1335, label %if.then1336, label %if.end1338

if.then1336:                                      ; preds = %land.lhs.true1334
  %i338 = load i32, i32* %score, align 4
  %sub1337 = sub nsw i32 %i338, 120
  store i32 %sub1337, i32* %score, align 4
  br label %if.end1338

if.end1338:                                       ; preds = %if.then1336, %land.lhs.true1334, %if.else1332
  br label %if.end1339

if.end1339:                                       ; preds = %if.end1338, %if.then1330
  br label %if.end1340

if.end1340:                                       ; preds = %if.end1339, %if.else1322
  br label %if.end1341

if.end1341:                                       ; preds = %if.end1340, %if.end1321
  br label %if.end1342

if.end1342:                                       ; preds = %if.end1341, %if.end1257
  %i339 = load i32, i32* %score, align 4
  call void @storeECache(i32 %i339)
  %i340 = load i32, i32* @Material, align 4
  %i341 = load i32, i32* %score, align 4
  %sub1343 = sub nsw i32 %i340, %i341
  %call1344 = call i32 @abs(i32 %sub1343) #10
  %i342 = load i32, i32* @maxposdiff, align 4
  %cmp1345 = icmp sgt i32 %call1344, %i342
  br i1 %cmp1345, label %if.then1346, label %if.end1356

if.then1346:                                      ; preds = %if.end1342
  %i343 = load i32, i32* @Material, align 4
  %i344 = load i32, i32* %score, align 4
  %sub1347 = sub nsw i32 %i343, %i344
  %call1348 = call i32 @abs(i32 %sub1347) #10
  %cmp1349 = icmp slt i32 1000, %call1348
  br i1 %cmp1349, label %cond.true1350, label %cond.false1351

cond.true1350:                                    ; preds = %if.then1346
  br label %cond.end1354

cond.false1351:                                   ; preds = %if.then1346
  %i345 = load i32, i32* @Material, align 4
  %i346 = load i32, i32* %score, align 4
  %sub1352 = sub nsw i32 %i345, %i346
  %call1353 = call i32 @abs(i32 %sub1352) #10
  br label %cond.end1354

cond.end1354:                                     ; preds = %cond.false1351, %cond.true1350
  %cond1355 = phi i32 [ 1000, %cond.true1350 ], [ %call1353, %cond.false1351 ]
  store i32 %cond1355, i32* @maxposdiff, align 4
  br label %if.end1356

if.end1356:                                       ; preds = %cond.end1354, %if.end1342
  %i347 = load i32, i32* @white_to_move, align 4
  %cmp1357 = icmp eq i32 %i347, 1
  br i1 %cmp1357, label %if.then1358, label %if.else1359

if.then1358:                                      ; preds = %if.end1356
  %i348 = load i32, i32* %score, align 4
  br label %return

if.else1359:                                      ; preds = %if.end1356
  %i349 = load i32, i32* %score, align 4
  %sub1360 = sub nsw i32 0, %i349
  br label %return

return:                                           ; preds = %if.else1359, %if.then1358, %if.end29, %if.then28, %cond.end21, %cond.end6
  %retval.0 = phi i32 [ %sub8, %cond.end6 ], [ %add23, %cond.end21 ], [ %i18, %if.then28 ], [ %sub30, %if.end29 ], [ %i348, %if.then1358 ], [ %sub1360, %if.else1359 ]
  ret i32 %retval.0
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @ResetHandValue() #0 {
entry:
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 bitcast ([13 x i32]* @hand_value to i8*), i8* align 16 bitcast ([13 x i32]* @std_hand_value to i8*), i64 52, i1 false)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @BegForPartner() #0 {
entry:
  %i = load i32, i32* @xb_mode, align 4
  %tobool = icmp ne i32 %i, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @GreetPartner() #0 {
entry:
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([69 x i8], [69 x i8]* @.str.27, i64 0, i64 0))
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([76 x i8], [76 x i8]* @.str.1.28, i64 0, i64 0))
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @HandlePartner(i8* %input) #0 {
entry:
  %arrayidx = getelementptr inbounds i8, i8* %input, i64 0
  %i = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %i to i32
  %cmp = icmp eq i32 %conv, 32
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %i1 = load i32, i32* @have_partner, align 4
  %tobool = icmp ne i32 %i1, 0
  br i1 %tobool, label %if.end, label %if.then2

if.then2:                                         ; preds = %if.then
  %add.ptr = getelementptr inbounds i8, i8* %input, i64 1
  %call = call i32 (i8*, i8*, ...) @__isoc99_sscanf(i8* %add.ptr, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.2.29, i64 0, i64 0), i8* getelementptr inbounds ([256 x i8], [256 x i8]* @my_partner, i64 0, i64 0)) #8
  store i32 1, i32* @have_partner, align 4
  call void @GreetPartner()
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.3.30, i64 0, i64 0))
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.4.31, i64 0, i64 0))
  br label %if.end

if.end:                                           ; preds = %if.then2, %if.then
  br label %if.end6

if.else:                                          ; preds = %entry
  call void @llvm.memset.p0i8.i64(i8* align 16 getelementptr inbounds ([256 x i8], [256 x i8]* @my_partner, i64 0, i64 0), i8 0, i64 256, i1 false)
  store i32 0, i32* @have_partner, align 4
  call void @BegForPartner()
  %call5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.5.32, i64 0, i64 0))
  br label %if.end6

if.end6:                                          ; preds = %if.else, %if.end
  ret void
}

; Function Attrs: nounwind
declare dso_local i32 @__isoc99_sscanf(i8*, i8*, ...) #3

; Function Attrs: noinline nounwind uwtable
define dso_local void @HandlePtell(i8* %input) #0 {
entry:
  %howmuch = alloca [80 x i8], align 16
  %i = bitcast [80 x i8]* %howmuch to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %i, i8* align 16 getelementptr inbounds ([80 x i8], [80 x i8]* @__const.HandlePtell.howmuch, i32 0, i32 0), i64 80, i1 false)
  %add.ptr = getelementptr inbounds i8, i8* %input, i64 6
  %call = call i32 @strncmp(i8* %add.ptr, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.6.33, i64 0, i64 0), i64 4) #11
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %call1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([147 x i8], [147 x i8]* @.str.7.34, i64 0, i64 0))
  br label %return

if.end:                                           ; preds = %entry
  %i1 = load i32, i32* @Variant, align 4
  %cmp = icmp ne i32 %i1, 1
  br i1 %cmp, label %land.lhs.true, label %if.end7

land.lhs.true:                                    ; preds = %if.end
  %add.ptr2 = getelementptr inbounds i8, i8* %input, i64 6
  %call3 = call i32 @strncmp(i8* %add.ptr2, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.8.35, i64 0, i64 0), i64 5) #11
  %tobool4 = icmp ne i32 %call3, 0
  br i1 %tobool4, label %if.then5, label %if.end7

if.then5:                                         ; preds = %land.lhs.true
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.9.36, i64 0, i64 0))
  br label %return

if.end7:                                          ; preds = %land.lhs.true, %if.end
  %add.ptr8 = getelementptr inbounds i8, i8* %input, i64 6
  %call9 = call i32 @strncmp(i8* %add.ptr8, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.10.37, i64 0, i64 0), i64 3) #11
  %tobool10 = icmp ne i32 %call9, 0
  br i1 %tobool10, label %if.else, label %if.then11

if.then11:                                        ; preds = %if.end7
  %call12 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.11.38, i64 0, i64 0))
  store i32 1, i32* @must_sit, align 4
  store i32 0, i32* @must_go, align 4
  br label %if.end521

if.else:                                          ; preds = %if.end7
  %add.ptr13 = getelementptr inbounds i8, i8* %input, i64 6
  %call14 = call i32 @strncmp(i8* %add.ptr13, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.12.39, i64 0, i64 0), i64 2) #11
  %tobool15 = icmp ne i32 %call14, 0
  br i1 %tobool15, label %lor.lhs.false, label %if.then19

lor.lhs.false:                                    ; preds = %if.else
  %add.ptr16 = getelementptr inbounds i8, i8* %input, i64 6
  %call17 = call i32 @strncmp(i8* %add.ptr16, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.13.40, i64 0, i64 0), i64 4) #11
  %tobool18 = icmp ne i32 %call17, 0
  br i1 %tobool18, label %if.else21, label %if.then19

if.then19:                                        ; preds = %lor.lhs.false, %if.else
  %call20 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.14.41, i64 0, i64 0))
  store i32 0, i32* @must_sit, align 4
  store i32 4, i32* @must_go, align 4
  br label %if.end520

if.else21:                                        ; preds = %lor.lhs.false
  %add.ptr22 = getelementptr inbounds i8, i8* %input, i64 6
  %call23 = call i32 @strncmp(i8* %add.ptr22, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.15.42, i64 0, i64 0), i64 4) #11
  %tobool24 = icmp ne i32 %call23, 0
  br i1 %tobool24, label %lor.lhs.false25, label %if.then29

lor.lhs.false25:                                  ; preds = %if.else21
  %add.ptr26 = getelementptr inbounds i8, i8* %input, i64 6
  %call27 = call i32 @strncmp(i8* %add.ptr26, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.16.43, i64 0, i64 0), i64 4) #11
  %tobool28 = icmp ne i32 %call27, 0
  br i1 %tobool28, label %if.else31, label %if.then29

if.then29:                                        ; preds = %lor.lhs.false25, %if.else21
  %call30 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.17.44, i64 0, i64 0))
  store i32 1, i32* @go_fast, align 4
  store i32 0, i32* @must_sit, align 4
  br label %if.end519

if.else31:                                        ; preds = %lor.lhs.false25
  %add.ptr32 = getelementptr inbounds i8, i8* %input, i64 6
  %call33 = call i32 @strncmp(i8* %add.ptr32, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.18.45, i64 0, i64 0), i64 4) #11
  %tobool34 = icmp ne i32 %call33, 0
  br i1 %tobool34, label %if.else37, label %if.then35

if.then35:                                        ; preds = %if.else31
  %call36 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.19, i64 0, i64 0))
  store i32 0, i32* @go_fast, align 4
  store i32 0, i32* @must_sit, align 4
  br label %if.end518

if.else37:                                        ; preds = %if.else31
  %add.ptr38 = getelementptr inbounds i8, i8* %input, i64 6
  %call39 = call i32 @strncmp(i8* %add.ptr38, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.20, i64 0, i64 0), i64 5) #11
  %tobool40 = icmp ne i32 %call39, 0
  br i1 %tobool40, label %if.else44, label %if.then41

if.then41:                                        ; preds = %if.else37
  %call42 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.21, i64 0, i64 0))
  %call43 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.22.46, i64 0, i64 0))
  br label %if.end517

if.else44:                                        ; preds = %if.else37
  %add.ptr45 = getelementptr inbounds i8, i8* %input, i64 6
  %call46 = call i32 @strncmp(i8* %add.ptr45, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.23, i64 0, i64 0), i64 4) #11
  %tobool47 = icmp ne i32 %call46, 0
  br i1 %tobool47, label %if.else51, label %if.then48

if.then48:                                        ; preds = %if.else44
  %call49 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.24, i64 0, i64 0))
  %call50 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @.str.25, i64 0, i64 0))
  br label %if.end516

if.else51:                                        ; preds = %if.else44
  %add.ptr52 = getelementptr inbounds i8, i8* %input, i64 6
  %call53 = call i32 @strncmp(i8* %add.ptr52, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.26, i64 0, i64 0), i64 1) #11
  %tobool54 = icmp ne i32 %call53, 0
  br i1 %tobool54, label %if.else243, label %if.then55

if.then55:                                        ; preds = %if.else51
  %add.ptr56 = getelementptr inbounds i8, i8* %input, i64 6
  %call57 = call i8* @strstr(i8* %add.ptr56, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.27.47, i64 0, i64 0)) #11
  %cmp58 = icmp ne i8* %call57, null
  br i1 %cmp58, label %if.then87, label %lor.lhs.false59

lor.lhs.false59:                                  ; preds = %if.then55
  %add.ptr60 = getelementptr inbounds i8, i8* %input, i64 6
  %call61 = call i8* @strstr(i8* %add.ptr60, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.28, i64 0, i64 0)) #11
  %cmp62 = icmp eq i8* %call61, null
  br i1 %cmp62, label %land.lhs.true63, label %if.else101

land.lhs.true63:                                  ; preds = %lor.lhs.false59
  %add.ptr64 = getelementptr inbounds i8, i8* %input, i64 6
  %call65 = call i8* @strstr(i8* %add.ptr64, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.29, i64 0, i64 0)) #11
  %cmp66 = icmp eq i8* %call65, null
  br i1 %cmp66, label %land.lhs.true67, label %if.else101

land.lhs.true67:                                  ; preds = %land.lhs.true63
  %add.ptr68 = getelementptr inbounds i8, i8* %input, i64 6
  %call69 = call i8* @strstr(i8* %add.ptr68, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.30, i64 0, i64 0)) #11
  %cmp70 = icmp eq i8* %call69, null
  br i1 %cmp70, label %land.lhs.true71, label %if.else101

land.lhs.true71:                                  ; preds = %land.lhs.true67
  %add.ptr72 = getelementptr inbounds i8, i8* %input, i64 6
  %call73 = call i8* @strstr(i8* %add.ptr72, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.31, i64 0, i64 0)) #11
  %cmp74 = icmp eq i8* %call73, null
  br i1 %cmp74, label %land.lhs.true75, label %if.else101

land.lhs.true75:                                  ; preds = %land.lhs.true71
  %add.ptr76 = getelementptr inbounds i8, i8* %input, i64 6
  %call77 = call i8* @strstr(i8* %add.ptr76, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.32, i64 0, i64 0)) #11
  %cmp78 = icmp eq i8* %call77, null
  br i1 %cmp78, label %land.lhs.true79, label %if.else101

land.lhs.true79:                                  ; preds = %land.lhs.true75
  %add.ptr80 = getelementptr inbounds i8, i8* %input, i64 6
  %call81 = call i8* @strstr(i8* %add.ptr80, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.33, i64 0, i64 0)) #11
  %cmp82 = icmp eq i8* %call81, null
  br i1 %cmp82, label %land.lhs.true83, label %if.else101

land.lhs.true83:                                  ; preds = %land.lhs.true79
  %add.ptr84 = getelementptr inbounds i8, i8* %input, i64 6
  %call85 = call i8* @strstr(i8* %add.ptr84, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.34, i64 0, i64 0)) #11
  %cmp86 = icmp eq i8* %call85, null
  br i1 %cmp86, label %if.then87, label %if.else101

if.then87:                                        ; preds = %land.lhs.true83, %if.then55
  %i2 = load i32, i32* @comp_color, align 4
  %cmp88 = icmp eq i32 %i2, 1
  br i1 %cmp88, label %if.then89, label %if.else94

if.then89:                                        ; preds = %if.then87
  %i3 = load i32, i32* getelementptr inbounds ([13 x i32], [13 x i32]* @hand_value, i64 0, i64 1), align 4
  %add = add nsw i32 %i3, 25
  store i32 %add, i32* getelementptr inbounds ([13 x i32], [13 x i32]* @hand_value, i64 0, i64 1), align 4
  %i4 = load i32, i32* getelementptr inbounds ([13 x i32], [13 x i32]* @hand_value, i64 0, i64 3), align 4
  %add90 = add nsw i32 %i4, 50
  store i32 %add90, i32* getelementptr inbounds ([13 x i32], [13 x i32]* @hand_value, i64 0, i64 3), align 4
  %i5 = load i32, i32* getelementptr inbounds ([13 x i32], [13 x i32]* @hand_value, i64 0, i64 11), align 4
  %add91 = add nsw i32 %i5, 50
  store i32 %add91, i32* getelementptr inbounds ([13 x i32], [13 x i32]* @hand_value, i64 0, i64 11), align 4
  %i6 = load i32, i32* getelementptr inbounds ([13 x i32], [13 x i32]* @hand_value, i64 0, i64 7), align 4
  %add92 = add nsw i32 %i6, 50
  store i32 %add92, i32* getelementptr inbounds ([13 x i32], [13 x i32]* @hand_value, i64 0, i64 7), align 4
  %i7 = load i32, i32* getelementptr inbounds ([13 x i32], [13 x i32]* @hand_value, i64 0, i64 9), align 4
  %add93 = add nsw i32 %i7, 100
  store i32 %add93, i32* getelementptr inbounds ([13 x i32], [13 x i32]* @hand_value, i64 0, i64 9), align 4
  br label %if.end99

if.else94:                                        ; preds = %if.then87
  %i8 = load i32, i32* getelementptr inbounds ([13 x i32], [13 x i32]* @hand_value, i64 0, i64 2), align 8
  %sub = sub nsw i32 %i8, 25
  store i32 %sub, i32* getelementptr inbounds ([13 x i32], [13 x i32]* @hand_value, i64 0, i64 2), align 8
  %i9 = load i32, i32* getelementptr inbounds ([13 x i32], [13 x i32]* @hand_value, i64 0, i64 4), align 16
  %sub95 = sub nsw i32 %i9, 50
  store i32 %sub95, i32* getelementptr inbounds ([13 x i32], [13 x i32]* @hand_value, i64 0, i64 4), align 16
  %i10 = load i32, i32* getelementptr inbounds ([13 x i32], [13 x i32]* @hand_value, i64 0, i64 12), align 16
  %sub96 = sub nsw i32 %i10, 50
  store i32 %sub96, i32* getelementptr inbounds ([13 x i32], [13 x i32]* @hand_value, i64 0, i64 12), align 16
  %i11 = load i32, i32* getelementptr inbounds ([13 x i32], [13 x i32]* @hand_value, i64 0, i64 8), align 16
  %sub97 = sub nsw i32 %i11, 50
  store i32 %sub97, i32* getelementptr inbounds ([13 x i32], [13 x i32]* @hand_value, i64 0, i64 8), align 16
  %i12 = load i32, i32* getelementptr inbounds ([13 x i32], [13 x i32]* @hand_value, i64 0, i64 10), align 8
  %sub98 = sub nsw i32 %i12, 100
  store i32 %sub98, i32* getelementptr inbounds ([13 x i32], [13 x i32]* @hand_value, i64 0, i64 10), align 8
  br label %if.end99

if.end99:                                         ; preds = %if.else94, %if.then89
  %call100 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.35, i64 0, i64 0))
  br label %if.end125

if.else101:                                       ; preds = %land.lhs.true83, %land.lhs.true79, %land.lhs.true75, %land.lhs.true71, %land.lhs.true67, %land.lhs.true63, %lor.lhs.false59
  %add.ptr102 = getelementptr inbounds i8, i8* %input, i64 6
  %call103 = call i8* @strstr(i8* %add.ptr102, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.36, i64 0, i64 0)) #11
  %cmp104 = icmp ne i8* %call103, null
  br i1 %cmp104, label %if.then105, label %if.else107

if.then105:                                       ; preds = %if.else101
  %arraydecay = getelementptr inbounds [80 x i8], [80 x i8]* %howmuch, i64 0, i64 0
  %call106 = call i8* @strcpy(i8* %arraydecay, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.37, i64 0, i64 0)) #8
  br label %if.end124

if.else107:                                       ; preds = %if.else101
  %add.ptr108 = getelementptr inbounds i8, i8* %input, i64 6
  %call109 = call i8* @strstr(i8* %add.ptr108, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.38, i64 0, i64 0)) #11
  %cmp110 = icmp ne i8* %call109, null
  br i1 %cmp110, label %if.then111, label %if.else114

if.then111:                                       ; preds = %if.else107
  %arraydecay112 = getelementptr inbounds [80 x i8], [80 x i8]* %howmuch, i64 0, i64 0
  %call113 = call i8* @strcpy(i8* %arraydecay112, i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.39, i64 0, i64 0)) #8
  br label %if.end123

if.else114:                                       ; preds = %if.else107
  %add.ptr115 = getelementptr inbounds i8, i8* %input, i64 6
  %call116 = call i8* @strstr(i8* %add.ptr115, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.26, i64 0, i64 0)) #11
  %cmp117 = icmp ne i8* %call116, null
  br i1 %cmp117, label %if.then118, label %if.else121

if.then118:                                       ; preds = %if.else114
  %arraydecay119 = getelementptr inbounds [80 x i8], [80 x i8]* %howmuch, i64 0, i64 0
  %call120 = call i8* @strcpy(i8* %arraydecay119, i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.40, i64 0, i64 0)) #8
  br label %if.end122

if.else121:                                       ; preds = %if.else114
  store i32 0, i32* null, align 4
  br label %if.end122

if.end122:                                        ; preds = %if.else121, %if.then118
  %change.0 = phi i32 [ 150, %if.then118 ], [ 0, %if.else121 ]
  br label %if.end123

if.end123:                                        ; preds = %if.end122, %if.then111
  %change.1 = phi i32 [ 1000, %if.then111 ], [ %change.0, %if.end122 ]
  br label %if.end124

if.end124:                                        ; preds = %if.end123, %if.then105
  %change.2 = phi i32 [ 50000, %if.then105 ], [ %change.1, %if.end123 ]
  br label %if.end125

if.end125:                                        ; preds = %if.end124, %if.end99
  %change.3 = phi i32 [ 0, %if.end99 ], [ %change.2, %if.end124 ]
  %add.ptr126 = getelementptr inbounds i8, i8* %input, i64 6
  %call127 = call i8* @strstr(i8* %add.ptr126, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.28, i64 0, i64 0)) #11
  %cmp128 = icmp ne i8* %call127, null
  br i1 %cmp128, label %if.then129, label %if.end138

if.then129:                                       ; preds = %if.end125
  %i13 = load i32, i32* @comp_color, align 4
  %cmp130 = icmp eq i32 %i13, 1
  br i1 %cmp130, label %if.then131, label %if.else133

if.then131:                                       ; preds = %if.then129
  %i14 = load i32, i32* getelementptr inbounds ([13 x i32], [13 x i32]* @std_hand_value, i64 0, i64 3), align 4
  %add132 = add nsw i32 %i14, %change.3
  store i32 %add132, i32* getelementptr inbounds ([13 x i32], [13 x i32]* @hand_value, i64 0, i64 3), align 4
  br label %if.end135

if.else133:                                       ; preds = %if.then129
  %i15 = load i32, i32* getelementptr inbounds ([13 x i32], [13 x i32]* @std_hand_value, i64 0, i64 4), align 16
  %sub134 = sub nsw i32 %i15, %change.3
  store i32 %sub134, i32* getelementptr inbounds ([13 x i32], [13 x i32]* @hand_value, i64 0, i64 4), align 16
  br label %if.end135

if.end135:                                        ; preds = %if.else133, %if.then131
  %arraydecay136 = getelementptr inbounds [80 x i8], [80 x i8]* %howmuch, i64 0, i64 0
  %call137 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.41, i64 0, i64 0), i8* %arraydecay136)
  br label %if.end138

if.end138:                                        ; preds = %if.end135, %if.end125
  %add.ptr139 = getelementptr inbounds i8, i8* %input, i64 6
  %call140 = call i8* @strstr(i8* %add.ptr139, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.29, i64 0, i64 0)) #11
  %cmp141 = icmp ne i8* %call140, null
  br i1 %cmp141, label %if.then142, label %if.end157

if.then142:                                       ; preds = %if.end138
  %i16 = load i32, i32* @comp_color, align 4
  %cmp143 = icmp eq i32 %i16, 1
  br i1 %cmp143, label %if.then144, label %if.else146

if.then144:                                       ; preds = %if.then142
  %i17 = load i32, i32* getelementptr inbounds ([13 x i32], [13 x i32]* @std_hand_value, i64 0, i64 11), align 4
  %add145 = add nsw i32 %i17, %change.3
  store i32 %add145, i32* getelementptr inbounds ([13 x i32], [13 x i32]* @hand_value, i64 0, i64 11), align 4
  br label %if.end148

if.else146:                                       ; preds = %if.then142
  %i18 = load i32, i32* getelementptr inbounds ([13 x i32], [13 x i32]* @std_hand_value, i64 0, i64 12), align 16
  %sub147 = sub nsw i32 %i18, %change.3
  store i32 %sub147, i32* getelementptr inbounds ([13 x i32], [13 x i32]* @hand_value, i64 0, i64 12), align 16
  br label %if.end148

if.end148:                                        ; preds = %if.else146, %if.then144
  %i19 = load i32, i32* @comp_color, align 4
  %cmp149 = icmp eq i32 %i19, 1
  br i1 %cmp149, label %if.then150, label %if.else152

if.then150:                                       ; preds = %if.end148
  %i20 = load i32, i32* getelementptr inbounds ([13 x i32], [13 x i32]* @std_hand_value, i64 0, i64 9), align 4
  %add151 = add nsw i32 %i20, %change.3
  store i32 %add151, i32* getelementptr inbounds ([13 x i32], [13 x i32]* @hand_value, i64 0, i64 9), align 4
  br label %if.end154

if.else152:                                       ; preds = %if.end148
  %i21 = load i32, i32* getelementptr inbounds ([13 x i32], [13 x i32]* @std_hand_value, i64 0, i64 10), align 8
  %sub153 = sub nsw i32 %i21, %change.3
  store i32 %sub153, i32* getelementptr inbounds ([13 x i32], [13 x i32]* @hand_value, i64 0, i64 10), align 8
  br label %if.end154

if.end154:                                        ; preds = %if.else152, %if.then150
  %arraydecay155 = getelementptr inbounds [80 x i8], [80 x i8]* %howmuch, i64 0, i64 0
  %call156 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.42, i64 0, i64 0), i8* %arraydecay155)
  br label %if.end157

if.end157:                                        ; preds = %if.end154, %if.end138
  %add.ptr158 = getelementptr inbounds i8, i8* %input, i64 6
  %call159 = call i8* @strstr(i8* %add.ptr158, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.31, i64 0, i64 0)) #11
  %cmp160 = icmp ne i8* %call159, null
  br i1 %cmp160, label %if.then161, label %if.end176

if.then161:                                       ; preds = %if.end157
  %i22 = load i32, i32* @comp_color, align 4
  %cmp162 = icmp eq i32 %i22, 1
  br i1 %cmp162, label %if.then163, label %if.else165

if.then163:                                       ; preds = %if.then161
  %i23 = load i32, i32* getelementptr inbounds ([13 x i32], [13 x i32]* @std_hand_value, i64 0, i64 7), align 4
  %add164 = add nsw i32 %i23, %change.3
  store i32 %add164, i32* getelementptr inbounds ([13 x i32], [13 x i32]* @hand_value, i64 0, i64 7), align 4
  br label %if.end167

if.else165:                                       ; preds = %if.then161
  %i24 = load i32, i32* getelementptr inbounds ([13 x i32], [13 x i32]* @std_hand_value, i64 0, i64 8), align 16
  %sub166 = sub nsw i32 %i24, %change.3
  store i32 %sub166, i32* getelementptr inbounds ([13 x i32], [13 x i32]* @hand_value, i64 0, i64 8), align 16
  br label %if.end167

if.end167:                                        ; preds = %if.else165, %if.then163
  %i25 = load i32, i32* @comp_color, align 4
  %cmp168 = icmp eq i32 %i25, 1
  br i1 %cmp168, label %if.then169, label %if.else171

if.then169:                                       ; preds = %if.end167
  %i26 = load i32, i32* getelementptr inbounds ([13 x i32], [13 x i32]* @std_hand_value, i64 0, i64 9), align 4
  %add170 = add nsw i32 %i26, %change.3
  store i32 %add170, i32* getelementptr inbounds ([13 x i32], [13 x i32]* @hand_value, i64 0, i64 9), align 4
  br label %if.end173

if.else171:                                       ; preds = %if.end167
  %i27 = load i32, i32* getelementptr inbounds ([13 x i32], [13 x i32]* @std_hand_value, i64 0, i64 10), align 8
  %sub172 = sub nsw i32 %i27, %change.3
  store i32 %sub172, i32* getelementptr inbounds ([13 x i32], [13 x i32]* @hand_value, i64 0, i64 10), align 8
  br label %if.end173

if.end173:                                        ; preds = %if.else171, %if.then169
  %arraydecay174 = getelementptr inbounds [80 x i8], [80 x i8]* %howmuch, i64 0, i64 0
  %call175 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.43, i64 0, i64 0), i8* %arraydecay174)
  br label %if.end176

if.end176:                                        ; preds = %if.end173, %if.end157
  %add.ptr177 = getelementptr inbounds i8, i8* %input, i64 6
  %call178 = call i8* @strstr(i8* %add.ptr177, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.32, i64 0, i64 0)) #11
  %cmp179 = icmp ne i8* %call178, null
  br i1 %cmp179, label %if.then180, label %if.end189

if.then180:                                       ; preds = %if.end176
  %i28 = load i32, i32* @comp_color, align 4
  %cmp181 = icmp eq i32 %i28, 1
  br i1 %cmp181, label %if.then182, label %if.else184

if.then182:                                       ; preds = %if.then180
  %i29 = load i32, i32* getelementptr inbounds ([13 x i32], [13 x i32]* @std_hand_value, i64 0, i64 9), align 4
  %add183 = add nsw i32 %i29, %change.3
  store i32 %add183, i32* getelementptr inbounds ([13 x i32], [13 x i32]* @hand_value, i64 0, i64 9), align 4
  br label %if.end186

if.else184:                                       ; preds = %if.then180
  %i30 = load i32, i32* getelementptr inbounds ([13 x i32], [13 x i32]* @std_hand_value, i64 0, i64 10), align 8
  %sub185 = sub nsw i32 %i30, %change.3
  store i32 %sub185, i32* getelementptr inbounds ([13 x i32], [13 x i32]* @hand_value, i64 0, i64 10), align 8
  br label %if.end186

if.end186:                                        ; preds = %if.else184, %if.then182
  %arraydecay187 = getelementptr inbounds [80 x i8], [80 x i8]* %howmuch, i64 0, i64 0
  %call188 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.44, i64 0, i64 0), i8* %arraydecay187)
  br label %if.end189

if.end189:                                        ; preds = %if.end186, %if.end176
  %add.ptr190 = getelementptr inbounds i8, i8* %input, i64 6
  %call191 = call i8* @strstr(i8* %add.ptr190, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.30, i64 0, i64 0)) #11
  %cmp192 = icmp ne i8* %call191, null
  br i1 %cmp192, label %if.then193, label %if.end210

if.then193:                                       ; preds = %if.end189
  %i31 = load i32, i32* @comp_color, align 4
  %cmp194 = icmp eq i32 %i31, 1
  br i1 %cmp194, label %if.then195, label %if.else197

if.then195:                                       ; preds = %if.then193
  %i32 = load i32, i32* getelementptr inbounds ([13 x i32], [13 x i32]* @std_hand_value, i64 0, i64 1), align 4
  %add196 = add nsw i32 %i32, %change.3
  store i32 %add196, i32* getelementptr inbounds ([13 x i32], [13 x i32]* @hand_value, i64 0, i64 1), align 4
  br label %if.end199

if.else197:                                       ; preds = %if.then193
  %i33 = load i32, i32* getelementptr inbounds ([13 x i32], [13 x i32]* @std_hand_value, i64 0, i64 2), align 8
  %sub198 = sub nsw i32 %i33, %change.3
  store i32 %sub198, i32* getelementptr inbounds ([13 x i32], [13 x i32]* @hand_value, i64 0, i64 2), align 8
  br label %if.end199

if.end199:                                        ; preds = %if.else197, %if.then195
  %i34 = load i32, i32* @comp_color, align 4
  %cmp200 = icmp eq i32 %i34, 1
  br i1 %cmp200, label %if.then201, label %if.else204

if.then201:                                       ; preds = %if.end199
  %i35 = load i32, i32* getelementptr inbounds ([13 x i32], [13 x i32]* @std_hand_value, i64 0, i64 9), align 4
  %add202 = add nsw i32 %i35, %change.3
  store i32 %add202, i32* getelementptr inbounds ([13 x i32], [13 x i32]* @hand_value, i64 0, i64 9), align 4
  %i36 = load i32, i32* getelementptr inbounds ([13 x i32], [13 x i32]* @std_hand_value, i64 0, i64 11), align 4
  %add203 = add nsw i32 %i36, %change.3
  store i32 %add203, i32* getelementptr inbounds ([13 x i32], [13 x i32]* @hand_value, i64 0, i64 11), align 4
  br label %if.end207

if.else204:                                       ; preds = %if.end199
  %i37 = load i32, i32* getelementptr inbounds ([13 x i32], [13 x i32]* @std_hand_value, i64 0, i64 10), align 8
  %sub205 = sub nsw i32 %i37, %change.3
  store i32 %sub205, i32* getelementptr inbounds ([13 x i32], [13 x i32]* @hand_value, i64 0, i64 10), align 8
  %i38 = load i32, i32* getelementptr inbounds ([13 x i32], [13 x i32]* @std_hand_value, i64 0, i64 12), align 16
  %sub206 = sub nsw i32 %i38, %change.3
  store i32 %sub206, i32* getelementptr inbounds ([13 x i32], [13 x i32]* @hand_value, i64 0, i64 12), align 16
  br label %if.end207

if.end207:                                        ; preds = %if.else204, %if.then201
  %arraydecay208 = getelementptr inbounds [80 x i8], [80 x i8]* %howmuch, i64 0, i64 0
  %call209 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.45, i64 0, i64 0), i8* %arraydecay208)
  br label %if.end210

if.end210:                                        ; preds = %if.end207, %if.end189
  %add.ptr211 = getelementptr inbounds i8, i8* %input, i64 6
  %call212 = call i8* @strstr(i8* %add.ptr211, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.33, i64 0, i64 0)) #11
  %cmp213 = icmp ne i8* %call212, null
  br i1 %cmp213, label %if.then214, label %if.end227

if.then214:                                       ; preds = %if.end210
  %i39 = load i32, i32* @comp_color, align 4
  %cmp215 = icmp eq i32 %i39, 1
  br i1 %cmp215, label %if.then216, label %if.else220

if.then216:                                       ; preds = %if.then214
  %i40 = load i32, i32* getelementptr inbounds ([13 x i32], [13 x i32]* @std_hand_value, i64 0, i64 1), align 4
  %add217 = add nsw i32 %i40, %change.3
  store i32 %add217, i32* getelementptr inbounds ([13 x i32], [13 x i32]* @hand_value, i64 0, i64 1), align 4
  %i41 = load i32, i32* getelementptr inbounds ([13 x i32], [13 x i32]* @std_hand_value, i64 0, i64 11), align 4
  %add218 = add nsw i32 %i41, %change.3
  store i32 %add218, i32* getelementptr inbounds ([13 x i32], [13 x i32]* @hand_value, i64 0, i64 11), align 4
  %i42 = load i32, i32* getelementptr inbounds ([13 x i32], [13 x i32]* @std_hand_value, i64 0, i64 9), align 4
  %add219 = add nsw i32 %i42, %change.3
  store i32 %add219, i32* getelementptr inbounds ([13 x i32], [13 x i32]* @hand_value, i64 0, i64 9), align 4
  br label %if.end224

if.else220:                                       ; preds = %if.then214
  %i43 = load i32, i32* getelementptr inbounds ([13 x i32], [13 x i32]* @std_hand_value, i64 0, i64 2), align 8
  %sub221 = sub nsw i32 %i43, %change.3
  store i32 %sub221, i32* getelementptr inbounds ([13 x i32], [13 x i32]* @hand_value, i64 0, i64 2), align 8
  %i44 = load i32, i32* getelementptr inbounds ([13 x i32], [13 x i32]* @std_hand_value, i64 0, i64 12), align 16
  %sub222 = sub nsw i32 %i44, %change.3
  store i32 %sub222, i32* getelementptr inbounds ([13 x i32], [13 x i32]* @hand_value, i64 0, i64 12), align 16
  %i45 = load i32, i32* getelementptr inbounds ([13 x i32], [13 x i32]* @std_hand_value, i64 0, i64 10), align 8
  %sub223 = sub nsw i32 %i45, %change.3
  store i32 %sub223, i32* getelementptr inbounds ([13 x i32], [13 x i32]* @hand_value, i64 0, i64 10), align 8
  br label %if.end224

if.end224:                                        ; preds = %if.else220, %if.then216
  %arraydecay225 = getelementptr inbounds [80 x i8], [80 x i8]* %howmuch, i64 0, i64 0
  %call226 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.46, i64 0, i64 0), i8* %arraydecay225)
  br label %if.end227

if.end227:                                        ; preds = %if.end224, %if.end210
  %add.ptr228 = getelementptr inbounds i8, i8* %input, i64 6
  %call229 = call i8* @strstr(i8* %add.ptr228, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.34, i64 0, i64 0)) #11
  %cmp230 = icmp ne i8* %call229, null
  br i1 %cmp230, label %if.then231, label %if.end242

if.then231:                                       ; preds = %if.end227
  %i46 = load i32, i32* @comp_color, align 4
  %cmp232 = icmp eq i32 %i46, 1
  br i1 %cmp232, label %if.then233, label %if.else236

if.then233:                                       ; preds = %if.then231
  %i47 = load i32, i32* getelementptr inbounds ([13 x i32], [13 x i32]* @std_hand_value, i64 0, i64 7), align 4
  %add234 = add nsw i32 %i47, %change.3
  store i32 %add234, i32* getelementptr inbounds ([13 x i32], [13 x i32]* @hand_value, i64 0, i64 7), align 4
  %i48 = load i32, i32* getelementptr inbounds ([13 x i32], [13 x i32]* @std_hand_value, i64 0, i64 9), align 4
  %add235 = add nsw i32 %i48, %change.3
  store i32 %add235, i32* getelementptr inbounds ([13 x i32], [13 x i32]* @hand_value, i64 0, i64 9), align 4
  br label %if.end239

if.else236:                                       ; preds = %if.then231
  %i49 = load i32, i32* getelementptr inbounds ([13 x i32], [13 x i32]* @std_hand_value, i64 0, i64 8), align 16
  %sub237 = sub nsw i32 %i49, %change.3
  store i32 %sub237, i32* getelementptr inbounds ([13 x i32], [13 x i32]* @hand_value, i64 0, i64 8), align 16
  %i50 = load i32, i32* getelementptr inbounds ([13 x i32], [13 x i32]* @std_hand_value, i64 0, i64 10), align 8
  %sub238 = sub nsw i32 %i50, %change.3
  store i32 %sub238, i32* getelementptr inbounds ([13 x i32], [13 x i32]* @hand_value, i64 0, i64 10), align 8
  br label %if.end239

if.end239:                                        ; preds = %if.else236, %if.then233
  %arraydecay240 = getelementptr inbounds [80 x i8], [80 x i8]* %howmuch, i64 0, i64 0
  %call241 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.47, i64 0, i64 0), i8* %arraydecay240)
  br label %if.end242

if.end242:                                        ; preds = %if.end239, %if.end227
  br label %if.end515

if.else243:                                       ; preds = %if.else51
  %add.ptr244 = getelementptr inbounds i8, i8* %input, i64 6
  %call245 = call i32 @strncmp(i8* %add.ptr244, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.48, i64 0, i64 0), i64 1) #11
  %tobool246 = icmp ne i32 %call245, 0
  br i1 %tobool246, label %if.else438, label %if.then247

if.then247:                                       ; preds = %if.else243
  %add.ptr248 = getelementptr inbounds i8, i8* %input, i64 6
  %call249 = call i8* @strstr(i8* %add.ptr248, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.27.47, i64 0, i64 0)) #11
  %cmp250 = icmp ne i8* %call249, null
  br i1 %cmp250, label %if.then279, label %lor.lhs.false251

lor.lhs.false251:                                 ; preds = %if.then247
  %add.ptr252 = getelementptr inbounds i8, i8* %input, i64 6
  %call253 = call i8* @strstr(i8* %add.ptr252, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.28, i64 0, i64 0)) #11
  %cmp254 = icmp eq i8* %call253, null
  br i1 %cmp254, label %land.lhs.true255, label %if.else295

land.lhs.true255:                                 ; preds = %lor.lhs.false251
  %add.ptr256 = getelementptr inbounds i8, i8* %input, i64 6
  %call257 = call i8* @strstr(i8* %add.ptr256, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.29, i64 0, i64 0)) #11
  %cmp258 = icmp eq i8* %call257, null
  br i1 %cmp258, label %land.lhs.true259, label %if.else295

land.lhs.true259:                                 ; preds = %land.lhs.true255
  %add.ptr260 = getelementptr inbounds i8, i8* %input, i64 6
  %call261 = call i8* @strstr(i8* %add.ptr260, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.30, i64 0, i64 0)) #11
  %cmp262 = icmp eq i8* %call261, null
  br i1 %cmp262, label %land.lhs.true263, label %if.else295

land.lhs.true263:                                 ; preds = %land.lhs.true259
  %add.ptr264 = getelementptr inbounds i8, i8* %input, i64 6
  %call265 = call i8* @strstr(i8* %add.ptr264, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.31, i64 0, i64 0)) #11
  %cmp266 = icmp eq i8* %call265, null
  br i1 %cmp266, label %land.lhs.true267, label %if.else295

land.lhs.true267:                                 ; preds = %land.lhs.true263
  %add.ptr268 = getelementptr inbounds i8, i8* %input, i64 6
  %call269 = call i8* @strstr(i8* %add.ptr268, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.32, i64 0, i64 0)) #11
  %cmp270 = icmp eq i8* %call269, null
  br i1 %cmp270, label %land.lhs.true271, label %if.else295

land.lhs.true271:                                 ; preds = %land.lhs.true267
  %add.ptr272 = getelementptr inbounds i8, i8* %input, i64 6
  %call273 = call i8* @strstr(i8* %add.ptr272, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.33, i64 0, i64 0)) #11
  %cmp274 = icmp eq i8* %call273, null
  br i1 %cmp274, label %land.lhs.true275, label %if.else295

land.lhs.true275:                                 ; preds = %land.lhs.true271
  %add.ptr276 = getelementptr inbounds i8, i8* %input, i64 6
  %call277 = call i8* @strstr(i8* %add.ptr276, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.34, i64 0, i64 0)) #11
  %cmp278 = icmp eq i8* %call277, null
  br i1 %cmp278, label %if.then279, label %if.else295

if.then279:                                       ; preds = %land.lhs.true275, %if.then247
  %i51 = load i32, i32* @comp_color, align 4
  %cmp280 = icmp eq i32 %i51, 1
  br i1 %cmp280, label %if.then281, label %if.else287

if.then281:                                       ; preds = %if.then279
  %i52 = load i32, i32* getelementptr inbounds ([13 x i32], [13 x i32]* @hand_value, i64 0, i64 2), align 8
  %sub282 = sub nsw i32 %i52, 20
  store i32 %sub282, i32* getelementptr inbounds ([13 x i32], [13 x i32]* @hand_value, i64 0, i64 2), align 8
  %i53 = load i32, i32* getelementptr inbounds ([13 x i32], [13 x i32]* @hand_value, i64 0, i64 4), align 16
  %sub283 = sub nsw i32 %i53, 50
  store i32 %sub283, i32* getelementptr inbounds ([13 x i32], [13 x i32]* @hand_value, i64 0, i64 4), align 16
  %i54 = load i32, i32* getelementptr inbounds ([13 x i32], [13 x i32]* @hand_value, i64 0, i64 12), align 16
  %sub284 = sub nsw i32 %i54, 50
  store i32 %sub284, i32* getelementptr inbounds ([13 x i32], [13 x i32]* @hand_value, i64 0, i64 12), align 16
  %i55 = load i32, i32* getelementptr inbounds ([13 x i32], [13 x i32]* @hand_value, i64 0, i64 8), align 16
  %sub285 = sub nsw i32 %i55, 50
  store i32 %sub285, i32* getelementptr inbounds ([13 x i32], [13 x i32]* @hand_value, i64 0, i64 8), align 16
  %i56 = load i32, i32* getelementptr inbounds ([13 x i32], [13 x i32]* @hand_value, i64 0, i64 10), align 8
  %sub286 = sub nsw i32 %i56, 100
  store i32 %sub286, i32* getelementptr inbounds ([13 x i32], [13 x i32]* @hand_value, i64 0, i64 10), align 8
  br label %if.end293

if.else287:                                       ; preds = %if.then279
  %i57 = load i32, i32* getelementptr inbounds ([13 x i32], [13 x i32]* @hand_value, i64 0, i64 1), align 4
  %add288 = add nsw i32 %i57, 20
  store i32 %add288, i32* getelementptr inbounds ([13 x i32], [13 x i32]* @hand_value, i64 0, i64 1), align 4
  %i58 = load i32, i32* getelementptr inbounds ([13 x i32], [13 x i32]* @hand_value, i64 0, i64 3), align 4
  %add289 = add nsw i32 %i58, 50
  store i32 %add289, i32* getelementptr inbounds ([13 x i32], [13 x i32]* @hand_value, i64 0, i64 3), align 4
  %i59 = load i32, i32* getelementptr inbounds ([13 x i32], [13 x i32]* @hand_value, i64 0, i64 11), align 4
  %add290 = add nsw i32 %i59, 50
  store i32 %add290, i32* getelementptr inbounds ([13 x i32], [13 x i32]* @hand_value, i64 0, i64 11), align 4
  %i60 = load i32, i32* getelementptr inbounds ([13 x i32], [13 x i32]* @hand_value, i64 0, i64 7), align 4
  %add291 = add nsw i32 %i60, 50
  store i32 %add291, i32* getelementptr inbounds ([13 x i32], [13 x i32]* @hand_value, i64 0, i64 7), align 4
  %i61 = load i32, i32* getelementptr inbounds ([13 x i32], [13 x i32]* @hand_value, i64 0, i64 9), align 4
  %add292 = add nsw i32 %i61, 100
  store i32 %add292, i32* getelementptr inbounds ([13 x i32], [13 x i32]* @hand_value, i64 0, i64 9), align 4
  br label %if.end293

if.end293:                                        ; preds = %if.else287, %if.then281
  %call294 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.49, i64 0, i64 0))
  br label %if.end320

if.else295:                                       ; preds = %land.lhs.true275, %land.lhs.true271, %land.lhs.true267, %land.lhs.true263, %land.lhs.true259, %land.lhs.true255, %lor.lhs.false251
  %add.ptr296 = getelementptr inbounds i8, i8* %input, i64 6
  %call297 = call i8* @strstr(i8* %add.ptr296, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.50, i64 0, i64 0)) #11
  %cmp298 = icmp ne i8* %call297, null
  br i1 %cmp298, label %if.then299, label %if.else302

if.then299:                                       ; preds = %if.else295
  %arraydecay300 = getelementptr inbounds [80 x i8], [80 x i8]* %howmuch, i64 0, i64 0
  %call301 = call i8* @strcpy(i8* %arraydecay300, i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.51, i64 0, i64 0)) #8
  br label %if.end319

if.else302:                                       ; preds = %if.else295
  %add.ptr303 = getelementptr inbounds i8, i8* %input, i64 6
  %call304 = call i8* @strstr(i8* %add.ptr303, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.52, i64 0, i64 0)) #11
  %cmp305 = icmp ne i8* %call304, null
  br i1 %cmp305, label %if.then306, label %if.else309

if.then306:                                       ; preds = %if.else302
  %arraydecay307 = getelementptr inbounds [80 x i8], [80 x i8]* %howmuch, i64 0, i64 0
  %call308 = call i8* @strcpy(i8* %arraydecay307, i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.53, i64 0, i64 0)) #8
  br label %if.end318

if.else309:                                       ; preds = %if.else302
  %add.ptr310 = getelementptr inbounds i8, i8* %input, i64 6
  %call311 = call i8* @strstr(i8* %add.ptr310, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.48, i64 0, i64 0)) #11
  %cmp312 = icmp ne i8* %call311, null
  br i1 %cmp312, label %if.then313, label %if.else316

if.then313:                                       ; preds = %if.else309
  %arraydecay314 = getelementptr inbounds [80 x i8], [80 x i8]* %howmuch, i64 0, i64 0
  %call315 = call i8* @strcpy(i8* %arraydecay314, i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.54, i64 0, i64 0)) #8
  br label %if.end317

if.else316:                                       ; preds = %if.else309
  store i32 0, i32* null, align 4
  br label %if.end317

if.end317:                                        ; preds = %if.else316, %if.then313
  %change.4 = phi i32 [ 150, %if.then313 ], [ 0, %if.else316 ]
  br label %if.end318

if.end318:                                        ; preds = %if.end317, %if.then306
  %change.5 = phi i32 [ 1000, %if.then306 ], [ %change.4, %if.end317 ]
  br label %if.end319

if.end319:                                        ; preds = %if.end318, %if.then299
  %change.6 = phi i32 [ 50000, %if.then299 ], [ %change.5, %if.end318 ]
  br label %if.end320

if.end320:                                        ; preds = %if.end319, %if.end293
  %change.7 = phi i32 [ 0, %if.end293 ], [ %change.6, %if.end319 ]
  %add.ptr321 = getelementptr inbounds i8, i8* %input, i64 6
  %call322 = call i8* @strstr(i8* %add.ptr321, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.28, i64 0, i64 0)) #11
  %cmp323 = icmp ne i8* %call322, null
  br i1 %cmp323, label %if.then324, label %if.end333

if.then324:                                       ; preds = %if.end320
  %i62 = load i32, i32* @comp_color, align 4
  %cmp325 = icmp eq i32 %i62, 1
  br i1 %cmp325, label %if.then326, label %if.else328

if.then326:                                       ; preds = %if.then324
  %i63 = load i32, i32* getelementptr inbounds ([13 x i32], [13 x i32]* @std_hand_value, i64 0, i64 4), align 16
  %sub327 = sub nsw i32 %i63, %change.7
  store i32 %sub327, i32* getelementptr inbounds ([13 x i32], [13 x i32]* @hand_value, i64 0, i64 4), align 16
  br label %if.end330

if.else328:                                       ; preds = %if.then324
  %i64 = load i32, i32* getelementptr inbounds ([13 x i32], [13 x i32]* @std_hand_value, i64 0, i64 3), align 4
  %add329 = add nsw i32 %i64, %change.7
  store i32 %add329, i32* getelementptr inbounds ([13 x i32], [13 x i32]* @hand_value, i64 0, i64 3), align 4
  br label %if.end330

if.end330:                                        ; preds = %if.else328, %if.then326
  %arraydecay331 = getelementptr inbounds [80 x i8], [80 x i8]* %howmuch, i64 0, i64 0
  %call332 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.41, i64 0, i64 0), i8* %arraydecay331)
  br label %if.end333

if.end333:                                        ; preds = %if.end330, %if.end320
  %add.ptr334 = getelementptr inbounds i8, i8* %input, i64 6
  %call335 = call i8* @strstr(i8* %add.ptr334, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.29, i64 0, i64 0)) #11
  %cmp336 = icmp ne i8* %call335, null
  br i1 %cmp336, label %if.then337, label %if.end352

if.then337:                                       ; preds = %if.end333
  %i65 = load i32, i32* @comp_color, align 4
  %cmp338 = icmp eq i32 %i65, 1
  br i1 %cmp338, label %if.then339, label %if.else341

if.then339:                                       ; preds = %if.then337
  %i66 = load i32, i32* getelementptr inbounds ([13 x i32], [13 x i32]* @std_hand_value, i64 0, i64 12), align 16
  %sub340 = sub nsw i32 %i66, %change.7
  store i32 %sub340, i32* getelementptr inbounds ([13 x i32], [13 x i32]* @hand_value, i64 0, i64 12), align 16
  br label %if.end343

if.else341:                                       ; preds = %if.then337
  %i67 = load i32, i32* getelementptr inbounds ([13 x i32], [13 x i32]* @std_hand_value, i64 0, i64 11), align 4
  %add342 = add nsw i32 %i67, %change.7
  store i32 %add342, i32* getelementptr inbounds ([13 x i32], [13 x i32]* @hand_value, i64 0, i64 11), align 4
  br label %if.end343

if.end343:                                        ; preds = %if.else341, %if.then339
  %i68 = load i32, i32* @comp_color, align 4
  %cmp344 = icmp eq i32 %i68, 1
  br i1 %cmp344, label %if.then345, label %if.else347

if.then345:                                       ; preds = %if.end343
  %i69 = load i32, i32* getelementptr inbounds ([13 x i32], [13 x i32]* @std_hand_value, i64 0, i64 10), align 8
  %sub346 = sub nsw i32 %i69, %change.7
  store i32 %sub346, i32* getelementptr inbounds ([13 x i32], [13 x i32]* @hand_value, i64 0, i64 10), align 8
  br label %if.end349

if.else347:                                       ; preds = %if.end343
  %i70 = load i32, i32* getelementptr inbounds ([13 x i32], [13 x i32]* @std_hand_value, i64 0, i64 9), align 4
  %add348 = add nsw i32 %i70, %change.7
  store i32 %add348, i32* getelementptr inbounds ([13 x i32], [13 x i32]* @hand_value, i64 0, i64 9), align 4
  br label %if.end349

if.end349:                                        ; preds = %if.else347, %if.then345
  %arraydecay350 = getelementptr inbounds [80 x i8], [80 x i8]* %howmuch, i64 0, i64 0
  %call351 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.42, i64 0, i64 0), i8* %arraydecay350)
  br label %if.end352

if.end352:                                        ; preds = %if.end349, %if.end333
  %add.ptr353 = getelementptr inbounds i8, i8* %input, i64 6
  %call354 = call i8* @strstr(i8* %add.ptr353, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.31, i64 0, i64 0)) #11
  %cmp355 = icmp ne i8* %call354, null
  br i1 %cmp355, label %if.then356, label %if.end371

if.then356:                                       ; preds = %if.end352
  %i71 = load i32, i32* @comp_color, align 4
  %cmp357 = icmp eq i32 %i71, 1
  br i1 %cmp357, label %if.then358, label %if.else360

if.then358:                                       ; preds = %if.then356
  %i72 = load i32, i32* getelementptr inbounds ([13 x i32], [13 x i32]* @std_hand_value, i64 0, i64 8), align 16
  %sub359 = sub nsw i32 %i72, %change.7
  store i32 %sub359, i32* getelementptr inbounds ([13 x i32], [13 x i32]* @hand_value, i64 0, i64 8), align 16
  br label %if.end362

if.else360:                                       ; preds = %if.then356
  %i73 = load i32, i32* getelementptr inbounds ([13 x i32], [13 x i32]* @std_hand_value, i64 0, i64 7), align 4
  %add361 = add nsw i32 %i73, %change.7
  store i32 %add361, i32* getelementptr inbounds ([13 x i32], [13 x i32]* @hand_value, i64 0, i64 7), align 4
  br label %if.end362

if.end362:                                        ; preds = %if.else360, %if.then358
  %i74 = load i32, i32* @comp_color, align 4
  %cmp363 = icmp eq i32 %i74, 1
  br i1 %cmp363, label %if.then364, label %if.else366

if.then364:                                       ; preds = %if.end362
  %i75 = load i32, i32* getelementptr inbounds ([13 x i32], [13 x i32]* @std_hand_value, i64 0, i64 10), align 8
  %sub365 = sub nsw i32 %i75, %change.7
  store i32 %sub365, i32* getelementptr inbounds ([13 x i32], [13 x i32]* @hand_value, i64 0, i64 10), align 8
  br label %if.end368

if.else366:                                       ; preds = %if.end362
  %i76 = load i32, i32* getelementptr inbounds ([13 x i32], [13 x i32]* @std_hand_value, i64 0, i64 9), align 4
  %add367 = add nsw i32 %i76, %change.7
  store i32 %add367, i32* getelementptr inbounds ([13 x i32], [13 x i32]* @hand_value, i64 0, i64 9), align 4
  br label %if.end368

if.end368:                                        ; preds = %if.else366, %if.then364
  %arraydecay369 = getelementptr inbounds [80 x i8], [80 x i8]* %howmuch, i64 0, i64 0
  %call370 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.43, i64 0, i64 0), i8* %arraydecay369)
  br label %if.end371

if.end371:                                        ; preds = %if.end368, %if.end352
  %add.ptr372 = getelementptr inbounds i8, i8* %input, i64 6
  %call373 = call i8* @strstr(i8* %add.ptr372, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.32, i64 0, i64 0)) #11
  %cmp374 = icmp ne i8* %call373, null
  br i1 %cmp374, label %if.then375, label %if.end384

if.then375:                                       ; preds = %if.end371
  %i77 = load i32, i32* @comp_color, align 4
  %cmp376 = icmp eq i32 %i77, 1
  br i1 %cmp376, label %if.then377, label %if.else379

if.then377:                                       ; preds = %if.then375
  %i78 = load i32, i32* getelementptr inbounds ([13 x i32], [13 x i32]* @std_hand_value, i64 0, i64 10), align 8
  %sub378 = sub nsw i32 %i78, %change.7
  store i32 %sub378, i32* getelementptr inbounds ([13 x i32], [13 x i32]* @hand_value, i64 0, i64 10), align 8
  br label %if.end381

if.else379:                                       ; preds = %if.then375
  %i79 = load i32, i32* getelementptr inbounds ([13 x i32], [13 x i32]* @std_hand_value, i64 0, i64 9), align 4
  %add380 = add nsw i32 %i79, %change.7
  store i32 %add380, i32* getelementptr inbounds ([13 x i32], [13 x i32]* @hand_value, i64 0, i64 9), align 4
  br label %if.end381

if.end381:                                        ; preds = %if.else379, %if.then377
  %arraydecay382 = getelementptr inbounds [80 x i8], [80 x i8]* %howmuch, i64 0, i64 0
  %call383 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.44, i64 0, i64 0), i8* %arraydecay382)
  br label %if.end384

if.end384:                                        ; preds = %if.end381, %if.end371
  %add.ptr385 = getelementptr inbounds i8, i8* %input, i64 6
  %call386 = call i8* @strstr(i8* %add.ptr385, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.30, i64 0, i64 0)) #11
  %cmp387 = icmp ne i8* %call386, null
  br i1 %cmp387, label %if.then388, label %if.end405

if.then388:                                       ; preds = %if.end384
  %i80 = load i32, i32* @comp_color, align 4
  %cmp389 = icmp eq i32 %i80, 1
  br i1 %cmp389, label %if.then390, label %if.else392

if.then390:                                       ; preds = %if.then388
  %i81 = load i32, i32* getelementptr inbounds ([13 x i32], [13 x i32]* @std_hand_value, i64 0, i64 2), align 8
  %sub391 = sub nsw i32 %i81, %change.7
  store i32 %sub391, i32* getelementptr inbounds ([13 x i32], [13 x i32]* @hand_value, i64 0, i64 2), align 8
  br label %if.end394

if.else392:                                       ; preds = %if.then388
  %i82 = load i32, i32* getelementptr inbounds ([13 x i32], [13 x i32]* @std_hand_value, i64 0, i64 1), align 4
  %add393 = add nsw i32 %i82, %change.7
  store i32 %add393, i32* getelementptr inbounds ([13 x i32], [13 x i32]* @hand_value, i64 0, i64 1), align 4
  br label %if.end394

if.end394:                                        ; preds = %if.else392, %if.then390
  %i83 = load i32, i32* @comp_color, align 4
  %cmp395 = icmp eq i32 %i83, 1
  br i1 %cmp395, label %if.then396, label %if.else399

if.then396:                                       ; preds = %if.end394
  %i84 = load i32, i32* getelementptr inbounds ([13 x i32], [13 x i32]* @std_hand_value, i64 0, i64 10), align 8
  %sub397 = sub nsw i32 %i84, %change.7
  store i32 %sub397, i32* getelementptr inbounds ([13 x i32], [13 x i32]* @hand_value, i64 0, i64 10), align 8
  %i85 = load i32, i32* getelementptr inbounds ([13 x i32], [13 x i32]* @std_hand_value, i64 0, i64 12), align 16
  %sub398 = sub nsw i32 %i85, %change.7
  store i32 %sub398, i32* getelementptr inbounds ([13 x i32], [13 x i32]* @hand_value, i64 0, i64 12), align 16
  br label %if.end402

if.else399:                                       ; preds = %if.end394
  %i86 = load i32, i32* getelementptr inbounds ([13 x i32], [13 x i32]* @std_hand_value, i64 0, i64 9), align 4
  %add400 = add nsw i32 %i86, %change.7
  store i32 %add400, i32* getelementptr inbounds ([13 x i32], [13 x i32]* @hand_value, i64 0, i64 9), align 4
  %i87 = load i32, i32* getelementptr inbounds ([13 x i32], [13 x i32]* @std_hand_value, i64 0, i64 11), align 4
  %add401 = add nsw i32 %i87, %change.7
  store i32 %add401, i32* getelementptr inbounds ([13 x i32], [13 x i32]* @hand_value, i64 0, i64 11), align 4
  br label %if.end402

if.end402:                                        ; preds = %if.else399, %if.then396
  %arraydecay403 = getelementptr inbounds [80 x i8], [80 x i8]* %howmuch, i64 0, i64 0
  %call404 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.45, i64 0, i64 0), i8* %arraydecay403)
  br label %if.end405

if.end405:                                        ; preds = %if.end402, %if.end384
  %add.ptr406 = getelementptr inbounds i8, i8* %input, i64 6
  %call407 = call i8* @strstr(i8* %add.ptr406, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.33, i64 0, i64 0)) #11
  %cmp408 = icmp ne i8* %call407, null
  br i1 %cmp408, label %if.then409, label %if.end422

if.then409:                                       ; preds = %if.end405
  %i88 = load i32, i32* @comp_color, align 4
  %cmp410 = icmp eq i32 %i88, 1
  br i1 %cmp410, label %if.then411, label %if.else415

if.then411:                                       ; preds = %if.then409
  %i89 = load i32, i32* getelementptr inbounds ([13 x i32], [13 x i32]* @std_hand_value, i64 0, i64 2), align 8
  %sub412 = sub nsw i32 %i89, %change.7
  store i32 %sub412, i32* getelementptr inbounds ([13 x i32], [13 x i32]* @hand_value, i64 0, i64 2), align 8
  %i90 = load i32, i32* getelementptr inbounds ([13 x i32], [13 x i32]* @std_hand_value, i64 0, i64 12), align 16
  %sub413 = sub nsw i32 %i90, %change.7
  store i32 %sub413, i32* getelementptr inbounds ([13 x i32], [13 x i32]* @hand_value, i64 0, i64 12), align 16
  %i91 = load i32, i32* getelementptr inbounds ([13 x i32], [13 x i32]* @std_hand_value, i64 0, i64 10), align 8
  %sub414 = sub nsw i32 %i91, %change.7
  store i32 %sub414, i32* getelementptr inbounds ([13 x i32], [13 x i32]* @hand_value, i64 0, i64 10), align 8
  br label %if.end419

if.else415:                                       ; preds = %if.then409
  %i92 = load i32, i32* getelementptr inbounds ([13 x i32], [13 x i32]* @std_hand_value, i64 0, i64 1), align 4
  %add416 = add nsw i32 %i92, %change.7
  store i32 %add416, i32* getelementptr inbounds ([13 x i32], [13 x i32]* @hand_value, i64 0, i64 1), align 4
  %i93 = load i32, i32* getelementptr inbounds ([13 x i32], [13 x i32]* @std_hand_value, i64 0, i64 11), align 4
  %add417 = add nsw i32 %i93, %change.7
  store i32 %add417, i32* getelementptr inbounds ([13 x i32], [13 x i32]* @hand_value, i64 0, i64 11), align 4
  %i94 = load i32, i32* getelementptr inbounds ([13 x i32], [13 x i32]* @std_hand_value, i64 0, i64 9), align 4
  %add418 = add nsw i32 %i94, %change.7
  store i32 %add418, i32* getelementptr inbounds ([13 x i32], [13 x i32]* @hand_value, i64 0, i64 9), align 4
  br label %if.end419

if.end419:                                        ; preds = %if.else415, %if.then411
  %arraydecay420 = getelementptr inbounds [80 x i8], [80 x i8]* %howmuch, i64 0, i64 0
  %call421 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.46, i64 0, i64 0), i8* %arraydecay420)
  br label %if.end422

if.end422:                                        ; preds = %if.end419, %if.end405
  %add.ptr423 = getelementptr inbounds i8, i8* %input, i64 6
  %call424 = call i8* @strstr(i8* %add.ptr423, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.34, i64 0, i64 0)) #11
  %cmp425 = icmp ne i8* %call424, null
  br i1 %cmp425, label %if.then426, label %if.end437

if.then426:                                       ; preds = %if.end422
  %i95 = load i32, i32* @comp_color, align 4
  %cmp427 = icmp eq i32 %i95, 1
  br i1 %cmp427, label %if.then428, label %if.else431

if.then428:                                       ; preds = %if.then426
  %i96 = load i32, i32* getelementptr inbounds ([13 x i32], [13 x i32]* @std_hand_value, i64 0, i64 8), align 16
  %sub429 = sub nsw i32 %i96, %change.7
  store i32 %sub429, i32* getelementptr inbounds ([13 x i32], [13 x i32]* @hand_value, i64 0, i64 8), align 16
  %i97 = load i32, i32* getelementptr inbounds ([13 x i32], [13 x i32]* @std_hand_value, i64 0, i64 10), align 8
  %sub430 = sub nsw i32 %i97, %change.7
  store i32 %sub430, i32* getelementptr inbounds ([13 x i32], [13 x i32]* @hand_value, i64 0, i64 10), align 8
  br label %if.end434

if.else431:                                       ; preds = %if.then426
  %i98 = load i32, i32* getelementptr inbounds ([13 x i32], [13 x i32]* @std_hand_value, i64 0, i64 7), align 4
  %add432 = add nsw i32 %i98, %change.7
  store i32 %add432, i32* getelementptr inbounds ([13 x i32], [13 x i32]* @hand_value, i64 0, i64 7), align 4
  %i99 = load i32, i32* getelementptr inbounds ([13 x i32], [13 x i32]* @std_hand_value, i64 0, i64 9), align 4
  %add433 = add nsw i32 %i99, %change.7
  store i32 %add433, i32* getelementptr inbounds ([13 x i32], [13 x i32]* @hand_value, i64 0, i64 9), align 4
  br label %if.end434

if.end434:                                        ; preds = %if.else431, %if.then428
  %arraydecay435 = getelementptr inbounds [80 x i8], [80 x i8]* %howmuch, i64 0, i64 0
  %call436 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.47, i64 0, i64 0), i8* %arraydecay435)
  br label %if.end437

if.end437:                                        ; preds = %if.end434, %if.end422
  br label %if.end514

if.else438:                                       ; preds = %if.else243
  %add.ptr439 = getelementptr inbounds i8, i8* %input, i64 6
  %call440 = call i32 @strncmp(i8* %add.ptr439, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.55, i64 0, i64 0), i64 1) #11
  %tobool441 = icmp ne i32 %call440, 0
  br i1 %tobool441, label %lor.lhs.false442, label %land.lhs.true458

lor.lhs.false442:                                 ; preds = %if.else438
  %add.ptr443 = getelementptr inbounds i8, i8* %input, i64 6
  %call444 = call i8* @strstr(i8* %add.ptr443, i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.56, i64 0, i64 0)) #11
  %cmp445 = icmp ne i8* %call444, null
  br i1 %cmp445, label %land.lhs.true458, label %lor.lhs.false446

lor.lhs.false446:                                 ; preds = %lor.lhs.false442
  %add.ptr447 = getelementptr inbounds i8, i8* %input, i64 6
  %call448 = call i8* @strstr(i8* %add.ptr447, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.57, i64 0, i64 0)) #11
  %cmp449 = icmp ne i8* %call448, null
  br i1 %cmp449, label %land.lhs.true450, label %lor.lhs.false454

land.lhs.true450:                                 ; preds = %lor.lhs.false446
  %add.ptr451 = getelementptr inbounds i8, i8* %input, i64 6
  %call452 = call i8* @strstr(i8* %add.ptr451, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.58, i64 0, i64 0)) #11
  %cmp453 = icmp ne i8* %call452, null
  br i1 %cmp453, label %land.lhs.true458, label %lor.lhs.false454

lor.lhs.false454:                                 ; preds = %land.lhs.true450, %lor.lhs.false446
  %add.ptr455 = getelementptr inbounds i8, i8* %input, i64 6
  %call456 = call i32 @strncmp(i8* %add.ptr455, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.59, i64 0, i64 0), i64 1) #11
  %tobool457 = icmp ne i32 %call456, 0
  br i1 %tobool457, label %if.else464, label %land.lhs.true458

land.lhs.true458:                                 ; preds = %lor.lhs.false454, %land.lhs.true450, %lor.lhs.false442, %if.else438
  %add.ptr459 = getelementptr inbounds i8, i8* %input, i64 6
  %call460 = call i8* @strstr(i8* %add.ptr459, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.60, i64 0, i64 0)) #11
  %cmp461 = icmp eq i8* %call460, null
  br i1 %cmp461, label %if.then462, label %if.else464

if.then462:                                       ; preds = %land.lhs.true458
  %call463 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.61, i64 0, i64 0))
  call void @ResetHandValue()
  store i32 0, i32* @must_sit, align 4
  store i32 0, i32* @partnerdead, align 4
  store i32 0, i32* @piecedead, align 4
  br label %if.end513

if.else464:                                       ; preds = %land.lhs.true458, %lor.lhs.false454
  %add.ptr465 = getelementptr inbounds i8, i8* %input, i64 6
  %call466 = call i32 @strncmp(i8* %add.ptr465, i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.62, i64 0, i64 0), i64 25) #11
  %tobool467 = icmp ne i32 %call466, 0
  br i1 %tobool467, label %lor.lhs.false468, label %if.then472

lor.lhs.false468:                                 ; preds = %if.else464
  %add.ptr469 = getelementptr inbounds i8, i8* %input, i64 6
  %call470 = call i32 @strncmp(i8* %add.ptr469, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.63, i64 0, i64 0), i64 4) #11
  %tobool471 = icmp ne i32 %call470, 0
  br i1 %tobool471, label %if.else473, label %if.then472

if.then472:                                       ; preds = %lor.lhs.false468, %if.else464
  store i32 1, i32* @go_fast, align 4
  store i32 0, i32* @must_sit, align 4
  store i32 1, i32* @partnerdead, align 4
  br label %if.end512

if.else473:                                       ; preds = %lor.lhs.false468
  %add.ptr474 = getelementptr inbounds i8, i8* %input, i64 6
  %call475 = call i32 @strncmp(i8* %add.ptr474, i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.64, i64 0, i64 0), i64 26) #11
  %tobool476 = icmp ne i32 %call475, 0
  br i1 %tobool476, label %if.else478, label %if.then477

if.then477:                                       ; preds = %if.else473
  store i32 1, i32* @go_fast, align 4
  store i32 0, i32* @must_sit, align 4
  store i32 1, i32* @piecedead, align 4
  br label %if.end511

if.else478:                                       ; preds = %if.else473
  %add.ptr479 = getelementptr inbounds i8, i8* %input, i64 6
  %call480 = call i32 @strncmp(i8* %add.ptr479, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.8.35, i64 0, i64 0), i64 5) #11
  %tobool481 = icmp ne i32 %call480, 0
  br i1 %tobool481, label %if.else483, label %if.then482

if.then482:                                       ; preds = %if.else478
  br label %return

if.else483:                                       ; preds = %if.else478
  %add.ptr484 = getelementptr inbounds i8, i8* %input, i64 6
  %call485 = call i32 @strncmp(i8* %add.ptr484, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.65, i64 0, i64 0), i64 2) #11
  %tobool486 = icmp ne i32 %call485, 0
  br i1 %tobool486, label %if.else488, label %if.then487

if.then487:                                       ; preds = %if.else483
  br label %return

if.else488:                                       ; preds = %if.else483
  %add.ptr489 = getelementptr inbounds i8, i8* %input, i64 6
  %call490 = call i32 @strncmp(i8* %add.ptr489, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.66, i64 0, i64 0), i64 2) #11
  %tobool491 = icmp ne i32 %call490, 0
  br i1 %tobool491, label %lor.lhs.false492, label %if.then496

lor.lhs.false492:                                 ; preds = %if.else488
  %add.ptr493 = getelementptr inbounds i8, i8* %input, i64 6
  %call494 = call i32 @strncmp(i8* %add.ptr493, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.67, i64 0, i64 0), i64 5) #11
  %tobool495 = icmp ne i32 %call494, 0
  br i1 %tobool495, label %if.else498, label %if.then496

if.then496:                                       ; preds = %lor.lhs.false492, %if.else488
  %call497 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.68, i64 0, i64 0))
  br label %if.end508

if.else498:                                       ; preds = %lor.lhs.false492
  %add.ptr499 = getelementptr inbounds i8, i8* %input, i64 6
  %call500 = call i8* @strstr(i8* %add.ptr499, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.69, i64 0, i64 0)) #11
  %cmp501 = icmp ne i8* %call500, null
  br i1 %cmp501, label %if.then502, label %if.else505

if.then502:                                       ; preds = %if.else498
  %call503 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([87 x i8], [87 x i8]* @.str.70, i64 0, i64 0))
  %call504 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.3.30, i64 0, i64 0))
  br label %if.end507

if.else505:                                       ; preds = %if.else498
  %call506 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.71, i64 0, i64 0))
  br label %if.end507

if.end507:                                        ; preds = %if.else505, %if.then502
  br label %if.end508

if.end508:                                        ; preds = %if.end507, %if.then496
  br label %if.end509

if.end509:                                        ; preds = %if.end508
  br label %if.end510

if.end510:                                        ; preds = %if.end509
  br label %if.end511

if.end511:                                        ; preds = %if.end510, %if.then477
  br label %if.end512

if.end512:                                        ; preds = %if.end511, %if.then472
  br label %if.end513

if.end513:                                        ; preds = %if.end512, %if.then462
  br label %if.end514

if.end514:                                        ; preds = %if.end513, %if.end437
  br label %if.end515

if.end515:                                        ; preds = %if.end514, %if.end242
  br label %if.end516

if.end516:                                        ; preds = %if.end515, %if.then48
  br label %if.end517

if.end517:                                        ; preds = %if.end516, %if.then41
  br label %if.end518

if.end518:                                        ; preds = %if.end517, %if.then35
  br label %if.end519

if.end519:                                        ; preds = %if.end518, %if.then29
  br label %if.end520

if.end520:                                        ; preds = %if.end519, %if.then19
  br label %if.end521

if.end521:                                        ; preds = %if.end520, %if.then11
  br label %return

return:                                           ; preds = %if.end521, %if.then487, %if.then482, %if.then5, %if.then
  ret void
}

; Function Attrs: nounwind readonly willreturn
declare dso_local i32 @strncmp(i8*, i8*, i64) #7

; Function Attrs: nounwind
declare dso_local i8* @strcpy(i8*, i8*) #3

; Function Attrs: noinline nounwind uwtable
define dso_local void @CheckBadFlow(i32 %reset) #0 {
entry:
  %hismoves = alloca [512 x %struct.move_s], align 16
  %ourmoves = alloca [512 x %struct.move_s], align 16
  %tobool = icmp ne i32 %reset, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 0, i32* @CheckBadFlow.pawnmated, align 4
  store i32 0, i32* @CheckBadFlow.knightmated, align 4
  store i32 0, i32* @CheckBadFlow.bishopmated, align 4
  store i32 0, i32* @CheckBadFlow.rookmated, align 4
  store i32 0, i32* @CheckBadFlow.queenmated, align 4
  br label %return

if.end:                                           ; preds = %entry
  %call = call i32 @in_check()
  %i = load i32, i32* @white_to_move, align 4
  %tobool1 = icmp ne i32 %i, 0
  %lnot = xor i1 %tobool1, true
  %lnot.ext = zext i1 %lnot to i32
  %idxprom = sext i32 %lnot.ext to i64
  %arrayidx = getelementptr inbounds [2 x [16 x i32]], [2 x [16 x i32]]* @holding, i64 0, i64 %idxprom
  %i1 = load i32, i32* @white_to_move, align 4
  %tobool2 = icmp ne i32 %i1, 0
  %i2 = zext i1 %tobool2 to i64
  %cond = select i1 %tobool2, i32 1, i32 2
  %idxprom3 = sext i32 %cond to i64
  %arrayidx4 = getelementptr inbounds [16 x i32], [16 x i32]* %arrayidx, i64 0, i64 %idxprom3
  %i3 = load i32, i32* %arrayidx4, align 4
  %tobool5 = icmp ne i32 %i3, 0
  br i1 %tobool5, label %if.end44, label %if.then6

if.then6:                                         ; preds = %if.end
  %i4 = load i32, i32* @white_to_move, align 4
  %tobool7 = icmp ne i32 %i4, 0
  %i5 = zext i1 %tobool7 to i64
  %cond8 = select i1 %tobool7, i32 1, i32 2
  %i6 = load i32, i32* @white_to_move, align 4
  %tobool9 = icmp ne i32 %i6, 0
  %lnot10 = xor i1 %tobool9, true
  %lnot.ext11 = zext i1 %lnot10 to i32
  call void @DropaddHolding(i32 %cond8, i32 %lnot.ext11)
  %arrayidx12 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %hismoves, i64 0, i64 0
  call void @gen(%struct.move_s* %arrayidx12)
  %i7 = load i32, i32* @numb_moves, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc36, %if.then6
  %pawnmates.0 = phi i32 [ 0, %if.then6 ], [ %pawnmates.3, %for.inc36 ]
  %i.0 = phi i32 [ 0, %if.then6 ], [ %inc37, %for.inc36 ]
  %cmp = icmp slt i32 %i.0, %i7
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond
  %cmp13 = icmp eq i32 %pawnmates.0, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond
  %i8 = phi i1 [ false, %for.cond ], [ %cmp13, %land.rhs ]
  br i1 %i8, label %for.body, label %for.end38

for.body:                                         ; preds = %land.end
  %arrayidx14 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %hismoves, i64 0, i64 0
  call void @make(%struct.move_s* %arrayidx14, i32 %i.0)
  %arrayidx15 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %hismoves, i64 0, i64 0
  %call16 = call i32 @check_legal(%struct.move_s* %arrayidx15, i32 %i.0, i32 %call)
  %tobool17 = icmp ne i32 %call16, 0
  br i1 %tobool17, label %if.then18, label %if.end34

if.then18:                                        ; preds = %for.body
  %call19 = call i32 @in_check()
  %arrayidx20 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %ourmoves, i64 0, i64 0
  call void @gen(%struct.move_s* %arrayidx20)
  %i9 = load i32, i32* @numb_moves, align 4
  br label %for.cond21

for.cond21:                                       ; preds = %for.inc, %if.then18
  %pawnmates.1 = phi i32 [ 3, %if.then18 ], [ %pawnmates.2, %for.inc ]
  %j.0 = phi i32 [ 0, %if.then18 ], [ %inc, %for.inc ]
  %cmp22 = icmp slt i32 %j.0, %i9
  br i1 %cmp22, label %land.rhs23, label %land.end25

land.rhs23:                                       ; preds = %for.cond21
  %cmp24 = icmp ne i32 %pawnmates.1, 0
  br label %land.end25

land.end25:                                       ; preds = %land.rhs23, %for.cond21
  %i10 = phi i1 [ false, %for.cond21 ], [ %cmp24, %land.rhs23 ]
  br i1 %i10, label %for.body26, label %for.end

for.body26:                                       ; preds = %land.end25
  %arrayidx27 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %ourmoves, i64 0, i64 0
  call void @make(%struct.move_s* %arrayidx27, i32 %j.0)
  %arrayidx28 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %ourmoves, i64 0, i64 0
  %call29 = call i32 @check_legal(%struct.move_s* %arrayidx28, i32 %j.0, i32 %call19)
  %tobool30 = icmp ne i32 %call29, 0
  br i1 %tobool30, label %if.then31, label %if.end32

if.then31:                                        ; preds = %for.body26
  br label %if.end32

if.end32:                                         ; preds = %if.then31, %for.body26
  %pawnmates.2 = phi i32 [ 0, %if.then31 ], [ %pawnmates.1, %for.body26 ]
  %arrayidx33 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %ourmoves, i64 0, i64 0
  call void @unmake(%struct.move_s* %arrayidx33, i32 %j.0)
  br label %for.inc

for.inc:                                          ; preds = %if.end32
  %inc = add nsw i32 %j.0, 1
  br label %for.cond21

for.end:                                          ; preds = %land.end25
  br label %if.end34

if.end34:                                         ; preds = %for.end, %for.body
  %pawnmates.3 = phi i32 [ %pawnmates.1, %for.end ], [ %pawnmates.0, %for.body ]
  %arrayidx35 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %hismoves, i64 0, i64 0
  call void @unmake(%struct.move_s* %arrayidx35, i32 %i.0)
  br label %for.inc36

for.inc36:                                        ; preds = %if.end34
  %inc37 = add nsw i32 %i.0, 1
  br label %for.cond

for.end38:                                        ; preds = %land.end
  %i11 = load i32, i32* @white_to_move, align 4
  %tobool39 = icmp ne i32 %i11, 0
  %i12 = zext i1 %tobool39 to i64
  %cond40 = select i1 %tobool39, i32 1, i32 2
  %i13 = load i32, i32* @white_to_move, align 4
  %tobool41 = icmp ne i32 %i13, 0
  %lnot42 = xor i1 %tobool41, true
  %lnot.ext43 = zext i1 %lnot42 to i32
  call void @DropremoveHolding(i32 %cond40, i32 %lnot.ext43)
  br label %if.end44

if.end44:                                         ; preds = %for.end38, %if.end
  %pawnmates.4 = phi i32 [ 0, %if.end ], [ %pawnmates.0, %for.end38 ]
  %i14 = load i32, i32* @white_to_move, align 4
  %tobool45 = icmp ne i32 %i14, 0
  %lnot46 = xor i1 %tobool45, true
  %lnot.ext47 = zext i1 %lnot46 to i32
  %idxprom48 = sext i32 %lnot.ext47 to i64
  %arrayidx49 = getelementptr inbounds [2 x [16 x i32]], [2 x [16 x i32]]* @holding, i64 0, i64 %idxprom48
  %i15 = load i32, i32* @white_to_move, align 4
  %tobool50 = icmp ne i32 %i15, 0
  %i16 = zext i1 %tobool50 to i64
  %cond51 = select i1 %tobool50, i32 3, i32 4
  %idxprom52 = sext i32 %cond51 to i64
  %arrayidx53 = getelementptr inbounds [16 x i32], [16 x i32]* %arrayidx49, i64 0, i64 %idxprom52
  %i17 = load i32, i32* %arrayidx53, align 4
  %tobool54 = icmp ne i32 %i17, 0
  br i1 %tobool54, label %if.end101, label %if.then55

if.then55:                                        ; preds = %if.end44
  %i18 = load i32, i32* @white_to_move, align 4
  %tobool56 = icmp ne i32 %i18, 0
  %i19 = zext i1 %tobool56 to i64
  %cond57 = select i1 %tobool56, i32 3, i32 4
  %i20 = load i32, i32* @white_to_move, align 4
  %tobool58 = icmp ne i32 %i20, 0
  %lnot59 = xor i1 %tobool58, true
  %lnot.ext60 = zext i1 %lnot59 to i32
  call void @DropaddHolding(i32 %cond57, i32 %lnot.ext60)
  %arrayidx61 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %hismoves, i64 0, i64 0
  call void @gen(%struct.move_s* %arrayidx61)
  %i21 = load i32, i32* @numb_moves, align 4
  br label %for.cond62

for.cond62:                                       ; preds = %for.inc93, %if.then55
  %knightmates.0 = phi i32 [ 0, %if.then55 ], [ %knightmates.3, %for.inc93 ]
  %i.1 = phi i32 [ 0, %if.then55 ], [ %inc94, %for.inc93 ]
  %cmp63 = icmp slt i32 %i.1, %i21
  br i1 %cmp63, label %land.rhs64, label %land.end66

land.rhs64:                                       ; preds = %for.cond62
  %cmp65 = icmp eq i32 %knightmates.0, 0
  br label %land.end66

land.end66:                                       ; preds = %land.rhs64, %for.cond62
  %i22 = phi i1 [ false, %for.cond62 ], [ %cmp65, %land.rhs64 ]
  br i1 %i22, label %for.body67, label %for.end95

for.body67:                                       ; preds = %land.end66
  %arrayidx68 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %hismoves, i64 0, i64 0
  call void @make(%struct.move_s* %arrayidx68, i32 %i.1)
  %arrayidx69 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %hismoves, i64 0, i64 0
  %call70 = call i32 @check_legal(%struct.move_s* %arrayidx69, i32 %i.1, i32 %call)
  %tobool71 = icmp ne i32 %call70, 0
  br i1 %tobool71, label %if.then72, label %if.end91

if.then72:                                        ; preds = %for.body67
  %call73 = call i32 @in_check()
  %arrayidx74 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %ourmoves, i64 0, i64 0
  call void @gen(%struct.move_s* %arrayidx74)
  %i23 = load i32, i32* @numb_moves, align 4
  br label %for.cond75

for.cond75:                                       ; preds = %for.inc88, %if.then72
  %knightmates.1 = phi i32 [ 3, %if.then72 ], [ %knightmates.2, %for.inc88 ]
  %j.1 = phi i32 [ 0, %if.then72 ], [ %inc89, %for.inc88 ]
  %cmp76 = icmp slt i32 %j.1, %i23
  br i1 %cmp76, label %land.rhs77, label %land.end79

land.rhs77:                                       ; preds = %for.cond75
  %cmp78 = icmp ne i32 %knightmates.1, 0
  br label %land.end79

land.end79:                                       ; preds = %land.rhs77, %for.cond75
  %i24 = phi i1 [ false, %for.cond75 ], [ %cmp78, %land.rhs77 ]
  br i1 %i24, label %for.body80, label %for.end90

for.body80:                                       ; preds = %land.end79
  %arrayidx81 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %ourmoves, i64 0, i64 0
  call void @make(%struct.move_s* %arrayidx81, i32 %j.1)
  %arrayidx82 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %ourmoves, i64 0, i64 0
  %call83 = call i32 @check_legal(%struct.move_s* %arrayidx82, i32 %j.1, i32 %call73)
  %tobool84 = icmp ne i32 %call83, 0
  br i1 %tobool84, label %if.then85, label %if.end86

if.then85:                                        ; preds = %for.body80
  br label %if.end86

if.end86:                                         ; preds = %if.then85, %for.body80
  %knightmates.2 = phi i32 [ 0, %if.then85 ], [ %knightmates.1, %for.body80 ]
  %arrayidx87 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %ourmoves, i64 0, i64 0
  call void @unmake(%struct.move_s* %arrayidx87, i32 %j.1)
  br label %for.inc88

for.inc88:                                        ; preds = %if.end86
  %inc89 = add nsw i32 %j.1, 1
  br label %for.cond75

for.end90:                                        ; preds = %land.end79
  br label %if.end91

if.end91:                                         ; preds = %for.end90, %for.body67
  %knightmates.3 = phi i32 [ %knightmates.1, %for.end90 ], [ %knightmates.0, %for.body67 ]
  %arrayidx92 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %hismoves, i64 0, i64 0
  call void @unmake(%struct.move_s* %arrayidx92, i32 %i.1)
  br label %for.inc93

for.inc93:                                        ; preds = %if.end91
  %inc94 = add nsw i32 %i.1, 1
  br label %for.cond62

for.end95:                                        ; preds = %land.end66
  %i25 = load i32, i32* @white_to_move, align 4
  %tobool96 = icmp ne i32 %i25, 0
  %i26 = zext i1 %tobool96 to i64
  %cond97 = select i1 %tobool96, i32 3, i32 4
  %i27 = load i32, i32* @white_to_move, align 4
  %tobool98 = icmp ne i32 %i27, 0
  %lnot99 = xor i1 %tobool98, true
  %lnot.ext100 = zext i1 %lnot99 to i32
  call void @DropremoveHolding(i32 %cond97, i32 %lnot.ext100)
  br label %if.end101

if.end101:                                        ; preds = %for.end95, %if.end44
  %knightmates.4 = phi i32 [ 0, %if.end44 ], [ %knightmates.0, %for.end95 ]
  %i28 = load i32, i32* @white_to_move, align 4
  %tobool102 = icmp ne i32 %i28, 0
  %lnot103 = xor i1 %tobool102, true
  %lnot.ext104 = zext i1 %lnot103 to i32
  %idxprom105 = sext i32 %lnot.ext104 to i64
  %arrayidx106 = getelementptr inbounds [2 x [16 x i32]], [2 x [16 x i32]]* @holding, i64 0, i64 %idxprom105
  %i29 = load i32, i32* @white_to_move, align 4
  %tobool107 = icmp ne i32 %i29, 0
  %i30 = zext i1 %tobool107 to i64
  %cond108 = select i1 %tobool107, i32 11, i32 12
  %idxprom109 = sext i32 %cond108 to i64
  %arrayidx110 = getelementptr inbounds [16 x i32], [16 x i32]* %arrayidx106, i64 0, i64 %idxprom109
  %i31 = load i32, i32* %arrayidx110, align 4
  %tobool111 = icmp ne i32 %i31, 0
  br i1 %tobool111, label %if.end158, label %if.then112

if.then112:                                       ; preds = %if.end101
  %i32 = load i32, i32* @white_to_move, align 4
  %tobool113 = icmp ne i32 %i32, 0
  %i33 = zext i1 %tobool113 to i64
  %cond114 = select i1 %tobool113, i32 11, i32 12
  %i34 = load i32, i32* @white_to_move, align 4
  %tobool115 = icmp ne i32 %i34, 0
  %lnot116 = xor i1 %tobool115, true
  %lnot.ext117 = zext i1 %lnot116 to i32
  call void @DropaddHolding(i32 %cond114, i32 %lnot.ext117)
  %arrayidx118 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %hismoves, i64 0, i64 0
  call void @gen(%struct.move_s* %arrayidx118)
  %i35 = load i32, i32* @numb_moves, align 4
  br label %for.cond119

for.cond119:                                      ; preds = %for.inc150, %if.then112
  %bishopmates.0 = phi i32 [ 0, %if.then112 ], [ %bishopmates.3, %for.inc150 ]
  %i.2 = phi i32 [ 0, %if.then112 ], [ %inc151, %for.inc150 ]
  %cmp120 = icmp slt i32 %i.2, %i35
  br i1 %cmp120, label %land.rhs121, label %land.end123

land.rhs121:                                      ; preds = %for.cond119
  %cmp122 = icmp eq i32 %bishopmates.0, 0
  br label %land.end123

land.end123:                                      ; preds = %land.rhs121, %for.cond119
  %i36 = phi i1 [ false, %for.cond119 ], [ %cmp122, %land.rhs121 ]
  br i1 %i36, label %for.body124, label %for.end152

for.body124:                                      ; preds = %land.end123
  %arrayidx125 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %hismoves, i64 0, i64 0
  call void @make(%struct.move_s* %arrayidx125, i32 %i.2)
  %arrayidx126 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %hismoves, i64 0, i64 0
  %call127 = call i32 @check_legal(%struct.move_s* %arrayidx126, i32 %i.2, i32 %call)
  %tobool128 = icmp ne i32 %call127, 0
  br i1 %tobool128, label %if.then129, label %if.end148

if.then129:                                       ; preds = %for.body124
  %call130 = call i32 @in_check()
  %arrayidx131 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %ourmoves, i64 0, i64 0
  call void @gen(%struct.move_s* %arrayidx131)
  %i37 = load i32, i32* @numb_moves, align 4
  br label %for.cond132

for.cond132:                                      ; preds = %for.inc145, %if.then129
  %bishopmates.1 = phi i32 [ 3, %if.then129 ], [ %bishopmates.2, %for.inc145 ]
  %j.2 = phi i32 [ 0, %if.then129 ], [ %inc146, %for.inc145 ]
  %cmp133 = icmp slt i32 %j.2, %i37
  br i1 %cmp133, label %land.rhs134, label %land.end136

land.rhs134:                                      ; preds = %for.cond132
  %cmp135 = icmp ne i32 %bishopmates.1, 0
  br label %land.end136

land.end136:                                      ; preds = %land.rhs134, %for.cond132
  %i38 = phi i1 [ false, %for.cond132 ], [ %cmp135, %land.rhs134 ]
  br i1 %i38, label %for.body137, label %for.end147

for.body137:                                      ; preds = %land.end136
  %arrayidx138 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %ourmoves, i64 0, i64 0
  call void @make(%struct.move_s* %arrayidx138, i32 %j.2)
  %arrayidx139 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %ourmoves, i64 0, i64 0
  %call140 = call i32 @check_legal(%struct.move_s* %arrayidx139, i32 %j.2, i32 %call130)
  %tobool141 = icmp ne i32 %call140, 0
  br i1 %tobool141, label %if.then142, label %if.end143

if.then142:                                       ; preds = %for.body137
  br label %if.end143

if.end143:                                        ; preds = %if.then142, %for.body137
  %bishopmates.2 = phi i32 [ 0, %if.then142 ], [ %bishopmates.1, %for.body137 ]
  %arrayidx144 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %ourmoves, i64 0, i64 0
  call void @unmake(%struct.move_s* %arrayidx144, i32 %j.2)
  br label %for.inc145

for.inc145:                                       ; preds = %if.end143
  %inc146 = add nsw i32 %j.2, 1
  br label %for.cond132

for.end147:                                       ; preds = %land.end136
  br label %if.end148

if.end148:                                        ; preds = %for.end147, %for.body124
  %bishopmates.3 = phi i32 [ %bishopmates.1, %for.end147 ], [ %bishopmates.0, %for.body124 ]
  %arrayidx149 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %hismoves, i64 0, i64 0
  call void @unmake(%struct.move_s* %arrayidx149, i32 %i.2)
  br label %for.inc150

for.inc150:                                       ; preds = %if.end148
  %inc151 = add nsw i32 %i.2, 1
  br label %for.cond119

for.end152:                                       ; preds = %land.end123
  %i39 = load i32, i32* @white_to_move, align 4
  %tobool153 = icmp ne i32 %i39, 0
  %i40 = zext i1 %tobool153 to i64
  %cond154 = select i1 %tobool153, i32 11, i32 12
  %i41 = load i32, i32* @white_to_move, align 4
  %tobool155 = icmp ne i32 %i41, 0
  %lnot156 = xor i1 %tobool155, true
  %lnot.ext157 = zext i1 %lnot156 to i32
  call void @DropremoveHolding(i32 %cond154, i32 %lnot.ext157)
  br label %if.end158

if.end158:                                        ; preds = %for.end152, %if.end101
  %bishopmates.4 = phi i32 [ 0, %if.end101 ], [ %bishopmates.0, %for.end152 ]
  %i42 = load i32, i32* @white_to_move, align 4
  %tobool159 = icmp ne i32 %i42, 0
  %lnot160 = xor i1 %tobool159, true
  %lnot.ext161 = zext i1 %lnot160 to i32
  %idxprom162 = sext i32 %lnot.ext161 to i64
  %arrayidx163 = getelementptr inbounds [2 x [16 x i32]], [2 x [16 x i32]]* @holding, i64 0, i64 %idxprom162
  %i43 = load i32, i32* @white_to_move, align 4
  %tobool164 = icmp ne i32 %i43, 0
  %i44 = zext i1 %tobool164 to i64
  %cond165 = select i1 %tobool164, i32 7, i32 8
  %idxprom166 = sext i32 %cond165 to i64
  %arrayidx167 = getelementptr inbounds [16 x i32], [16 x i32]* %arrayidx163, i64 0, i64 %idxprom166
  %i45 = load i32, i32* %arrayidx167, align 4
  %tobool168 = icmp ne i32 %i45, 0
  br i1 %tobool168, label %if.end215, label %if.then169

if.then169:                                       ; preds = %if.end158
  %i46 = load i32, i32* @white_to_move, align 4
  %tobool170 = icmp ne i32 %i46, 0
  %i47 = zext i1 %tobool170 to i64
  %cond171 = select i1 %tobool170, i32 7, i32 8
  %i48 = load i32, i32* @white_to_move, align 4
  %tobool172 = icmp ne i32 %i48, 0
  %lnot173 = xor i1 %tobool172, true
  %lnot.ext174 = zext i1 %lnot173 to i32
  call void @DropaddHolding(i32 %cond171, i32 %lnot.ext174)
  %arrayidx175 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %hismoves, i64 0, i64 0
  call void @gen(%struct.move_s* %arrayidx175)
  %i49 = load i32, i32* @numb_moves, align 4
  br label %for.cond176

for.cond176:                                      ; preds = %for.inc207, %if.then169
  %rookmates.0 = phi i32 [ 0, %if.then169 ], [ %rookmates.3, %for.inc207 ]
  %i.3 = phi i32 [ 0, %if.then169 ], [ %inc208, %for.inc207 ]
  %cmp177 = icmp slt i32 %i.3, %i49
  br i1 %cmp177, label %land.rhs178, label %land.end180

land.rhs178:                                      ; preds = %for.cond176
  %cmp179 = icmp eq i32 %rookmates.0, 0
  br label %land.end180

land.end180:                                      ; preds = %land.rhs178, %for.cond176
  %i50 = phi i1 [ false, %for.cond176 ], [ %cmp179, %land.rhs178 ]
  br i1 %i50, label %for.body181, label %for.end209

for.body181:                                      ; preds = %land.end180
  %arrayidx182 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %hismoves, i64 0, i64 0
  call void @make(%struct.move_s* %arrayidx182, i32 %i.3)
  %arrayidx183 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %hismoves, i64 0, i64 0
  %call184 = call i32 @check_legal(%struct.move_s* %arrayidx183, i32 %i.3, i32 %call)
  %tobool185 = icmp ne i32 %call184, 0
  br i1 %tobool185, label %if.then186, label %if.end205

if.then186:                                       ; preds = %for.body181
  %call187 = call i32 @in_check()
  %arrayidx188 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %ourmoves, i64 0, i64 0
  call void @gen(%struct.move_s* %arrayidx188)
  %i51 = load i32, i32* @numb_moves, align 4
  br label %for.cond189

for.cond189:                                      ; preds = %for.inc202, %if.then186
  %rookmates.1 = phi i32 [ 3, %if.then186 ], [ %rookmates.2, %for.inc202 ]
  %j.3 = phi i32 [ 0, %if.then186 ], [ %inc203, %for.inc202 ]
  %cmp190 = icmp slt i32 %j.3, %i51
  br i1 %cmp190, label %land.rhs191, label %land.end193

land.rhs191:                                      ; preds = %for.cond189
  %cmp192 = icmp ne i32 %rookmates.1, 0
  br label %land.end193

land.end193:                                      ; preds = %land.rhs191, %for.cond189
  %i52 = phi i1 [ false, %for.cond189 ], [ %cmp192, %land.rhs191 ]
  br i1 %i52, label %for.body194, label %for.end204

for.body194:                                      ; preds = %land.end193
  %arrayidx195 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %ourmoves, i64 0, i64 0
  call void @make(%struct.move_s* %arrayidx195, i32 %j.3)
  %arrayidx196 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %ourmoves, i64 0, i64 0
  %call197 = call i32 @check_legal(%struct.move_s* %arrayidx196, i32 %j.3, i32 %call187)
  %tobool198 = icmp ne i32 %call197, 0
  br i1 %tobool198, label %if.then199, label %if.end200

if.then199:                                       ; preds = %for.body194
  br label %if.end200

if.end200:                                        ; preds = %if.then199, %for.body194
  %rookmates.2 = phi i32 [ 0, %if.then199 ], [ %rookmates.1, %for.body194 ]
  %arrayidx201 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %ourmoves, i64 0, i64 0
  call void @unmake(%struct.move_s* %arrayidx201, i32 %j.3)
  br label %for.inc202

for.inc202:                                       ; preds = %if.end200
  %inc203 = add nsw i32 %j.3, 1
  br label %for.cond189

for.end204:                                       ; preds = %land.end193
  br label %if.end205

if.end205:                                        ; preds = %for.end204, %for.body181
  %rookmates.3 = phi i32 [ %rookmates.1, %for.end204 ], [ %rookmates.0, %for.body181 ]
  %arrayidx206 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %hismoves, i64 0, i64 0
  call void @unmake(%struct.move_s* %arrayidx206, i32 %i.3)
  br label %for.inc207

for.inc207:                                       ; preds = %if.end205
  %inc208 = add nsw i32 %i.3, 1
  br label %for.cond176

for.end209:                                       ; preds = %land.end180
  %i53 = load i32, i32* @white_to_move, align 4
  %tobool210 = icmp ne i32 %i53, 0
  %i54 = zext i1 %tobool210 to i64
  %cond211 = select i1 %tobool210, i32 7, i32 8
  %i55 = load i32, i32* @white_to_move, align 4
  %tobool212 = icmp ne i32 %i55, 0
  %lnot213 = xor i1 %tobool212, true
  %lnot.ext214 = zext i1 %lnot213 to i32
  call void @DropremoveHolding(i32 %cond211, i32 %lnot.ext214)
  br label %if.end215

if.end215:                                        ; preds = %for.end209, %if.end158
  %rookmates.4 = phi i32 [ 0, %if.end158 ], [ %rookmates.0, %for.end209 ]
  %i56 = load i32, i32* @white_to_move, align 4
  %tobool216 = icmp ne i32 %i56, 0
  %lnot217 = xor i1 %tobool216, true
  %lnot.ext218 = zext i1 %lnot217 to i32
  %idxprom219 = sext i32 %lnot.ext218 to i64
  %arrayidx220 = getelementptr inbounds [2 x [16 x i32]], [2 x [16 x i32]]* @holding, i64 0, i64 %idxprom219
  %i57 = load i32, i32* @white_to_move, align 4
  %tobool221 = icmp ne i32 %i57, 0
  %i58 = zext i1 %tobool221 to i64
  %cond222 = select i1 %tobool221, i32 9, i32 10
  %idxprom223 = sext i32 %cond222 to i64
  %arrayidx224 = getelementptr inbounds [16 x i32], [16 x i32]* %arrayidx220, i64 0, i64 %idxprom223
  %i59 = load i32, i32* %arrayidx224, align 4
  %tobool225 = icmp ne i32 %i59, 0
  br i1 %tobool225, label %if.end272, label %if.then226

if.then226:                                       ; preds = %if.end215
  %i60 = load i32, i32* @white_to_move, align 4
  %tobool227 = icmp ne i32 %i60, 0
  %i61 = zext i1 %tobool227 to i64
  %cond228 = select i1 %tobool227, i32 9, i32 10
  %i62 = load i32, i32* @white_to_move, align 4
  %tobool229 = icmp ne i32 %i62, 0
  %lnot230 = xor i1 %tobool229, true
  %lnot.ext231 = zext i1 %lnot230 to i32
  call void @DropaddHolding(i32 %cond228, i32 %lnot.ext231)
  %arrayidx232 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %hismoves, i64 0, i64 0
  call void @gen(%struct.move_s* %arrayidx232)
  %i63 = load i32, i32* @numb_moves, align 4
  br label %for.cond233

for.cond233:                                      ; preds = %for.inc264, %if.then226
  %queenmates.0 = phi i32 [ 0, %if.then226 ], [ %queenmates.3, %for.inc264 ]
  %i.4 = phi i32 [ 0, %if.then226 ], [ %inc265, %for.inc264 ]
  %cmp234 = icmp slt i32 %i.4, %i63
  br i1 %cmp234, label %land.rhs235, label %land.end237

land.rhs235:                                      ; preds = %for.cond233
  %cmp236 = icmp eq i32 %queenmates.0, 0
  br label %land.end237

land.end237:                                      ; preds = %land.rhs235, %for.cond233
  %i64 = phi i1 [ false, %for.cond233 ], [ %cmp236, %land.rhs235 ]
  br i1 %i64, label %for.body238, label %for.end266

for.body238:                                      ; preds = %land.end237
  %arrayidx239 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %hismoves, i64 0, i64 0
  call void @make(%struct.move_s* %arrayidx239, i32 %i.4)
  %arrayidx240 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %hismoves, i64 0, i64 0
  %call241 = call i32 @check_legal(%struct.move_s* %arrayidx240, i32 %i.4, i32 %call)
  %tobool242 = icmp ne i32 %call241, 0
  br i1 %tobool242, label %if.then243, label %if.end262

if.then243:                                       ; preds = %for.body238
  %call244 = call i32 @in_check()
  %arrayidx245 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %ourmoves, i64 0, i64 0
  call void @gen(%struct.move_s* %arrayidx245)
  %i65 = load i32, i32* @numb_moves, align 4
  br label %for.cond246

for.cond246:                                      ; preds = %for.inc259, %if.then243
  %queenmates.1 = phi i32 [ 3, %if.then243 ], [ %queenmates.2, %for.inc259 ]
  %j.4 = phi i32 [ 0, %if.then243 ], [ %inc260, %for.inc259 ]
  %cmp247 = icmp slt i32 %j.4, %i65
  br i1 %cmp247, label %land.rhs248, label %land.end250

land.rhs248:                                      ; preds = %for.cond246
  %cmp249 = icmp ne i32 %queenmates.1, 0
  br label %land.end250

land.end250:                                      ; preds = %land.rhs248, %for.cond246
  %i66 = phi i1 [ false, %for.cond246 ], [ %cmp249, %land.rhs248 ]
  br i1 %i66, label %for.body251, label %for.end261

for.body251:                                      ; preds = %land.end250
  %arrayidx252 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %ourmoves, i64 0, i64 0
  call void @make(%struct.move_s* %arrayidx252, i32 %j.4)
  %arrayidx253 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %ourmoves, i64 0, i64 0
  %call254 = call i32 @check_legal(%struct.move_s* %arrayidx253, i32 %j.4, i32 %call244)
  %tobool255 = icmp ne i32 %call254, 0
  br i1 %tobool255, label %if.then256, label %if.end257

if.then256:                                       ; preds = %for.body251
  br label %if.end257

if.end257:                                        ; preds = %if.then256, %for.body251
  %queenmates.2 = phi i32 [ 0, %if.then256 ], [ %queenmates.1, %for.body251 ]
  %arrayidx258 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %ourmoves, i64 0, i64 0
  call void @unmake(%struct.move_s* %arrayidx258, i32 %j.4)
  br label %for.inc259

for.inc259:                                       ; preds = %if.end257
  %inc260 = add nsw i32 %j.4, 1
  br label %for.cond246

for.end261:                                       ; preds = %land.end250
  br label %if.end262

if.end262:                                        ; preds = %for.end261, %for.body238
  %queenmates.3 = phi i32 [ %queenmates.1, %for.end261 ], [ %queenmates.0, %for.body238 ]
  %arrayidx263 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %hismoves, i64 0, i64 0
  call void @unmake(%struct.move_s* %arrayidx263, i32 %i.4)
  br label %for.inc264

for.inc264:                                       ; preds = %if.end262
  %inc265 = add nsw i32 %i.4, 1
  br label %for.cond233

for.end266:                                       ; preds = %land.end237
  %i67 = load i32, i32* @white_to_move, align 4
  %tobool267 = icmp ne i32 %i67, 0
  %i68 = zext i1 %tobool267 to i64
  %cond268 = select i1 %tobool267, i32 9, i32 10
  %i69 = load i32, i32* @white_to_move, align 4
  %tobool269 = icmp ne i32 %i69, 0
  %lnot270 = xor i1 %tobool269, true
  %lnot.ext271 = zext i1 %lnot270 to i32
  call void @DropremoveHolding(i32 %cond268, i32 %lnot.ext271)
  br label %if.end272

if.end272:                                        ; preds = %for.end266, %if.end215
  %queenmates.4 = phi i32 [ 0, %if.end215 ], [ %queenmates.0, %for.end266 ]
  %i70 = load i32, i32* @CheckBadFlow.pawnmated, align 4
  %cmp273 = icmp ne i32 %pawnmates.4, %i70
  br i1 %cmp273, label %if.then274, label %if.end283

if.then274:                                       ; preds = %if.end272
  %cmp275 = icmp eq i32 %pawnmates.4, 3
  br i1 %cmp275, label %if.then276, label %if.else

if.then276:                                       ; preds = %if.then274
  br label %if.end282

if.else:                                          ; preds = %if.then274
  %cmp277 = icmp eq i32 %pawnmates.4, 0
  br i1 %cmp277, label %land.lhs.true, label %if.end281

land.lhs.true:                                    ; preds = %if.else
  %i71 = load i32, i32* @CheckBadFlow.pawnmated, align 4
  %cmp278 = icmp eq i32 %i71, 0
  br i1 %cmp278, label %if.then279, label %if.end281

if.then279:                                       ; preds = %land.lhs.true
  %call280 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.72, i64 0, i64 0))
  br label %if.end281

if.end281:                                        ; preds = %if.then279, %land.lhs.true, %if.else
  %othermove.0 = phi i32 [ 1, %if.then279 ], [ 0, %land.lhs.true ], [ 0, %if.else ]
  br label %if.end282

if.end282:                                        ; preds = %if.end281, %if.then276
  %pawnwarn.0 = phi i32 [ 1, %if.then276 ], [ 0, %if.end281 ]
  %othermove.1 = phi i32 [ 0, %if.then276 ], [ %othermove.0, %if.end281 ]
  br label %if.end283

if.end283:                                        ; preds = %if.end282, %if.end272
  %pawnwarn.1 = phi i32 [ %pawnwarn.0, %if.end282 ], [ 0, %if.end272 ]
  %othermove.2 = phi i32 [ %othermove.1, %if.end282 ], [ 0, %if.end272 ]
  %i72 = load i32, i32* @CheckBadFlow.knightmated, align 4
  %cmp284 = icmp ne i32 %knightmates.4, %i72
  br i1 %cmp284, label %if.then285, label %if.end296

if.then285:                                       ; preds = %if.end283
  %cmp286 = icmp eq i32 %knightmates.4, 3
  br i1 %cmp286, label %if.then287, label %if.else288

if.then287:                                       ; preds = %if.then285
  br label %if.end295

if.else288:                                       ; preds = %if.then285
  %cmp289 = icmp eq i32 %knightmates.4, 0
  br i1 %cmp289, label %land.lhs.true290, label %if.end294

land.lhs.true290:                                 ; preds = %if.else288
  %i73 = load i32, i32* @CheckBadFlow.knightmated, align 4
  %cmp291 = icmp eq i32 %i73, 0
  br i1 %cmp291, label %if.then292, label %if.end294

if.then292:                                       ; preds = %land.lhs.true290
  %call293 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.73, i64 0, i64 0))
  br label %if.end294

if.end294:                                        ; preds = %if.then292, %land.lhs.true290, %if.else288
  %othermove.3 = phi i32 [ 1, %if.then292 ], [ %othermove.2, %land.lhs.true290 ], [ %othermove.2, %if.else288 ]
  br label %if.end295

if.end295:                                        ; preds = %if.end294, %if.then287
  %knightwarn.0 = phi i32 [ 1, %if.then287 ], [ 0, %if.end294 ]
  %othermove.4 = phi i32 [ %othermove.2, %if.then287 ], [ %othermove.3, %if.end294 ]
  br label %if.end296

if.end296:                                        ; preds = %if.end295, %if.end283
  %knightwarn.1 = phi i32 [ %knightwarn.0, %if.end295 ], [ 0, %if.end283 ]
  %othermove.5 = phi i32 [ %othermove.4, %if.end295 ], [ %othermove.2, %if.end283 ]
  %i74 = load i32, i32* @CheckBadFlow.bishopmated, align 4
  %cmp297 = icmp ne i32 %bishopmates.4, %i74
  br i1 %cmp297, label %if.then298, label %if.end309

if.then298:                                       ; preds = %if.end296
  %cmp299 = icmp eq i32 %bishopmates.4, 3
  br i1 %cmp299, label %if.then300, label %if.else301

if.then300:                                       ; preds = %if.then298
  br label %if.end308

if.else301:                                       ; preds = %if.then298
  %cmp302 = icmp eq i32 %bishopmates.4, 0
  br i1 %cmp302, label %land.lhs.true303, label %if.end307

land.lhs.true303:                                 ; preds = %if.else301
  %i75 = load i32, i32* @CheckBadFlow.bishopmated, align 4
  %cmp304 = icmp eq i32 %i75, 0
  br i1 %cmp304, label %if.then305, label %if.end307

if.then305:                                       ; preds = %land.lhs.true303
  %call306 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.74, i64 0, i64 0))
  br label %if.end307

if.end307:                                        ; preds = %if.then305, %land.lhs.true303, %if.else301
  %othermove.6 = phi i32 [ 1, %if.then305 ], [ %othermove.5, %land.lhs.true303 ], [ %othermove.5, %if.else301 ]
  br label %if.end308

if.end308:                                        ; preds = %if.end307, %if.then300
  %bishopwarn.0 = phi i32 [ 1, %if.then300 ], [ 0, %if.end307 ]
  %othermove.7 = phi i32 [ %othermove.5, %if.then300 ], [ %othermove.6, %if.end307 ]
  br label %if.end309

if.end309:                                        ; preds = %if.end308, %if.end296
  %bishopwarn.1 = phi i32 [ %bishopwarn.0, %if.end308 ], [ 0, %if.end296 ]
  %othermove.8 = phi i32 [ %othermove.7, %if.end308 ], [ %othermove.5, %if.end296 ]
  %i76 = load i32, i32* @CheckBadFlow.rookmated, align 4
  %cmp310 = icmp ne i32 %rookmates.4, %i76
  br i1 %cmp310, label %if.then311, label %if.end322

if.then311:                                       ; preds = %if.end309
  %cmp312 = icmp eq i32 %rookmates.4, 3
  br i1 %cmp312, label %if.then313, label %if.else314

if.then313:                                       ; preds = %if.then311
  br label %if.end321

if.else314:                                       ; preds = %if.then311
  %cmp315 = icmp eq i32 %rookmates.4, 0
  br i1 %cmp315, label %land.lhs.true316, label %if.end320

land.lhs.true316:                                 ; preds = %if.else314
  %i77 = load i32, i32* @CheckBadFlow.rookmated, align 4
  %cmp317 = icmp eq i32 %i77, 0
  br i1 %cmp317, label %if.then318, label %if.end320

if.then318:                                       ; preds = %land.lhs.true316
  %call319 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.75, i64 0, i64 0))
  br label %if.end320

if.end320:                                        ; preds = %if.then318, %land.lhs.true316, %if.else314
  %othermove.9 = phi i32 [ 1, %if.then318 ], [ %othermove.8, %land.lhs.true316 ], [ %othermove.8, %if.else314 ]
  br label %if.end321

if.end321:                                        ; preds = %if.end320, %if.then313
  %othermove.10 = phi i32 [ %othermove.8, %if.then313 ], [ %othermove.9, %if.end320 ]
  %rookwarn.0 = phi i32 [ 1, %if.then313 ], [ 0, %if.end320 ]
  br label %if.end322

if.end322:                                        ; preds = %if.end321, %if.end309
  %othermove.11 = phi i32 [ %othermove.10, %if.end321 ], [ %othermove.8, %if.end309 ]
  %rookwarn.1 = phi i32 [ %rookwarn.0, %if.end321 ], [ 0, %if.end309 ]
  %i78 = load i32, i32* @CheckBadFlow.queenmated, align 4
  %cmp323 = icmp ne i32 %queenmates.4, %i78
  br i1 %cmp323, label %if.then324, label %if.end335

if.then324:                                       ; preds = %if.end322
  %cmp325 = icmp eq i32 %queenmates.4, 3
  br i1 %cmp325, label %if.then326, label %if.else327

if.then326:                                       ; preds = %if.then324
  br label %if.end334

if.else327:                                       ; preds = %if.then324
  %cmp328 = icmp eq i32 %queenmates.4, 0
  br i1 %cmp328, label %land.lhs.true329, label %if.end333

land.lhs.true329:                                 ; preds = %if.else327
  %i79 = load i32, i32* @CheckBadFlow.queenmated, align 4
  %cmp330 = icmp eq i32 %i79, 0
  br i1 %cmp330, label %if.then331, label %if.end333

if.then331:                                       ; preds = %land.lhs.true329
  %call332 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.76, i64 0, i64 0))
  br label %if.end333

if.end333:                                        ; preds = %if.then331, %land.lhs.true329, %if.else327
  %othermove.12 = phi i32 [ 1, %if.then331 ], [ %othermove.11, %land.lhs.true329 ], [ %othermove.11, %if.else327 ]
  br label %if.end334

if.end334:                                        ; preds = %if.end333, %if.then326
  %othermove.13 = phi i32 [ %othermove.11, %if.then326 ], [ %othermove.12, %if.end333 ]
  %queenwarn.0 = phi i32 [ 1, %if.then326 ], [ 0, %if.end333 ]
  br label %if.end335

if.end335:                                        ; preds = %if.end334, %if.end322
  %othermove.14 = phi i32 [ %othermove.13, %if.end334 ], [ %othermove.11, %if.end322 ]
  %queenwarn.1 = phi i32 [ %queenwarn.0, %if.end334 ], [ 0, %if.end322 ]
  %tobool336 = icmp ne i32 %pawnwarn.1, 0
  br i1 %tobool336, label %if.then337, label %if.end339

if.then337:                                       ; preds = %if.end335
  %call338 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.77, i64 0, i64 0))
  br label %if.end339

if.end339:                                        ; preds = %if.then337, %if.end335
  %tobool340 = icmp ne i32 %knightwarn.1, 0
  br i1 %tobool340, label %if.then341, label %if.end343

if.then341:                                       ; preds = %if.end339
  %call342 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.78, i64 0, i64 0))
  br label %if.end343

if.end343:                                        ; preds = %if.then341, %if.end339
  %tobool344 = icmp ne i32 %bishopwarn.1, 0
  br i1 %tobool344, label %if.then345, label %if.end347

if.then345:                                       ; preds = %if.end343
  %call346 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.79, i64 0, i64 0))
  br label %if.end347

if.end347:                                        ; preds = %if.then345, %if.end343
  %tobool348 = icmp ne i32 %rookwarn.1, 0
  br i1 %tobool348, label %if.then349, label %if.end351

if.then349:                                       ; preds = %if.end347
  %call350 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.80, i64 0, i64 0))
  br label %if.end351

if.end351:                                        ; preds = %if.then349, %if.end347
  %tobool352 = icmp ne i32 %queenwarn.1, 0
  br i1 %tobool352, label %if.then353, label %if.end355

if.then353:                                       ; preds = %if.end351
  %call354 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.81, i64 0, i64 0))
  br label %if.end355

if.end355:                                        ; preds = %if.then353, %if.end351
  %i80 = load i32, i32* @piecedead, align 4
  %tobool356 = icmp ne i32 %i80, 0
  br i1 %tobool356, label %land.lhs.true357, label %if.end362

land.lhs.true357:                                 ; preds = %if.end355
  %tobool358 = icmp ne i32 %othermove.14, 0
  br i1 %tobool358, label %if.then359, label %if.end362

if.then359:                                       ; preds = %land.lhs.true357
  store i32 0, i32* @piecedead, align 4
  %call360 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([17 x i8], [17 x i8]* @.str.82, i64 0, i64 0))
  %call361 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.83, i64 0, i64 0))
  store i32 0, i32* @go_fast, align 4
  br label %if.end362

if.end362:                                        ; preds = %if.then359, %land.lhs.true357, %if.end355
  %tobool363 = icmp ne i32 %pawnmates.4, 0
  br i1 %tobool363, label %cond.true, label %cond.false

cond.true:                                        ; preds = %if.end362
  store i32 %pawnmates.4, i32* @CheckBadFlow.pawnmated, align 4
  br label %cond.end

cond.false:                                       ; preds = %if.end362
  %i81 = load i32, i32* @CheckBadFlow.pawnmated, align 4
  %dec = add nsw i32 %i81, -1
  store i32 %dec, i32* @CheckBadFlow.pawnmated, align 4
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond364 = phi i32 [ %pawnmates.4, %cond.true ], [ %i81, %cond.false ]
  %tobool365 = icmp ne i32 %bishopmates.4, 0
  br i1 %tobool365, label %cond.true366, label %cond.false367

cond.true366:                                     ; preds = %cond.end
  store i32 %bishopmates.4, i32* @CheckBadFlow.bishopmated, align 4
  br label %cond.end369

cond.false367:                                    ; preds = %cond.end
  %i82 = load i32, i32* @CheckBadFlow.bishopmated, align 4
  %dec368 = add nsw i32 %i82, -1
  store i32 %dec368, i32* @CheckBadFlow.bishopmated, align 4
  br label %cond.end369

cond.end369:                                      ; preds = %cond.false367, %cond.true366
  %cond370 = phi i32 [ %bishopmates.4, %cond.true366 ], [ %i82, %cond.false367 ]
  %tobool371 = icmp ne i32 %rookmates.4, 0
  br i1 %tobool371, label %cond.true372, label %cond.false373

cond.true372:                                     ; preds = %cond.end369
  store i32 %rookmates.4, i32* @CheckBadFlow.rookmated, align 4
  br label %cond.end375

cond.false373:                                    ; preds = %cond.end369
  %i83 = load i32, i32* @CheckBadFlow.rookmated, align 4
  %dec374 = add nsw i32 %i83, -1
  store i32 %dec374, i32* @CheckBadFlow.rookmated, align 4
  br label %cond.end375

cond.end375:                                      ; preds = %cond.false373, %cond.true372
  %cond376 = phi i32 [ %rookmates.4, %cond.true372 ], [ %i83, %cond.false373 ]
  %tobool377 = icmp ne i32 %queenmates.4, 0
  br i1 %tobool377, label %cond.true378, label %cond.false379

cond.true378:                                     ; preds = %cond.end375
  store i32 %queenmates.4, i32* @CheckBadFlow.queenmated, align 4
  br label %cond.end381

cond.false379:                                    ; preds = %cond.end375
  %i84 = load i32, i32* @CheckBadFlow.queenmated, align 4
  %dec380 = add nsw i32 %i84, -1
  store i32 %dec380, i32* @CheckBadFlow.queenmated, align 4
  br label %cond.end381

cond.end381:                                      ; preds = %cond.false379, %cond.true378
  %cond382 = phi i32 [ %queenmates.4, %cond.true378 ], [ %i84, %cond.false379 ]
  %tobool383 = icmp ne i32 %knightmates.4, 0
  br i1 %tobool383, label %cond.true384, label %cond.false385

cond.true384:                                     ; preds = %cond.end381
  store i32 %knightmates.4, i32* @CheckBadFlow.knightmated, align 4
  br label %cond.end387

cond.false385:                                    ; preds = %cond.end381
  %i85 = load i32, i32* @CheckBadFlow.knightmated, align 4
  %dec386 = add nsw i32 %i85, -1
  store i32 %dec386, i32* @CheckBadFlow.knightmated, align 4
  br label %cond.end387

cond.end387:                                      ; preds = %cond.false385, %cond.true384
  %cond388 = phi i32 [ %knightmates.4, %cond.true384 ], [ %i85, %cond.false385 ]
  br label %return

return:                                           ; preds = %cond.end387, %if.then
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local i8* @Xmalloc(i32 %size) #0 {
entry:
  %i = load i32, i32* @bufftop, align 4
  %i1 = load i32, i32* @bufftop, align 4
  %add = add nsw i32 %i1, %size
  store i32 %add, i32* @bufftop, align 4
  %i2 = load i8*, i8** @membuff, align 8
  %idxprom = sext i32 %i to i64
  %arrayidx = getelementptr inbounds i8, i8* %i2, i64 %idxprom
  ret i8* %arrayidx
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @Xfree() #0 {
entry:
  store i32 0, i32* @bufftop, align 4
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @freenodes(%struct.node* %node) #0 {
entry:
  %tobool = icmp ne %struct.node* %node, null
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  br label %return

if.end:                                           ; preds = %entry
  %children = getelementptr inbounds %struct.node, %struct.node* %node, i32 0, i32 6
  %i = load %struct.node**, %struct.node*** %children, align 8
  %tobool1 = icmp ne %struct.node** %i, null
  br i1 %tobool1, label %if.then2, label %if.end19

if.then2:                                         ; preds = %if.end
  %num_children = getelementptr inbounds %struct.node, %struct.node* %node, i32 0, i32 1
  %i1 = load i8, i8* %num_children, align 1
  %conv = zext i8 %i1 to i32
  %cmp = icmp sgt i32 %conv, 0
  br i1 %cmp, label %if.then4, label %if.end18

if.then4:                                         ; preds = %if.then2
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then4
  %i.0 = phi i32 [ 0, %if.then4 ], [ %inc, %for.inc ]
  %num_children5 = getelementptr inbounds %struct.node, %struct.node* %node, i32 0, i32 1
  %i2 = load i8, i8* %num_children5, align 1
  %conv6 = zext i8 %i2 to i32
  %cmp7 = icmp slt i32 %i.0, %conv6
  br i1 %cmp7, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %children9 = getelementptr inbounds %struct.node, %struct.node* %node, i32 0, i32 6
  %i3 = load %struct.node**, %struct.node*** %children9, align 8
  %idxprom = sext i32 %i.0 to i64
  %arrayidx = getelementptr inbounds %struct.node*, %struct.node** %i3, i64 %idxprom
  %i4 = load %struct.node*, %struct.node** %arrayidx, align 8
  %cmp10 = icmp ne %struct.node* %i4, null
  br i1 %cmp10, label %if.then12, label %if.end16

if.then12:                                        ; preds = %for.body
  %children13 = getelementptr inbounds %struct.node, %struct.node* %node, i32 0, i32 6
  %i5 = load %struct.node**, %struct.node*** %children13, align 8
  %idxprom14 = sext i32 %i.0 to i64
  %arrayidx15 = getelementptr inbounds %struct.node*, %struct.node** %i5, i64 %idxprom14
  %i6 = load %struct.node*, %struct.node** %arrayidx15, align 8
  call void @freenodes(%struct.node* %i6)
  br label %if.end16

if.end16:                                         ; preds = %if.then12, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end16
  %inc = add nsw i32 %i.0, 1
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %children17 = getelementptr inbounds %struct.node, %struct.node* %node, i32 0, i32 6
  %i7 = load %struct.node**, %struct.node*** %children17, align 8
  %i8 = bitcast %struct.node** %i7 to i8*
  call void @free(i8* %i8) #8
  br label %if.end18

if.end18:                                         ; preds = %for.end, %if.then2
  br label %if.end19

if.end19:                                         ; preds = %if.end18, %if.end
  %i9 = bitcast %struct.node* %node to i8*
  call void @free(i8* %i9) #8
  br label %return

return:                                           ; preds = %if.end19, %if.then
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @pn_eval(%struct.node* %this) #0 {
entry:
  %i = load i32, i32* @Variant, align 4
  %cmp = icmp eq i32 %i, 3
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  call void @suicide_pn_eval(%struct.node* %this)
  br label %if.end4

if.else:                                          ; preds = %entry
  %i1 = load i32, i32* @Variant, align 4
  %cmp1 = icmp eq i32 %i1, 4
  br i1 %cmp1, label %if.then2, label %if.else3

if.then2:                                         ; preds = %if.else
  call void @losers_pn_eval(%struct.node* %this)
  br label %if.end

if.else3:                                         ; preds = %if.else
  call void @std_pn_eval(%struct.node* %this)
  br label %if.end

if.end:                                           ; preds = %if.else3, %if.then2
  br label %if.end4

if.end4:                                          ; preds = %if.end, %if.then
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @suicide_pn_eval(%struct.node* %this) #0 {
entry:
  %evaluated = getelementptr inbounds %struct.node, %struct.node* %this, i32 0, i32 3
  store i8 1, i8* %evaluated, align 1
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %wp.0 = phi i32 [ 0, %entry ], [ %wp.2, %for.inc ]
  %a.0 = phi i32 [ 1, %entry ], [ %a.1, %for.inc ]
  %j.0 = phi i32 [ 1, %entry ], [ %inc10, %for.inc ]
  %bp.0 = phi i32 [ 0, %entry ], [ %bp.2, %for.inc ]
  %i = load i32, i32* @piece_count, align 4
  %cmp = icmp sle i32 %a.0, %i
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %idxprom = sext i32 %j.0 to i64
  %arrayidx = getelementptr inbounds [62 x i32], [62 x i32]* @pieces, i64 0, i64 %idxprom
  %i1 = load i32, i32* %arrayidx, align 4
  %tobool = icmp ne i32 %i1, 0
  br i1 %tobool, label %if.else, label %if.then

if.then:                                          ; preds = %for.body
  br label %for.inc

if.else:                                          ; preds = %for.body
  %inc = add nsw i32 %a.0, 1
  br label %if.end

if.end:                                           ; preds = %if.else
  %idxprom1 = sext i32 %i1 to i64
  %arrayidx2 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom1
  %i2 = load i32, i32* %arrayidx2, align 4
  switch i32 %i2, label %sw.epilog [
    i32 1, label %sw.bb
    i32 11, label %sw.bb
    i32 7, label %sw.bb
    i32 5, label %sw.bb
    i32 9, label %sw.bb
    i32 3, label %sw.bb
    i32 2, label %sw.bb4
    i32 12, label %sw.bb4
    i32 8, label %sw.bb4
    i32 6, label %sw.bb4
    i32 10, label %sw.bb4
    i32 4, label %sw.bb4
  ]

sw.bb:                                            ; preds = %if.end, %if.end, %if.end, %if.end, %if.end, %if.end
  %inc3 = add nsw i32 %wp.0, 1
  br label %sw.epilog

sw.bb4:                                           ; preds = %if.end, %if.end, %if.end, %if.end, %if.end, %if.end
  %inc5 = add nsw i32 %bp.0, 1
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.bb4, %sw.bb, %if.end
  %wp.1 = phi i32 [ %wp.0, %if.end ], [ %wp.0, %sw.bb4 ], [ %inc3, %sw.bb ]
  %bp.1 = phi i32 [ %bp.0, %if.end ], [ %inc5, %sw.bb4 ], [ %bp.0, %sw.bb ]
  %tobool6 = icmp ne i32 %wp.1, 0
  br i1 %tobool6, label %land.lhs.true, label %if.end9

land.lhs.true:                                    ; preds = %sw.epilog
  %tobool7 = icmp ne i32 %bp.1, 0
  br i1 %tobool7, label %if.then8, label %if.end9

if.then8:                                         ; preds = %land.lhs.true
  br label %for.end

if.end9:                                          ; preds = %land.lhs.true, %sw.epilog
  br label %for.inc

for.inc:                                          ; preds = %if.end9, %if.then
  %wp.2 = phi i32 [ %wp.1, %if.end9 ], [ %wp.0, %if.then ]
  %a.1 = phi i32 [ %inc, %if.end9 ], [ %a.0, %if.then ]
  %bp.2 = phi i32 [ %bp.1, %if.end9 ], [ %bp.0, %if.then ]
  %inc10 = add nsw i32 %j.0, 1
  br label %for.cond

for.end:                                          ; preds = %if.then8, %for.cond
  %wp.3 = phi i32 [ %wp.1, %if.then8 ], [ %wp.0, %for.cond ]
  %bp.3 = phi i32 [ %bp.1, %if.then8 ], [ %bp.0, %for.cond ]
  %tobool11 = icmp ne i32 %wp.3, 0
  br i1 %tobool11, label %if.else18, label %if.then12

if.then12:                                        ; preds = %for.end
  %i3 = load i32, i32* @root_to_move, align 4
  %tobool13 = icmp ne i32 %i3, 0
  br i1 %tobool13, label %if.else15, label %if.then14

if.then14:                                        ; preds = %if.then12
  %value = getelementptr inbounds %struct.node, %struct.node* %this, i32 0, i32 0
  store i8 1, i8* %value, align 8
  br label %if.end17

if.else15:                                        ; preds = %if.then12
  %value16 = getelementptr inbounds %struct.node, %struct.node* %this, i32 0, i32 0
  store i8 0, i8* %value16, align 8
  br label %if.end17

if.end17:                                         ; preds = %if.else15, %if.then14
  br label %if.end30

if.else18:                                        ; preds = %for.end
  %tobool19 = icmp ne i32 %bp.3, 0
  br i1 %tobool19, label %if.else27, label %if.then20

if.then20:                                        ; preds = %if.else18
  %i4 = load i32, i32* @root_to_move, align 4
  %tobool21 = icmp ne i32 %i4, 0
  br i1 %tobool21, label %if.else24, label %if.then22

if.then22:                                        ; preds = %if.then20
  %value23 = getelementptr inbounds %struct.node, %struct.node* %this, i32 0, i32 0
  store i8 0, i8* %value23, align 8
  br label %if.end26

if.else24:                                        ; preds = %if.then20
  %value25 = getelementptr inbounds %struct.node, %struct.node* %this, i32 0, i32 0
  store i8 1, i8* %value25, align 8
  br label %if.end26

if.end26:                                         ; preds = %if.else24, %if.then22
  br label %if.end29

if.else27:                                        ; preds = %if.else18
  %value28 = getelementptr inbounds %struct.node, %struct.node* %this, i32 0, i32 0
  store i8 2, i8* %value28, align 8
  br label %if.end29

if.end29:                                         ; preds = %if.else27, %if.end26
  br label %if.end30

if.end30:                                         ; preds = %if.end29, %if.end17
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @losers_pn_eval(%struct.node* %this) #0 {
entry:
  %moves = alloca [512 x %struct.move_s], align 16
  %evaluated = getelementptr inbounds %struct.node, %struct.node* %this, i32 0, i32 3
  store i8 1, i8* %evaluated, align 1
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %wp.0 = phi i32 [ 0, %entry ], [ %wp.2, %for.inc ]
  %a.0 = phi i32 [ 1, %entry ], [ %a.1, %for.inc ]
  %j.0 = phi i32 [ 1, %entry ], [ %inc10, %for.inc ]
  %bp.0 = phi i32 [ 0, %entry ], [ %bp.2, %for.inc ]
  %i = load i32, i32* @piece_count, align 4
  %cmp = icmp sle i32 %a.0, %i
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %idxprom = sext i32 %j.0 to i64
  %arrayidx = getelementptr inbounds [62 x i32], [62 x i32]* @pieces, i64 0, i64 %idxprom
  %i1 = load i32, i32* %arrayidx, align 4
  %tobool = icmp ne i32 %i1, 0
  br i1 %tobool, label %if.else, label %if.then

if.then:                                          ; preds = %for.body
  br label %for.inc

if.else:                                          ; preds = %for.body
  %inc = add nsw i32 %a.0, 1
  br label %if.end

if.end:                                           ; preds = %if.else
  %idxprom1 = sext i32 %i1 to i64
  %arrayidx2 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom1
  %i2 = load i32, i32* %arrayidx2, align 4
  switch i32 %i2, label %sw.epilog [
    i32 1, label %sw.bb
    i32 11, label %sw.bb
    i32 7, label %sw.bb
    i32 9, label %sw.bb
    i32 3, label %sw.bb
    i32 2, label %sw.bb4
    i32 12, label %sw.bb4
    i32 8, label %sw.bb4
    i32 10, label %sw.bb4
    i32 4, label %sw.bb4
  ]

sw.bb:                                            ; preds = %if.end, %if.end, %if.end, %if.end, %if.end
  %inc3 = add nsw i32 %wp.0, 1
  br label %sw.epilog

sw.bb4:                                           ; preds = %if.end, %if.end, %if.end, %if.end, %if.end
  %inc5 = add nsw i32 %bp.0, 1
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.bb4, %sw.bb, %if.end
  %wp.1 = phi i32 [ %wp.0, %if.end ], [ %wp.0, %sw.bb4 ], [ %inc3, %sw.bb ]
  %bp.1 = phi i32 [ %bp.0, %if.end ], [ %inc5, %sw.bb4 ], [ %bp.0, %sw.bb ]
  %tobool6 = icmp ne i32 %wp.1, 0
  br i1 %tobool6, label %land.lhs.true, label %if.end9

land.lhs.true:                                    ; preds = %sw.epilog
  %tobool7 = icmp ne i32 %bp.1, 0
  br i1 %tobool7, label %if.then8, label %if.end9

if.then8:                                         ; preds = %land.lhs.true
  br label %for.end

if.end9:                                          ; preds = %land.lhs.true, %sw.epilog
  br label %for.inc

for.inc:                                          ; preds = %if.end9, %if.then
  %wp.2 = phi i32 [ %wp.1, %if.end9 ], [ %wp.0, %if.then ]
  %a.1 = phi i32 [ %inc, %if.end9 ], [ %a.0, %if.then ]
  %bp.2 = phi i32 [ %bp.1, %if.end9 ], [ %bp.0, %if.then ]
  %inc10 = add nsw i32 %j.0, 1
  br label %for.cond

for.end:                                          ; preds = %if.then8, %for.cond
  %wp.3 = phi i32 [ %wp.1, %if.then8 ], [ %wp.0, %for.cond ]
  %bp.3 = phi i32 [ %bp.1, %if.then8 ], [ %bp.0, %for.cond ]
  %tobool11 = icmp ne i32 %wp.3, 0
  br i1 %tobool11, label %if.else18, label %if.then12

if.then12:                                        ; preds = %for.end
  %i3 = load i32, i32* @root_to_move, align 4
  %tobool13 = icmp ne i32 %i3, 0
  br i1 %tobool13, label %if.else15, label %if.then14

if.then14:                                        ; preds = %if.then12
  %value = getelementptr inbounds %struct.node, %struct.node* %this, i32 0, i32 0
  store i8 1, i8* %value, align 8
  br label %if.end17

if.else15:                                        ; preds = %if.then12
  %value16 = getelementptr inbounds %struct.node, %struct.node* %this, i32 0, i32 0
  store i8 0, i8* %value16, align 8
  br label %if.end17

if.end17:                                         ; preds = %if.else15, %if.then14
  br label %if.end84

if.else18:                                        ; preds = %for.end
  %tobool19 = icmp ne i32 %bp.3, 0
  br i1 %tobool19, label %if.end27, label %if.then20

if.then20:                                        ; preds = %if.else18
  %i4 = load i32, i32* @root_to_move, align 4
  %tobool21 = icmp ne i32 %i4, 0
  br i1 %tobool21, label %if.then22, label %if.else24

if.then22:                                        ; preds = %if.then20
  %value23 = getelementptr inbounds %struct.node, %struct.node* %this, i32 0, i32 0
  store i8 1, i8* %value23, align 8
  br label %if.end26

if.else24:                                        ; preds = %if.then20
  %value25 = getelementptr inbounds %struct.node, %struct.node* %this, i32 0, i32 0
  store i8 0, i8* %value25, align 8
  br label %if.end26

if.end26:                                         ; preds = %if.else24, %if.then22
  br label %if.end84

if.end27:                                         ; preds = %if.else18
  br label %if.end28

if.end28:                                         ; preds = %if.end27
  %i5 = load i32, i32* @white_to_move, align 4
  %tobool29 = icmp ne i32 %i5, 0
  br i1 %tobool29, label %land.lhs.true30, label %lor.lhs.false

land.lhs.true30:                                  ; preds = %if.end28
  %i6 = load i32, i32* @wking_loc, align 4
  %call = call i32 @is_attacked(i32 %i6, i32 0)
  %tobool31 = icmp ne i32 %call, 0
  br i1 %tobool31, label %if.then36, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true30, %if.end28
  %i7 = load i32, i32* @white_to_move, align 4
  %tobool32 = icmp ne i32 %i7, 0
  br i1 %tobool32, label %if.else82, label %land.lhs.true33

land.lhs.true33:                                  ; preds = %lor.lhs.false
  %i8 = load i32, i32* @bking_loc, align 4
  %call34 = call i32 @is_attacked(i32 %i8, i32 1)
  %tobool35 = icmp ne i32 %call34, 0
  br i1 %tobool35, label %if.then36, label %if.else82

if.then36:                                        ; preds = %land.lhs.true33, %land.lhs.true30
  store i32 1, i32* @captures, align 4
  %arrayidx37 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %moves, i64 0, i64 0
  call void @gen(%struct.move_s* %arrayidx37)
  %i9 = load i32, i32* @numb_moves, align 4
  store i32 0, i32* @captures, align 4
  br label %for.cond38

for.cond38:                                       ; preds = %for.inc49, %if.then36
  %i.0 = phi i32 [ 0, %if.then36 ], [ %inc50, %for.inc49 ]
  %cmp39 = icmp slt i32 %i.0, %i9
  br i1 %cmp39, label %for.body40, label %for.end51

for.body40:                                       ; preds = %for.cond38
  %arrayidx41 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %moves, i64 0, i64 0
  call void @make(%struct.move_s* %arrayidx41, i32 %i.0)
  %arrayidx42 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %moves, i64 0, i64 0
  %call43 = call i32 @check_legal(%struct.move_s* %arrayidx42, i32 %i.0, i32 1)
  %tobool44 = icmp ne i32 %call43, 0
  br i1 %tobool44, label %if.then45, label %if.end47

if.then45:                                        ; preds = %for.body40
  %arrayidx46 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %moves, i64 0, i64 0
  call void @unmake(%struct.move_s* %arrayidx46, i32 %i.0)
  br label %for.end51

if.end47:                                         ; preds = %for.body40
  %arrayidx48 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %moves, i64 0, i64 0
  call void @unmake(%struct.move_s* %arrayidx48, i32 %i.0)
  br label %for.inc49

for.inc49:                                        ; preds = %if.end47
  %inc50 = add nsw i32 %i.0, 1
  br label %for.cond38

for.end51:                                        ; preds = %if.then45, %for.cond38
  %mate.0 = phi i32 [ 0, %if.then45 ], [ 1, %for.cond38 ]
  %cmp52 = icmp eq i32 %mate.0, 1
  br i1 %cmp52, label %if.then53, label %if.end69

if.then53:                                        ; preds = %for.end51
  store i32 0, i32* @captures, align 4
  %arrayidx54 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %moves, i64 0, i64 0
  call void @gen(%struct.move_s* %arrayidx54)
  %i10 = load i32, i32* @numb_moves, align 4
  br label %for.cond55

for.cond55:                                       ; preds = %for.inc66, %if.then53
  %i.1 = phi i32 [ 0, %if.then53 ], [ %inc67, %for.inc66 ]
  %cmp56 = icmp slt i32 %i.1, %i10
  br i1 %cmp56, label %for.body57, label %for.end68

for.body57:                                       ; preds = %for.cond55
  %arrayidx58 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %moves, i64 0, i64 0
  call void @make(%struct.move_s* %arrayidx58, i32 %i.1)
  %arrayidx59 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %moves, i64 0, i64 0
  %call60 = call i32 @check_legal(%struct.move_s* %arrayidx59, i32 %i.1, i32 1)
  %tobool61 = icmp ne i32 %call60, 0
  br i1 %tobool61, label %if.then62, label %if.end64

if.then62:                                        ; preds = %for.body57
  %arrayidx63 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %moves, i64 0, i64 0
  call void @unmake(%struct.move_s* %arrayidx63, i32 %i.1)
  br label %for.end68

if.end64:                                         ; preds = %for.body57
  %arrayidx65 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %moves, i64 0, i64 0
  call void @unmake(%struct.move_s* %arrayidx65, i32 %i.1)
  br label %for.inc66

for.inc66:                                        ; preds = %if.end64
  %inc67 = add nsw i32 %i.1, 1
  br label %for.cond55

for.end68:                                        ; preds = %if.then62, %for.cond55
  %mate.1 = phi i32 [ 0, %if.then62 ], [ %mate.0, %for.cond55 ]
  br label %if.end69

if.end69:                                         ; preds = %for.end68, %for.end51
  %mate.2 = phi i32 [ %mate.1, %for.end68 ], [ %mate.0, %for.end51 ]
  %cmp70 = icmp eq i32 %mate.2, 1
  br i1 %cmp70, label %if.then71, label %if.else79

if.then71:                                        ; preds = %if.end69
  %i11 = load i32, i32* @white_to_move, align 4
  %tobool72 = icmp ne i32 %i11, 0
  %i12 = zext i1 %tobool72 to i64
  %cond = select i1 %tobool72, i32 0, i32 1
  %i13 = load i32, i32* @root_to_move, align 4
  %cmp73 = icmp eq i32 %cond, %i13
  br i1 %cmp73, label %if.then74, label %if.else76

if.then74:                                        ; preds = %if.then71
  %value75 = getelementptr inbounds %struct.node, %struct.node* %this, i32 0, i32 0
  store i8 1, i8* %value75, align 8
  br label %if.end78

if.else76:                                        ; preds = %if.then71
  %value77 = getelementptr inbounds %struct.node, %struct.node* %this, i32 0, i32 0
  store i8 0, i8* %value77, align 8
  br label %if.end78

if.end78:                                         ; preds = %if.else76, %if.then74
  br label %if.end81

if.else79:                                        ; preds = %if.end69
  %value80 = getelementptr inbounds %struct.node, %struct.node* %this, i32 0, i32 0
  store i8 2, i8* %value80, align 8
  br label %if.end81

if.end81:                                         ; preds = %if.else79, %if.end78
  br label %if.end84

if.else82:                                        ; preds = %land.lhs.true33, %lor.lhs.false
  %value83 = getelementptr inbounds %struct.node, %struct.node* %this, i32 0, i32 0
  store i8 2, i8* %value83, align 8
  br label %if.end84

if.end84:                                         ; preds = %if.else82, %if.end81, %if.end26, %if.end17
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @std_pn_eval(%struct.node* %this) #0 {
entry:
  %moves = alloca [512 x %struct.move_s], align 16
  %evaluated = getelementptr inbounds %struct.node, %struct.node* %this, i32 0, i32 3
  store i8 1, i8* %evaluated, align 1
  %i = load i32, i32* @white_to_move, align 4
  %tobool = icmp ne i32 %i, 0
  br i1 %tobool, label %land.lhs.true, label %lor.lhs.false

land.lhs.true:                                    ; preds = %entry
  %i1 = load i32, i32* @wking_loc, align 4
  %call = call i32 @is_attacked(i32 %i1, i32 0)
  %tobool1 = icmp ne i32 %call, 0
  br i1 %tobool1, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true, %entry
  %i2 = load i32, i32* @white_to_move, align 4
  %tobool2 = icmp ne i32 %i2, 0
  br i1 %tobool2, label %if.else23, label %land.lhs.true3

land.lhs.true3:                                   ; preds = %lor.lhs.false
  %i3 = load i32, i32* @bking_loc, align 4
  %call4 = call i32 @is_attacked(i32 %i3, i32 1)
  %tobool5 = icmp ne i32 %call4, 0
  br i1 %tobool5, label %if.then, label %if.else23

if.then:                                          ; preds = %land.lhs.true3, %land.lhs.true
  %arrayidx = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %moves, i64 0, i64 0
  call void @gen(%struct.move_s* %arrayidx)
  %i4 = load i32, i32* @numb_moves, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then
  %i.0 = phi i32 [ 0, %if.then ], [ %inc, %for.inc ]
  %cmp = icmp slt i32 %i.0, %i4
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %arrayidx6 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %moves, i64 0, i64 0
  call void @make(%struct.move_s* %arrayidx6, i32 %i.0)
  %arrayidx7 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %moves, i64 0, i64 0
  %call8 = call i32 @check_legal(%struct.move_s* %arrayidx7, i32 %i.0, i32 1)
  %tobool9 = icmp ne i32 %call8, 0
  br i1 %tobool9, label %if.then10, label %if.end

if.then10:                                        ; preds = %for.body
  %arrayidx11 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %moves, i64 0, i64 0
  call void @unmake(%struct.move_s* %arrayidx11, i32 %i.0)
  br label %for.end

if.end:                                           ; preds = %for.body
  %arrayidx12 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %moves, i64 0, i64 0
  call void @unmake(%struct.move_s* %arrayidx12, i32 %i.0)
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %inc = add nsw i32 %i.0, 1
  br label %for.cond

for.end:                                          ; preds = %if.then10, %for.cond
  %mate.0 = phi i32 [ 0, %if.then10 ], [ 1, %for.cond ]
  %cmp13 = icmp eq i32 %mate.0, 1
  br i1 %cmp13, label %if.then14, label %if.else20

if.then14:                                        ; preds = %for.end
  %i5 = load i32, i32* @white_to_move, align 4
  %tobool15 = icmp ne i32 %i5, 0
  %i6 = zext i1 %tobool15 to i64
  %cond = select i1 %tobool15, i32 0, i32 1
  %i7 = load i32, i32* @root_to_move, align 4
  %cmp16 = icmp eq i32 %cond, %i7
  br i1 %cmp16, label %if.then17, label %if.else

if.then17:                                        ; preds = %if.then14
  %value = getelementptr inbounds %struct.node, %struct.node* %this, i32 0, i32 0
  store i8 0, i8* %value, align 8
  br label %if.end19

if.else:                                          ; preds = %if.then14
  %value18 = getelementptr inbounds %struct.node, %struct.node* %this, i32 0, i32 0
  store i8 1, i8* %value18, align 8
  br label %if.end19

if.end19:                                         ; preds = %if.else, %if.then17
  br label %if.end22

if.else20:                                        ; preds = %for.end
  %value21 = getelementptr inbounds %struct.node, %struct.node* %this, i32 0, i32 0
  store i8 2, i8* %value21, align 8
  br label %if.end22

if.end22:                                         ; preds = %if.else20, %if.end19
  br label %if.end25

if.else23:                                        ; preds = %land.lhs.true3, %lor.lhs.false
  %value24 = getelementptr inbounds %struct.node, %struct.node* %this, i32 0, i32 0
  store i8 2, i8* %value24, align 8
  br label %if.end25

if.end25:                                         ; preds = %if.else23, %if.end22
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local %struct.node* @select_most_proving(%struct.node* %node) #0 {
entry:
  br label %while.cond

while.cond:                                       ; preds = %if.end22, %entry
  %tnode.0 = phi %struct.node* [ %node, %entry ], [ %i13, %if.end22 ]
  %expanded = getelementptr inbounds %struct.node, %struct.node* %tnode.0, i32 0, i32 2
  %i = load i8, i8* %expanded, align 2
  %tobool = icmp ne i8 %i, 0
  br i1 %tobool, label %while.body, label %while.end23

while.body:                                       ; preds = %while.cond
  %i1 = load i32, i32* @white_to_move, align 4
  %tobool1 = icmp ne i32 %i1, 0
  %i2 = zext i1 %tobool1 to i64
  %cond = select i1 %tobool1, i32 0, i32 1
  %i3 = load i32, i32* @root_to_move, align 4
  %cmp = icmp eq i32 %cond, %i3
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %while.body
  br label %while.cond2

while.cond2:                                      ; preds = %while.body5, %if.then
  %i.0 = phi i32 [ 0, %if.then ], [ %inc, %while.body5 ]
  %children = getelementptr inbounds %struct.node, %struct.node* %tnode.0, i32 0, i32 6
  %i4 = load %struct.node**, %struct.node*** %children, align 8
  %idxprom = sext i32 %i.0 to i64
  %arrayidx = getelementptr inbounds %struct.node*, %struct.node** %i4, i64 %idxprom
  %i5 = load %struct.node*, %struct.node** %arrayidx, align 8
  %proof = getelementptr inbounds %struct.node, %struct.node* %i5, i32 0, i32 4
  %i6 = load i32, i32* %proof, align 4
  %proof3 = getelementptr inbounds %struct.node, %struct.node* %tnode.0, i32 0, i32 4
  %i7 = load i32, i32* %proof3, align 4
  %cmp4 = icmp ne i32 %i6, %i7
  br i1 %cmp4, label %while.body5, label %while.end

while.body5:                                      ; preds = %while.cond2
  %inc = add nsw i32 %i.0, 1
  br label %while.cond2

while.end:                                        ; preds = %while.cond2
  br label %if.end

if.else:                                          ; preds = %while.body
  br label %while.cond6

while.cond6:                                      ; preds = %while.body12, %if.else
  %i.1 = phi i32 [ 0, %if.else ], [ %inc13, %while.body12 ]
  %children7 = getelementptr inbounds %struct.node, %struct.node* %tnode.0, i32 0, i32 6
  %i8 = load %struct.node**, %struct.node*** %children7, align 8
  %idxprom8 = sext i32 %i.1 to i64
  %arrayidx9 = getelementptr inbounds %struct.node*, %struct.node** %i8, i64 %idxprom8
  %i9 = load %struct.node*, %struct.node** %arrayidx9, align 8
  %disproof = getelementptr inbounds %struct.node, %struct.node* %i9, i32 0, i32 5
  %i10 = load i32, i32* %disproof, align 8
  %disproof10 = getelementptr inbounds %struct.node, %struct.node* %tnode.0, i32 0, i32 5
  %i11 = load i32, i32* %disproof10, align 8
  %cmp11 = icmp ne i32 %i10, %i11
  br i1 %cmp11, label %while.body12, label %while.end14

while.body12:                                     ; preds = %while.cond6
  %inc13 = add nsw i32 %i.1, 1
  br label %while.cond6

while.end14:                                      ; preds = %while.cond6
  br label %if.end

if.end:                                           ; preds = %while.end14, %while.end
  %i.2 = phi i32 [ %i.0, %while.end ], [ %i.1, %while.end14 ]
  %children15 = getelementptr inbounds %struct.node, %struct.node* %tnode.0, i32 0, i32 6
  %i12 = load %struct.node**, %struct.node*** %children15, align 8
  %idxprom16 = sext i32 %i.2 to i64
  %arrayidx17 = getelementptr inbounds %struct.node*, %struct.node** %i12, i64 %idxprom16
  %i13 = load %struct.node*, %struct.node** %arrayidx17, align 8
  %i14 = load i32, i32* @hash, align 4
  %i15 = load i32, i32* @move_number, align 4
  %i16 = load i32, i32* @ply, align 4
  %add = add nsw i32 %i15, %i16
  %sub = sub nsw i32 %add, 1
  %idxprom18 = sext i32 %sub to i64
  %arrayidx19 = getelementptr inbounds [600 x i32], [600 x i32]* @hash_history, i64 0, i64 %idxprom18
  store i32 %i14, i32* %arrayidx19, align 4
  %move = getelementptr inbounds %struct.node, %struct.node* %i13, i32 0, i32 8
  call void @make(%struct.move_s* %move, i32 0)
  %i17 = load i32, i32* @ply, align 4
  %i18 = load i32, i32* @maxply, align 4
  %cmp20 = icmp sgt i32 %i17, %i18
  br i1 %cmp20, label %if.then21, label %if.end22

if.then21:                                        ; preds = %if.end
  %i19 = load i32, i32* @ply, align 4
  store i32 %i19, i32* @maxply, align 4
  br label %if.end22

if.end22:                                         ; preds = %if.then21, %if.end
  br label %while.cond

while.end23:                                      ; preds = %while.cond
  ret %struct.node* %tnode.0
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @set_proof_and_disproof_numbers(%struct.node* %node) #0 {
entry:
  %moves = alloca [512 x %struct.move_s], align 16
  %expanded = getelementptr inbounds %struct.node, %struct.node* %node, i32 0, i32 2
  %i = load i8, i8* %expanded, align 2
  %tobool = icmp ne i8 %i, 0
  br i1 %tobool, label %if.then, label %if.else90

if.then:                                          ; preds = %entry
  %i1 = load i32, i32* @white_to_move, align 4
  %tobool1 = icmp ne i32 %i1, 0
  %i2 = zext i1 %tobool1 to i64
  %cond = select i1 %tobool1, i32 0, i32 1
  %i3 = load i32, i32* @root_to_move, align 4
  %cmp = icmp ne i32 %cond, %i3
  br i1 %cmp, label %if.then2, label %if.else36

if.then2:                                         ; preds = %if.then
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then2
  %i.0 = phi i32 [ 0, %if.then2 ], [ %inc, %for.inc ]
  %disproof.0 = phi i32 [ 100000000, %if.then2 ], [ %disproof.1, %for.inc ]
  %proof.0 = phi i32 [ 0, %if.then2 ], [ %proof.1, %for.inc ]
  %num_children = getelementptr inbounds %struct.node, %struct.node* %node, i32 0, i32 1
  %i4 = load i8, i8* %num_children, align 1
  %conv = zext i8 %i4 to i32
  %cmp3 = icmp slt i32 %i.0, %conv
  br i1 %cmp3, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %children = getelementptr inbounds %struct.node, %struct.node* %node, i32 0, i32 6
  %i5 = load %struct.node**, %struct.node*** %children, align 8
  %idxprom = sext i32 %i.0 to i64
  %arrayidx = getelementptr inbounds %struct.node*, %struct.node** %i5, i64 %idxprom
  %i6 = load %struct.node*, %struct.node** %arrayidx, align 8
  %proof5 = getelementptr inbounds %struct.node, %struct.node* %i6, i32 0, i32 4
  %i7 = load i32, i32* %proof5, align 4
  %add = add nsw i32 %proof.0, %i7
  %cmp6 = icmp sgt i32 %add, 100000000
  br i1 %cmp6, label %if.then8, label %if.end

if.then8:                                         ; preds = %for.body
  br label %if.end

if.end:                                           ; preds = %if.then8, %for.body
  %proof.1 = phi i32 [ 100000000, %if.then8 ], [ %add, %for.body ]
  %children9 = getelementptr inbounds %struct.node, %struct.node* %node, i32 0, i32 6
  %i8 = load %struct.node**, %struct.node*** %children9, align 8
  %idxprom10 = sext i32 %i.0 to i64
  %arrayidx11 = getelementptr inbounds %struct.node*, %struct.node** %i8, i64 %idxprom10
  %i9 = load %struct.node*, %struct.node** %arrayidx11, align 8
  %disproof12 = getelementptr inbounds %struct.node, %struct.node* %i9, i32 0, i32 5
  %i10 = load i32, i32* %disproof12, align 8
  %cmp13 = icmp slt i32 %i10, %disproof.0
  br i1 %cmp13, label %if.then15, label %if.end20

if.then15:                                        ; preds = %if.end
  %children16 = getelementptr inbounds %struct.node, %struct.node* %node, i32 0, i32 6
  %i11 = load %struct.node**, %struct.node*** %children16, align 8
  %idxprom17 = sext i32 %i.0 to i64
  %arrayidx18 = getelementptr inbounds %struct.node*, %struct.node** %i11, i64 %idxprom17
  %i12 = load %struct.node*, %struct.node** %arrayidx18, align 8
  %disproof19 = getelementptr inbounds %struct.node, %struct.node* %i12, i32 0, i32 5
  %i13 = load i32, i32* %disproof19, align 8
  br label %if.end20

if.end20:                                         ; preds = %if.then15, %if.end
  %disproof.1 = phi i32 [ %i13, %if.then15 ], [ %disproof.0, %if.end ]
  br label %for.inc

for.inc:                                          ; preds = %if.end20
  %inc = add nsw i32 %i.0, 1
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %cmp21 = icmp eq i32 %proof.0, 0
  br i1 %cmp21, label %if.then25, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %for.end
  %cmp23 = icmp eq i32 %disproof.0, 100000000
  br i1 %cmp23, label %if.then25, label %if.else

if.then25:                                        ; preds = %lor.lhs.false, %for.end
  %i14 = load i32, i32* @forwards, align 4
  %inc26 = add nsw i32 %i14, 1
  store i32 %inc26, i32* @forwards, align 4
  call void @StoreTT(i32 999500, i32 1000000, i32 -1000000, i32 -1, i32 0, i32 200)
  br label %if.end35

if.else:                                          ; preds = %lor.lhs.false
  %cmp27 = icmp eq i32 %disproof.0, 0
  br i1 %cmp27, label %if.then32, label %lor.lhs.false29

lor.lhs.false29:                                  ; preds = %if.else
  %cmp30 = icmp eq i32 %proof.0, 100000000
  br i1 %cmp30, label %if.then32, label %if.end34

if.then32:                                        ; preds = %lor.lhs.false29, %if.else
  %i15 = load i32, i32* @forwards, align 4
  %inc33 = add nsw i32 %i15, 1
  store i32 %inc33, i32* @forwards, align 4
  call void @StoreTT(i32 -999500, i32 1000000, i32 -1000000, i32 -1, i32 0, i32 200)
  br label %if.end34

if.end34:                                         ; preds = %if.then32, %lor.lhs.false29
  br label %if.end35

if.end35:                                         ; preds = %if.end34, %if.then25
  br label %if.end84

if.else36:                                        ; preds = %if.then
  br label %for.cond37

for.cond37:                                       ; preds = %for.inc64, %if.else36
  %i.1 = phi i32 [ 0, %if.else36 ], [ %inc65, %for.inc64 ]
  %disproof.2 = phi i32 [ 0, %if.else36 ], [ %disproof.3, %for.inc64 ]
  %proof.2 = phi i32 [ 100000000, %if.else36 ], [ %proof.3, %for.inc64 ]
  %num_children38 = getelementptr inbounds %struct.node, %struct.node* %node, i32 0, i32 1
  %i16 = load i8, i8* %num_children38, align 1
  %conv39 = zext i8 %i16 to i32
  %cmp40 = icmp slt i32 %i.1, %conv39
  br i1 %cmp40, label %for.body42, label %for.end66

for.body42:                                       ; preds = %for.cond37
  %children43 = getelementptr inbounds %struct.node, %struct.node* %node, i32 0, i32 6
  %i17 = load %struct.node**, %struct.node*** %children43, align 8
  %idxprom44 = sext i32 %i.1 to i64
  %arrayidx45 = getelementptr inbounds %struct.node*, %struct.node** %i17, i64 %idxprom44
  %i18 = load %struct.node*, %struct.node** %arrayidx45, align 8
  %disproof46 = getelementptr inbounds %struct.node, %struct.node* %i18, i32 0, i32 5
  %i19 = load i32, i32* %disproof46, align 8
  %add47 = add nsw i32 %disproof.2, %i19
  %cmp48 = icmp sgt i32 %add47, 100000000
  br i1 %cmp48, label %if.then50, label %if.end51

if.then50:                                        ; preds = %for.body42
  br label %if.end51

if.end51:                                         ; preds = %if.then50, %for.body42
  %disproof.3 = phi i32 [ 100000000, %if.then50 ], [ %add47, %for.body42 ]
  %children52 = getelementptr inbounds %struct.node, %struct.node* %node, i32 0, i32 6
  %i20 = load %struct.node**, %struct.node*** %children52, align 8
  %idxprom53 = sext i32 %i.1 to i64
  %arrayidx54 = getelementptr inbounds %struct.node*, %struct.node** %i20, i64 %idxprom53
  %i21 = load %struct.node*, %struct.node** %arrayidx54, align 8
  %proof55 = getelementptr inbounds %struct.node, %struct.node* %i21, i32 0, i32 4
  %i22 = load i32, i32* %proof55, align 4
  %cmp56 = icmp slt i32 %i22, %proof.2
  br i1 %cmp56, label %if.then58, label %if.end63

if.then58:                                        ; preds = %if.end51
  %children59 = getelementptr inbounds %struct.node, %struct.node* %node, i32 0, i32 6
  %i23 = load %struct.node**, %struct.node*** %children59, align 8
  %idxprom60 = sext i32 %i.1 to i64
  %arrayidx61 = getelementptr inbounds %struct.node*, %struct.node** %i23, i64 %idxprom60
  %i24 = load %struct.node*, %struct.node** %arrayidx61, align 8
  %proof62 = getelementptr inbounds %struct.node, %struct.node* %i24, i32 0, i32 4
  %i25 = load i32, i32* %proof62, align 4
  br label %if.end63

if.end63:                                         ; preds = %if.then58, %if.end51
  %proof.3 = phi i32 [ %i25, %if.then58 ], [ %proof.2, %if.end51 ]
  br label %for.inc64

for.inc64:                                        ; preds = %if.end63
  %inc65 = add nsw i32 %i.1, 1
  br label %for.cond37

for.end66:                                        ; preds = %for.cond37
  %cmp67 = icmp eq i32 %proof.2, 0
  br i1 %cmp67, label %if.then72, label %lor.lhs.false69

lor.lhs.false69:                                  ; preds = %for.end66
  %cmp70 = icmp eq i32 %disproof.2, 100000000
  br i1 %cmp70, label %if.then72, label %if.else74

if.then72:                                        ; preds = %lor.lhs.false69, %for.end66
  %i26 = load i32, i32* @forwards, align 4
  %inc73 = add nsw i32 %i26, 1
  store i32 %inc73, i32* @forwards, align 4
  call void @StoreTT(i32 999500, i32 1000000, i32 -1000000, i32 -1, i32 0, i32 200)
  br label %if.end83

if.else74:                                        ; preds = %lor.lhs.false69
  %cmp75 = icmp eq i32 %disproof.2, 0
  br i1 %cmp75, label %if.then80, label %lor.lhs.false77

lor.lhs.false77:                                  ; preds = %if.else74
  %cmp78 = icmp eq i32 %proof.2, 100000000
  br i1 %cmp78, label %if.then80, label %if.end82

if.then80:                                        ; preds = %lor.lhs.false77, %if.else74
  %i27 = load i32, i32* @forwards, align 4
  %inc81 = add nsw i32 %i27, 1
  store i32 %inc81, i32* @forwards, align 4
  call void @StoreTT(i32 -999500, i32 1000000, i32 -1000000, i32 -1, i32 0, i32 200)
  br label %if.end82

if.end82:                                         ; preds = %if.then80, %lor.lhs.false77
  br label %if.end83

if.end83:                                         ; preds = %if.end82, %if.then72
  br label %if.end84

if.end84:                                         ; preds = %if.end83, %if.end35
  %disproof.4 = phi i32 [ %disproof.0, %if.end35 ], [ %disproof.2, %if.end83 ]
  %proof.4 = phi i32 [ %proof.0, %if.end35 ], [ %proof.2, %if.end83 ]
  %i28 = load i32, i32* @hash, align 4
  %i29 = load i32, i32* @move_number, align 4
  %i30 = load i32, i32* @ply, align 4
  %add85 = add nsw i32 %i29, %i30
  %sub = sub nsw i32 %add85, 1
  %idxprom86 = sext i32 %sub to i64
  %arrayidx87 = getelementptr inbounds [600 x i32], [600 x i32]* @hash_history, i64 0, i64 %idxprom86
  store i32 %i28, i32* %arrayidx87, align 4
  %proof88 = getelementptr inbounds %struct.node, %struct.node* %node, i32 0, i32 4
  store i32 %proof.4, i32* %proof88, align 4
  %disproof89 = getelementptr inbounds %struct.node, %struct.node* %node, i32 0, i32 5
  store i32 %disproof.4, i32* %disproof89, align 8
  br label %if.end303

if.else90:                                        ; preds = %entry
  %evaluated = getelementptr inbounds %struct.node, %struct.node* %node, i32 0, i32 3
  %i31 = load i8, i8* %evaluated, align 1
  %tobool91 = icmp ne i8 %i31, 0
  br i1 %tobool91, label %if.then92, label %if.else299

if.then92:                                        ; preds = %if.else90
  %value = getelementptr inbounds %struct.node, %struct.node* %node, i32 0, i32 0
  %i32 = load i8, i8* %value, align 8
  %conv93 = zext i8 %i32 to i32
  %cmp94 = icmp eq i32 %conv93, 2
  br i1 %cmp94, label %if.then96, label %if.else271

if.then96:                                        ; preds = %if.then92
  %i33 = load i32, i32* @hash, align 4
  %i34 = load i32, i32* @move_number, align 4
  %i35 = load i32, i32* @ply, align 4
  %add97 = add nsw i32 %i34, %i35
  %sub98 = sub nsw i32 %add97, 1
  %idxprom99 = sext i32 %sub98 to i64
  %arrayidx100 = getelementptr inbounds [600 x i32], [600 x i32]* @hash_history, i64 0, i64 %idxprom99
  store i32 %i33, i32* %arrayidx100, align 4
  %call = call i32 @is_draw()
  %tobool101 = icmp ne i32 %call, 0
  br i1 %tobool101, label %if.then105, label %lor.lhs.false102

lor.lhs.false102:                                 ; preds = %if.then96
  %i36 = load i32, i32* @ply, align 4
  %cmp103 = icmp sgt i32 %i36, 200
  br i1 %cmp103, label %if.then105, label %if.end108

if.then105:                                       ; preds = %lor.lhs.false102, %if.then96
  %proof106 = getelementptr inbounds %struct.node, %struct.node* %node, i32 0, i32 4
  store i32 50000, i32* %proof106, align 4
  %disproof107 = getelementptr inbounds %struct.node, %struct.node* %node, i32 0, i32 5
  store i32 50000, i32* %disproof107, align 8
  br label %if.end303

if.end108:                                        ; preds = %lor.lhs.false102
  %i37 = load i32, i32* @Variant, align 4
  %cmp109 = icmp ne i32 %i37, 4
  br i1 %cmp109, label %if.then111, label %if.else134

if.then111:                                       ; preds = %if.end108
  %arrayidx112 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %moves, i64 0, i64 0
  call void @gen(%struct.move_s* %arrayidx112)
  %i38 = load i32, i32* @numb_moves, align 4
  %call113 = call i32 @in_check()
  %i39 = load i32, i32* @Variant, align 4
  %cmp114 = icmp ne i32 %i39, 3
  br i1 %cmp114, label %if.then116, label %if.else132

if.then116:                                       ; preds = %if.then111
  br label %for.cond117

for.cond117:                                      ; preds = %for.inc129, %if.then116
  %l.0 = phi i32 [ 0, %if.then116 ], [ %l.1, %for.inc129 ]
  %i.2 = phi i32 [ 0, %if.then116 ], [ %inc130, %for.inc129 ]
  %cmp118 = icmp slt i32 %i.2, %i38
  br i1 %cmp118, label %for.body120, label %for.end131

for.body120:                                      ; preds = %for.cond117
  %arrayidx121 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %moves, i64 0, i64 0
  call void @make(%struct.move_s* %arrayidx121, i32 %i.2)
  %arrayidx122 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %moves, i64 0, i64 0
  %call123 = call i32 @check_legal(%struct.move_s* %arrayidx122, i32 %i.2, i32 %call113)
  %tobool124 = icmp ne i32 %call123, 0
  br i1 %tobool124, label %if.then125, label %if.end127

if.then125:                                       ; preds = %for.body120
  %inc126 = add nsw i32 %l.0, 1
  br label %if.end127

if.end127:                                        ; preds = %if.then125, %for.body120
  %l.1 = phi i32 [ %inc126, %if.then125 ], [ %l.0, %for.body120 ]
  %arrayidx128 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %moves, i64 0, i64 0
  call void @unmake(%struct.move_s* %arrayidx128, i32 %i.2)
  br label %for.inc129

for.inc129:                                       ; preds = %if.end127
  %inc130 = add nsw i32 %i.2, 1
  br label %for.cond117

for.end131:                                       ; preds = %for.cond117
  br label %if.end133

if.else132:                                       ; preds = %if.then111
  %i40 = load i32, i32* @numb_moves, align 4
  br label %if.end133

if.end133:                                        ; preds = %if.else132, %for.end131
  %l.2 = phi i32 [ %l.0, %for.end131 ], [ %i40, %if.else132 ]
  br label %if.end174

if.else134:                                       ; preds = %if.end108
  store i32 1, i32* @captures, align 4
  %arrayidx135 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %moves, i64 0, i64 0
  call void @gen(%struct.move_s* %arrayidx135)
  %i41 = load i32, i32* @numb_moves, align 4
  store i32 0, i32* @captures, align 4
  %call136 = call i32 @in_check()
  %tobool137 = icmp ne i32 %i41, 0
  br i1 %tobool137, label %if.then138, label %if.end154

if.then138:                                       ; preds = %if.else134
  br label %for.cond139

for.cond139:                                      ; preds = %for.inc151, %if.then138
  %l.3 = phi i32 [ 0, %if.then138 ], [ %l.4, %for.inc151 ]
  %i.3 = phi i32 [ 0, %if.then138 ], [ %inc152, %for.inc151 ]
  %cmp140 = icmp slt i32 %i.3, %i41
  br i1 %cmp140, label %for.body142, label %for.end153

for.body142:                                      ; preds = %for.cond139
  %arrayidx143 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %moves, i64 0, i64 0
  call void @make(%struct.move_s* %arrayidx143, i32 %i.3)
  %arrayidx144 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %moves, i64 0, i64 0
  %call145 = call i32 @check_legal(%struct.move_s* %arrayidx144, i32 %i.3, i32 %call136)
  %tobool146 = icmp ne i32 %call145, 0
  br i1 %tobool146, label %if.then147, label %if.end149

if.then147:                                       ; preds = %for.body142
  %inc148 = add nsw i32 %l.3, 1
  br label %if.end149

if.end149:                                        ; preds = %if.then147, %for.body142
  %l.4 = phi i32 [ %inc148, %if.then147 ], [ %l.3, %for.body142 ]
  %arrayidx150 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %moves, i64 0, i64 0
  call void @unmake(%struct.move_s* %arrayidx150, i32 %i.3)
  br label %for.inc151

for.inc151:                                       ; preds = %if.end149
  %inc152 = add nsw i32 %i.3, 1
  br label %for.cond139

for.end153:                                       ; preds = %for.cond139
  br label %if.end154

if.end154:                                        ; preds = %for.end153, %if.else134
  %l.5 = phi i32 [ %l.3, %for.end153 ], [ 0, %if.else134 ]
  %tobool155 = icmp ne i32 %l.5, 0
  br i1 %tobool155, label %if.end173, label %if.then156

if.then156:                                       ; preds = %if.end154
  store i32 0, i32* @captures, align 4
  %arrayidx157 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %moves, i64 0, i64 0
  call void @gen(%struct.move_s* %arrayidx157)
  %i42 = load i32, i32* @numb_moves, align 4
  br label %for.cond158

for.cond158:                                      ; preds = %for.inc170, %if.then156
  %l.6 = phi i32 [ %l.5, %if.then156 ], [ %l.7, %for.inc170 ]
  %i.4 = phi i32 [ 0, %if.then156 ], [ %inc171, %for.inc170 ]
  %cmp159 = icmp slt i32 %i.4, %i42
  br i1 %cmp159, label %for.body161, label %for.end172

for.body161:                                      ; preds = %for.cond158
  %arrayidx162 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %moves, i64 0, i64 0
  call void @make(%struct.move_s* %arrayidx162, i32 %i.4)
  %arrayidx163 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %moves, i64 0, i64 0
  %call164 = call i32 @check_legal(%struct.move_s* %arrayidx163, i32 %i.4, i32 %call136)
  %tobool165 = icmp ne i32 %call164, 0
  br i1 %tobool165, label %if.then166, label %if.end168

if.then166:                                       ; preds = %for.body161
  %inc167 = add nsw i32 %l.6, 1
  br label %if.end168

if.end168:                                        ; preds = %if.then166, %for.body161
  %l.7 = phi i32 [ %inc167, %if.then166 ], [ %l.6, %for.body161 ]
  %arrayidx169 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %moves, i64 0, i64 0
  call void @unmake(%struct.move_s* %arrayidx169, i32 %i.4)
  br label %for.inc170

for.inc170:                                       ; preds = %if.end168
  %inc171 = add nsw i32 %i.4, 1
  br label %for.cond158

for.end172:                                       ; preds = %for.cond158
  br label %if.end173

if.end173:                                        ; preds = %for.end172, %if.end154
  %l.8 = phi i32 [ %l.5, %if.end154 ], [ %l.6, %for.end172 ]
  br label %if.end174

if.end174:                                        ; preds = %if.end173, %if.end133
  %l.9 = phi i32 [ %l.2, %if.end133 ], [ %l.8, %if.end173 ]
  %cmp175 = icmp eq i32 %l.9, 0
  br i1 %cmp175, label %if.then177, label %if.else180

if.then177:                                       ; preds = %if.end174
  %proof178 = getelementptr inbounds %struct.node, %struct.node* %node, i32 0, i32 4
  store i32 1, i32* %proof178, align 4
  %disproof179 = getelementptr inbounds %struct.node, %struct.node* %node, i32 0, i32 5
  store i32 1, i32* %disproof179, align 8
  br label %if.end270

if.else180:                                       ; preds = %if.end174
  %i43 = load i32, i32* @white_to_move, align 4
  %tobool181 = icmp ne i32 %i43, 0
  %i44 = zext i1 %tobool181 to i64
  %cond182 = select i1 %tobool181, i32 0, i32 1
  %i45 = load i32, i32* @root_to_move, align 4
  %cmp183 = icmp eq i32 %cond182, %i45
  br i1 %cmp183, label %if.then185, label %if.else226

if.then185:                                       ; preds = %if.else180
  %i46 = load i32, i32* @Variant, align 4
  %cmp186 = icmp ne i32 %i46, 3
  br i1 %cmp186, label %land.lhs.true, label %if.else196

land.lhs.true:                                    ; preds = %if.then185
  %i47 = load i32, i32* @Variant, align 4
  %cmp188 = icmp ne i32 %i47, 4
  br i1 %cmp188, label %if.then190, label %if.else196

if.then190:                                       ; preds = %land.lhs.true
  %i48 = load i32, i32* @ply, align 4
  %div = sdiv i32 %i48, 50
  %add191 = add nsw i32 1, %div
  %proof192 = getelementptr inbounds %struct.node, %struct.node* %node, i32 0, i32 4
  store i32 %add191, i32* %proof192, align 4
  %i49 = load i32, i32* @ply, align 4
  %div193 = sdiv i32 %i49, 50
  %add194 = add nsw i32 %l.9, %div193
  %disproof195 = getelementptr inbounds %struct.node, %struct.node* %node, i32 0, i32 5
  store i32 %add194, i32* %disproof195, align 8
  br label %if.end225

if.else196:                                       ; preds = %land.lhs.true, %if.then185
  %i50 = load i32, i32* @Variant, align 4
  %cmp197 = icmp eq i32 %i50, 4
  br i1 %cmp197, label %if.then199, label %if.else217

if.then199:                                       ; preds = %if.else196
  %i51 = load i32, i32* @phase, align 4
  %cmp200 = icmp eq i32 %i51, 2
  br i1 %cmp200, label %if.then202, label %if.else209

if.then202:                                       ; preds = %if.then199
  %i52 = load i32, i32* @ply, align 4
  %div203 = sdiv i32 %i52, 30
  %add204 = add nsw i32 1, %div203
  %proof205 = getelementptr inbounds %struct.node, %struct.node* %node, i32 0, i32 4
  store i32 %add204, i32* %proof205, align 4
  %i53 = load i32, i32* @ply, align 4
  %div206 = sdiv i32 %i53, 30
  %add207 = add nsw i32 %l.9, %div206
  %disproof208 = getelementptr inbounds %struct.node, %struct.node* %node, i32 0, i32 5
  store i32 %add207, i32* %disproof208, align 8
  br label %if.end216

if.else209:                                       ; preds = %if.then199
  %i54 = load i32, i32* @ply, align 4
  %div210 = sdiv i32 %i54, 80
  %add211 = add nsw i32 1, %div210
  %proof212 = getelementptr inbounds %struct.node, %struct.node* %node, i32 0, i32 4
  store i32 %add211, i32* %proof212, align 4
  %i55 = load i32, i32* @ply, align 4
  %div213 = sdiv i32 %i55, 80
  %add214 = add nsw i32 %l.9, %div213
  %disproof215 = getelementptr inbounds %struct.node, %struct.node* %node, i32 0, i32 5
  store i32 %add214, i32* %disproof215, align 8
  br label %if.end216

if.end216:                                        ; preds = %if.else209, %if.then202
  br label %if.end224

if.else217:                                       ; preds = %if.else196
  %i56 = load i32, i32* @ply, align 4
  %div218 = sdiv i32 %i56, 150
  %add219 = add nsw i32 1, %div218
  %proof220 = getelementptr inbounds %struct.node, %struct.node* %node, i32 0, i32 4
  store i32 %add219, i32* %proof220, align 4
  %i57 = load i32, i32* @ply, align 4
  %div221 = sdiv i32 %i57, 150
  %add222 = add nsw i32 %l.9, %div221
  %disproof223 = getelementptr inbounds %struct.node, %struct.node* %node, i32 0, i32 5
  store i32 %add222, i32* %disproof223, align 8
  br label %if.end224

if.end224:                                        ; preds = %if.else217, %if.end216
  br label %if.end225

if.end225:                                        ; preds = %if.end224, %if.then190
  br label %if.end269

if.else226:                                       ; preds = %if.else180
  %i58 = load i32, i32* @Variant, align 4
  %cmp227 = icmp ne i32 %i58, 3
  br i1 %cmp227, label %land.lhs.true229, label %if.else239

land.lhs.true229:                                 ; preds = %if.else226
  %i59 = load i32, i32* @Variant, align 4
  %cmp230 = icmp ne i32 %i59, 4
  br i1 %cmp230, label %if.then232, label %if.else239

if.then232:                                       ; preds = %land.lhs.true229
  %i60 = load i32, i32* @ply, align 4
  %div233 = sdiv i32 %i60, 50
  %add234 = add nsw i32 %l.9, %div233
  %proof235 = getelementptr inbounds %struct.node, %struct.node* %node, i32 0, i32 4
  store i32 %add234, i32* %proof235, align 4
  %i61 = load i32, i32* @ply, align 4
  %div236 = sdiv i32 %i61, 50
  %add237 = add nsw i32 1, %div236
  %disproof238 = getelementptr inbounds %struct.node, %struct.node* %node, i32 0, i32 5
  store i32 %add237, i32* %disproof238, align 8
  br label %if.end268

if.else239:                                       ; preds = %land.lhs.true229, %if.else226
  %i62 = load i32, i32* @Variant, align 4
  %cmp240 = icmp eq i32 %i62, 4
  br i1 %cmp240, label %if.then242, label %if.else260

if.then242:                                       ; preds = %if.else239
  %i63 = load i32, i32* @phase, align 4
  %cmp243 = icmp eq i32 %i63, 2
  br i1 %cmp243, label %if.then245, label %if.else252

if.then245:                                       ; preds = %if.then242
  %i64 = load i32, i32* @ply, align 4
  %div246 = sdiv i32 %i64, 30
  %add247 = add nsw i32 %l.9, %div246
  %proof248 = getelementptr inbounds %struct.node, %struct.node* %node, i32 0, i32 4
  store i32 %add247, i32* %proof248, align 4
  %i65 = load i32, i32* @ply, align 4
  %div249 = sdiv i32 %i65, 30
  %add250 = add nsw i32 1, %div249
  %disproof251 = getelementptr inbounds %struct.node, %struct.node* %node, i32 0, i32 5
  store i32 %add250, i32* %disproof251, align 8
  br label %if.end259

if.else252:                                       ; preds = %if.then242
  %i66 = load i32, i32* @ply, align 4
  %div253 = sdiv i32 %i66, 80
  %add254 = add nsw i32 %l.9, %div253
  %proof255 = getelementptr inbounds %struct.node, %struct.node* %node, i32 0, i32 4
  store i32 %add254, i32* %proof255, align 4
  %i67 = load i32, i32* @ply, align 4
  %div256 = sdiv i32 %i67, 80
  %add257 = add nsw i32 1, %div256
  %disproof258 = getelementptr inbounds %struct.node, %struct.node* %node, i32 0, i32 5
  store i32 %add257, i32* %disproof258, align 8
  br label %if.end259

if.end259:                                        ; preds = %if.else252, %if.then245
  br label %if.end267

if.else260:                                       ; preds = %if.else239
  %i68 = load i32, i32* @ply, align 4
  %div261 = sdiv i32 %i68, 150
  %add262 = add nsw i32 %l.9, %div261
  %proof263 = getelementptr inbounds %struct.node, %struct.node* %node, i32 0, i32 4
  store i32 %add262, i32* %proof263, align 4
  %i69 = load i32, i32* @ply, align 4
  %div264 = sdiv i32 %i69, 150
  %add265 = add nsw i32 1, %div264
  %disproof266 = getelementptr inbounds %struct.node, %struct.node* %node, i32 0, i32 5
  store i32 %add265, i32* %disproof266, align 8
  br label %if.end267

if.end267:                                        ; preds = %if.else260, %if.end259
  br label %if.end268

if.end268:                                        ; preds = %if.end267, %if.then232
  br label %if.end269

if.end269:                                        ; preds = %if.end268, %if.end225
  br label %if.end270

if.end270:                                        ; preds = %if.end269, %if.then177
  br label %if.end298

if.else271:                                       ; preds = %if.then92
  %value272 = getelementptr inbounds %struct.node, %struct.node* %node, i32 0, i32 0
  %i70 = load i8, i8* %value272, align 8
  %conv273 = zext i8 %i70 to i32
  %cmp274 = icmp eq i32 %conv273, 0
  br i1 %cmp274, label %if.then276, label %if.else279

if.then276:                                       ; preds = %if.else271
  %proof277 = getelementptr inbounds %struct.node, %struct.node* %node, i32 0, i32 4
  store i32 100000000, i32* %proof277, align 4
  %disproof278 = getelementptr inbounds %struct.node, %struct.node* %node, i32 0, i32 5
  store i32 0, i32* %disproof278, align 8
  br label %if.end297

if.else279:                                       ; preds = %if.else271
  %value280 = getelementptr inbounds %struct.node, %struct.node* %node, i32 0, i32 0
  %i71 = load i8, i8* %value280, align 8
  %conv281 = zext i8 %i71 to i32
  %cmp282 = icmp eq i32 %conv281, 1
  br i1 %cmp282, label %if.then284, label %if.else287

if.then284:                                       ; preds = %if.else279
  %proof285 = getelementptr inbounds %struct.node, %struct.node* %node, i32 0, i32 4
  store i32 0, i32* %proof285, align 4
  %disproof286 = getelementptr inbounds %struct.node, %struct.node* %node, i32 0, i32 5
  store i32 100000000, i32* %disproof286, align 8
  br label %if.end296

if.else287:                                       ; preds = %if.else279
  %value288 = getelementptr inbounds %struct.node, %struct.node* %node, i32 0, i32 0
  %i72 = load i8, i8* %value288, align 8
  %conv289 = zext i8 %i72 to i32
  %cmp290 = icmp eq i32 %conv289, 3
  br i1 %cmp290, label %if.then292, label %if.end295

if.then292:                                       ; preds = %if.else287
  %proof293 = getelementptr inbounds %struct.node, %struct.node* %node, i32 0, i32 4
  store i32 50000, i32* %proof293, align 4
  %disproof294 = getelementptr inbounds %struct.node, %struct.node* %node, i32 0, i32 5
  store i32 50000, i32* %disproof294, align 8
  br label %if.end295

if.end295:                                        ; preds = %if.then292, %if.else287
  br label %if.end296

if.end296:                                        ; preds = %if.end295, %if.then284
  br label %if.end297

if.end297:                                        ; preds = %if.end296, %if.then276
  br label %if.end298

if.end298:                                        ; preds = %if.end297, %if.end270
  br label %if.end302

if.else299:                                       ; preds = %if.else90
  %disproof300 = getelementptr inbounds %struct.node, %struct.node* %node, i32 0, i32 5
  store i32 1, i32* %disproof300, align 8
  %proof301 = getelementptr inbounds %struct.node, %struct.node* %node, i32 0, i32 4
  store i32 1, i32* %proof301, align 4
  br label %if.end302

if.end302:                                        ; preds = %if.else299, %if.end298
  br label %if.end303

if.end303:                                        ; preds = %if.end302, %if.then105, %if.end84
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @develop_node(%struct.node* %node) #0 {
entry:
  %moves = alloca [512 x %struct.move_s], align 16
  %call = call i32 @in_check()
  %i = load i32, i32* @Variant, align 4
  %cmp = icmp ne i32 %i, 4
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %arrayidx = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %moves, i64 0, i64 0
  call void @gen(%struct.move_s* %arrayidx)
  %i1 = load i32, i32* @numb_moves, align 4
  br label %if.end13

if.else:                                          ; preds = %entry
  store i32 1, i32* @captures, align 4
  %arrayidx1 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %moves, i64 0, i64 0
  call void @gen(%struct.move_s* %arrayidx1)
  %i2 = load i32, i32* @numb_moves, align 4
  store i32 0, i32* @captures, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.else
  %i.0 = phi i32 [ 0, %if.else ], [ %inc, %for.inc ]
  %cmp2 = icmp slt i32 %i.0, %i2
  br i1 %cmp2, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %arrayidx3 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %moves, i64 0, i64 0
  call void @make(%struct.move_s* %arrayidx3, i32 %i.0)
  %arrayidx4 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %moves, i64 0, i64 0
  %call5 = call i32 @check_legal(%struct.move_s* %arrayidx4, i32 %i.0, i32 %call)
  %tobool = icmp ne i32 %call5, 0
  br i1 %tobool, label %if.then6, label %if.end

if.then6:                                         ; preds = %for.body
  %arrayidx7 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %moves, i64 0, i64 0
  call void @unmake(%struct.move_s* %arrayidx7, i32 %i.0)
  br label %for.end

if.end:                                           ; preds = %for.body
  %arrayidx8 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %moves, i64 0, i64 0
  call void @unmake(%struct.move_s* %arrayidx8, i32 %i.0)
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %inc = add nsw i32 %i.0, 1
  br label %for.cond

for.end:                                          ; preds = %if.then6, %for.cond
  %leg.0 = phi i32 [ 1, %if.then6 ], [ 0, %for.cond ]
  %cmp9 = icmp eq i32 %leg.0, 0
  br i1 %cmp9, label %if.then10, label %if.end12

if.then10:                                        ; preds = %for.end
  store i32 0, i32* @captures, align 4
  %arrayidx11 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %moves, i64 0, i64 0
  call void @gen(%struct.move_s* %arrayidx11)
  %i3 = load i32, i32* @numb_moves, align 4
  br label %if.end12

if.end12:                                         ; preds = %if.then10, %for.end
  %num_moves.0 = phi i32 [ %i3, %if.then10 ], [ %i2, %for.end ]
  br label %if.end13

if.end13:                                         ; preds = %if.end12, %if.then
  %num_moves.1 = phi i32 [ %i1, %if.then ], [ %num_moves.0, %if.end12 ]
  %conv = sext i32 %num_moves.1 to i64
  %mul = mul i64 %conv, 8
  %conv14 = trunc i64 %mul to i32
  %call15 = call i8* @Xmalloc(i32 %conv14)
  %i4 = bitcast i8* %call15 to %struct.node**
  %children = getelementptr inbounds %struct.node, %struct.node* %node, i32 0, i32 6
  store %struct.node** %i4, %struct.node*** %children, align 8
  br label %for.cond16

for.cond16:                                       ; preds = %for.inc37, %if.end13
  %l.0 = phi i32 [ 0, %if.end13 ], [ %l.1, %for.inc37 ]
  %i.1 = phi i32 [ 0, %if.end13 ], [ %inc38, %for.inc37 ]
  %cmp17 = icmp slt i32 %i.1, %num_moves.1
  br i1 %cmp17, label %for.body19, label %for.end39

for.body19:                                       ; preds = %for.cond16
  %i5 = load i32, i32* @hash, align 4
  %i6 = load i32, i32* @move_number, align 4
  %i7 = load i32, i32* @ply, align 4
  %add = add nsw i32 %i6, %i7
  %sub = sub nsw i32 %add, 1
  %idxprom = sext i32 %sub to i64
  %arrayidx20 = getelementptr inbounds [600 x i32], [600 x i32]* @hash_history, i64 0, i64 %idxprom
  store i32 %i5, i32* %arrayidx20, align 4
  %arrayidx21 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %moves, i64 0, i64 0
  call void @make(%struct.move_s* %arrayidx21, i32 %i.1)
  %arrayidx22 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %moves, i64 0, i64 0
  %call23 = call i32 @check_legal(%struct.move_s* %arrayidx22, i32 %i.1, i32 %call)
  %tobool24 = icmp ne i32 %call23, 0
  br i1 %tobool24, label %if.then25, label %if.else34

if.then25:                                        ; preds = %for.body19
  %call26 = call i8* @Xmalloc(i32 56)
  %i8 = bitcast i8* %call26 to %struct.node*
  %value = getelementptr inbounds %struct.node, %struct.node* %i8, i32 0, i32 0
  store i8 0, i8* %value, align 8
  %disproof = getelementptr inbounds %struct.node, %struct.node* %i8, i32 0, i32 5
  store i32 1, i32* %disproof, align 8
  %proof = getelementptr inbounds %struct.node, %struct.node* %i8, i32 0, i32 4
  store i32 1, i32* %proof, align 4
  %num_children = getelementptr inbounds %struct.node, %struct.node* %i8, i32 0, i32 1
  store i8 0, i8* %num_children, align 1
  %parent = getelementptr inbounds %struct.node, %struct.node* %i8, i32 0, i32 7
  store %struct.node* %node, %struct.node** %parent, align 8
  %evaluated = getelementptr inbounds %struct.node, %struct.node* %i8, i32 0, i32 3
  store i8 0, i8* %evaluated, align 1
  %expanded = getelementptr inbounds %struct.node, %struct.node* %i8, i32 0, i32 2
  store i8 0, i8* %expanded, align 2
  %move = getelementptr inbounds %struct.node, %struct.node* %i8, i32 0, i32 8
  %idxprom27 = sext i32 %i.1 to i64
  %arrayidx28 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %moves, i64 0, i64 %idxprom27
  %i9 = bitcast %struct.move_s* %move to i8*
  %i10 = bitcast %struct.move_s* %arrayidx28 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %i9, i8* align 8 %i10, i64 24, i1 false)
  %children29 = getelementptr inbounds %struct.node, %struct.node* %node, i32 0, i32 6
  %i11 = load %struct.node**, %struct.node*** %children29, align 8
  %idxprom30 = sext i32 %l.0 to i64
  %arrayidx31 = getelementptr inbounds %struct.node*, %struct.node** %i11, i64 %idxprom30
  store %struct.node* %i8, %struct.node** %arrayidx31, align 8
  %inc32 = add nsw i32 %l.0, 1
  call void @pn_eval(%struct.node* %i8)
  call void @set_proof_and_disproof_numbers(%struct.node* %i8)
  %arrayidx33 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %moves, i64 0, i64 0
  call void @unmake(%struct.move_s* %arrayidx33, i32 %i.1)
  br label %if.end36

if.else34:                                        ; preds = %for.body19
  %arrayidx35 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %moves, i64 0, i64 0
  call void @unmake(%struct.move_s* %arrayidx35, i32 %i.1)
  br label %if.end36

if.end36:                                         ; preds = %if.else34, %if.then25
  %l.1 = phi i32 [ %inc32, %if.then25 ], [ %l.0, %if.else34 ]
  br label %for.inc37

for.inc37:                                        ; preds = %if.end36
  %inc38 = add nsw i32 %i.1, 1
  br label %for.cond16

for.end39:                                        ; preds = %for.cond16
  %expanded40 = getelementptr inbounds %struct.node, %struct.node* %node, i32 0, i32 2
  store i8 1, i8* %expanded40, align 2
  %conv41 = trunc i32 %l.0 to i8
  %num_children42 = getelementptr inbounds %struct.node, %struct.node* %node, i32 0, i32 1
  store i8 %conv41, i8* %num_children42, align 1
  %num_children43 = getelementptr inbounds %struct.node, %struct.node* %node, i32 0, i32 1
  %i12 = load i8, i8* %num_children43, align 1
  %conv44 = zext i8 %i12 to i32
  %cmp45 = icmp eq i32 %conv44, 0
  br i1 %cmp45, label %if.then47, label %if.end66

if.then47:                                        ; preds = %for.end39
  %expanded48 = getelementptr inbounds %struct.node, %struct.node* %node, i32 0, i32 2
  store i8 0, i8* %expanded48, align 2
  %evaluated49 = getelementptr inbounds %struct.node, %struct.node* %node, i32 0, i32 3
  store i8 1, i8* %evaluated49, align 1
  %i13 = load i32, i32* @Variant, align 4
  %cmp50 = icmp ne i32 %i13, 3
  br i1 %cmp50, label %land.lhs.true, label %if.else56

land.lhs.true:                                    ; preds = %if.then47
  %i14 = load i32, i32* @Variant, align 4
  %cmp52 = icmp ne i32 %i14, 4
  br i1 %cmp52, label %if.then54, label %if.else56

if.then54:                                        ; preds = %land.lhs.true
  %value55 = getelementptr inbounds %struct.node, %struct.node* %node, i32 0, i32 0
  store i8 3, i8* %value55, align 8
  br label %if.end65

if.else56:                                        ; preds = %land.lhs.true, %if.then47
  %i15 = load i32, i32* @white_to_move, align 4
  %tobool57 = icmp ne i32 %i15, 0
  %i16 = zext i1 %tobool57 to i64
  %cond = select i1 %tobool57, i32 0, i32 1
  %i17 = load i32, i32* @root_to_move, align 4
  %cmp58 = icmp eq i32 %cond, %i17
  br i1 %cmp58, label %if.then60, label %if.else62

if.then60:                                        ; preds = %if.else56
  %value61 = getelementptr inbounds %struct.node, %struct.node* %node, i32 0, i32 0
  store i8 1, i8* %value61, align 8
  br label %if.end64

if.else62:                                        ; preds = %if.else56
  %value63 = getelementptr inbounds %struct.node, %struct.node* %node, i32 0, i32 0
  store i8 0, i8* %value63, align 8
  br label %if.end64

if.end64:                                         ; preds = %if.else62, %if.then60
  br label %if.end65

if.end65:                                         ; preds = %if.end64, %if.then54
  br label %if.end66

if.end66:                                         ; preds = %if.end65, %for.end39
  %i18 = load i32, i32* @nodecount, align 4
  %add67 = add nsw i32 %i18, %num_moves.1
  store i32 %add67, i32* @nodecount, align 4
  %i19 = load i32, i32* @frees, align 4
  %add68 = add nsw i32 %i19, %num_moves.1
  store i32 %add68, i32* @frees, align 4
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @update_ancestors(%struct.node* %node) #0 {
entry:
  br label %while.cond

while.cond:                                       ; preds = %if.end, %entry
  %tnode.0 = phi %struct.node* [ %node, %entry ], [ %i1, %if.end ]
  %prevnode.0 = phi %struct.node* [ %node, %entry ], [ %tnode.0, %if.end ]
  %cmp = icmp ne %struct.node* %tnode.0, null
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  call void @set_proof_and_disproof_numbers(%struct.node* %tnode.0)
  %move = getelementptr inbounds %struct.node, %struct.node* %tnode.0, i32 0, i32 8
  %target = getelementptr inbounds %struct.move_s, %struct.move_s* %move, i32 0, i32 1
  %i = load i32, i32* %target, align 4
  %cmp1 = icmp ne i32 %i, 0
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  %move2 = getelementptr inbounds %struct.node, %struct.node* %tnode.0, i32 0, i32 8
  call void @unmake(%struct.move_s* %move2, i32 0)
  br label %if.end

if.end:                                           ; preds = %if.then, %while.body
  %parent = getelementptr inbounds %struct.node, %struct.node* %tnode.0, i32 0, i32 7
  %i1 = load %struct.node*, %struct.node** %parent, align 8
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %move3 = getelementptr inbounds %struct.node, %struct.node* %prevnode.0, i32 0, i32 8
  %target4 = getelementptr inbounds %struct.move_s, %struct.move_s* %move3, i32 0, i32 1
  %i2 = load i32, i32* %target4, align 4
  %cmp5 = icmp ne i32 %i2, 0
  br i1 %cmp5, label %if.then6, label %if.end8

if.then6:                                         ; preds = %while.end
  %move7 = getelementptr inbounds %struct.node, %struct.node* %prevnode.0, i32 0, i32 8
  call void @make(%struct.move_s* %move7, i32 0)
  br label %if.end8

if.end8:                                          ; preds = %if.then6, %while.end
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @pn2_eval(%struct.node* %root) #0 {
entry:
  store i32 0, i32* @nodecount2, align 4
  store i32 1, i32* @pn2, align 4
  %parent = getelementptr inbounds %struct.node, %struct.node* %root, i32 0, i32 7
  %i = load %struct.node*, %struct.node** %parent, align 8
  %parent1 = getelementptr inbounds %struct.node, %struct.node* %root, i32 0, i32 7
  store %struct.node* null, %struct.node** %parent1, align 8
  call void @pn_eval(%struct.node* %root)
  call void @set_proof_and_disproof_numbers(%struct.node* %root)
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %proof = getelementptr inbounds %struct.node, %struct.node* %root, i32 0, i32 4
  %i1 = load i32, i32* %proof, align 4
  %cmp = icmp ne i32 %i1, 0
  br i1 %cmp, label %land.lhs.true, label %land.end

land.lhs.true:                                    ; preds = %while.cond
  %disproof = getelementptr inbounds %struct.node, %struct.node* %root, i32 0, i32 5
  %i2 = load i32, i32* %disproof, align 8
  %cmp2 = icmp ne i32 %i2, 0
  br i1 %cmp2, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %land.lhs.true
  %i3 = load i32, i32* @nodecount2, align 4
  %i4 = load i32, i32* @nodecount, align 4
  %cmp3 = icmp slt i32 %i3, %i4
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true, %while.cond
  %i5 = phi i1 [ false, %land.lhs.true ], [ false, %while.cond ], [ %cmp3, %land.rhs ]
  br i1 %i5, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %call = call %struct.node* @select_most_proving(%struct.node* %root)
  call void @develop_node(%struct.node* %call)
  call void @update_ancestors(%struct.node* %call)
  br label %while.cond

while.end:                                        ; preds = %land.end
  %expanded = getelementptr inbounds %struct.node, %struct.node* %root, i32 0, i32 2
  store i8 0, i8* %expanded, align 2
  %num_children = getelementptr inbounds %struct.node, %struct.node* %root, i32 0, i32 1
  store i8 0, i8* %num_children, align 1
  %parent4 = getelementptr inbounds %struct.node, %struct.node* %root, i32 0, i32 7
  store %struct.node* %i, %struct.node** %parent4, align 8
  store i32 0, i32* @pn2, align 4
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @proofnumberscan() #0 {
entry:
  %moves = alloca [512 x %struct.move_s], align 16
  %islegal = alloca [512 x i32], align 16
  %nodesspent = alloca [512 x i32], align 16
  %output = alloca [8 x i8], align 1
  %byval-temp = alloca %struct.move_s, align 8
  %call = call i64 @rtime()
  %i = load i32, i32* @PBSize, align 4
  %conv = sext i32 %i to i64
  %call1 = call noalias i8* @calloc(i64 %conv, i64 56) #8
  store i8* %call1, i8** @membuff, align 8
  %call2 = call noalias i8* @calloc(i64 1, i64 56) #8
  %i1 = bitcast i8* %call2 to %struct.node*
  %arrayidx = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %moves, i64 0, i64 0
  call void @gen(%struct.move_s* %arrayidx)
  %i2 = load i32, i32* @numb_moves, align 4
  store i32 0, i32* @alllosers, align 4
  call void @llvm.memset.p0i8.i64(i8* align 16 bitcast ([300 x i32]* @rootlosers to i8*), i8 0, i64 1200, i1 false)
  %arraydecay = getelementptr inbounds [512 x i32], [512 x i32]* %nodesspent, i64 0, i64 0
  %i3 = bitcast i32* %arraydecay to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %i3, i8 0, i64 2048, i1 false)
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 bitcast (%struct.move_s* @pn_move to i8*), i8* align 4 bitcast (%struct.move_s* @dummy to i8*), i64 24, i1 false)
  %call3 = call i32 @in_check()
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %legal.0 = phi i32 [ 0, %entry ], [ %legal.1, %for.inc ]
  %i.0 = phi i32 [ 0, %entry ], [ %inc12, %for.inc ]
  %cmp = icmp slt i32 %i.0, %i2
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %arrayidx5 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %moves, i64 0, i64 0
  call void @make(%struct.move_s* %arrayidx5, i32 %i.0)
  %arrayidx6 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %moves, i64 0, i64 0
  %call7 = call i32 @check_legal(%struct.move_s* %arrayidx6, i32 %i.0, i32 %call3)
  %tobool = icmp ne i32 %call7, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %for.body
  %inc = add nsw i32 %legal.0, 1
  %idxprom = sext i32 %i.0 to i64
  %arrayidx8 = getelementptr inbounds [512 x i32], [512 x i32]* %islegal, i64 0, i64 %idxprom
  store i32 1, i32* %arrayidx8, align 4
  br label %if.end

if.else:                                          ; preds = %for.body
  %idxprom9 = sext i32 %i.0 to i64
  %arrayidx10 = getelementptr inbounds [512 x i32], [512 x i32]* %islegal, i64 0, i64 %idxprom9
  store i32 0, i32* %arrayidx10, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %legal.1 = phi i32 [ %inc, %if.then ], [ %legal.0, %if.else ]
  %arrayidx11 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %moves, i64 0, i64 0
  call void @unmake(%struct.move_s* %arrayidx11, i32 %i.0)
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %inc12 = add nsw i32 %i.0, 1
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %cmp13 = icmp eq i32 %legal.0, 0
  br i1 %cmp13, label %if.then15, label %if.end16

if.then15:                                        ; preds = %for.end
  call void @Xfree()
  %i4 = load i8*, i8** @membuff, align 8
  call void @free(i8* %i4) #8
  %i5 = bitcast %struct.node* %i1 to i8*
  call void @free(i8* %i5) #8
  br label %return

if.end16:                                         ; preds = %for.end
  store i32 1, i32* @nodecount, align 4
  store i32 0, i32* @iters, align 4
  store i32 0, i32* @maxply, align 4
  store i32 0, i32* @forwards, align 4
  %i6 = load i32, i32* @hash, align 4
  %i7 = load i32, i32* @move_number, align 4
  %i8 = load i32, i32* @ply, align 4
  %add = add nsw i32 %i7, %i8
  %sub = sub nsw i32 %add, 1
  %idxprom17 = sext i32 %sub to i64
  %arrayidx18 = getelementptr inbounds [600 x i32], [600 x i32]* @hash_history, i64 0, i64 %idxprom17
  store i32 %i6, i32* %arrayidx18, align 4
  %i9 = load i32, i32* @white_to_move, align 4
  %tobool19 = icmp ne i32 %i9, 0
  %i10 = zext i1 %tobool19 to i64
  %cond = select i1 %tobool19, i32 0, i32 1
  store i32 %cond, i32* @root_to_move, align 4
  call void @pn_eval(%struct.node* %i1)
  %value = getelementptr inbounds %struct.node, %struct.node* %i1, i32 0, i32 0
  %i11 = load i8, i8* %value, align 8
  %conv20 = zext i8 %i11 to i32
  %cmp21 = icmp eq i32 %conv20, 1
  br i1 %cmp21, label %if.then27, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end16
  %value23 = getelementptr inbounds %struct.node, %struct.node* %i1, i32 0, i32 0
  %i12 = load i8, i8* %value23, align 8
  %conv24 = zext i8 %i12 to i32
  %cmp25 = icmp eq i32 %conv24, 0
  br i1 %cmp25, label %if.then27, label %if.end28

if.then27:                                        ; preds = %lor.lhs.false, %if.end16
  call void @Xfree()
  %i13 = load i8*, i8** @membuff, align 8
  call void @free(i8* %i13) #8
  %i14 = bitcast %struct.node* %i1 to i8*
  call void @free(i8* %i14) #8
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 bitcast (%struct.move_s* @pn_move to i8*), i8* align 4 bitcast (%struct.move_s* @dummy to i8*), i64 24, i1 false)
  br label %return

if.end28:                                         ; preds = %lor.lhs.false
  call void @set_proof_and_disproof_numbers(%struct.node* %i1)
  br label %while.cond

while.cond:                                       ; preds = %if.end179, %if.then125, %if.end28
  %firsts.0 = phi i32 [ 0, %if.end28 ], [ %firsts.1, %if.end179 ], [ %firsts.0, %if.then125 ]
  %losers.0 = phi i32 [ 0, %if.end28 ], [ %losers.5, %if.end179 ], [ %losers.0, %if.then125 ]
  %leastlooked_i.0 = phi i32 [ 0, %if.end28 ], [ %leastlooked_i.3, %if.end179 ], [ %leastlooked_i.1, %if.then125 ]
  %leastlooked_l.0 = phi i32 [ 0, %if.end28 ], [ %leastlooked_l.3, %if.end179 ], [ %leastlooked_l.1, %if.then125 ]
  %alternates.0 = phi i32 [ 0, %if.end28 ], [ %alternates.1, %if.end179 ], [ %inc93, %if.then125 ]
  %call29 = call i64 @rtime()
  %call30 = call i32 @rdifftime(i64 %call29, i64 %call)
  %i15 = load i32, i32* @pn_time, align 4
  %cmp31 = icmp slt i32 %call30, %i15
  br i1 %cmp31, label %land.lhs.true, label %land.end

land.lhs.true:                                    ; preds = %while.cond
  %call33 = call i32 @interrupt()
  %tobool34 = icmp ne i32 %call33, 0
  br i1 %tobool34, label %land.end, label %land.lhs.true35

land.lhs.true35:                                  ; preds = %land.lhs.true
  %i16 = load i32, i32* @bufftop, align 4
  %conv36 = zext i32 %i16 to i64
  %i17 = load i32, i32* @PBSize, align 4
  %sub37 = sub nsw i32 %i17, 10000
  %conv38 = sext i32 %sub37 to i64
  %mul = mul i64 %conv38, 56
  %cmp39 = icmp ult i64 %conv36, %mul
  br i1 %cmp39, label %land.lhs.true41, label %land.end

land.lhs.true41:                                  ; preds = %land.lhs.true35
  %proof = getelementptr inbounds %struct.node, %struct.node* %i1, i32 0, i32 4
  %i18 = load i32, i32* %proof, align 4
  %cmp42 = icmp ne i32 %i18, 0
  br i1 %cmp42, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %land.lhs.true41
  %disproof = getelementptr inbounds %struct.node, %struct.node* %i1, i32 0, i32 5
  %i19 = load i32, i32* %disproof, align 8
  %cmp44 = icmp ne i32 %i19, 0
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true41, %land.lhs.true35, %land.lhs.true, %while.cond
  %i20 = phi i1 [ false, %land.lhs.true41 ], [ false, %land.lhs.true35 ], [ false, %land.lhs.true ], [ false, %while.cond ], [ %cmp44, %land.rhs ]
  br i1 %i20, label %while.body, label %while.end180

while.body:                                       ; preds = %land.end
  %i21 = load i32, i32* @iters, align 4
  %inc46 = add nsw i32 %i21, 1
  store i32 %inc46, i32* @iters, align 4
  %i22 = load i32, i32* @nodecount, align 4
  %i23 = load i32, i32* @nodecount, align 4
  %rem = srem i32 %i23, 100
  %cmp47 = icmp slt i32 %rem, 66
  br i1 %cmp47, label %if.then49, label %if.else92

if.then49:                                        ; preds = %while.body
  %inc50 = add nsw i32 %firsts.0, 1
  %call51 = call %struct.node* @select_most_proving(%struct.node* %i1)
  call void @develop_node(%struct.node* %call51)
  call void @update_ancestors(%struct.node* %call51)
  br label %while.cond52

while.cond52:                                     ; preds = %while.body59, %if.then49
  %i.1 = phi i32 [ 0, %if.then49 ], [ %inc60, %while.body59 ]
  %children = getelementptr inbounds %struct.node, %struct.node* %i1, i32 0, i32 6
  %i24 = load %struct.node**, %struct.node*** %children, align 8
  %idxprom53 = sext i32 %i.1 to i64
  %arrayidx54 = getelementptr inbounds %struct.node*, %struct.node** %i24, i64 %idxprom53
  %i25 = load %struct.node*, %struct.node** %arrayidx54, align 8
  %proof55 = getelementptr inbounds %struct.node, %struct.node* %i25, i32 0, i32 4
  %i26 = load i32, i32* %proof55, align 4
  %proof56 = getelementptr inbounds %struct.node, %struct.node* %i1, i32 0, i32 4
  %i27 = load i32, i32* %proof56, align 4
  %cmp57 = icmp ne i32 %i26, %i27
  br i1 %cmp57, label %while.body59, label %while.end

while.body59:                                     ; preds = %while.cond52
  %inc60 = add nsw i32 %i.1, 1
  br label %while.cond52

while.end:                                        ; preds = %while.cond52
  %i28 = load i32, i32* @nodecount, align 4
  %sub61 = sub nsw i32 %i28, %i22
  %idxprom62 = sext i32 %i.1 to i64
  %arrayidx63 = getelementptr inbounds [512 x i32], [512 x i32]* %nodesspent, i64 0, i64 %idxprom62
  %i29 = load i32, i32* %arrayidx63, align 4
  %add64 = add nsw i32 %i29, %sub61
  store i32 %add64, i32* %arrayidx63, align 4
  %proof65 = getelementptr inbounds %struct.node, %struct.node* %i1, i32 0, i32 4
  %i30 = load i32, i32* %proof65, align 4
  %cmp66 = icmp eq i32 %i30, 0
  br i1 %cmp66, label %land.lhs.true68, label %if.else80

land.lhs.true68:                                  ; preds = %while.end
  %disproof69 = getelementptr inbounds %struct.node, %struct.node* %i1, i32 0, i32 5
  %i31 = load i32, i32* %disproof69, align 8
  %cmp70 = icmp eq i32 %i31, 100000000
  br i1 %cmp70, label %if.then72, label %if.else80

if.then72:                                        ; preds = %land.lhs.true68
  store i32 1, i32* @forcedwin, align 4
  %i32 = load i32, i32* @kibitzed, align 4
  %tobool73 = icmp ne i32 %i32, 0
  br i1 %tobool73, label %if.end76, label %if.then74

if.then74:                                        ; preds = %if.then72
  store i32 1, i32* @kibitzed, align 4
  %call75 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.84, i64 0, i64 0))
  br label %if.end76

if.end76:                                         ; preds = %if.then74, %if.then72
  %children77 = getelementptr inbounds %struct.node, %struct.node* %i1, i32 0, i32 6
  %i33 = load %struct.node**, %struct.node*** %children77, align 8
  %idxprom78 = sext i32 %i.1 to i64
  %arrayidx79 = getelementptr inbounds %struct.node*, %struct.node** %i33, i64 %idxprom78
  %i34 = load %struct.node*, %struct.node** %arrayidx79, align 8
  %move = getelementptr inbounds %struct.node, %struct.node* %i34, i32 0, i32 8
  %i35 = bitcast %struct.move_s* %move to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 bitcast (%struct.move_s* @pn_move to i8*), i8* align 8 %i35, i64 24, i1 false)
  br label %if.end91

if.else80:                                        ; preds = %land.lhs.true68, %while.end
  %disproof81 = getelementptr inbounds %struct.node, %struct.node* %i1, i32 0, i32 5
  %i36 = load i32, i32* %disproof81, align 8
  %cmp82 = icmp eq i32 %i36, 0
  br i1 %cmp82, label %land.lhs.true84, label %if.end90

land.lhs.true84:                                  ; preds = %if.else80
  %proof85 = getelementptr inbounds %struct.node, %struct.node* %i1, i32 0, i32 4
  %i37 = load i32, i32* %proof85, align 4
  %cmp86 = icmp eq i32 %i37, 100000000
  br i1 %cmp86, label %if.then88, label %if.end90

if.then88:                                        ; preds = %land.lhs.true84
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 bitcast (%struct.move_s* @pn_move to i8*), i8* align 4 bitcast (%struct.move_s* @dummy to i8*), i64 24, i1 false)
  %inc89 = add nsw i32 %losers.0, 1
  br label %if.end90

if.end90:                                         ; preds = %if.then88, %land.lhs.true84, %if.else80
  %losers.1 = phi i32 [ %inc89, %if.then88 ], [ %losers.0, %land.lhs.true84 ], [ %losers.0, %if.else80 ]
  br label %if.end91

if.end91:                                         ; preds = %if.end90, %if.end76
  %losers.2 = phi i32 [ %losers.0, %if.end76 ], [ %losers.1, %if.end90 ]
  br label %if.end179

if.else92:                                        ; preds = %while.body
  %inc93 = add nsw i32 %alternates.0, 1
  br label %for.cond94

for.cond94:                                       ; preds = %for.inc120, %if.else92
  %leastlooked_i.1 = phi i32 [ %leastlooked_i.0, %if.else92 ], [ %leastlooked_i.2, %for.inc120 ]
  %leastlooked_l.1 = phi i32 [ %leastlooked_l.0, %if.else92 ], [ %leastlooked_l.2, %for.inc120 ]
  %leastlooked.0 = phi i32 [ 100000000, %if.else92 ], [ %leastlooked.1, %for.inc120 ]
  %l.0 = phi i32 [ 0, %if.else92 ], [ %l.1, %for.inc120 ]
  %i.2 = phi i32 [ 0, %if.else92 ], [ %inc121, %for.inc120 ]
  %cmp95 = icmp slt i32 %i.2, %i2
  br i1 %cmp95, label %for.body97, label %for.end122

for.body97:                                       ; preds = %for.cond94
  %idxprom98 = sext i32 %i.2 to i64
  %arrayidx99 = getelementptr inbounds [512 x i32], [512 x i32]* %nodesspent, i64 0, i64 %idxprom98
  %i38 = load i32, i32* %arrayidx99, align 4
  %cmp100 = icmp slt i32 %i38, %leastlooked.0
  br i1 %cmp100, label %land.lhs.true102, label %if.end113

land.lhs.true102:                                 ; preds = %for.body97
  %idxprom103 = sext i32 %i.2 to i64
  %arrayidx104 = getelementptr inbounds [512 x i32], [512 x i32]* %islegal, i64 0, i64 %idxprom103
  %i39 = load i32, i32* %arrayidx104, align 4
  %tobool105 = icmp ne i32 %i39, 0
  br i1 %tobool105, label %land.lhs.true106, label %if.end113

land.lhs.true106:                                 ; preds = %land.lhs.true102
  %idxprom107 = sext i32 %i.2 to i64
  %arrayidx108 = getelementptr inbounds [300 x i32], [300 x i32]* @rootlosers, i64 0, i64 %idxprom107
  %i40 = load i32, i32* %arrayidx108, align 4
  %tobool109 = icmp ne i32 %i40, 0
  br i1 %tobool109, label %if.end113, label %if.then110

if.then110:                                       ; preds = %land.lhs.true106
  %idxprom111 = sext i32 %i.2 to i64
  %arrayidx112 = getelementptr inbounds [512 x i32], [512 x i32]* %nodesspent, i64 0, i64 %idxprom111
  %i41 = load i32, i32* %arrayidx112, align 4
  br label %if.end113

if.end113:                                        ; preds = %if.then110, %land.lhs.true106, %land.lhs.true102, %for.body97
  %leastlooked_i.2 = phi i32 [ %leastlooked_i.1, %land.lhs.true106 ], [ %i.2, %if.then110 ], [ %leastlooked_i.1, %land.lhs.true102 ], [ %leastlooked_i.1, %for.body97 ]
  %leastlooked_l.2 = phi i32 [ %leastlooked_l.1, %land.lhs.true106 ], [ %l.0, %if.then110 ], [ %leastlooked_l.1, %land.lhs.true102 ], [ %leastlooked_l.1, %for.body97 ]
  %leastlooked.1 = phi i32 [ %leastlooked.0, %land.lhs.true106 ], [ %i41, %if.then110 ], [ %leastlooked.0, %land.lhs.true102 ], [ %leastlooked.0, %for.body97 ]
  %idxprom114 = sext i32 %i.2 to i64
  %arrayidx115 = getelementptr inbounds [512 x i32], [512 x i32]* %islegal, i64 0, i64 %idxprom114
  %i42 = load i32, i32* %arrayidx115, align 4
  %tobool116 = icmp ne i32 %i42, 0
  br i1 %tobool116, label %if.then117, label %if.end119

if.then117:                                       ; preds = %if.end113
  %inc118 = add nsw i32 %l.0, 1
  br label %if.end119

if.end119:                                        ; preds = %if.then117, %if.end113
  %l.1 = phi i32 [ %inc118, %if.then117 ], [ %l.0, %if.end113 ]
  br label %for.inc120

for.inc120:                                       ; preds = %if.end119
  %inc121 = add nsw i32 %i.2, 1
  br label %for.cond94

for.end122:                                       ; preds = %for.cond94
  %cmp123 = icmp eq i32 %leastlooked.0, 100000000
  br i1 %cmp123, label %if.then125, label %if.end127

if.then125:                                       ; preds = %for.end122
  %i43 = load i32, i32* @nodecount, align 4
  %add126 = add nsw i32 %i43, 30
  store i32 %add126, i32* @nodecount, align 4
  br label %while.cond

if.end127:                                        ; preds = %for.end122
  %arrayidx128 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %moves, i64 0, i64 0
  call void @make(%struct.move_s* %arrayidx128, i32 %leastlooked_i.1)
  %children129 = getelementptr inbounds %struct.node, %struct.node* %i1, i32 0, i32 6
  %i44 = load %struct.node**, %struct.node*** %children129, align 8
  %idxprom130 = sext i32 %leastlooked_l.1 to i64
  %arrayidx131 = getelementptr inbounds %struct.node*, %struct.node** %i44, i64 %idxprom130
  %i45 = load %struct.node*, %struct.node** %arrayidx131, align 8
  %call132 = call %struct.node* @select_most_proving(%struct.node* %i45)
  call void @develop_node(%struct.node* %call132)
  call void @update_ancestors(%struct.node* %call132)
  %i46 = load i32, i32* @nodecount, align 4
  %sub133 = sub nsw i32 %i46, %i22
  %idxprom134 = sext i32 %leastlooked_i.1 to i64
  %arrayidx135 = getelementptr inbounds [512 x i32], [512 x i32]* %nodesspent, i64 0, i64 %idxprom134
  %i47 = load i32, i32* %arrayidx135, align 4
  %add136 = add nsw i32 %i47, %sub133
  store i32 %add136, i32* %arrayidx135, align 4
  %children137 = getelementptr inbounds %struct.node, %struct.node* %i1, i32 0, i32 6
  %i48 = load %struct.node**, %struct.node*** %children137, align 8
  %idxprom138 = sext i32 %leastlooked_l.1 to i64
  %arrayidx139 = getelementptr inbounds %struct.node*, %struct.node** %i48, i64 %idxprom138
  %i49 = load %struct.node*, %struct.node** %arrayidx139, align 8
  %proof140 = getelementptr inbounds %struct.node, %struct.node* %i49, i32 0, i32 4
  %i50 = load i32, i32* %proof140, align 4
  %cmp141 = icmp eq i32 %i50, 0
  br i1 %cmp141, label %land.lhs.true143, label %if.else159

land.lhs.true143:                                 ; preds = %if.end127
  %children144 = getelementptr inbounds %struct.node, %struct.node* %i1, i32 0, i32 6
  %i51 = load %struct.node**, %struct.node*** %children144, align 8
  %idxprom145 = sext i32 %leastlooked_l.1 to i64
  %arrayidx146 = getelementptr inbounds %struct.node*, %struct.node** %i51, i64 %idxprom145
  %i52 = load %struct.node*, %struct.node** %arrayidx146, align 8
  %disproof147 = getelementptr inbounds %struct.node, %struct.node* %i52, i32 0, i32 5
  %i53 = load i32, i32* %disproof147, align 8
  %cmp148 = icmp eq i32 %i53, 100000000
  br i1 %cmp148, label %if.then150, label %if.else159

if.then150:                                       ; preds = %land.lhs.true143
  store i32 1, i32* @forcedwin, align 4
  %i54 = load i32, i32* @kibitzed, align 4
  %tobool151 = icmp ne i32 %i54, 0
  br i1 %tobool151, label %if.end154, label %if.then152

if.then152:                                       ; preds = %if.then150
  store i32 1, i32* @kibitzed, align 4
  %call153 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.1.85, i64 0, i64 0))
  br label %if.end154

if.end154:                                        ; preds = %if.then152, %if.then150
  %children155 = getelementptr inbounds %struct.node, %struct.node* %i1, i32 0, i32 6
  %i55 = load %struct.node**, %struct.node*** %children155, align 8
  %idxprom156 = sext i32 %leastlooked_l.1 to i64
  %arrayidx157 = getelementptr inbounds %struct.node*, %struct.node** %i55, i64 %idxprom156
  %i56 = load %struct.node*, %struct.node** %arrayidx157, align 8
  %move158 = getelementptr inbounds %struct.node, %struct.node* %i56, i32 0, i32 8
  %i57 = bitcast %struct.move_s* %move158 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 bitcast (%struct.move_s* @pn_move to i8*), i8* align 8 %i57, i64 24, i1 false)
  br label %if.end178

if.else159:                                       ; preds = %land.lhs.true143, %if.end127
  %children160 = getelementptr inbounds %struct.node, %struct.node* %i1, i32 0, i32 6
  %i58 = load %struct.node**, %struct.node*** %children160, align 8
  %idxprom161 = sext i32 %leastlooked_l.1 to i64
  %arrayidx162 = getelementptr inbounds %struct.node*, %struct.node** %i58, i64 %idxprom161
  %i59 = load %struct.node*, %struct.node** %arrayidx162, align 8
  %disproof163 = getelementptr inbounds %struct.node, %struct.node* %i59, i32 0, i32 5
  %i60 = load i32, i32* %disproof163, align 8
  %cmp164 = icmp eq i32 %i60, 0
  br i1 %cmp164, label %land.lhs.true166, label %if.end177

land.lhs.true166:                                 ; preds = %if.else159
  %children167 = getelementptr inbounds %struct.node, %struct.node* %i1, i32 0, i32 6
  %i61 = load %struct.node**, %struct.node*** %children167, align 8
  %idxprom168 = sext i32 %leastlooked_l.1 to i64
  %arrayidx169 = getelementptr inbounds %struct.node*, %struct.node** %i61, i64 %idxprom168
  %i62 = load %struct.node*, %struct.node** %arrayidx169, align 8
  %proof170 = getelementptr inbounds %struct.node, %struct.node* %i62, i32 0, i32 4
  %i63 = load i32, i32* %proof170, align 4
  %cmp171 = icmp eq i32 %i63, 100000000
  br i1 %cmp171, label %if.then173, label %if.end177

if.then173:                                       ; preds = %land.lhs.true166
  %idxprom174 = sext i32 %leastlooked_i.1 to i64
  %arrayidx175 = getelementptr inbounds [300 x i32], [300 x i32]* @rootlosers, i64 0, i64 %idxprom174
  store i32 1, i32* %arrayidx175, align 4
  %inc176 = add nsw i32 %losers.0, 1
  br label %if.end177

if.end177:                                        ; preds = %if.then173, %land.lhs.true166, %if.else159
  %losers.3 = phi i32 [ %inc176, %if.then173 ], [ %losers.0, %land.lhs.true166 ], [ %losers.0, %if.else159 ]
  br label %if.end178

if.end178:                                        ; preds = %if.end177, %if.end154
  %losers.4 = phi i32 [ %losers.0, %if.end154 ], [ %losers.3, %if.end177 ]
  br label %if.end179

if.end179:                                        ; preds = %if.end178, %if.end91
  %firsts.1 = phi i32 [ %inc50, %if.end91 ], [ %firsts.0, %if.end178 ]
  %losers.5 = phi i32 [ %losers.2, %if.end91 ], [ %losers.4, %if.end178 ]
  %leastlooked_i.3 = phi i32 [ %leastlooked_i.0, %if.end91 ], [ %leastlooked_i.1, %if.end178 ]
  %leastlooked_l.3 = phi i32 [ %leastlooked_l.0, %if.end91 ], [ %leastlooked_l.1, %if.end178 ]
  %alternates.1 = phi i32 [ %alternates.0, %if.end91 ], [ %inc93, %if.end178 ]
  br label %while.cond

while.end180:                                     ; preds = %land.end
  %expanded = getelementptr inbounds %struct.node, %struct.node* %i1, i32 0, i32 2
  %i64 = load i8, i8* %expanded, align 2
  %tobool181 = icmp ne i8 %i64, 0
  br i1 %tobool181, label %if.then182, label %if.end257

if.then182:                                       ; preds = %while.end180
  br label %for.cond183

for.cond183:                                      ; preds = %for.inc254, %if.then182
  %bdp.0 = phi float [ -1.000000e+00, %if.then182 ], [ %bdp.3, %for.inc254 ]
  %altlosers.0 = phi i32 [ 0, %if.then182 ], [ %altlosers.3, %for.inc254 ]
  %l.2 = phi i32 [ 0, %if.then182 ], [ %l.3, %for.inc254 ]
  %i.3 = phi i32 [ 0, %if.then182 ], [ %inc255, %for.inc254 ]
  %cmp184 = icmp slt i32 %i.3, %i2
  br i1 %cmp184, label %for.body186, label %for.end256

for.body186:                                      ; preds = %for.cond183
  %idxprom187 = sext i32 %i.3 to i64
  %arrayidx188 = getelementptr inbounds [512 x i32], [512 x i32]* %islegal, i64 0, i64 %idxprom187
  %i65 = load i32, i32* %arrayidx188, align 4
  %tobool189 = icmp ne i32 %i65, 0
  br i1 %tobool189, label %if.then190, label %if.end253

if.then190:                                       ; preds = %for.body186
  %idxprom191 = sext i32 %i.3 to i64
  %arrayidx192 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %moves, i64 0, i64 %idxprom191
  %arraydecay193 = getelementptr inbounds [8 x i8], [8 x i8]* %output, i64 0, i64 0
  call void @comp_to_san(%struct.move_s* byval(%struct.move_s) align 8 %arrayidx192, i8* %arraydecay193)
  %children194 = getelementptr inbounds %struct.node, %struct.node* %i1, i32 0, i32 6
  %i66 = load %struct.node**, %struct.node*** %children194, align 8
  %idxprom195 = sext i32 %l.2 to i64
  %arrayidx196 = getelementptr inbounds %struct.node*, %struct.node** %i66, i64 %idxprom195
  %i67 = load %struct.node*, %struct.node** %arrayidx196, align 8
  %proof197 = getelementptr inbounds %struct.node, %struct.node* %i67, i32 0, i32 4
  %i68 = load i32, i32* %proof197, align 4
  %cmp198 = icmp ne i32 %i68, 0
  br i1 %cmp198, label %if.then200, label %if.else246

if.then200:                                       ; preds = %if.then190
  %children201 = getelementptr inbounds %struct.node, %struct.node* %i1, i32 0, i32 6
  %i69 = load %struct.node**, %struct.node*** %children201, align 8
  %idxprom202 = sext i32 %l.2 to i64
  %arrayidx203 = getelementptr inbounds %struct.node*, %struct.node** %i69, i64 %idxprom202
  %i70 = load %struct.node*, %struct.node** %arrayidx203, align 8
  %disproof204 = getelementptr inbounds %struct.node, %struct.node* %i70, i32 0, i32 5
  %i71 = load i32, i32* %disproof204, align 8
  %conv205 = sitofp i32 %i71 to float
  %children206 = getelementptr inbounds %struct.node, %struct.node* %i1, i32 0, i32 6
  %i72 = load %struct.node**, %struct.node*** %children206, align 8
  %idxprom207 = sext i32 %l.2 to i64
  %arrayidx208 = getelementptr inbounds %struct.node*, %struct.node** %i72, i64 %idxprom207
  %i73 = load %struct.node*, %struct.node** %arrayidx208, align 8
  %proof209 = getelementptr inbounds %struct.node, %struct.node* %i73, i32 0, i32 4
  %i74 = load i32, i32* %proof209, align 4
  %conv210 = sitofp i32 %i74 to float
  %div = fdiv float %conv205, %conv210
  %cmp211 = fcmp ogt float %div, %bdp.0
  br i1 %cmp211, label %if.then213, label %if.end229

if.then213:                                       ; preds = %if.then200
  %children214 = getelementptr inbounds %struct.node, %struct.node* %i1, i32 0, i32 6
  %i75 = load %struct.node**, %struct.node*** %children214, align 8
  %idxprom215 = sext i32 %l.2 to i64
  %arrayidx216 = getelementptr inbounds %struct.node*, %struct.node** %i75, i64 %idxprom215
  %i76 = load %struct.node*, %struct.node** %arrayidx216, align 8
  %disproof217 = getelementptr inbounds %struct.node, %struct.node* %i76, i32 0, i32 5
  %i77 = load i32, i32* %disproof217, align 8
  %conv218 = sitofp i32 %i77 to float
  %children219 = getelementptr inbounds %struct.node, %struct.node* %i1, i32 0, i32 6
  %i78 = load %struct.node**, %struct.node*** %children219, align 8
  %idxprom220 = sext i32 %l.2 to i64
  %arrayidx221 = getelementptr inbounds %struct.node*, %struct.node** %i78, i64 %idxprom220
  %i79 = load %struct.node*, %struct.node** %arrayidx221, align 8
  %proof222 = getelementptr inbounds %struct.node, %struct.node* %i79, i32 0, i32 4
  %i80 = load i32, i32* %proof222, align 4
  %conv223 = sitofp i32 %i80 to float
  %div224 = fdiv float %conv218, %conv223
  %children225 = getelementptr inbounds %struct.node, %struct.node* %i1, i32 0, i32 6
  %i81 = load %struct.node**, %struct.node*** %children225, align 8
  %idxprom226 = sext i32 %l.2 to i64
  %arrayidx227 = getelementptr inbounds %struct.node*, %struct.node** %i81, i64 %idxprom226
  %i82 = load %struct.node*, %struct.node** %arrayidx227, align 8
  %move228 = getelementptr inbounds %struct.node, %struct.node* %i82, i32 0, i32 8
  %i83 = bitcast %struct.move_s* %move228 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 bitcast (%struct.move_s* @pn_move to i8*), i8* align 8 %i83, i64 24, i1 false)
  br label %if.end229

if.end229:                                        ; preds = %if.then213, %if.then200
  %bdp.1 = phi float [ %div224, %if.then213 ], [ %bdp.0, %if.then200 ]
  %children230 = getelementptr inbounds %struct.node, %struct.node* %i1, i32 0, i32 6
  %i84 = load %struct.node**, %struct.node*** %children230, align 8
  %idxprom231 = sext i32 %l.2 to i64
  %arrayidx232 = getelementptr inbounds %struct.node*, %struct.node** %i84, i64 %idxprom231
  %i85 = load %struct.node*, %struct.node** %arrayidx232, align 8
  %disproof233 = getelementptr inbounds %struct.node, %struct.node* %i85, i32 0, i32 5
  %i86 = load i32, i32* %disproof233, align 8
  %cmp234 = icmp eq i32 %i86, 0
  br i1 %cmp234, label %land.lhs.true236, label %if.end245

land.lhs.true236:                                 ; preds = %if.end229
  %children237 = getelementptr inbounds %struct.node, %struct.node* %i1, i32 0, i32 6
  %i87 = load %struct.node**, %struct.node*** %children237, align 8
  %idxprom238 = sext i32 %l.2 to i64
  %arrayidx239 = getelementptr inbounds %struct.node*, %struct.node** %i87, i64 %idxprom238
  %i88 = load %struct.node*, %struct.node** %arrayidx239, align 8
  %proof240 = getelementptr inbounds %struct.node, %struct.node* %i88, i32 0, i32 4
  %i89 = load i32, i32* %proof240, align 4
  %cmp241 = icmp eq i32 %i89, 100000000
  br i1 %cmp241, label %if.then243, label %if.end245

if.then243:                                       ; preds = %land.lhs.true236
  %inc244 = add nsw i32 %altlosers.0, 1
  br label %if.end245

if.end245:                                        ; preds = %if.then243, %land.lhs.true236, %if.end229
  %altlosers.1 = phi i32 [ %inc244, %if.then243 ], [ %altlosers.0, %land.lhs.true236 ], [ %altlosers.0, %if.end229 ]
  br label %if.end251

if.else246:                                       ; preds = %if.then190
  store i32 1, i32* @forcedwin, align 4
  %children247 = getelementptr inbounds %struct.node, %struct.node* %i1, i32 0, i32 6
  %i90 = load %struct.node**, %struct.node*** %children247, align 8
  %idxprom248 = sext i32 %l.2 to i64
  %arrayidx249 = getelementptr inbounds %struct.node*, %struct.node** %i90, i64 %idxprom248
  %i91 = load %struct.node*, %struct.node** %arrayidx249, align 8
  %move250 = getelementptr inbounds %struct.node, %struct.node* %i91, i32 0, i32 8
  %i92 = bitcast %struct.move_s* %move250 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 bitcast (%struct.move_s* @pn_move to i8*), i8* align 8 %i92, i64 24, i1 false)
  br label %if.end251

if.end251:                                        ; preds = %if.else246, %if.end245
  %bdp.2 = phi float [ %bdp.1, %if.end245 ], [ 1.000000e+08, %if.else246 ]
  %altlosers.2 = phi i32 [ %altlosers.1, %if.end245 ], [ %altlosers.0, %if.else246 ]
  %inc252 = add nsw i32 %l.2, 1
  br label %if.end253

if.end253:                                        ; preds = %if.end251, %for.body186
  %bdp.3 = phi float [ %bdp.2, %if.end251 ], [ %bdp.0, %for.body186 ]
  %altlosers.3 = phi i32 [ %altlosers.2, %if.end251 ], [ %altlosers.0, %for.body186 ]
  %l.3 = phi i32 [ %inc252, %if.end251 ], [ %l.2, %for.body186 ]
  br label %for.inc254

for.inc254:                                       ; preds = %if.end253
  %inc255 = add nsw i32 %i.3, 1
  br label %for.cond183

for.end256:                                       ; preds = %for.cond183
  br label %if.end257

if.end257:                                        ; preds = %for.end256, %while.end180
  %altlosers.4 = phi i32 [ %altlosers.0, %for.end256 ], [ 0, %while.end180 ]
  %arraydecay258 = getelementptr inbounds [8 x i8], [8 x i8]* %output, i64 0, i64 0
  %i93 = bitcast %struct.move_s* %byval-temp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %i93, i8* align 4 bitcast (%struct.move_s* @pn_move to i8*), i64 24, i1 false)
  call void @comp_to_san(%struct.move_s* byval(%struct.move_s) align 8 %byval-temp, i8* %arraydecay258)
  %i94 = load i32, i32* @xb_mode, align 4
  %tobool259 = icmp ne i32 %i94, 0
  br i1 %tobool259, label %land.lhs.true260, label %if.end266

land.lhs.true260:                                 ; preds = %if.end257
  %i95 = load i32, i32* @post, align 4
  %tobool261 = icmp ne i32 %i95, 0
  br i1 %tobool261, label %if.then262, label %if.end266

if.then262:                                       ; preds = %land.lhs.true260
  %proof263 = getelementptr inbounds %struct.node, %struct.node* %i1, i32 0, i32 4
  %i96 = load i32, i32* %proof263, align 4
  %disproof264 = getelementptr inbounds %struct.node, %struct.node* %i1, i32 0, i32 5
  %i97 = load i32, i32* %disproof264, align 8
  %i98 = load i32, i32* @maxply, align 4
  %call265 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([94 x i8], [94 x i8]* @.str.2.86, i64 0, i64 0), i32 %i96, i32 %i97, i32 %altlosers.4, i32 %i98, i32 %firsts.0, i32 %alternates.0)
  br label %if.end266

if.end266:                                        ; preds = %if.then262, %land.lhs.true260, %if.end257
  %sub267 = sub nsw i32 %legal.0, 1
  %cmp268 = icmp eq i32 %altlosers.4, %sub267
  br i1 %cmp268, label %if.then270, label %if.end290

if.then270:                                       ; preds = %if.end266
  %call271 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @.str.3.87, i64 0, i64 0))
  br label %for.cond272

for.cond272:                                      ; preds = %for.inc287, %if.then270
  %i.4 = phi i32 [ 0, %if.then270 ], [ %inc288, %for.inc287 ]
  %cmp273 = icmp slt i32 %i.4, %i2
  br i1 %cmp273, label %for.body275, label %for.end289

for.body275:                                      ; preds = %for.cond272
  %idxprom276 = sext i32 %i.4 to i64
  %arrayidx277 = getelementptr inbounds [300 x i32], [300 x i32]* @rootlosers, i64 0, i64 %idxprom276
  %i99 = load i32, i32* %arrayidx277, align 4
  %tobool278 = icmp ne i32 %i99, 0
  br i1 %tobool278, label %if.end286, label %land.lhs.true279

land.lhs.true279:                                 ; preds = %for.body275
  %idxprom280 = sext i32 %i.4 to i64
  %arrayidx281 = getelementptr inbounds [512 x i32], [512 x i32]* %islegal, i64 0, i64 %idxprom280
  %i100 = load i32, i32* %arrayidx281, align 4
  %tobool282 = icmp ne i32 %i100, 0
  br i1 %tobool282, label %if.then283, label %if.end286

if.then283:                                       ; preds = %land.lhs.true279
  store i32 1, i32* @forcedwin, align 4
  %idxprom284 = sext i32 %i.4 to i64
  %arrayidx285 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %moves, i64 0, i64 %idxprom284
  %i101 = bitcast %struct.move_s* %arrayidx285 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 bitcast (%struct.move_s* @pn_move to i8*), i8* align 8 %i101, i64 24, i1 false)
  br label %for.end289

if.end286:                                        ; preds = %land.lhs.true279, %for.body275
  br label %for.inc287

for.inc287:                                       ; preds = %if.end286
  %inc288 = add nsw i32 %i.4, 1
  br label %for.cond272

for.end289:                                       ; preds = %if.then283, %for.cond272
  br label %if.end290

if.end290:                                        ; preds = %for.end289, %if.end266
  %cmp291 = icmp eq i32 %altlosers.4, %legal.0
  br i1 %cmp291, label %if.then293, label %if.end294

if.then293:                                       ; preds = %if.end290
  store i32 1, i32* @alllosers, align 4
  br label %if.end294

if.end294:                                        ; preds = %if.then293, %if.end290
  call void @Xfree()
  %i102 = load i8*, i8** @membuff, align 8
  call void @free(i8* %i102) #8
  %i103 = bitcast %struct.node* %i1 to i8*
  call void @free(i8* %i103) #8
  br label %return

return:                                           ; preds = %if.end294, %if.then27, %if.then15
  ret void
}

; Function Attrs: nounwind
declare dso_local noalias i8* @calloc(i64, i64) #3

; Function Attrs: noinline nounwind uwtable
define dso_local void @proofnumbersearch() #0 {
entry:
  %output = alloca [8192 x i8], align 16
  %PV = alloca [8192 x i8], align 16
  store i32 1, i32* @nodecount, align 4
  store i32 0, i32* @iters, align 4
  store i32 0, i32* @frees, align 4
  store i32 1, i32* @ply, align 4
  store i32 0, i32* @maxply, align 4
  store i32 0, i32* @forwards, align 4
  %i = load i32, i32* @hash, align 4
  %i1 = load i32, i32* @move_number, align 4
  %i2 = load i32, i32* @ply, align 4
  %add = add nsw i32 %i1, %i2
  %sub = sub nsw i32 %add, 1
  %idxprom = sext i32 %sub to i64
  %arrayidx = getelementptr inbounds [600 x i32], [600 x i32]* @hash_history, i64 0, i64 %idxprom
  store i32 %i, i32* %arrayidx, align 4
  %i3 = load i32, i32* @white_to_move, align 4
  %tobool = icmp ne i32 %i3, 0
  %i4 = zext i1 %tobool to i64
  %cond = select i1 %tobool, i32 0, i32 1
  store i32 %cond, i32* @root_to_move, align 4
  %call = call i64 @rtime()
  %call1 = call noalias i8* @calloc(i64 1, i64 56) #8
  %i5 = bitcast i8* %call1 to %struct.node*
  %i6 = load i32, i32* @PBSize, align 4
  %conv = sext i32 %i6 to i64
  %call2 = call noalias i8* @calloc(i64 %conv, i64 56) #8
  store i8* %call2, i8** @membuff, align 8
  call void @pn_eval(%struct.node* %i5)
  %value = getelementptr inbounds %struct.node, %struct.node* %i5, i32 0, i32 0
  %i7 = load i8, i8* %value, align 8
  %conv3 = zext i8 %i7 to i32
  %cmp = icmp eq i32 %conv3, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 bitcast (%struct.move_s* @pn_move to i8*), i8* align 4 bitcast (%struct.move_s* @dummy to i8*), i64 24, i1 false)
  call void @Xfree()
  %i8 = bitcast %struct.node* %i5 to i8*
  call void @free(i8* %i8) #8
  %i9 = load i8*, i8** @membuff, align 8
  call void @free(i8* %i9) #8
  br label %return

if.end:                                           ; preds = %entry
  call void @set_proof_and_disproof_numbers(%struct.node* %i5)
  br label %while.cond

while.cond:                                       ; preds = %if.end27, %if.end
  %proof = getelementptr inbounds %struct.node, %struct.node* %i5, i32 0, i32 4
  %i10 = load i32, i32* %proof, align 4
  %cmp5 = icmp ne i32 %i10, 0
  br i1 %cmp5, label %land.lhs.true, label %land.end

land.lhs.true:                                    ; preds = %while.cond
  %disproof = getelementptr inbounds %struct.node, %struct.node* %i5, i32 0, i32 5
  %i11 = load i32, i32* %disproof, align 8
  %cmp7 = icmp ne i32 %i11, 0
  br i1 %cmp7, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %land.lhs.true
  %i12 = load i32, i32* @bufftop, align 4
  %conv9 = zext i32 %i12 to i64
  %i13 = load i32, i32* @PBSize, align 4
  %sub10 = sub nsw i32 %i13, 10000
  %conv11 = sext i32 %sub10 to i64
  %mul = mul i64 %conv11, 56
  %cmp12 = icmp ult i64 %conv9, %mul
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true, %while.cond
  %i14 = phi i1 [ false, %land.lhs.true ], [ false, %while.cond ], [ %cmp12, %land.rhs ]
  br i1 %i14, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %call14 = call %struct.node* @select_most_proving(%struct.node* %i5)
  call void @develop_node(%struct.node* %call14)
  call void @update_ancestors(%struct.node* %call14)
  %i15 = load i32, i32* @iters, align 4
  %inc = add nsw i32 %i15, 1
  store i32 %inc, i32* @iters, align 4
  %i16 = load i32, i32* @iters, align 4
  %rem = srem i32 %i16, 32
  %cmp15 = icmp eq i32 %rem, 0
  br i1 %cmp15, label %if.then17, label %if.end27

if.then17:                                        ; preds = %while.body
  %call18 = call i64 @rtime()
  %call19 = call i32 @rdifftime(i64 %call18, i64 %call)
  %i17 = load i32, i32* @pn_time, align 4
  %cmp20 = icmp sgt i32 %call19, %i17
  br i1 %cmp20, label %land.lhs.true22, label %if.end26

land.lhs.true22:                                  ; preds = %if.then17
  %call23 = call i32 @interrupt()
  %tobool24 = icmp ne i32 %call23, 0
  br i1 %tobool24, label %if.end26, label %if.then25

if.then25:                                        ; preds = %land.lhs.true22
  br label %while.end

if.end26:                                         ; preds = %land.lhs.true22, %if.then17
  br label %if.end27

if.end27:                                         ; preds = %if.end26, %while.body
  br label %while.cond

while.end:                                        ; preds = %if.then25, %land.end
  %proof28 = getelementptr inbounds %struct.node, %struct.node* %i5, i32 0, i32 4
  %i18 = load i32, i32* %proof28, align 4
  %disproof29 = getelementptr inbounds %struct.node, %struct.node* %i5, i32 0, i32 5
  %i19 = load i32, i32* %disproof29, align 8
  %i20 = load i32, i32* @nodecount, align 4
  %i21 = load i32, i32* @frees, align 4
  %i22 = load i32, i32* @nodecount, align 4
  %conv30 = sext i32 %i22 to i64
  %mul31 = mul i64 %conv30, 56
  %conv32 = uitofp i64 %mul31 to float
  %div = fdiv float %conv32, 0x4130000000000000
  %conv33 = fpext float %div to double
  %i23 = load i32, i32* @iters, align 4
  %i24 = load i32, i32* @maxply, align 4
  %call34 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.4.88, i64 0, i64 0), i32 %i18, i32 %i19, i32 %i20, i32 %i21, double %conv33, i32 %i23, i32 %i24)
  %i25 = load i32, i32* @xb_mode, align 4
  %tobool35 = icmp ne i32 %i25, 0
  br i1 %tobool35, label %land.lhs.true36, label %if.end42

land.lhs.true36:                                  ; preds = %while.end
  %i26 = load i32, i32* @post, align 4
  %tobool37 = icmp ne i32 %i26, 0
  br i1 %tobool37, label %if.then38, label %if.end42

if.then38:                                        ; preds = %land.lhs.true36
  %proof39 = getelementptr inbounds %struct.node, %struct.node* %i5, i32 0, i32 4
  %i27 = load i32, i32* %proof39, align 4
  %disproof40 = getelementptr inbounds %struct.node, %struct.node* %i5, i32 0, i32 5
  %i28 = load i32, i32* %disproof40, align 8
  %i29 = load i32, i32* @nodecount, align 4
  %i30 = load i32, i32* @forwards, align 4
  %i31 = load i32, i32* @iters, align 4
  %i32 = load i32, i32* @maxply, align 4
  %call41 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([90 x i8], [90 x i8]* @.str.5.89, i64 0, i64 0), i32 %i27, i32 %i28, i32 %i29, i32 %i30, i32 %i31, i32 %i32)
  br label %if.end42

if.end42:                                         ; preds = %if.then38, %land.lhs.true36, %while.end
  %i33 = load i32, i32* @xb_mode, align 4
  %tobool43 = icmp ne i32 %i33, 0
  br i1 %tobool43, label %if.end51, label %if.then44

if.then44:                                        ; preds = %if.end42
  %call45 = call i64 @rtime()
  %call46 = call i32 @rdifftime(i64 %call45, i64 %call)
  %conv47 = sitofp i32 %call46 to float
  %conv48 = fpext float %conv47 to double
  %div49 = fdiv double %conv48, 1.000000e+02
  %call50 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.6.90, i64 0, i64 0), double %div49)
  br label %if.end51

if.end51:                                         ; preds = %if.then44, %if.end42
  br label %while.cond52

while.cond52:                                     ; preds = %while.body55, %if.end51
  %currentnode.0 = phi %struct.node* [ %i5, %if.end51 ], [ %i34, %while.body55 ]
  %cmp53 = icmp ne %struct.node* %currentnode.0, %i5
  br i1 %cmp53, label %while.body55, label %while.end56

while.body55:                                     ; preds = %while.cond52
  %move = getelementptr inbounds %struct.node, %struct.node* %currentnode.0, i32 0, i32 8
  call void @unmake(%struct.move_s* %move, i32 0)
  %parent = getelementptr inbounds %struct.node, %struct.node* %currentnode.0, i32 0, i32 7
  %i34 = load %struct.node*, %struct.node** %parent, align 8
  br label %while.cond52

while.end56:                                      ; preds = %while.cond52
  %proof57 = getelementptr inbounds %struct.node, %struct.node* %i5, i32 0, i32 4
  %i35 = load i32, i32* %proof57, align 4
  %cmp58 = icmp eq i32 %i35, 0
  br i1 %cmp58, label %if.then60, label %if.else149

if.then60:                                        ; preds = %while.end56
  %value61 = getelementptr inbounds %struct.node, %struct.node* %i5, i32 0, i32 0
  store i8 1, i8* %value61, align 8
  %call62 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.7.91, i64 0, i64 0))
  %call63 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.8.92, i64 0, i64 0))
  %arraydecay = getelementptr inbounds [8192 x i8], [8192 x i8]* %output, i64 0, i64 0
  call void @llvm.memset.p0i8.i64(i8* align 16 %arraydecay, i8 0, i64 8192, i1 false)
  %arraydecay64 = getelementptr inbounds [8192 x i8], [8192 x i8]* %PV, i64 0, i64 0
  call void @llvm.memset.p0i8.i64(i8* align 16 %arraydecay64, i8 0, i64 8192, i1 false)
  store i32 1, i32* @ply, align 4
  br label %while.cond65

while.cond65:                                     ; preds = %if.end112, %if.then60
  %currentnode.1 = phi %struct.node* [ %currentnode.0, %if.then60 ], [ %i49, %if.end112 ]
  %expanded = getelementptr inbounds %struct.node, %struct.node* %currentnode.1, i32 0, i32 2
  %i36 = load i8, i8* %expanded, align 2
  %tobool66 = icmp ne i8 %i36, 0
  br i1 %tobool66, label %while.body67, label %while.end113

while.body67:                                     ; preds = %while.cond65
  %i37 = load i32, i32* @white_to_move, align 4
  %tobool68 = icmp ne i32 %i37, 0
  %i38 = zext i1 %tobool68 to i64
  %cond69 = select i1 %tobool68, i32 0, i32 1
  %i39 = load i32, i32* @root_to_move, align 4
  %cmp70 = icmp eq i32 %cond69, %i39
  br i1 %cmp70, label %if.then72, label %if.else

if.then72:                                        ; preds = %while.body67
  br label %while.cond73

while.cond73:                                     ; preds = %while.body80, %if.then72
  %i.0 = phi i32 [ 0, %if.then72 ], [ %inc81, %while.body80 ]
  %children = getelementptr inbounds %struct.node, %struct.node* %currentnode.1, i32 0, i32 6
  %i40 = load %struct.node**, %struct.node*** %children, align 8
  %idxprom74 = sext i32 %i.0 to i64
  %arrayidx75 = getelementptr inbounds %struct.node*, %struct.node** %i40, i64 %idxprom74
  %i41 = load %struct.node*, %struct.node** %arrayidx75, align 8
  %proof76 = getelementptr inbounds %struct.node, %struct.node* %i41, i32 0, i32 4
  %i42 = load i32, i32* %proof76, align 4
  %proof77 = getelementptr inbounds %struct.node, %struct.node* %currentnode.1, i32 0, i32 4
  %i43 = load i32, i32* %proof77, align 4
  %cmp78 = icmp ne i32 %i42, %i43
  br i1 %cmp78, label %while.body80, label %while.end82

while.body80:                                     ; preds = %while.cond73
  %inc81 = add nsw i32 %i.0, 1
  br label %while.cond73

while.end82:                                      ; preds = %while.cond73
  br label %if.end94

if.else:                                          ; preds = %while.body67
  br label %while.cond83

while.cond83:                                     ; preds = %while.body91, %if.else
  %i.1 = phi i32 [ 0, %if.else ], [ %inc92, %while.body91 ]
  %children84 = getelementptr inbounds %struct.node, %struct.node* %currentnode.1, i32 0, i32 6
  %i44 = load %struct.node**, %struct.node*** %children84, align 8
  %idxprom85 = sext i32 %i.1 to i64
  %arrayidx86 = getelementptr inbounds %struct.node*, %struct.node** %i44, i64 %idxprom85
  %i45 = load %struct.node*, %struct.node** %arrayidx86, align 8
  %disproof87 = getelementptr inbounds %struct.node, %struct.node* %i45, i32 0, i32 5
  %i46 = load i32, i32* %disproof87, align 8
  %disproof88 = getelementptr inbounds %struct.node, %struct.node* %currentnode.1, i32 0, i32 5
  %i47 = load i32, i32* %disproof88, align 8
  %cmp89 = icmp ne i32 %i46, %i47
  br i1 %cmp89, label %while.body91, label %while.end93

while.body91:                                     ; preds = %while.cond83
  %inc92 = add nsw i32 %i.1, 1
  br label %while.cond83

while.end93:                                      ; preds = %while.cond83
  br label %if.end94

if.end94:                                         ; preds = %while.end93, %while.end82
  %i.2 = phi i32 [ %i.0, %while.end82 ], [ %i.1, %while.end93 ]
  %children95 = getelementptr inbounds %struct.node, %struct.node* %currentnode.1, i32 0, i32 6
  %i48 = load %struct.node**, %struct.node*** %children95, align 8
  %idxprom96 = sext i32 %i.2 to i64
  %arrayidx97 = getelementptr inbounds %struct.node*, %struct.node** %i48, i64 %idxprom96
  %i49 = load %struct.node*, %struct.node** %arrayidx97, align 8
  %move98 = getelementptr inbounds %struct.node, %struct.node* %i49, i32 0, i32 8
  %arraydecay99 = getelementptr inbounds [8192 x i8], [8192 x i8]* %output, i64 0, i64 0
  call void @comp_to_coord(%struct.move_s* byval(%struct.move_s) align 8 %move98, i8* %arraydecay99)
  %arraydecay100 = getelementptr inbounds [8192 x i8], [8192 x i8]* %output, i64 0, i64 0
  %call101 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.9.93, i64 0, i64 0), i8* %arraydecay100)
  %arraydecay102 = getelementptr inbounds [8192 x i8], [8192 x i8]* %PV, i64 0, i64 0
  %arraydecay103 = getelementptr inbounds [8192 x i8], [8192 x i8]* %output, i64 0, i64 0
  %call104 = call i8* @strcat(i8* %arraydecay102, i8* %arraydecay103) #8
  %arraydecay105 = getelementptr inbounds [8192 x i8], [8192 x i8]* %PV, i64 0, i64 0
  %call106 = call i8* @strcat(i8* %arraydecay105, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.10.94, i64 0, i64 0)) #8
  %move107 = getelementptr inbounds %struct.node, %struct.node* %i49, i32 0, i32 8
  call void @make(%struct.move_s* %move107, i32 0)
  %i50 = load i32, i32* @ply, align 4
  %cmp108 = icmp eq i32 %i50, 1
  br i1 %cmp108, label %if.then110, label %if.end112

if.then110:                                       ; preds = %if.end94
  %move111 = getelementptr inbounds %struct.node, %struct.node* %i49, i32 0, i32 8
  %i51 = bitcast %struct.move_s* %move111 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 bitcast (%struct.move_s* @pn_move to i8*), i8* align 8 %i51, i64 24, i1 false)
  br label %if.end112

if.end112:                                        ; preds = %if.then110, %if.end94
  store i32 1, i32* @forcedwin, align 4
  br label %while.cond65

while.end113:                                     ; preds = %while.cond65
  %i52 = load i32, i32* @ply, align 4
  br label %while.cond114

while.cond114:                                    ; preds = %while.body117, %while.end113
  %currentnode.2 = phi %struct.node* [ %currentnode.1, %while.end113 ], [ %i53, %while.body117 ]
  %cmp115 = icmp ne %struct.node* %currentnode.2, %i5
  br i1 %cmp115, label %while.body117, label %while.end120

while.body117:                                    ; preds = %while.cond114
  %move118 = getelementptr inbounds %struct.node, %struct.node* %currentnode.2, i32 0, i32 8
  call void @unmake(%struct.move_s* %move118, i32 0)
  %parent119 = getelementptr inbounds %struct.node, %struct.node* %currentnode.2, i32 0, i32 7
  %i53 = load %struct.node*, %struct.node** %parent119, align 8
  br label %while.cond114

while.end120:                                     ; preds = %while.cond114
  %i54 = load i32, i32* @kibitzed, align 4
  %tobool121 = icmp ne i32 %i54, 0
  br i1 %tobool121, label %if.end129, label %land.lhs.true122

land.lhs.true122:                                 ; preds = %while.end120
  %i55 = load i32, i32* @xb_mode, align 4
  %tobool123 = icmp ne i32 %i55, 0
  br i1 %tobool123, label %land.lhs.true124, label %if.end129

land.lhs.true124:                                 ; preds = %land.lhs.true122
  %i56 = load i32, i32* @post, align 4
  %tobool125 = icmp ne i32 %i56, 0
  br i1 %tobool125, label %if.then126, label %if.end129

if.then126:                                       ; preds = %land.lhs.true124
  store i32 1, i32* @kibitzed, align 4
  %div127 = sdiv i32 %i52, 2
  %call128 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.11.95, i64 0, i64 0), i32 %div127)
  br label %if.end129

if.end129:                                        ; preds = %if.then126, %land.lhs.true124, %land.lhs.true122, %while.end120
  %cmp130 = icmp eq i32 %i52, 1
  br i1 %cmp130, label %land.lhs.true132, label %if.end147

land.lhs.true132:                                 ; preds = %if.end129
  %proof133 = getelementptr inbounds %struct.node, %struct.node* %i5, i32 0, i32 4
  %i57 = load i32, i32* %proof133, align 4
  %cmp134 = icmp eq i32 %i57, 0
  br i1 %cmp134, label %if.then139, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true132
  %disproof136 = getelementptr inbounds %struct.node, %struct.node* %i5, i32 0, i32 5
  %i58 = load i32, i32* %disproof136, align 8
  %cmp137 = icmp eq i32 %i58, 0
  br i1 %cmp137, label %if.then139, label %if.end147

if.then139:                                       ; preds = %lor.lhs.false, %land.lhs.true132
  %i59 = load i32, i32* @root_to_move, align 4
  %cmp140 = icmp eq i32 %i59, 0
  br i1 %cmp140, label %if.then142, label %if.else144

if.then142:                                       ; preds = %if.then139
  %call143 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.12.96, i64 0, i64 0))
  store i32 3, i32* @result, align 4
  br label %if.end146

if.else144:                                       ; preds = %if.then139
  %call145 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.13.97, i64 0, i64 0))
  store i32 2, i32* @result, align 4
  br label %if.end146

if.end146:                                        ; preds = %if.else144, %if.then142
  br label %if.end147

if.end147:                                        ; preds = %if.end146, %lor.lhs.false, %if.end129
  %call148 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.14.98, i64 0, i64 0))
  br label %if.end160

if.else149:                                       ; preds = %while.end56
  %disproof150 = getelementptr inbounds %struct.node, %struct.node* %i5, i32 0, i32 5
  %i60 = load i32, i32* %disproof150, align 8
  %cmp151 = icmp eq i32 %i60, 0
  br i1 %cmp151, label %if.then153, label %if.else156

if.then153:                                       ; preds = %if.else149
  %value154 = getelementptr inbounds %struct.node, %struct.node* %i5, i32 0, i32 0
  store i8 0, i8* %value154, align 8
  %call155 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.15.99, i64 0, i64 0))
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 bitcast (%struct.move_s* @pn_move to i8*), i8* align 4 bitcast (%struct.move_s* @dummy to i8*), i64 24, i1 false)
  br label %if.end159

if.else156:                                       ; preds = %if.else149
  %value157 = getelementptr inbounds %struct.node, %struct.node* %i5, i32 0, i32 0
  store i8 2, i8* %value157, align 8
  %call158 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.16.100, i64 0, i64 0))
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 bitcast (%struct.move_s* @pn_move to i8*), i8* align 4 bitcast (%struct.move_s* @dummy to i8*), i64 24, i1 false)
  br label %if.end159

if.end159:                                        ; preds = %if.else156, %if.then153
  br label %if.end160

if.end160:                                        ; preds = %if.end159, %if.end147
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end160
  %i.3 = phi i32 [ 0, %if.end160 ], [ %inc207, %for.inc ]
  %bdp.0 = phi float [ -1.000000e+00, %if.end160 ], [ %bdp.1, %for.inc ]
  %num_children = getelementptr inbounds %struct.node, %struct.node* %i5, i32 0, i32 1
  %i61 = load i8, i8* %num_children, align 1
  %conv161 = zext i8 %i61 to i32
  %cmp162 = icmp slt i32 %i.3, %conv161
  br i1 %cmp162, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %children164 = getelementptr inbounds %struct.node, %struct.node* %i5, i32 0, i32 6
  %i62 = load %struct.node**, %struct.node*** %children164, align 8
  %idxprom165 = sext i32 %i.3 to i64
  %arrayidx166 = getelementptr inbounds %struct.node*, %struct.node** %i62, i64 %idxprom165
  %i63 = load %struct.node*, %struct.node** %arrayidx166, align 8
  %proof167 = getelementptr inbounds %struct.node, %struct.node* %i63, i32 0, i32 4
  %i64 = load i32, i32* %proof167, align 4
  %cmp168 = icmp ne i32 %i64, 0
  br i1 %cmp168, label %if.then170, label %if.else201

if.then170:                                       ; preds = %for.body
  %children171 = getelementptr inbounds %struct.node, %struct.node* %i5, i32 0, i32 6
  %i65 = load %struct.node**, %struct.node*** %children171, align 8
  %idxprom172 = sext i32 %i.3 to i64
  %arrayidx173 = getelementptr inbounds %struct.node*, %struct.node** %i65, i64 %idxprom172
  %i66 = load %struct.node*, %struct.node** %arrayidx173, align 8
  %disproof174 = getelementptr inbounds %struct.node, %struct.node* %i66, i32 0, i32 5
  %i67 = load i32, i32* %disproof174, align 8
  %conv175 = sitofp i32 %i67 to float
  %children176 = getelementptr inbounds %struct.node, %struct.node* %i5, i32 0, i32 6
  %i68 = load %struct.node**, %struct.node*** %children176, align 8
  %idxprom177 = sext i32 %i.3 to i64
  %arrayidx178 = getelementptr inbounds %struct.node*, %struct.node** %i68, i64 %idxprom177
  %i69 = load %struct.node*, %struct.node** %arrayidx178, align 8
  %proof179 = getelementptr inbounds %struct.node, %struct.node* %i69, i32 0, i32 4
  %i70 = load i32, i32* %proof179, align 4
  %conv180 = sitofp i32 %i70 to float
  %div181 = fdiv float %conv175, %conv180
  %cmp182 = fcmp ogt float %div181, %bdp.0
  br i1 %cmp182, label %if.then184, label %if.end200

if.then184:                                       ; preds = %if.then170
  %children185 = getelementptr inbounds %struct.node, %struct.node* %i5, i32 0, i32 6
  %i71 = load %struct.node**, %struct.node*** %children185, align 8
  %idxprom186 = sext i32 %i.3 to i64
  %arrayidx187 = getelementptr inbounds %struct.node*, %struct.node** %i71, i64 %idxprom186
  %i72 = load %struct.node*, %struct.node** %arrayidx187, align 8
  %disproof188 = getelementptr inbounds %struct.node, %struct.node* %i72, i32 0, i32 5
  %i73 = load i32, i32* %disproof188, align 8
  %conv189 = sitofp i32 %i73 to float
  %children190 = getelementptr inbounds %struct.node, %struct.node* %i5, i32 0, i32 6
  %i74 = load %struct.node**, %struct.node*** %children190, align 8
  %idxprom191 = sext i32 %i.3 to i64
  %arrayidx192 = getelementptr inbounds %struct.node*, %struct.node** %i74, i64 %idxprom191
  %i75 = load %struct.node*, %struct.node** %arrayidx192, align 8
  %proof193 = getelementptr inbounds %struct.node, %struct.node* %i75, i32 0, i32 4
  %i76 = load i32, i32* %proof193, align 4
  %conv194 = sitofp i32 %i76 to float
  %div195 = fdiv float %conv189, %conv194
  %children196 = getelementptr inbounds %struct.node, %struct.node* %i5, i32 0, i32 6
  %i77 = load %struct.node**, %struct.node*** %children196, align 8
  %idxprom197 = sext i32 %i.3 to i64
  %arrayidx198 = getelementptr inbounds %struct.node*, %struct.node** %i77, i64 %idxprom197
  %i78 = load %struct.node*, %struct.node** %arrayidx198, align 8
  %move199 = getelementptr inbounds %struct.node, %struct.node* %i78, i32 0, i32 8
  %i79 = bitcast %struct.move_s* %move199 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 bitcast (%struct.move_s* @pn_move to i8*), i8* align 8 %i79, i64 24, i1 false)
  br label %if.end200

if.end200:                                        ; preds = %if.then184, %if.then170
  %bdp.1 = phi float [ %div195, %if.then184 ], [ %bdp.0, %if.then170 ]
  br label %if.end206

if.else201:                                       ; preds = %for.body
  %children202 = getelementptr inbounds %struct.node, %struct.node* %i5, i32 0, i32 6
  %i80 = load %struct.node**, %struct.node*** %children202, align 8
  %idxprom203 = sext i32 %i.3 to i64
  %arrayidx204 = getelementptr inbounds %struct.node*, %struct.node** %i80, i64 %idxprom203
  %i81 = load %struct.node*, %struct.node** %arrayidx204, align 8
  %move205 = getelementptr inbounds %struct.node, %struct.node* %i81, i32 0, i32 8
  %i82 = bitcast %struct.move_s* %move205 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 bitcast (%struct.move_s* @pn_move to i8*), i8* align 8 %i82, i64 24, i1 false)
  br label %for.end

if.end206:                                        ; preds = %if.end200
  br label %for.inc

for.inc:                                          ; preds = %if.end206
  %inc207 = add nsw i32 %i.3, 1
  br label %for.cond

for.end:                                          ; preds = %if.else201, %for.cond
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 bitcast (%struct.move_s* @pn_saver to i8*), i8* align 4 bitcast (%struct.move_s* @pn_move to i8*), i64 24, i1 false)
  %i83 = bitcast %struct.node* %i5 to i8*
  call void @free(i8* %i83) #8
  call void @Xfree()
  %i84 = load i8*, i8** @membuff, align 8
  call void @free(i8* %i84) #8
  br label %return

return:                                           ; preds = %for.end, %if.then
  ret void
}

; Function Attrs: nounwind
declare dso_local i8* @strcat(i8*, i8*) #3

; Function Attrs: noinline nounwind uwtable
define dso_local void @proofnumbercheck(%struct.move_s* noalias sret(%struct.move_s) align 4 %agg.result, %struct.move_s* byval(%struct.move_s) align 8 %compmove) #0 {
entry:
  %resmove = alloca %struct.move_s, align 4
  %i = load i32, i32* @piece_count, align 4
  %cmp = icmp sle i32 %i, 3
  br i1 %cmp, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %entry
  %i1 = load i32, i32* @Variant, align 4
  %cmp1 = icmp eq i32 %i1, 3
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %i2 = bitcast %struct.move_s* %agg.result to i8*
  %i3 = bitcast %struct.move_s* %compmove to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %i2, i8* align 8 %i3, i64 24, i1 false)
  br label %return

if.end:                                           ; preds = %land.lhs.true, %entry
  store i32 0, i32* @nodecount, align 4
  store i32 0, i32* @iters, align 4
  store i32 0, i32* @frees, align 4
  store i32 1, i32* @ply, align 4
  store i32 0, i32* @maxply, align 4
  call void @make(%struct.move_s* %compmove, i32 0)
  %i4 = load i32, i32* @hash, align 4
  %i5 = load i32, i32* @move_number, align 4
  %i6 = load i32, i32* @ply, align 4
  %add = add nsw i32 %i5, %i6
  %sub = sub nsw i32 %add, 1
  %idxprom = sext i32 %sub to i64
  %arrayidx = getelementptr inbounds [600 x i32], [600 x i32]* @hash_history, i64 0, i64 %idxprom
  store i32 %i4, i32* %arrayidx, align 4
  %i7 = load i32, i32* @white_to_move, align 4
  %tobool = icmp ne i32 %i7, 0
  %i8 = zext i1 %tobool to i64
  %cond = select i1 %tobool, i32 0, i32 1
  store i32 %cond, i32* @root_to_move, align 4
  %call = call i64 @rtime()
  %call2 = call noalias i8* @calloc(i64 1, i64 56) #8
  %i9 = bitcast i8* %call2 to %struct.node*
  %i10 = load i32, i32* @PBSize, align 4
  %conv = sext i32 %i10 to i64
  %call3 = call noalias i8* @calloc(i64 %conv, i64 56) #8
  store i8* %call3, i8** @membuff, align 8
  call void @pn_eval(%struct.node* %i9)
  call void @set_proof_and_disproof_numbers(%struct.node* %i9)
  br label %while.cond

while.cond:                                       ; preds = %if.end24, %if.end
  %proof = getelementptr inbounds %struct.node, %struct.node* %i9, i32 0, i32 4
  %i11 = load i32, i32* %proof, align 4
  %cmp4 = icmp ne i32 %i11, 0
  br i1 %cmp4, label %land.lhs.true6, label %land.end

land.lhs.true6:                                   ; preds = %while.cond
  %disproof = getelementptr inbounds %struct.node, %struct.node* %i9, i32 0, i32 5
  %i12 = load i32, i32* %disproof, align 8
  %cmp7 = icmp ne i32 %i12, 0
  br i1 %cmp7, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %land.lhs.true6
  %i13 = load i32, i32* @bufftop, align 4
  %conv9 = zext i32 %i13 to i64
  %i14 = load i32, i32* @PBSize, align 4
  %sub10 = sub nsw i32 %i14, 10000
  %conv11 = sext i32 %sub10 to i64
  %mul = mul i64 %conv11, 56
  %cmp12 = icmp ult i64 %conv9, %mul
  br label %land.end

land.end:                                         ; preds = %land.rhs, %land.lhs.true6, %while.cond
  %i15 = phi i1 [ false, %land.lhs.true6 ], [ false, %while.cond ], [ %cmp12, %land.rhs ]
  br i1 %i15, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %call14 = call %struct.node* @select_most_proving(%struct.node* %i9)
  call void @develop_node(%struct.node* %call14)
  call void @update_ancestors(%struct.node* %call14)
  %i16 = load i32, i32* @iters, align 4
  %inc = add nsw i32 %i16, 1
  store i32 %inc, i32* @iters, align 4
  %i17 = load i32, i32* @iters, align 4
  %rem = srem i32 %i17, 32
  %cmp15 = icmp eq i32 %rem, 0
  br i1 %cmp15, label %if.then17, label %if.end24

if.then17:                                        ; preds = %while.body
  %call18 = call i64 @rtime()
  %call19 = call i32 @rdifftime(i64 %call18, i64 %call)
  %i18 = load i32, i32* @pn_time, align 4
  %cmp20 = icmp sgt i32 %call19, %i18
  br i1 %cmp20, label %if.then22, label %if.end23

if.then22:                                        ; preds = %if.then17
  br label %while.end

if.end23:                                         ; preds = %if.then17
  br label %if.end24

if.end24:                                         ; preds = %if.end23, %while.body
  br label %while.cond

while.end:                                        ; preds = %if.then22, %land.end
  %proof25 = getelementptr inbounds %struct.node, %struct.node* %i9, i32 0, i32 4
  %i19 = load i32, i32* %proof25, align 4
  %disproof26 = getelementptr inbounds %struct.node, %struct.node* %i9, i32 0, i32 5
  %i20 = load i32, i32* %disproof26, align 8
  %i21 = load i32, i32* @nodecount, align 4
  %i22 = load i32, i32* @frees, align 4
  %i23 = load i32, i32* @nodecount, align 4
  %conv27 = sext i32 %i23 to i64
  %mul28 = mul i64 %conv27, 56
  %conv29 = uitofp i64 %mul28 to float
  %div = fdiv float %conv29, 0x4130000000000000
  %conv30 = fpext float %div to double
  %i24 = load i32, i32* @iters, align 4
  %call31 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.17.101, i64 0, i64 0), i32 %i19, i32 %i20, i32 %i21, i32 %i22, double %conv30, i32 %i24)
  br label %while.cond32

while.cond32:                                     ; preds = %while.body35, %while.end
  %currentnode.0 = phi %struct.node* [ %i9, %while.end ], [ %i25, %while.body35 ]
  %cmp33 = icmp ne %struct.node* %currentnode.0, %i9
  br i1 %cmp33, label %while.body35, label %while.end36

while.body35:                                     ; preds = %while.cond32
  %move = getelementptr inbounds %struct.node, %struct.node* %currentnode.0, i32 0, i32 8
  call void @unmake(%struct.move_s* %move, i32 0)
  %parent = getelementptr inbounds %struct.node, %struct.node* %currentnode.0, i32 0, i32 7
  %i25 = load %struct.node*, %struct.node** %parent, align 8
  br label %while.cond32

while.end36:                                      ; preds = %while.cond32
  call void @unmake(%struct.move_s* %compmove, i32 0)
  %proof37 = getelementptr inbounds %struct.node, %struct.node* %i9, i32 0, i32 4
  %i26 = load i32, i32* %proof37, align 4
  %cmp38 = icmp eq i32 %i26, 0
  br i1 %cmp38, label %if.then40, label %if.else

if.then40:                                        ; preds = %while.end36
  %value = getelementptr inbounds %struct.node, %struct.node* %i9, i32 0, i32 0
  store i8 1, i8* %value, align 8
  %i27 = bitcast %struct.move_s* %resmove to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %i27, i8* align 4 bitcast (%struct.move_s* @pn_move to i8*), i64 24, i1 false)
  store i32 1, i32* @s_threat, align 4
  br label %if.end49

if.else:                                          ; preds = %while.end36
  %disproof41 = getelementptr inbounds %struct.node, %struct.node* %i9, i32 0, i32 5
  %i28 = load i32, i32* %disproof41, align 8
  %cmp42 = icmp eq i32 %i28, 0
  br i1 %cmp42, label %if.then44, label %if.else46

if.then44:                                        ; preds = %if.else
  %value45 = getelementptr inbounds %struct.node, %struct.node* %i9, i32 0, i32 0
  store i8 0, i8* %value45, align 8
  %i29 = bitcast %struct.move_s* %resmove to i8*
  %i30 = bitcast %struct.move_s* %compmove to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %i29, i8* align 8 %i30, i64 24, i1 false)
  br label %if.end48

if.else46:                                        ; preds = %if.else
  %value47 = getelementptr inbounds %struct.node, %struct.node* %i9, i32 0, i32 0
  store i8 2, i8* %value47, align 8
  %i31 = bitcast %struct.move_s* %resmove to i8*
  %i32 = bitcast %struct.move_s* %compmove to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %i31, i8* align 8 %i32, i64 24, i1 false)
  br label %if.end48

if.end48:                                         ; preds = %if.else46, %if.then44
  br label %if.end49

if.end49:                                         ; preds = %if.end48, %if.then40
  call void @Xfree()
  %i33 = bitcast %struct.node* %i9 to i8*
  call void @free(i8* %i33) #8
  %i34 = load i8*, i8** @membuff, align 8
  call void @free(i8* %i34) #8
  %i35 = bitcast %struct.move_s* %agg.result to i8*
  %i36 = bitcast %struct.move_s* %resmove to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %i35, i8* align 4 %i36, i64 24, i1 false)
  br label %return

return:                                           ; preds = %if.end49, %if.then
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @read_rcfile() #0 {
entry:
  store i32 3000000, i32* @TTSize, align 4
  store i32 1000000, i32* @ECacheSize, align 4
  store i32 200000, i32* @PBSize, align 4
  store i32 1, i32* @cfg_devscale, align 4
  store float 1.000000e+00, float* @cfg_scalefac, align 4
  store i32 1, i32* @cfg_razordrop, align 4
  store i32 0, i32* @cfg_cutdrop, align 4
  store i32 1, i32* @cfg_futprune, align 4
  store i32 1, i32* @cfg_smarteval, align 4
  store i32 0, i32* @cfg_attackeval, align 4
  store i32 1, i32* @cfg_onerep, align 4
  store i32 0, i32* @cfg_recap, align 4
  store i32 0, i32* @havercfile, align 4
  %i = load i32, i32* @havercfile, align 4
  %i1 = load i32, i32* @cfg_devscale, align 4
  %shl = shl i32 %i1, 1
  %add = add nsw i32 %i, %shl
  %add1 = add nsw i32 %add, 4
  %i2 = load i32, i32* @cfg_razordrop, align 4
  %shl2 = shl i32 %i2, 3
  %add3 = add nsw i32 %add1, %shl2
  %i3 = load i32, i32* @cfg_cutdrop, align 4
  %shl4 = shl i32 %i3, 4
  %add5 = add nsw i32 %add3, %shl4
  %i4 = load i32, i32* @cfg_futprune, align 4
  %shl6 = shl i32 %i4, 5
  %add7 = add nsw i32 %add5, %shl6
  %i5 = load i32, i32* @cfg_smarteval, align 4
  %shl8 = shl i32 %i5, 6
  %add9 = add nsw i32 %add7, %shl8
  %i6 = load i32, i32* @cfg_attackeval, align 4
  %shl10 = shl i32 %i6, 7
  %add11 = add nsw i32 %add9, %shl10
  %call = call i32 (i8*, i8*, ...) @sprintf(i8* getelementptr inbounds ([30 x i8], [30 x i8]* @setcode, i64 0, i64 0), i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.112, i64 0, i64 0), i32 %add11) #8
  call void @initialize_eval()
  call void @alloc_hash()
  call void @alloc_ecache()
  ret void
}

; Function Attrs: nounwind
declare dso_local i32 @sprintf(i8*, i8*, ...) #3

; Function Attrs: noinline nounwind uwtable
define dso_local void @order_moves(%struct.move_s* %moves, i32* %move_ordering, i32* %see_values, i32 %num_moves, i32 %best) #0 {
entry:
  %i = load i32, i32* @searching_pv, align 4
  %tobool = icmp ne i32 %i, 0
  br i1 %tobool, label %if.then, label %if.else300

if.then:                                          ; preds = %entry
  store i32 0, i32* @searching_pv, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then
  %i.0 = phi i32 [ 0, %if.then ], [ %inc, %for.inc ]
  %cmp = icmp slt i32 %i.0, %num_moves
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %idxprom = sext i32 %i.0 to i64
  %arrayidx = getelementptr inbounds %struct.move_s, %struct.move_s* %moves, i64 %idxprom
  %from1 = getelementptr inbounds %struct.move_s, %struct.move_s* %arrayidx, i32 0, i32 0
  %i1 = load i32, i32* %from1, align 4
  %idxprom2 = sext i32 %i.0 to i64
  %arrayidx3 = getelementptr inbounds %struct.move_s, %struct.move_s* %moves, i64 %idxprom2
  %target4 = getelementptr inbounds %struct.move_s, %struct.move_s* %arrayidx3, i32 0, i32 1
  %i2 = load i32, i32* %target4, align 4
  %idxprom5 = sext i32 %i.0 to i64
  %arrayidx6 = getelementptr inbounds %struct.move_s, %struct.move_s* %moves, i64 %idxprom5
  %promoted7 = getelementptr inbounds %struct.move_s, %struct.move_s* %arrayidx6, i32 0, i32 3
  %i3 = load i32, i32* %promoted7, align 4
  %idxprom8 = sext i32 %i.0 to i64
  %arrayidx9 = getelementptr inbounds %struct.move_s, %struct.move_s* %moves, i64 %idxprom8
  %captured10 = getelementptr inbounds %struct.move_s, %struct.move_s* %arrayidx9, i32 0, i32 2
  %i4 = load i32, i32* %captured10, align 4
  %cmp11 = icmp ne i32 %i4, 13
  br i1 %cmp11, label %if.then12, label %if.else50

if.then12:                                        ; preds = %for.body
  %idxprom13 = sext i32 %i4 to i64
  %arrayidx14 = getelementptr inbounds [14 x i32], [14 x i32]* @material, i64 0, i64 %idxprom13
  %i5 = load i32, i32* %arrayidx14, align 4
  %call = call i32 @abs(i32 %i5) #10
  %add = add nsw i32 %call, 15
  %idxprom15 = sext i32 %i1 to i64
  %arrayidx16 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom15
  %i6 = load i32, i32* %arrayidx16, align 4
  %idxprom17 = sext i32 %i6 to i64
  %arrayidx18 = getelementptr inbounds [14 x i32], [14 x i32]* @material, i64 0, i64 %idxprom17
  %i7 = load i32, i32* %arrayidx18, align 4
  %call19 = call i32 @abs(i32 %i7) #10
  %cmp20 = icmp sge i32 %add, %call19
  br i1 %cmp20, label %if.then21, label %if.else

if.then21:                                        ; preds = %if.then12
  %idxprom22 = sext i32 %i4 to i64
  %arrayidx23 = getelementptr inbounds [14 x i32], [14 x i32]* @material, i64 0, i64 %idxprom22
  %i8 = load i32, i32* %arrayidx23, align 4
  %call24 = call i32 @abs(i32 %i8) #10
  %idxprom25 = sext i32 %i1 to i64
  %arrayidx26 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom25
  %i9 = load i32, i32* %arrayidx26, align 4
  %idxprom27 = sext i32 %i9 to i64
  %arrayidx28 = getelementptr inbounds [14 x i32], [14 x i32]* @material, i64 0, i64 %idxprom27
  %i10 = load i32, i32* %arrayidx28, align 4
  %call29 = call i32 @abs(i32 %i10) #10
  %shr = ashr i32 %call29, 4
  %sub = sub nsw i32 %call24, %shr
  %idxprom30 = sext i32 %i.0 to i64
  %arrayidx31 = getelementptr inbounds i32, i32* %see_values, i64 %idxprom30
  store i32 %sub, i32* %arrayidx31, align 4
  %idxprom32 = sext i32 %i.0 to i64
  %arrayidx33 = getelementptr inbounds i32, i32* %see_values, i64 %idxprom32
  %i11 = load i32, i32* %arrayidx33, align 4
  %add34 = add nsw i32 50000000, %i11
  %idxprom35 = sext i32 %i.0 to i64
  %arrayidx36 = getelementptr inbounds i32, i32* %move_ordering, i64 %idxprom35
  store i32 %add34, i32* %arrayidx36, align 4
  br label %if.end49

if.else:                                          ; preds = %if.then12
  %i12 = load i32, i32* @white_to_move, align 4
  %tobool37 = icmp ne i32 %i12, 0
  %i13 = zext i1 %tobool37 to i64
  %cond = select i1 %tobool37, i32 0, i32 1
  %call38 = call i32 @see(i32 %cond, i32 %i2, i32 %i1)
  %cmp39 = icmp sge i32 %call38, -50
  br i1 %cmp39, label %if.then40, label %if.else44

if.then40:                                        ; preds = %if.else
  %add41 = add nsw i32 50000000, %call38
  %idxprom42 = sext i32 %i.0 to i64
  %arrayidx43 = getelementptr inbounds i32, i32* %move_ordering, i64 %idxprom42
  store i32 %add41, i32* %arrayidx43, align 4
  br label %if.end

if.else44:                                        ; preds = %if.else
  %idxprom45 = sext i32 %i.0 to i64
  %arrayidx46 = getelementptr inbounds i32, i32* %move_ordering, i64 %idxprom45
  store i32 %call38, i32* %arrayidx46, align 4
  br label %if.end

if.end:                                           ; preds = %if.else44, %if.then40
  %idxprom47 = sext i32 %i.0 to i64
  %arrayidx48 = getelementptr inbounds i32, i32* %see_values, i64 %idxprom47
  store i32 %call38, i32* %arrayidx48, align 4
  br label %if.end49

if.end49:                                         ; preds = %if.end, %if.then21
  br label %if.end53

if.else50:                                        ; preds = %for.body
  %idxprom51 = sext i32 %i.0 to i64
  %arrayidx52 = getelementptr inbounds i32, i32* %move_ordering, i64 %idxprom51
  store i32 0, i32* %arrayidx52, align 4
  br label %if.end53

if.end53:                                         ; preds = %if.else50, %if.end49
  %i14 = load i32, i32* @ply, align 4
  %idxprom54 = sext i32 %i14 to i64
  %arrayidx55 = getelementptr inbounds [300 x %struct.move_s], [300 x %struct.move_s]* getelementptr inbounds ([300 x [300 x %struct.move_s]], [300 x [300 x %struct.move_s]]* @pv, i64 0, i64 1), i64 0, i64 %idxprom54
  %from56 = getelementptr inbounds %struct.move_s, %struct.move_s* %arrayidx55, i32 0, i32 0
  %i15 = load i32, i32* %from56, align 8
  %cmp57 = icmp eq i32 %i1, %i15
  br i1 %cmp57, label %land.lhs.true, label %if.else103

land.lhs.true:                                    ; preds = %if.end53
  %i16 = load i32, i32* @ply, align 4
  %idxprom58 = sext i32 %i16 to i64
  %arrayidx59 = getelementptr inbounds [300 x %struct.move_s], [300 x %struct.move_s]* getelementptr inbounds ([300 x [300 x %struct.move_s]], [300 x [300 x %struct.move_s]]* @pv, i64 0, i64 1), i64 0, i64 %idxprom58
  %target60 = getelementptr inbounds %struct.move_s, %struct.move_s* %arrayidx59, i32 0, i32 1
  %i17 = load i32, i32* %target60, align 4
  %cmp61 = icmp eq i32 %i2, %i17
  br i1 %cmp61, label %land.lhs.true62, label %if.else103

land.lhs.true62:                                  ; preds = %land.lhs.true
  %i18 = load i32, i32* @ply, align 4
  %idxprom63 = sext i32 %i18 to i64
  %arrayidx64 = getelementptr inbounds [300 x %struct.move_s], [300 x %struct.move_s]* getelementptr inbounds ([300 x [300 x %struct.move_s]], [300 x [300 x %struct.move_s]]* @pv, i64 0, i64 1), i64 0, i64 %idxprom63
  %promoted65 = getelementptr inbounds %struct.move_s, %struct.move_s* %arrayidx64, i32 0, i32 3
  %i19 = load i32, i32* %promoted65, align 4
  %cmp66 = icmp eq i32 %i3, %i19
  br i1 %cmp66, label %if.then67, label %if.else103

if.then67:                                        ; preds = %land.lhs.true62
  store i32 1, i32* @searching_pv, align 4
  %idxprom68 = sext i32 %i.0 to i64
  %arrayidx69 = getelementptr inbounds i32, i32* %move_ordering, i64 %idxprom68
  store i32 100000000, i32* %arrayidx69, align 4
  %cmp70 = icmp ne i32 %i4, 13
  br i1 %cmp70, label %if.then71, label %if.end102

if.then71:                                        ; preds = %if.then67
  %idxprom72 = sext i32 %i4 to i64
  %arrayidx73 = getelementptr inbounds [14 x i32], [14 x i32]* @material, i64 0, i64 %idxprom72
  %i20 = load i32, i32* %arrayidx73, align 4
  %call74 = call i32 @abs(i32 %i20) #10
  %add75 = add nsw i32 %call74, 15
  %idxprom76 = sext i32 %i1 to i64
  %arrayidx77 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom76
  %i21 = load i32, i32* %arrayidx77, align 4
  %idxprom78 = sext i32 %i21 to i64
  %arrayidx79 = getelementptr inbounds [14 x i32], [14 x i32]* @material, i64 0, i64 %idxprom78
  %i22 = load i32, i32* %arrayidx79, align 4
  %call80 = call i32 @abs(i32 %i22) #10
  %cmp81 = icmp sge i32 %add75, %call80
  br i1 %cmp81, label %if.then82, label %if.else95

if.then82:                                        ; preds = %if.then71
  %idxprom83 = sext i32 %i4 to i64
  %arrayidx84 = getelementptr inbounds [14 x i32], [14 x i32]* @material, i64 0, i64 %idxprom83
  %i23 = load i32, i32* %arrayidx84, align 4
  %call85 = call i32 @abs(i32 %i23) #10
  %idxprom86 = sext i32 %i1 to i64
  %arrayidx87 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom86
  %i24 = load i32, i32* %arrayidx87, align 4
  %idxprom88 = sext i32 %i24 to i64
  %arrayidx89 = getelementptr inbounds [14 x i32], [14 x i32]* @material, i64 0, i64 %idxprom88
  %i25 = load i32, i32* %arrayidx89, align 4
  %call90 = call i32 @abs(i32 %i25) #10
  %shr91 = ashr i32 %call90, 4
  %sub92 = sub nsw i32 %call85, %shr91
  %idxprom93 = sext i32 %i.0 to i64
  %arrayidx94 = getelementptr inbounds i32, i32* %see_values, i64 %idxprom93
  store i32 %sub92, i32* %arrayidx94, align 4
  br label %if.end101

if.else95:                                        ; preds = %if.then71
  %i26 = load i32, i32* @white_to_move, align 4
  %tobool96 = icmp ne i32 %i26, 0
  %i27 = zext i1 %tobool96 to i64
  %cond97 = select i1 %tobool96, i32 0, i32 1
  %call98 = call i32 @see(i32 %cond97, i32 %i2, i32 %i1)
  %idxprom99 = sext i32 %i.0 to i64
  %arrayidx100 = getelementptr inbounds i32, i32* %see_values, i64 %idxprom99
  store i32 %call98, i32* %arrayidx100, align 4
  br label %if.end101

if.end101:                                        ; preds = %if.else95, %if.then82
  br label %if.end102

if.end102:                                        ; preds = %if.end101, %if.then67
  br label %if.end299

if.else103:                                       ; preds = %land.lhs.true62, %land.lhs.true, %if.end53
  %cmp104 = icmp ne i32 %best, -1
  br i1 %cmp104, label %land.lhs.true105, label %if.else145

land.lhs.true105:                                 ; preds = %if.else103
  %cmp106 = icmp ne i32 %best, -2
  br i1 %cmp106, label %land.lhs.true107, label %if.else145

land.lhs.true107:                                 ; preds = %land.lhs.true105
  %cmp108 = icmp eq i32 %i.0, %best
  br i1 %cmp108, label %if.then109, label %if.else145

if.then109:                                       ; preds = %land.lhs.true107
  %idxprom110 = sext i32 %i.0 to i64
  %arrayidx111 = getelementptr inbounds i32, i32* %move_ordering, i64 %idxprom110
  store i32 100000000, i32* %arrayidx111, align 4
  %cmp112 = icmp ne i32 %i4, 13
  br i1 %cmp112, label %if.then113, label %if.end144

if.then113:                                       ; preds = %if.then109
  %idxprom114 = sext i32 %i4 to i64
  %arrayidx115 = getelementptr inbounds [14 x i32], [14 x i32]* @material, i64 0, i64 %idxprom114
  %i28 = load i32, i32* %arrayidx115, align 4
  %call116 = call i32 @abs(i32 %i28) #10
  %add117 = add nsw i32 %call116, 15
  %idxprom118 = sext i32 %i1 to i64
  %arrayidx119 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom118
  %i29 = load i32, i32* %arrayidx119, align 4
  %idxprom120 = sext i32 %i29 to i64
  %arrayidx121 = getelementptr inbounds [14 x i32], [14 x i32]* @material, i64 0, i64 %idxprom120
  %i30 = load i32, i32* %arrayidx121, align 4
  %call122 = call i32 @abs(i32 %i30) #10
  %cmp123 = icmp sge i32 %add117, %call122
  br i1 %cmp123, label %if.then124, label %if.else137

if.then124:                                       ; preds = %if.then113
  %idxprom125 = sext i32 %i4 to i64
  %arrayidx126 = getelementptr inbounds [14 x i32], [14 x i32]* @material, i64 0, i64 %idxprom125
  %i31 = load i32, i32* %arrayidx126, align 4
  %call127 = call i32 @abs(i32 %i31) #10
  %idxprom128 = sext i32 %i1 to i64
  %arrayidx129 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom128
  %i32 = load i32, i32* %arrayidx129, align 4
  %idxprom130 = sext i32 %i32 to i64
  %arrayidx131 = getelementptr inbounds [14 x i32], [14 x i32]* @material, i64 0, i64 %idxprom130
  %i33 = load i32, i32* %arrayidx131, align 4
  %call132 = call i32 @abs(i32 %i33) #10
  %shr133 = ashr i32 %call132, 4
  %sub134 = sub nsw i32 %call127, %shr133
  %idxprom135 = sext i32 %i.0 to i64
  %arrayidx136 = getelementptr inbounds i32, i32* %see_values, i64 %idxprom135
  store i32 %sub134, i32* %arrayidx136, align 4
  br label %if.end143

if.else137:                                       ; preds = %if.then113
  %i34 = load i32, i32* @white_to_move, align 4
  %tobool138 = icmp ne i32 %i34, 0
  %i35 = zext i1 %tobool138 to i64
  %cond139 = select i1 %tobool138, i32 0, i32 1
  %call140 = call i32 @see(i32 %cond139, i32 %i2, i32 %i1)
  %idxprom141 = sext i32 %i.0 to i64
  %arrayidx142 = getelementptr inbounds i32, i32* %see_values, i64 %idxprom141
  store i32 %call140, i32* %arrayidx142, align 4
  br label %if.end143

if.end143:                                        ; preds = %if.else137, %if.then124
  br label %if.end144

if.end144:                                        ; preds = %if.end143, %if.then109
  br label %if.end298

if.else145:                                       ; preds = %land.lhs.true107, %land.lhs.true105, %if.else103
  %cmp146 = icmp eq i32 %best, -2
  br i1 %cmp146, label %if.then147, label %if.else211

if.then147:                                       ; preds = %if.else145
  %i36 = load i32, i32* @ply, align 4
  %add148 = add nsw i32 %i36, 1
  %idxprom149 = sext i32 %add148 to i64
  %arrayidx150 = getelementptr inbounds [300 x [300 x %struct.move_s]], [300 x [300 x %struct.move_s]]* @pv, i64 0, i64 %idxprom149
  %i37 = load i32, i32* @ply, align 4
  %add151 = add nsw i32 %i37, 1
  %idxprom152 = sext i32 %add151 to i64
  %arrayidx153 = getelementptr inbounds [300 x %struct.move_s], [300 x %struct.move_s]* %arrayidx150, i64 0, i64 %idxprom152
  %from154 = getelementptr inbounds %struct.move_s, %struct.move_s* %arrayidx153, i32 0, i32 0
  %i38 = load i32, i32* %from154, align 8
  %cmp155 = icmp eq i32 %i1, %i38
  br i1 %cmp155, label %land.lhs.true156, label %if.end210

land.lhs.true156:                                 ; preds = %if.then147
  %i39 = load i32, i32* @ply, align 4
  %add157 = add nsw i32 %i39, 1
  %idxprom158 = sext i32 %add157 to i64
  %arrayidx159 = getelementptr inbounds [300 x [300 x %struct.move_s]], [300 x [300 x %struct.move_s]]* @pv, i64 0, i64 %idxprom158
  %i40 = load i32, i32* @ply, align 4
  %add160 = add nsw i32 %i40, 1
  %idxprom161 = sext i32 %add160 to i64
  %arrayidx162 = getelementptr inbounds [300 x %struct.move_s], [300 x %struct.move_s]* %arrayidx159, i64 0, i64 %idxprom161
  %target163 = getelementptr inbounds %struct.move_s, %struct.move_s* %arrayidx162, i32 0, i32 1
  %i41 = load i32, i32* %target163, align 4
  %cmp164 = icmp eq i32 %i2, %i41
  br i1 %cmp164, label %land.lhs.true165, label %if.end210

land.lhs.true165:                                 ; preds = %land.lhs.true156
  %i42 = load i32, i32* @ply, align 4
  %add166 = add nsw i32 %i42, 1
  %idxprom167 = sext i32 %add166 to i64
  %arrayidx168 = getelementptr inbounds [300 x [300 x %struct.move_s]], [300 x [300 x %struct.move_s]]* @pv, i64 0, i64 %idxprom167
  %i43 = load i32, i32* @ply, align 4
  %add169 = add nsw i32 %i43, 1
  %idxprom170 = sext i32 %add169 to i64
  %arrayidx171 = getelementptr inbounds [300 x %struct.move_s], [300 x %struct.move_s]* %arrayidx168, i64 0, i64 %idxprom170
  %promoted172 = getelementptr inbounds %struct.move_s, %struct.move_s* %arrayidx171, i32 0, i32 3
  %i44 = load i32, i32* %promoted172, align 4
  %cmp173 = icmp eq i32 %i3, %i44
  br i1 %cmp173, label %if.then174, label %if.end210

if.then174:                                       ; preds = %land.lhs.true165
  %idxprom175 = sext i32 %i.0 to i64
  %arrayidx176 = getelementptr inbounds i32, i32* %move_ordering, i64 %idxprom175
  store i32 100000000, i32* %arrayidx176, align 4
  %cmp177 = icmp ne i32 %i4, 13
  br i1 %cmp177, label %if.then178, label %if.end209

if.then178:                                       ; preds = %if.then174
  %idxprom179 = sext i32 %i4 to i64
  %arrayidx180 = getelementptr inbounds [14 x i32], [14 x i32]* @material, i64 0, i64 %idxprom179
  %i45 = load i32, i32* %arrayidx180, align 4
  %call181 = call i32 @abs(i32 %i45) #10
  %add182 = add nsw i32 %call181, 15
  %idxprom183 = sext i32 %i1 to i64
  %arrayidx184 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom183
  %i46 = load i32, i32* %arrayidx184, align 4
  %idxprom185 = sext i32 %i46 to i64
  %arrayidx186 = getelementptr inbounds [14 x i32], [14 x i32]* @material, i64 0, i64 %idxprom185
  %i47 = load i32, i32* %arrayidx186, align 4
  %call187 = call i32 @abs(i32 %i47) #10
  %cmp188 = icmp sge i32 %add182, %call187
  br i1 %cmp188, label %if.then189, label %if.else202

if.then189:                                       ; preds = %if.then178
  %idxprom190 = sext i32 %i4 to i64
  %arrayidx191 = getelementptr inbounds [14 x i32], [14 x i32]* @material, i64 0, i64 %idxprom190
  %i48 = load i32, i32* %arrayidx191, align 4
  %call192 = call i32 @abs(i32 %i48) #10
  %idxprom193 = sext i32 %i1 to i64
  %arrayidx194 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom193
  %i49 = load i32, i32* %arrayidx194, align 4
  %idxprom195 = sext i32 %i49 to i64
  %arrayidx196 = getelementptr inbounds [14 x i32], [14 x i32]* @material, i64 0, i64 %idxprom195
  %i50 = load i32, i32* %arrayidx196, align 4
  %call197 = call i32 @abs(i32 %i50) #10
  %shr198 = ashr i32 %call197, 4
  %sub199 = sub nsw i32 %call192, %shr198
  %idxprom200 = sext i32 %i.0 to i64
  %arrayidx201 = getelementptr inbounds i32, i32* %see_values, i64 %idxprom200
  store i32 %sub199, i32* %arrayidx201, align 4
  br label %if.end208

if.else202:                                       ; preds = %if.then178
  %i51 = load i32, i32* @white_to_move, align 4
  %tobool203 = icmp ne i32 %i51, 0
  %i52 = zext i1 %tobool203 to i64
  %cond204 = select i1 %tobool203, i32 0, i32 1
  %call205 = call i32 @see(i32 %cond204, i32 %i2, i32 %i1)
  %idxprom206 = sext i32 %i.0 to i64
  %arrayidx207 = getelementptr inbounds i32, i32* %see_values, i64 %idxprom206
  store i32 %call205, i32* %arrayidx207, align 4
  br label %if.end208

if.end208:                                        ; preds = %if.else202, %if.then189
  br label %if.end209

if.end209:                                        ; preds = %if.end208, %if.then174
  br label %if.end210

if.end210:                                        ; preds = %if.end209, %land.lhs.true165, %land.lhs.true156, %if.then147
  br label %if.end297

if.else211:                                       ; preds = %if.else145
  %i53 = load i32, i32* @ply, align 4
  %cmp212 = icmp ne i32 %i53, 1
  br i1 %cmp212, label %if.then214, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.else211
  %i54 = load i32, i32* @i_depth, align 4
  %cmp213 = icmp slt i32 %i54, 2
  br i1 %cmp213, label %if.then214, label %if.else281

if.then214:                                       ; preds = %lor.lhs.false, %if.else211
  %idxprom215 = sext i32 %i1 to i64
  %arrayidx216 = getelementptr inbounds [144 x [144 x i32]], [144 x [144 x i32]]* @history_h, i64 0, i64 %idxprom215
  %idxprom217 = sext i32 %i2 to i64
  %arrayidx218 = getelementptr inbounds [144 x i32], [144 x i32]* %arrayidx216, i64 0, i64 %idxprom217
  %i55 = load i32, i32* %arrayidx218, align 4
  %idxprom219 = sext i32 %i.0 to i64
  %arrayidx220 = getelementptr inbounds i32, i32* %move_ordering, i64 %idxprom219
  %i56 = load i32, i32* %arrayidx220, align 4
  %add221 = add i32 %i56, %i55
  store i32 %add221, i32* %arrayidx220, align 4
  %i57 = load i32, i32* @ply, align 4
  %idxprom222 = sext i32 %i57 to i64
  %arrayidx223 = getelementptr inbounds [300 x %struct.move_s], [300 x %struct.move_s]* @killer1, i64 0, i64 %idxprom222
  %from224 = getelementptr inbounds %struct.move_s, %struct.move_s* %arrayidx223, i32 0, i32 0
  %i58 = load i32, i32* %from224, align 8
  %cmp225 = icmp eq i32 %i1, %i58
  br i1 %cmp225, label %land.lhs.true226, label %if.else240

land.lhs.true226:                                 ; preds = %if.then214
  %i59 = load i32, i32* @ply, align 4
  %idxprom227 = sext i32 %i59 to i64
  %arrayidx228 = getelementptr inbounds [300 x %struct.move_s], [300 x %struct.move_s]* @killer1, i64 0, i64 %idxprom227
  %target229 = getelementptr inbounds %struct.move_s, %struct.move_s* %arrayidx228, i32 0, i32 1
  %i60 = load i32, i32* %target229, align 4
  %cmp230 = icmp eq i32 %i2, %i60
  br i1 %cmp230, label %land.lhs.true231, label %if.else240

land.lhs.true231:                                 ; preds = %land.lhs.true226
  %i61 = load i32, i32* @ply, align 4
  %idxprom232 = sext i32 %i61 to i64
  %arrayidx233 = getelementptr inbounds [300 x %struct.move_s], [300 x %struct.move_s]* @killer1, i64 0, i64 %idxprom232
  %promoted234 = getelementptr inbounds %struct.move_s, %struct.move_s* %arrayidx233, i32 0, i32 3
  %i62 = load i32, i32* %promoted234, align 4
  %cmp235 = icmp eq i32 %i3, %i62
  br i1 %cmp235, label %if.then236, label %if.else240

if.then236:                                       ; preds = %land.lhs.true231
  %idxprom237 = sext i32 %i.0 to i64
  %arrayidx238 = getelementptr inbounds i32, i32* %move_ordering, i64 %idxprom237
  %i63 = load i32, i32* %arrayidx238, align 4
  %add239 = add nsw i32 %i63, 25000000
  store i32 %add239, i32* %arrayidx238, align 4
  br label %if.end280

if.else240:                                       ; preds = %land.lhs.true231, %land.lhs.true226, %if.then214
  %i64 = load i32, i32* @ply, align 4
  %idxprom241 = sext i32 %i64 to i64
  %arrayidx242 = getelementptr inbounds [300 x %struct.move_s], [300 x %struct.move_s]* @killer2, i64 0, i64 %idxprom241
  %from243 = getelementptr inbounds %struct.move_s, %struct.move_s* %arrayidx242, i32 0, i32 0
  %i65 = load i32, i32* %from243, align 8
  %cmp244 = icmp eq i32 %i1, %i65
  br i1 %cmp244, label %land.lhs.true245, label %if.else259

land.lhs.true245:                                 ; preds = %if.else240
  %i66 = load i32, i32* @ply, align 4
  %idxprom246 = sext i32 %i66 to i64
  %arrayidx247 = getelementptr inbounds [300 x %struct.move_s], [300 x %struct.move_s]* @killer2, i64 0, i64 %idxprom246
  %target248 = getelementptr inbounds %struct.move_s, %struct.move_s* %arrayidx247, i32 0, i32 1
  %i67 = load i32, i32* %target248, align 4
  %cmp249 = icmp eq i32 %i2, %i67
  br i1 %cmp249, label %land.lhs.true250, label %if.else259

land.lhs.true250:                                 ; preds = %land.lhs.true245
  %i68 = load i32, i32* @ply, align 4
  %idxprom251 = sext i32 %i68 to i64
  %arrayidx252 = getelementptr inbounds [300 x %struct.move_s], [300 x %struct.move_s]* @killer2, i64 0, i64 %idxprom251
  %promoted253 = getelementptr inbounds %struct.move_s, %struct.move_s* %arrayidx252, i32 0, i32 3
  %i69 = load i32, i32* %promoted253, align 4
  %cmp254 = icmp eq i32 %i3, %i69
  br i1 %cmp254, label %if.then255, label %if.else259

if.then255:                                       ; preds = %land.lhs.true250
  %idxprom256 = sext i32 %i.0 to i64
  %arrayidx257 = getelementptr inbounds i32, i32* %move_ordering, i64 %idxprom256
  %i70 = load i32, i32* %arrayidx257, align 4
  %add258 = add nsw i32 %i70, 20000000
  store i32 %add258, i32* %arrayidx257, align 4
  br label %if.end279

if.else259:                                       ; preds = %land.lhs.true250, %land.lhs.true245, %if.else240
  %i71 = load i32, i32* @ply, align 4
  %idxprom260 = sext i32 %i71 to i64
  %arrayidx261 = getelementptr inbounds [300 x %struct.move_s], [300 x %struct.move_s]* @killer3, i64 0, i64 %idxprom260
  %from262 = getelementptr inbounds %struct.move_s, %struct.move_s* %arrayidx261, i32 0, i32 0
  %i72 = load i32, i32* %from262, align 8
  %cmp263 = icmp eq i32 %i1, %i72
  br i1 %cmp263, label %land.lhs.true264, label %if.end278

land.lhs.true264:                                 ; preds = %if.else259
  %i73 = load i32, i32* @ply, align 4
  %idxprom265 = sext i32 %i73 to i64
  %arrayidx266 = getelementptr inbounds [300 x %struct.move_s], [300 x %struct.move_s]* @killer3, i64 0, i64 %idxprom265
  %target267 = getelementptr inbounds %struct.move_s, %struct.move_s* %arrayidx266, i32 0, i32 1
  %i74 = load i32, i32* %target267, align 4
  %cmp268 = icmp eq i32 %i2, %i74
  br i1 %cmp268, label %land.lhs.true269, label %if.end278

land.lhs.true269:                                 ; preds = %land.lhs.true264
  %i75 = load i32, i32* @ply, align 4
  %idxprom270 = sext i32 %i75 to i64
  %arrayidx271 = getelementptr inbounds [300 x %struct.move_s], [300 x %struct.move_s]* @killer3, i64 0, i64 %idxprom270
  %promoted272 = getelementptr inbounds %struct.move_s, %struct.move_s* %arrayidx271, i32 0, i32 3
  %i76 = load i32, i32* %promoted272, align 4
  %cmp273 = icmp eq i32 %i3, %i76
  br i1 %cmp273, label %if.then274, label %if.end278

if.then274:                                       ; preds = %land.lhs.true269
  %idxprom275 = sext i32 %i.0 to i64
  %arrayidx276 = getelementptr inbounds i32, i32* %move_ordering, i64 %idxprom275
  %i77 = load i32, i32* %arrayidx276, align 4
  %add277 = add nsw i32 %i77, 15000000
  store i32 %add277, i32* %arrayidx276, align 4
  br label %if.end278

if.end278:                                        ; preds = %if.then274, %land.lhs.true269, %land.lhs.true264, %if.else259
  br label %if.end279

if.end279:                                        ; preds = %if.end278, %if.then255
  br label %if.end280

if.end280:                                        ; preds = %if.end279, %if.then236
  br label %if.end296

if.else281:                                       ; preds = %lor.lhs.false
  %i78 = load i32, i32* @nodes, align 4
  %div = sdiv i32 %i78, 100
  %cmp282 = icmp sgt i32 %div, 100000000
  br i1 %cmp282, label %if.then283, label %if.else289

if.then283:                                       ; preds = %if.else281
  %idxprom284 = sext i32 %i.0 to i64
  %arrayidx285 = getelementptr inbounds [512 x i32], [512 x i32]* @rootnodecount, i64 0, i64 %idxprom284
  %i79 = load i32, i32* %arrayidx285, align 4
  %div286 = udiv i32 %i79, 1000
  %idxprom287 = sext i32 %i.0 to i64
  %arrayidx288 = getelementptr inbounds i32, i32* %move_ordering, i64 %idxprom287
  store i32 %div286, i32* %arrayidx288, align 4
  br label %if.end295

if.else289:                                       ; preds = %if.else281
  %idxprom290 = sext i32 %i.0 to i64
  %arrayidx291 = getelementptr inbounds [512 x i32], [512 x i32]* @rootnodecount, i64 0, i64 %idxprom290
  %i80 = load i32, i32* %arrayidx291, align 4
  %div292 = udiv i32 %i80, 100
  %idxprom293 = sext i32 %i.0 to i64
  %arrayidx294 = getelementptr inbounds i32, i32* %move_ordering, i64 %idxprom293
  store i32 %div292, i32* %arrayidx294, align 4
  br label %if.end295

if.end295:                                        ; preds = %if.else289, %if.then283
  br label %if.end296

if.end296:                                        ; preds = %if.end295, %if.end280
  br label %if.end297

if.end297:                                        ; preds = %if.end296, %if.end210
  br label %if.end298

if.end298:                                        ; preds = %if.end297, %if.end144
  br label %if.end299

if.end299:                                        ; preds = %if.end298, %if.end102
  br label %for.inc

for.inc:                                          ; preds = %if.end299
  %inc = add nsw i32 %i.0, 1
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end543

if.else300:                                       ; preds = %entry
  br label %for.cond301

for.cond301:                                      ; preds = %for.inc540, %if.else300
  %i.1 = phi i32 [ 0, %if.else300 ], [ %inc541, %for.inc540 ]
  %cmp302 = icmp slt i32 %i.1, %num_moves
  br i1 %cmp302, label %for.body303, label %for.end542

for.body303:                                      ; preds = %for.cond301
  %idxprom304 = sext i32 %i.1 to i64
  %arrayidx305 = getelementptr inbounds %struct.move_s, %struct.move_s* %moves, i64 %idxprom304
  %from306 = getelementptr inbounds %struct.move_s, %struct.move_s* %arrayidx305, i32 0, i32 0
  %i81 = load i32, i32* %from306, align 4
  %idxprom307 = sext i32 %i.1 to i64
  %arrayidx308 = getelementptr inbounds %struct.move_s, %struct.move_s* %moves, i64 %idxprom307
  %target309 = getelementptr inbounds %struct.move_s, %struct.move_s* %arrayidx308, i32 0, i32 1
  %i82 = load i32, i32* %target309, align 4
  %idxprom310 = sext i32 %i.1 to i64
  %arrayidx311 = getelementptr inbounds %struct.move_s, %struct.move_s* %moves, i64 %idxprom310
  %promoted312 = getelementptr inbounds %struct.move_s, %struct.move_s* %arrayidx311, i32 0, i32 3
  %i83 = load i32, i32* %promoted312, align 4
  %idxprom313 = sext i32 %i.1 to i64
  %arrayidx314 = getelementptr inbounds %struct.move_s, %struct.move_s* %moves, i64 %idxprom313
  %captured315 = getelementptr inbounds %struct.move_s, %struct.move_s* %arrayidx314, i32 0, i32 2
  %i84 = load i32, i32* %captured315, align 4
  %cmp316 = icmp ne i32 %best, -1
  br i1 %cmp316, label %land.lhs.true317, label %if.else355

land.lhs.true317:                                 ; preds = %for.body303
  %cmp318 = icmp eq i32 %i.1, %best
  br i1 %cmp318, label %if.then319, label %if.else355

if.then319:                                       ; preds = %land.lhs.true317
  %idxprom320 = sext i32 %i.1 to i64
  %arrayidx321 = getelementptr inbounds i32, i32* %move_ordering, i64 %idxprom320
  store i32 100000000, i32* %arrayidx321, align 4
  %cmp322 = icmp ne i32 %i84, 13
  br i1 %cmp322, label %if.then323, label %if.end354

if.then323:                                       ; preds = %if.then319
  %idxprom324 = sext i32 %i84 to i64
  %arrayidx325 = getelementptr inbounds [14 x i32], [14 x i32]* @material, i64 0, i64 %idxprom324
  %i85 = load i32, i32* %arrayidx325, align 4
  %call326 = call i32 @abs(i32 %i85) #10
  %add327 = add nsw i32 %call326, 15
  %idxprom328 = sext i32 %i81 to i64
  %arrayidx329 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom328
  %i86 = load i32, i32* %arrayidx329, align 4
  %idxprom330 = sext i32 %i86 to i64
  %arrayidx331 = getelementptr inbounds [14 x i32], [14 x i32]* @material, i64 0, i64 %idxprom330
  %i87 = load i32, i32* %arrayidx331, align 4
  %call332 = call i32 @abs(i32 %i87) #10
  %cmp333 = icmp sge i32 %add327, %call332
  br i1 %cmp333, label %if.then334, label %if.else347

if.then334:                                       ; preds = %if.then323
  %idxprom335 = sext i32 %i84 to i64
  %arrayidx336 = getelementptr inbounds [14 x i32], [14 x i32]* @material, i64 0, i64 %idxprom335
  %i88 = load i32, i32* %arrayidx336, align 4
  %call337 = call i32 @abs(i32 %i88) #10
  %idxprom338 = sext i32 %i81 to i64
  %arrayidx339 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom338
  %i89 = load i32, i32* %arrayidx339, align 4
  %idxprom340 = sext i32 %i89 to i64
  %arrayidx341 = getelementptr inbounds [14 x i32], [14 x i32]* @material, i64 0, i64 %idxprom340
  %i90 = load i32, i32* %arrayidx341, align 4
  %call342 = call i32 @abs(i32 %i90) #10
  %shr343 = ashr i32 %call342, 4
  %sub344 = sub nsw i32 %call337, %shr343
  %idxprom345 = sext i32 %i.1 to i64
  %arrayidx346 = getelementptr inbounds i32, i32* %see_values, i64 %idxprom345
  store i32 %sub344, i32* %arrayidx346, align 4
  br label %if.end353

if.else347:                                       ; preds = %if.then323
  %i91 = load i32, i32* @white_to_move, align 4
  %tobool348 = icmp ne i32 %i91, 0
  %i92 = zext i1 %tobool348 to i64
  %cond349 = select i1 %tobool348, i32 0, i32 1
  %call350 = call i32 @see(i32 %cond349, i32 %i82, i32 %i81)
  %idxprom351 = sext i32 %i.1 to i64
  %arrayidx352 = getelementptr inbounds i32, i32* %see_values, i64 %idxprom351
  store i32 %call350, i32* %arrayidx352, align 4
  br label %if.end353

if.end353:                                        ; preds = %if.else347, %if.then334
  br label %if.end354

if.end354:                                        ; preds = %if.end353, %if.then319
  br label %if.end473

if.else355:                                       ; preds = %land.lhs.true317, %for.body303
  %cmp356 = icmp eq i32 %best, -2
  br i1 %cmp356, label %if.then357, label %if.else421

if.then357:                                       ; preds = %if.else355
  %i93 = load i32, i32* @ply, align 4
  %add358 = add nsw i32 %i93, 1
  %idxprom359 = sext i32 %add358 to i64
  %arrayidx360 = getelementptr inbounds [300 x [300 x %struct.move_s]], [300 x [300 x %struct.move_s]]* @pv, i64 0, i64 %idxprom359
  %i94 = load i32, i32* @ply, align 4
  %add361 = add nsw i32 %i94, 1
  %idxprom362 = sext i32 %add361 to i64
  %arrayidx363 = getelementptr inbounds [300 x %struct.move_s], [300 x %struct.move_s]* %arrayidx360, i64 0, i64 %idxprom362
  %from364 = getelementptr inbounds %struct.move_s, %struct.move_s* %arrayidx363, i32 0, i32 0
  %i95 = load i32, i32* %from364, align 8
  %cmp365 = icmp eq i32 %i81, %i95
  br i1 %cmp365, label %land.lhs.true366, label %if.end420

land.lhs.true366:                                 ; preds = %if.then357
  %i96 = load i32, i32* @ply, align 4
  %add367 = add nsw i32 %i96, 1
  %idxprom368 = sext i32 %add367 to i64
  %arrayidx369 = getelementptr inbounds [300 x [300 x %struct.move_s]], [300 x [300 x %struct.move_s]]* @pv, i64 0, i64 %idxprom368
  %i97 = load i32, i32* @ply, align 4
  %add370 = add nsw i32 %i97, 1
  %idxprom371 = sext i32 %add370 to i64
  %arrayidx372 = getelementptr inbounds [300 x %struct.move_s], [300 x %struct.move_s]* %arrayidx369, i64 0, i64 %idxprom371
  %target373 = getelementptr inbounds %struct.move_s, %struct.move_s* %arrayidx372, i32 0, i32 1
  %i98 = load i32, i32* %target373, align 4
  %cmp374 = icmp eq i32 %i82, %i98
  br i1 %cmp374, label %land.lhs.true375, label %if.end420

land.lhs.true375:                                 ; preds = %land.lhs.true366
  %i99 = load i32, i32* @ply, align 4
  %add376 = add nsw i32 %i99, 1
  %idxprom377 = sext i32 %add376 to i64
  %arrayidx378 = getelementptr inbounds [300 x [300 x %struct.move_s]], [300 x [300 x %struct.move_s]]* @pv, i64 0, i64 %idxprom377
  %i100 = load i32, i32* @ply, align 4
  %add379 = add nsw i32 %i100, 1
  %idxprom380 = sext i32 %add379 to i64
  %arrayidx381 = getelementptr inbounds [300 x %struct.move_s], [300 x %struct.move_s]* %arrayidx378, i64 0, i64 %idxprom380
  %promoted382 = getelementptr inbounds %struct.move_s, %struct.move_s* %arrayidx381, i32 0, i32 3
  %i101 = load i32, i32* %promoted382, align 4
  %cmp383 = icmp eq i32 %i83, %i101
  br i1 %cmp383, label %if.then384, label %if.end420

if.then384:                                       ; preds = %land.lhs.true375
  %idxprom385 = sext i32 %i.1 to i64
  %arrayidx386 = getelementptr inbounds i32, i32* %move_ordering, i64 %idxprom385
  store i32 100000000, i32* %arrayidx386, align 4
  %cmp387 = icmp ne i32 %i84, 13
  br i1 %cmp387, label %if.then388, label %if.end419

if.then388:                                       ; preds = %if.then384
  %idxprom389 = sext i32 %i84 to i64
  %arrayidx390 = getelementptr inbounds [14 x i32], [14 x i32]* @material, i64 0, i64 %idxprom389
  %i102 = load i32, i32* %arrayidx390, align 4
  %call391 = call i32 @abs(i32 %i102) #10
  %add392 = add nsw i32 %call391, 15
  %idxprom393 = sext i32 %i81 to i64
  %arrayidx394 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom393
  %i103 = load i32, i32* %arrayidx394, align 4
  %idxprom395 = sext i32 %i103 to i64
  %arrayidx396 = getelementptr inbounds [14 x i32], [14 x i32]* @material, i64 0, i64 %idxprom395
  %i104 = load i32, i32* %arrayidx396, align 4
  %call397 = call i32 @abs(i32 %i104) #10
  %cmp398 = icmp sge i32 %add392, %call397
  br i1 %cmp398, label %if.then399, label %if.else412

if.then399:                                       ; preds = %if.then388
  %idxprom400 = sext i32 %i84 to i64
  %arrayidx401 = getelementptr inbounds [14 x i32], [14 x i32]* @material, i64 0, i64 %idxprom400
  %i105 = load i32, i32* %arrayidx401, align 4
  %call402 = call i32 @abs(i32 %i105) #10
  %idxprom403 = sext i32 %i81 to i64
  %arrayidx404 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom403
  %i106 = load i32, i32* %arrayidx404, align 4
  %idxprom405 = sext i32 %i106 to i64
  %arrayidx406 = getelementptr inbounds [14 x i32], [14 x i32]* @material, i64 0, i64 %idxprom405
  %i107 = load i32, i32* %arrayidx406, align 4
  %call407 = call i32 @abs(i32 %i107) #10
  %shr408 = ashr i32 %call407, 4
  %sub409 = sub nsw i32 %call402, %shr408
  %idxprom410 = sext i32 %i.1 to i64
  %arrayidx411 = getelementptr inbounds i32, i32* %see_values, i64 %idxprom410
  store i32 %sub409, i32* %arrayidx411, align 4
  br label %if.end418

if.else412:                                       ; preds = %if.then388
  %i108 = load i32, i32* @white_to_move, align 4
  %tobool413 = icmp ne i32 %i108, 0
  %i109 = zext i1 %tobool413 to i64
  %cond414 = select i1 %tobool413, i32 0, i32 1
  %call415 = call i32 @see(i32 %cond414, i32 %i82, i32 %i81)
  %idxprom416 = sext i32 %i.1 to i64
  %arrayidx417 = getelementptr inbounds i32, i32* %see_values, i64 %idxprom416
  store i32 %call415, i32* %arrayidx417, align 4
  br label %if.end418

if.end418:                                        ; preds = %if.else412, %if.then399
  br label %if.end419

if.end419:                                        ; preds = %if.end418, %if.then384
  br label %if.end420

if.end420:                                        ; preds = %if.end419, %land.lhs.true375, %land.lhs.true366, %if.then357
  br label %if.end472

if.else421:                                       ; preds = %if.else355
  %cmp422 = icmp ne i32 %i84, 13
  br i1 %cmp422, label %if.then423, label %if.else468

if.then423:                                       ; preds = %if.else421
  %idxprom424 = sext i32 %i84 to i64
  %arrayidx425 = getelementptr inbounds [14 x i32], [14 x i32]* @material, i64 0, i64 %idxprom424
  %i110 = load i32, i32* %arrayidx425, align 4
  %call426 = call i32 @abs(i32 %i110) #10
  %add427 = add nsw i32 %call426, 15
  %idxprom428 = sext i32 %i81 to i64
  %arrayidx429 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom428
  %i111 = load i32, i32* %arrayidx429, align 4
  %idxprom430 = sext i32 %i111 to i64
  %arrayidx431 = getelementptr inbounds [14 x i32], [14 x i32]* @material, i64 0, i64 %idxprom430
  %i112 = load i32, i32* %arrayidx431, align 4
  %call432 = call i32 @abs(i32 %i112) #10
  %cmp433 = icmp sge i32 %add427, %call432
  br i1 %cmp433, label %if.then434, label %if.else452

if.then434:                                       ; preds = %if.then423
  %idxprom435 = sext i32 %i84 to i64
  %arrayidx436 = getelementptr inbounds [14 x i32], [14 x i32]* @material, i64 0, i64 %idxprom435
  %i113 = load i32, i32* %arrayidx436, align 4
  %call437 = call i32 @abs(i32 %i113) #10
  %idxprom438 = sext i32 %i81 to i64
  %arrayidx439 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom438
  %i114 = load i32, i32* %arrayidx439, align 4
  %idxprom440 = sext i32 %i114 to i64
  %arrayidx441 = getelementptr inbounds [14 x i32], [14 x i32]* @material, i64 0, i64 %idxprom440
  %i115 = load i32, i32* %arrayidx441, align 4
  %call442 = call i32 @abs(i32 %i115) #10
  %shr443 = ashr i32 %call442, 4
  %sub444 = sub nsw i32 %call437, %shr443
  %idxprom445 = sext i32 %i.1 to i64
  %arrayidx446 = getelementptr inbounds i32, i32* %see_values, i64 %idxprom445
  store i32 %sub444, i32* %arrayidx446, align 4
  %idxprom447 = sext i32 %i.1 to i64
  %arrayidx448 = getelementptr inbounds i32, i32* %see_values, i64 %idxprom447
  %i116 = load i32, i32* %arrayidx448, align 4
  %add449 = add nsw i32 50000000, %i116
  %idxprom450 = sext i32 %i.1 to i64
  %arrayidx451 = getelementptr inbounds i32, i32* %move_ordering, i64 %idxprom450
  store i32 %add449, i32* %arrayidx451, align 4
  br label %if.end467

if.else452:                                       ; preds = %if.then423
  %i117 = load i32, i32* @white_to_move, align 4
  %tobool453 = icmp ne i32 %i117, 0
  %i118 = zext i1 %tobool453 to i64
  %cond454 = select i1 %tobool453, i32 0, i32 1
  %call455 = call i32 @see(i32 %cond454, i32 %i82, i32 %i81)
  %cmp456 = icmp sge i32 %call455, -50
  br i1 %cmp456, label %if.then457, label %if.else461

if.then457:                                       ; preds = %if.else452
  %add458 = add nsw i32 50000000, %call455
  %idxprom459 = sext i32 %i.1 to i64
  %arrayidx460 = getelementptr inbounds i32, i32* %move_ordering, i64 %idxprom459
  store i32 %add458, i32* %arrayidx460, align 4
  br label %if.end464

if.else461:                                       ; preds = %if.else452
  %idxprom462 = sext i32 %i.1 to i64
  %arrayidx463 = getelementptr inbounds i32, i32* %move_ordering, i64 %idxprom462
  store i32 %call455, i32* %arrayidx463, align 4
  br label %if.end464

if.end464:                                        ; preds = %if.else461, %if.then457
  %idxprom465 = sext i32 %i.1 to i64
  %arrayidx466 = getelementptr inbounds i32, i32* %see_values, i64 %idxprom465
  store i32 %call455, i32* %arrayidx466, align 4
  br label %if.end467

if.end467:                                        ; preds = %if.end464, %if.then434
  br label %if.end471

if.else468:                                       ; preds = %if.else421
  %idxprom469 = sext i32 %i.1 to i64
  %arrayidx470 = getelementptr inbounds i32, i32* %move_ordering, i64 %idxprom469
  store i32 0, i32* %arrayidx470, align 4
  br label %if.end471

if.end471:                                        ; preds = %if.else468, %if.end467
  br label %if.end472

if.end472:                                        ; preds = %if.end471, %if.end420
  br label %if.end473

if.end473:                                        ; preds = %if.end472, %if.end354
  %idxprom474 = sext i32 %i81 to i64
  %arrayidx475 = getelementptr inbounds [144 x [144 x i32]], [144 x [144 x i32]]* @history_h, i64 0, i64 %idxprom474
  %idxprom476 = sext i32 %i82 to i64
  %arrayidx477 = getelementptr inbounds [144 x i32], [144 x i32]* %arrayidx475, i64 0, i64 %idxprom476
  %i119 = load i32, i32* %arrayidx477, align 4
  %idxprom478 = sext i32 %i.1 to i64
  %arrayidx479 = getelementptr inbounds i32, i32* %move_ordering, i64 %idxprom478
  %i120 = load i32, i32* %arrayidx479, align 4
  %add480 = add i32 %i120, %i119
  store i32 %add480, i32* %arrayidx479, align 4
  %i121 = load i32, i32* @ply, align 4
  %idxprom481 = sext i32 %i121 to i64
  %arrayidx482 = getelementptr inbounds [300 x %struct.move_s], [300 x %struct.move_s]* @killer1, i64 0, i64 %idxprom481
  %from483 = getelementptr inbounds %struct.move_s, %struct.move_s* %arrayidx482, i32 0, i32 0
  %i122 = load i32, i32* %from483, align 8
  %cmp484 = icmp eq i32 %i81, %i122
  br i1 %cmp484, label %land.lhs.true485, label %if.else499

land.lhs.true485:                                 ; preds = %if.end473
  %i123 = load i32, i32* @ply, align 4
  %idxprom486 = sext i32 %i123 to i64
  %arrayidx487 = getelementptr inbounds [300 x %struct.move_s], [300 x %struct.move_s]* @killer1, i64 0, i64 %idxprom486
  %target488 = getelementptr inbounds %struct.move_s, %struct.move_s* %arrayidx487, i32 0, i32 1
  %i124 = load i32, i32* %target488, align 4
  %cmp489 = icmp eq i32 %i82, %i124
  br i1 %cmp489, label %land.lhs.true490, label %if.else499

land.lhs.true490:                                 ; preds = %land.lhs.true485
  %i125 = load i32, i32* @ply, align 4
  %idxprom491 = sext i32 %i125 to i64
  %arrayidx492 = getelementptr inbounds [300 x %struct.move_s], [300 x %struct.move_s]* @killer1, i64 0, i64 %idxprom491
  %promoted493 = getelementptr inbounds %struct.move_s, %struct.move_s* %arrayidx492, i32 0, i32 3
  %i126 = load i32, i32* %promoted493, align 4
  %cmp494 = icmp eq i32 %i83, %i126
  br i1 %cmp494, label %if.then495, label %if.else499

if.then495:                                       ; preds = %land.lhs.true490
  %idxprom496 = sext i32 %i.1 to i64
  %arrayidx497 = getelementptr inbounds i32, i32* %move_ordering, i64 %idxprom496
  %i127 = load i32, i32* %arrayidx497, align 4
  %add498 = add nsw i32 %i127, 25000000
  store i32 %add498, i32* %arrayidx497, align 4
  br label %if.end539

if.else499:                                       ; preds = %land.lhs.true490, %land.lhs.true485, %if.end473
  %i128 = load i32, i32* @ply, align 4
  %idxprom500 = sext i32 %i128 to i64
  %arrayidx501 = getelementptr inbounds [300 x %struct.move_s], [300 x %struct.move_s]* @killer2, i64 0, i64 %idxprom500
  %from502 = getelementptr inbounds %struct.move_s, %struct.move_s* %arrayidx501, i32 0, i32 0
  %i129 = load i32, i32* %from502, align 8
  %cmp503 = icmp eq i32 %i81, %i129
  br i1 %cmp503, label %land.lhs.true504, label %if.else518

land.lhs.true504:                                 ; preds = %if.else499
  %i130 = load i32, i32* @ply, align 4
  %idxprom505 = sext i32 %i130 to i64
  %arrayidx506 = getelementptr inbounds [300 x %struct.move_s], [300 x %struct.move_s]* @killer2, i64 0, i64 %idxprom505
  %target507 = getelementptr inbounds %struct.move_s, %struct.move_s* %arrayidx506, i32 0, i32 1
  %i131 = load i32, i32* %target507, align 4
  %cmp508 = icmp eq i32 %i82, %i131
  br i1 %cmp508, label %land.lhs.true509, label %if.else518

land.lhs.true509:                                 ; preds = %land.lhs.true504
  %i132 = load i32, i32* @ply, align 4
  %idxprom510 = sext i32 %i132 to i64
  %arrayidx511 = getelementptr inbounds [300 x %struct.move_s], [300 x %struct.move_s]* @killer2, i64 0, i64 %idxprom510
  %promoted512 = getelementptr inbounds %struct.move_s, %struct.move_s* %arrayidx511, i32 0, i32 3
  %i133 = load i32, i32* %promoted512, align 4
  %cmp513 = icmp eq i32 %i83, %i133
  br i1 %cmp513, label %if.then514, label %if.else518

if.then514:                                       ; preds = %land.lhs.true509
  %idxprom515 = sext i32 %i.1 to i64
  %arrayidx516 = getelementptr inbounds i32, i32* %move_ordering, i64 %idxprom515
  %i134 = load i32, i32* %arrayidx516, align 4
  %add517 = add nsw i32 %i134, 20000000
  store i32 %add517, i32* %arrayidx516, align 4
  br label %if.end538

if.else518:                                       ; preds = %land.lhs.true509, %land.lhs.true504, %if.else499
  %i135 = load i32, i32* @ply, align 4
  %idxprom519 = sext i32 %i135 to i64
  %arrayidx520 = getelementptr inbounds [300 x %struct.move_s], [300 x %struct.move_s]* @killer3, i64 0, i64 %idxprom519
  %from521 = getelementptr inbounds %struct.move_s, %struct.move_s* %arrayidx520, i32 0, i32 0
  %i136 = load i32, i32* %from521, align 8
  %cmp522 = icmp eq i32 %i81, %i136
  br i1 %cmp522, label %land.lhs.true523, label %if.end537

land.lhs.true523:                                 ; preds = %if.else518
  %i137 = load i32, i32* @ply, align 4
  %idxprom524 = sext i32 %i137 to i64
  %arrayidx525 = getelementptr inbounds [300 x %struct.move_s], [300 x %struct.move_s]* @killer3, i64 0, i64 %idxprom524
  %target526 = getelementptr inbounds %struct.move_s, %struct.move_s* %arrayidx525, i32 0, i32 1
  %i138 = load i32, i32* %target526, align 4
  %cmp527 = icmp eq i32 %i82, %i138
  br i1 %cmp527, label %land.lhs.true528, label %if.end537

land.lhs.true528:                                 ; preds = %land.lhs.true523
  %i139 = load i32, i32* @ply, align 4
  %idxprom529 = sext i32 %i139 to i64
  %arrayidx530 = getelementptr inbounds [300 x %struct.move_s], [300 x %struct.move_s]* @killer3, i64 0, i64 %idxprom529
  %promoted531 = getelementptr inbounds %struct.move_s, %struct.move_s* %arrayidx530, i32 0, i32 3
  %i140 = load i32, i32* %promoted531, align 4
  %cmp532 = icmp eq i32 %i83, %i140
  br i1 %cmp532, label %if.then533, label %if.end537

if.then533:                                       ; preds = %land.lhs.true528
  %idxprom534 = sext i32 %i.1 to i64
  %arrayidx535 = getelementptr inbounds i32, i32* %move_ordering, i64 %idxprom534
  %i141 = load i32, i32* %arrayidx535, align 4
  %add536 = add nsw i32 %i141, 15000000
  store i32 %add536, i32* %arrayidx535, align 4
  br label %if.end537

if.end537:                                        ; preds = %if.then533, %land.lhs.true528, %land.lhs.true523, %if.else518
  br label %if.end538

if.end538:                                        ; preds = %if.end537, %if.then514
  br label %if.end539

if.end539:                                        ; preds = %if.end538, %if.then495
  br label %for.inc540

for.inc540:                                       ; preds = %if.end539
  %inc541 = add nsw i32 %i.1, 1
  br label %for.cond301

for.end542:                                       ; preds = %for.cond301
  br label %if.end543

if.end543:                                        ; preds = %for.end542, %for.end
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @perft(i32 %depth) #0 {
entry:
  %moves = alloca [512 x %struct.move_s], align 16
  %tobool = icmp ne i32 %depth, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  %i = load i32, i32* @raw_nodes, align 4
  %inc = add nsw i32 %i, 1
  store i32 %inc, i32* @raw_nodes, align 4
  br label %for.end

if.end:                                           ; preds = %entry
  %arrayidx = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %moves, i64 0, i64 0
  call void @gen(%struct.move_s* %arrayidx)
  %i1 = load i32, i32* @numb_moves, align 4
  %call = call i32 @in_check()
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %i.0 = phi i32 [ 0, %if.end ], [ %inc8, %for.inc ]
  %cmp = icmp slt i32 %i.0, %i1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %arrayidx1 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %moves, i64 0, i64 0
  call void @make(%struct.move_s* %arrayidx1, i32 %i.0)
  %arrayidx2 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %moves, i64 0, i64 0
  %call3 = call i32 @check_legal(%struct.move_s* %arrayidx2, i32 %i.0, i32 %call)
  %tobool4 = icmp ne i32 %call3, 0
  br i1 %tobool4, label %if.then5, label %if.end6

if.then5:                                         ; preds = %for.body
  %sub = sub nsw i32 %depth, 1
  call void @perft(i32 %sub)
  br label %if.end6

if.end6:                                          ; preds = %if.then5, %for.body
  %arrayidx7 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %moves, i64 0, i64 0
  call void @unmake(%struct.move_s* %arrayidx7, i32 %i.0)
  br label %for.inc

for.inc:                                          ; preds = %if.end6
  %inc8 = add nsw i32 %i.0, 1
  br label %for.cond

for.end:                                          ; preds = %for.cond, %if.then
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @qsearch(i32 %alpha, i32 %beta, i32 %depth) #0 {
entry:
  %moves = alloca [512 x %struct.move_s], align 16
  %i = alloca i32, align 4
  %move_ordering = alloca [512 x i32], align 16
  %see_values = alloca [512 x i32], align 16
  %best = alloca i32, align 4
  %bound = alloca i32, align 4
  %i1 = load i32, i32* @ply, align 4
  %i2 = load i32, i32* @ply, align 4
  %idxprom = sext i32 %i2 to i64
  %arrayidx = getelementptr inbounds [300 x i32], [300 x i32]* @pv_length, i64 0, i64 %idxprom
  store i32 %i1, i32* %arrayidx, align 4
  %i3 = load i32, i32* @nodes, align 4
  %and = and i32 %i3, 65535
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.end26, label %if.then

if.then:                                          ; preds = %entry
  %call = call i32 @interrupt()
  %tobool1 = icmp ne i32 %call, 0
  br i1 %tobool1, label %if.then2, label %if.else

if.then2:                                         ; preds = %if.then
  store i32 1, i32* @time_exit, align 4
  br label %return

if.else:                                          ; preds = %if.then
  %call3 = call i64 @rtime()
  %i4 = load i64, i64* @start_time, align 8
  %call4 = call i32 @rdifftime(i64 %call3, i64 %i4)
  %i5 = load i32, i32* @time_for_move, align 4
  %cmp = icmp sge i32 %call4, %i5
  br i1 %cmp, label %land.lhs.true, label %if.end24

land.lhs.true:                                    ; preds = %if.else
  %i6 = load i32, i32* @i_depth, align 4
  %cmp5 = icmp sgt i32 %i6, 1
  br i1 %cmp5, label %if.then6, label %if.end24

if.then6:                                         ; preds = %land.lhs.true
  %i7 = load i32, i32* @failed, align 4
  %cmp7 = icmp eq i32 %i7, 1
  br i1 %cmp7, label %land.lhs.true8, label %if.else23

land.lhs.true8:                                   ; preds = %if.then6
  %i8 = load i32, i32* @extendedtime, align 4
  %tobool9 = icmp ne i32 %i8, 0
  br i1 %tobool9, label %if.else23, label %land.lhs.true10

land.lhs.true10:                                  ; preds = %land.lhs.true8
  %i9 = load i32, i32* @fixed_time, align 4
  %tobool11 = icmp ne i32 %i9, 0
  br i1 %tobool11, label %if.else23, label %land.lhs.true12

land.lhs.true12:                                  ; preds = %land.lhs.true10
  %i10 = load i32, i32* @go_fast, align 4
  %tobool13 = icmp ne i32 %i10, 0
  br i1 %tobool13, label %if.else23, label %land.lhs.true14

land.lhs.true14:                                  ; preds = %land.lhs.true12
  %i11 = load i32, i32* @Variant, align 4
  %cmp15 = icmp ne i32 %i11, 1
  br i1 %cmp15, label %land.lhs.true16, label %if.else23

land.lhs.true16:                                  ; preds = %land.lhs.true14
  %i12 = load i32, i32* @time_left, align 4
  %i13 = load i32, i32* @time_for_move, align 4
  %mul = mul nsw i32 %i13, 4
  %cmp17 = icmp sgt i32 %mul, 1000
  br i1 %cmp17, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true16
  %i14 = load i32, i32* @time_for_move, align 4
  %mul18 = mul nsw i32 %i14, 4
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true16
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %mul18, %cond.true ], [ 1000, %cond.false ]
  %cmp19 = icmp sgt i32 %i12, %cond
  br i1 %cmp19, label %if.then20, label %if.else23

if.then20:                                        ; preds = %cond.end
  store i32 1, i32* @extendedtime, align 4
  %i15 = load i32, i32* @time_for_move, align 4
  %call21 = call i32 @allocate_time()
  %i16 = load i32, i32* @time_for_move, align 4
  %add = add nsw i32 %i16, %call21
  store i32 %add, i32* @time_for_move, align 4
  %i17 = load i32, i32* @time_for_move, align 4
  %i18 = load i32, i32* @time_left, align 4
  %call22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.123, i64 0, i64 0), i32 %i15, i32 %i17, i32 %i18)
  br label %if.end

if.else23:                                        ; preds = %cond.end, %land.lhs.true14, %land.lhs.true12, %land.lhs.true10, %land.lhs.true8, %if.then6
  store i32 1, i32* @time_exit, align 4
  br label %return

if.end:                                           ; preds = %if.then20
  br label %if.end24

if.end24:                                         ; preds = %if.end, %land.lhs.true, %if.else
  br label %if.end25

if.end25:                                         ; preds = %if.end24
  br label %if.end26

if.end26:                                         ; preds = %if.end25, %entry
  %cmp27 = icmp sle i32 %depth, 0
  br i1 %cmp27, label %if.then29, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.end26
  %i19 = load i32, i32* @ply, align 4
  %cmp28 = icmp sge i32 %i19, 300
  br i1 %cmp28, label %if.then29, label %if.end31

if.then29:                                        ; preds = %lor.lhs.false, %if.end26
  %call30 = call i32 @eval(i32 %alpha, i32 %beta)
  br label %return

if.end31:                                         ; preds = %lor.lhs.false
  %i20 = load i32, i32* @qnodes, align 4
  %inc = add nsw i32 %i20, 1
  store i32 %inc, i32* @qnodes, align 4
  %i21 = load i32, i32* @nodes, align 4
  %inc32 = add nsw i32 %i21, 1
  store i32 %inc32, i32* @nodes, align 4
  %call33 = call i32 @QProbeTT(i32* %bound, i32* %best)
  switch i32 %call33, label %sw.epilog [
    i32 3, label %sw.bb
    i32 1, label %sw.bb34
    i32 2, label %sw.bb38
    i32 0, label %sw.bb42
    i32 4, label %sw.bb43
  ]

sw.bb:                                            ; preds = %if.end31
  %i22 = load i32, i32* %bound, align 4
  br label %return

sw.bb34:                                          ; preds = %if.end31
  %i23 = load i32, i32* %bound, align 4
  %cmp35 = icmp sle i32 %i23, %alpha
  br i1 %cmp35, label %if.then36, label %if.end37

if.then36:                                        ; preds = %sw.bb34
  %i24 = load i32, i32* %bound, align 4
  br label %return

if.end37:                                         ; preds = %sw.bb34
  br label %sw.epilog

sw.bb38:                                          ; preds = %if.end31
  %i25 = load i32, i32* %bound, align 4
  %cmp39 = icmp sge i32 %i25, %beta
  br i1 %cmp39, label %if.then40, label %if.end41

if.then40:                                        ; preds = %sw.bb38
  %i26 = load i32, i32* %bound, align 4
  br label %return

if.end41:                                         ; preds = %sw.bb38
  br label %sw.epilog

sw.bb42:                                          ; preds = %if.end31
  br label %sw.epilog

sw.bb43:                                          ; preds = %if.end31
  store i32 -1, i32* %best, align 4
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.bb43, %sw.bb42, %if.end41, %if.end37, %if.end31
  %call44 = call i32 @eval(i32 %alpha, i32 %beta)
  %cmp45 = icmp sge i32 %call44, %beta
  br i1 %cmp45, label %if.then46, label %if.else47

if.then46:                                        ; preds = %sw.epilog
  call void @QStoreTT(i32 %call44, i32 %alpha, i32 %beta, i32 500)
  br label %return

if.else47:                                        ; preds = %sw.epilog
  %cmp48 = icmp sgt i32 %call44, %alpha
  br i1 %cmp48, label %if.then49, label %if.end50

if.then49:                                        ; preds = %if.else47
  br label %if.end50

if.end50:                                         ; preds = %if.then49, %if.else47
  %alpha.addr.0 = phi i32 [ %call44, %if.then49 ], [ %alpha, %if.else47 ]
  br label %if.end51

if.end51:                                         ; preds = %if.end50
  %arrayidx52 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %moves, i64 0, i64 0
  call void @gen(%struct.move_s* %arrayidx52)
  %i27 = load i32, i32* @numb_moves, align 4
  %i28 = load i32, i32* @kingcap, align 4
  %tobool53 = icmp ne i32 %i28, 0
  br i1 %tobool53, label %if.then54, label %if.end55

if.then54:                                        ; preds = %if.end51
  br label %return

if.end55:                                         ; preds = %if.end51
  %sub = sub nsw i32 %alpha.addr.0, 150
  %sub56 = sub nsw i32 %sub, %call44
  %arrayidx57 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %moves, i64 0, i64 0
  %arrayidx58 = getelementptr inbounds [512 x i32], [512 x i32]* %move_ordering, i64 0, i64 0
  %arrayidx59 = getelementptr inbounds [512 x i32], [512 x i32]* %see_values, i64 0, i64 0
  %i29 = load i32, i32* %best, align 4
  call void @order_moves(%struct.move_s* %arrayidx57, i32* %arrayidx58, i32* %arrayidx59, i32 %i27, i32 %i29)
  br label %while.cond

while.cond:                                       ; preds = %if.end123, %if.then72, %if.end55
  %best_score.0 = phi i32 [ -1000000, %if.end55 ], [ %best_score.1, %if.end123 ], [ %best_score.0, %if.then72 ]
  %alpha.addr.1 = phi i32 [ %alpha.addr.0, %if.end55 ], [ %alpha.addr.2, %if.end123 ], [ %alpha.addr.1, %if.then72 ]
  %arrayidx60 = getelementptr inbounds [512 x i32], [512 x i32]* %move_ordering, i64 0, i64 0
  %call61 = call i32 @remove_one(i32* %i, i32* %arrayidx60, i32 %i27)
  %tobool62 = icmp ne i32 %call61, 0
  br i1 %tobool62, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %i30 = load i32, i32* %i, align 4
  %idxprom63 = sext i32 %i30 to i64
  %arrayidx64 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %moves, i64 0, i64 %idxprom63
  %promoted = getelementptr inbounds %struct.move_s, %struct.move_s* %arrayidx64, i32 0, i32 3
  %i31 = load i32, i32* %promoted, align 4
  %tobool65 = icmp ne i32 %i31, 0
  br i1 %tobool65, label %if.end74, label %if.then66

if.then66:                                        ; preds = %while.body
  %i32 = load i32, i32* %i, align 4
  %idxprom67 = sext i32 %i32 to i64
  %arrayidx68 = getelementptr inbounds [512 x i32], [512 x i32]* %see_values, i64 0, i64 %idxprom67
  %i33 = load i32, i32* %arrayidx68, align 4
  %cmp69 = icmp slt i32 %i33, %sub56
  br i1 %cmp69, label %if.then72, label %lor.lhs.false70

lor.lhs.false70:                                  ; preds = %if.then66
  %cmp71 = icmp slt i32 %i33, 0
  br i1 %cmp71, label %if.then72, label %if.end73

if.then72:                                        ; preds = %lor.lhs.false70, %if.then66
  br label %while.cond

if.end73:                                         ; preds = %lor.lhs.false70
  br label %if.end74

if.end74:                                         ; preds = %if.end73, %while.body
  %arrayidx75 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %moves, i64 0, i64 0
  %i34 = load i32, i32* %i, align 4
  call void @make(%struct.move_s* %arrayidx75, i32 %i34)
  %sub76 = sub nsw i32 0, %beta
  %sub77 = sub nsw i32 0, %alpha.addr.1
  %sub78 = sub nsw i32 %depth, 1
  %call79 = call i32 @qsearch(i32 %sub76, i32 %sub77, i32 %sub78)
  %sub80 = sub nsw i32 0, %call79
  %cmp81 = icmp ne i32 %sub80, -50000
  br i1 %cmp81, label %if.then82, label %if.end83

if.then82:                                        ; preds = %if.end74
  br label %if.end83

if.end83:                                         ; preds = %if.then82, %if.end74
  %legal_move.0 = phi i32 [ 1, %if.then82 ], [ 0, %if.end74 ]
  %arrayidx84 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %moves, i64 0, i64 0
  %i35 = load i32, i32* %i, align 4
  call void @unmake(%struct.move_s* %arrayidx84, i32 %i35)
  %cmp85 = icmp sgt i32 %sub80, %best_score.0
  br i1 %cmp85, label %land.lhs.true86, label %if.end89

land.lhs.true86:                                  ; preds = %if.end83
  %tobool87 = icmp ne i32 %legal_move.0, 0
  br i1 %tobool87, label %if.then88, label %if.end89

if.then88:                                        ; preds = %land.lhs.true86
  br label %if.end89

if.end89:                                         ; preds = %if.then88, %land.lhs.true86, %if.end83
  %best_score.1 = phi i32 [ %sub80, %if.then88 ], [ %best_score.0, %land.lhs.true86 ], [ %best_score.0, %if.end83 ]
  %cmp90 = icmp sgt i32 %sub80, %alpha.addr.1
  br i1 %cmp90, label %land.lhs.true91, label %if.end123

land.lhs.true91:                                  ; preds = %if.end89
  %tobool92 = icmp ne i32 %legal_move.0, 0
  br i1 %tobool92, label %if.then93, label %if.end123

if.then93:                                        ; preds = %land.lhs.true91
  %i36 = load i32, i32* %i, align 4
  store i32 %i36, i32* %best, align 4
  %cmp94 = icmp sge i32 %sub80, %beta
  br i1 %cmp94, label %if.then95, label %if.end96

if.then95:                                        ; preds = %if.then93
  %i37 = load i32, i32* %i, align 4
  call void @QStoreTT(i32 %sub80, i32 %alpha, i32 %beta, i32 %i37)
  br label %return

if.end96:                                         ; preds = %if.then93
  %i38 = load i32, i32* @ply, align 4
  %idxprom97 = sext i32 %i38 to i64
  %arrayidx98 = getelementptr inbounds [300 x [300 x %struct.move_s]], [300 x [300 x %struct.move_s]]* @pv, i64 0, i64 %idxprom97
  %i39 = load i32, i32* @ply, align 4
  %idxprom99 = sext i32 %i39 to i64
  %arrayidx100 = getelementptr inbounds [300 x %struct.move_s], [300 x %struct.move_s]* %arrayidx98, i64 0, i64 %idxprom99
  %i40 = load i32, i32* %i, align 4
  %idxprom101 = sext i32 %i40 to i64
  %arrayidx102 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %moves, i64 0, i64 %idxprom101
  %i41 = bitcast %struct.move_s* %arrayidx100 to i8*
  %i42 = bitcast %struct.move_s* %arrayidx102 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %i41, i8* align 8 %i42, i64 24, i1 false)
  %i43 = load i32, i32* @ply, align 4
  %add103 = add nsw i32 %i43, 1
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end96
  %j.0 = phi i32 [ %add103, %if.end96 ], [ %inc117, %for.inc ]
  %i44 = load i32, i32* @ply, align 4
  %add104 = add nsw i32 %i44, 1
  %idxprom105 = sext i32 %add104 to i64
  %arrayidx106 = getelementptr inbounds [300 x i32], [300 x i32]* @pv_length, i64 0, i64 %idxprom105
  %i45 = load i32, i32* %arrayidx106, align 4
  %cmp107 = icmp slt i32 %j.0, %i45
  br i1 %cmp107, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %i46 = load i32, i32* @ply, align 4
  %idxprom108 = sext i32 %i46 to i64
  %arrayidx109 = getelementptr inbounds [300 x [300 x %struct.move_s]], [300 x [300 x %struct.move_s]]* @pv, i64 0, i64 %idxprom108
  %idxprom110 = sext i32 %j.0 to i64
  %arrayidx111 = getelementptr inbounds [300 x %struct.move_s], [300 x %struct.move_s]* %arrayidx109, i64 0, i64 %idxprom110
  %i47 = load i32, i32* @ply, align 4
  %add112 = add nsw i32 %i47, 1
  %idxprom113 = sext i32 %add112 to i64
  %arrayidx114 = getelementptr inbounds [300 x [300 x %struct.move_s]], [300 x [300 x %struct.move_s]]* @pv, i64 0, i64 %idxprom113
  %idxprom115 = sext i32 %j.0 to i64
  %arrayidx116 = getelementptr inbounds [300 x %struct.move_s], [300 x %struct.move_s]* %arrayidx114, i64 0, i64 %idxprom115
  %i48 = bitcast %struct.move_s* %arrayidx111 to i8*
  %i49 = bitcast %struct.move_s* %arrayidx116 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %i48, i8* align 8 %i49, i64 24, i1 false)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %inc117 = add nsw i32 %j.0, 1
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %i50 = load i32, i32* @ply, align 4
  %add118 = add nsw i32 %i50, 1
  %idxprom119 = sext i32 %add118 to i64
  %arrayidx120 = getelementptr inbounds [300 x i32], [300 x i32]* @pv_length, i64 0, i64 %idxprom119
  %i51 = load i32, i32* %arrayidx120, align 4
  %i52 = load i32, i32* @ply, align 4
  %idxprom121 = sext i32 %i52 to i64
  %arrayidx122 = getelementptr inbounds [300 x i32], [300 x i32]* @pv_length, i64 0, i64 %idxprom121
  store i32 %i51, i32* %arrayidx122, align 4
  br label %if.end123

if.end123:                                        ; preds = %for.end, %land.lhs.true91, %if.end89
  %alpha.addr.2 = phi i32 [ %sub80, %for.end ], [ %alpha.addr.1, %land.lhs.true91 ], [ %alpha.addr.1, %if.end89 ]
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %i53 = load i32, i32* %best, align 4
  call void @QStoreTT(i32 %alpha.addr.1, i32 %alpha, i32 %beta, i32 %i53)
  br label %return

return:                                           ; preds = %while.end, %if.then95, %if.then54, %if.then46, %if.then40, %if.then36, %sw.bb, %if.then29, %if.else23, %if.then2
  %retval.0 = phi i32 [ %call30, %if.then29 ], [ %call44, %if.then46 ], [ 50000, %if.then54 ], [ %sub80, %if.then95 ], [ %alpha.addr.1, %while.end ], [ %i26, %if.then40 ], [ %i24, %if.then36 ], [ %i22, %sw.bb ], [ 0, %if.then2 ], [ 0, %if.else23 ]
  ret i32 %retval.0
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @remove_one(i32* %marker, i32* %move_ordering, i32 %num_moves) #0 {
entry:
  store i32 -1000000, i32* %marker, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ]
  %best.0 = phi i32 [ -1000000, %entry ], [ %best.1, %for.inc ]
  %cmp = icmp slt i32 %i.0, %num_moves
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %idxprom = sext i32 %i.0 to i64
  %arrayidx = getelementptr inbounds i32, i32* %move_ordering, i64 %idxprom
  %i = load i32, i32* %arrayidx, align 4
  %cmp1 = icmp sgt i32 %i, %best.0
  br i1 %cmp1, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  store i32 %i.0, i32* %marker, align 4
  %idxprom2 = sext i32 %i.0 to i64
  %arrayidx3 = getelementptr inbounds i32, i32* %move_ordering, i64 %idxprom2
  %i1 = load i32, i32* %arrayidx3, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  %best.1 = phi i32 [ %i1, %if.then ], [ %best.0, %for.body ]
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %inc = add nsw i32 %i.0, 1
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %i2 = load i32, i32* %marker, align 4
  %cmp4 = icmp sgt i32 %i2, -1000000
  br i1 %cmp4, label %if.then5, label %if.else

if.then5:                                         ; preds = %for.end
  %i3 = load i32, i32* %marker, align 4
  %idxprom6 = sext i32 %i3 to i64
  %arrayidx7 = getelementptr inbounds i32, i32* %move_ordering, i64 %idxprom6
  store i32 -1000000, i32* %arrayidx7, align 4
  br label %return

if.else:                                          ; preds = %for.end
  br label %return

return:                                           ; preds = %if.else, %if.then5
  %retval.0 = phi i32 [ 1, %if.then5 ], [ 0, %if.else ]
  ret i32 %retval.0
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @search(i32 %alpha, i32 %beta, i32 %depth, i32 %is_null) #0 {
entry:
  %moves = alloca [512 x %struct.move_s], align 16
  %i = alloca i32, align 4
  %move_ordering = alloca [512 x i32], align 16
  %see_values = alloca [512 x i32], align 16
  %bound = alloca i32, align 4
  %threat = alloca i32, align 4
  %donull = alloca i32, align 4
  %best = alloca i32, align 4
  %kswap = alloca %struct.move_s, align 4
  %i1 = load i32, i32* @nodes, align 4
  %inc = add nsw i32 %i1, 1
  store i32 %inc, i32* @nodes, align 4
  %i2 = load i32, i32* @nodes, align 4
  %and = and i32 %i2, 65535
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %if.end26, label %if.then

if.then:                                          ; preds = %entry
  %call = call i32 @interrupt()
  %tobool1 = icmp ne i32 %call, 0
  br i1 %tobool1, label %if.then2, label %if.else

if.then2:                                         ; preds = %if.then
  store i32 1, i32* @time_exit, align 4
  br label %return

if.else:                                          ; preds = %if.then
  %call3 = call i64 @rtime()
  %i3 = load i64, i64* @start_time, align 8
  %call4 = call i32 @rdifftime(i64 %call3, i64 %i3)
  %i4 = load i32, i32* @time_for_move, align 4
  %cmp = icmp sge i32 %call4, %i4
  br i1 %cmp, label %land.lhs.true, label %if.end24

land.lhs.true:                                    ; preds = %if.else
  %i5 = load i32, i32* @i_depth, align 4
  %cmp5 = icmp sgt i32 %i5, 1
  br i1 %cmp5, label %if.then6, label %if.end24

if.then6:                                         ; preds = %land.lhs.true
  %i6 = load i32, i32* @failed, align 4
  %cmp7 = icmp eq i32 %i6, 1
  br i1 %cmp7, label %land.lhs.true8, label %if.else23

land.lhs.true8:                                   ; preds = %if.then6
  %i7 = load i32, i32* @extendedtime, align 4
  %tobool9 = icmp ne i32 %i7, 0
  br i1 %tobool9, label %if.else23, label %land.lhs.true10

land.lhs.true10:                                  ; preds = %land.lhs.true8
  %i8 = load i32, i32* @fixed_time, align 4
  %tobool11 = icmp ne i32 %i8, 0
  br i1 %tobool11, label %if.else23, label %land.lhs.true12

land.lhs.true12:                                  ; preds = %land.lhs.true10
  %i9 = load i32, i32* @go_fast, align 4
  %tobool13 = icmp ne i32 %i9, 0
  br i1 %tobool13, label %if.else23, label %land.lhs.true14

land.lhs.true14:                                  ; preds = %land.lhs.true12
  %i10 = load i32, i32* @Variant, align 4
  %cmp15 = icmp ne i32 %i10, 1
  br i1 %cmp15, label %land.lhs.true16, label %if.else23

land.lhs.true16:                                  ; preds = %land.lhs.true14
  %i11 = load i32, i32* @time_left, align 4
  %i12 = load i32, i32* @time_for_move, align 4
  %mul = mul nsw i32 %i12, 4
  %cmp17 = icmp sgt i32 %mul, 1000
  br i1 %cmp17, label %cond.true, label %cond.false

cond.true:                                        ; preds = %land.lhs.true16
  %i13 = load i32, i32* @time_for_move, align 4
  %mul18 = mul nsw i32 %i13, 4
  br label %cond.end

cond.false:                                       ; preds = %land.lhs.true16
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %mul18, %cond.true ], [ 1000, %cond.false ]
  %cmp19 = icmp sgt i32 %i11, %cond
  br i1 %cmp19, label %if.then20, label %if.else23

if.then20:                                        ; preds = %cond.end
  store i32 1, i32* @extendedtime, align 4
  %i14 = load i32, i32* @time_for_move, align 4
  %call21 = call i32 @allocate_time()
  %i15 = load i32, i32* @time_for_move, align 4
  %add = add nsw i32 %i15, %call21
  store i32 %add, i32* @time_for_move, align 4
  %i16 = load i32, i32* @time_for_move, align 4
  %i17 = load i32, i32* @time_left, align 4
  %call22 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.123, i64 0, i64 0), i32 %i14, i32 %i16, i32 %i17)
  br label %if.end

if.else23:                                        ; preds = %cond.end, %land.lhs.true14, %land.lhs.true12, %land.lhs.true10, %land.lhs.true8, %if.then6
  store i32 1, i32* @time_exit, align 4
  br label %return

if.end:                                           ; preds = %if.then20
  br label %if.end24

if.end24:                                         ; preds = %if.end, %land.lhs.true, %if.else
  br label %if.end25

if.end25:                                         ; preds = %if.end24
  br label %if.end26

if.end26:                                         ; preds = %if.end25, %entry
  store i32 0, i32* %threat, align 4
  %i18 = load i32, i32* @ply, align 4
  %i19 = load i32, i32* @ply, align 4
  %idxprom = sext i32 %i19 to i64
  %arrayidx = getelementptr inbounds [300 x i32], [300 x i32]* @pv_length, i64 0, i64 %idxprom
  store i32 %i18, i32* %arrayidx, align 4
  %call27 = call i32 @is_draw()
  %tobool28 = icmp ne i32 %call27, 0
  br i1 %tobool28, label %if.then29, label %if.end30

if.then29:                                        ; preds = %if.end26
  br label %return

if.end30:                                         ; preds = %if.end26
  %i20 = load i32, i32* @ply, align 4
  %idxprom31 = sext i32 %i20 to i64
  %arrayidx32 = getelementptr inbounds [300 x i32], [300 x i32]* @checks, i64 0, i64 %idxprom31
  %i21 = load i32, i32* %arrayidx32, align 4
  %i22 = load i32, i32* @ply, align 4
  %idxprom33 = sext i32 %i22 to i64
  %arrayidx34 = getelementptr inbounds [300 x i32], [300 x i32]* @singular, i64 0, i64 %idxprom33
  store i32 0, i32* %arrayidx34, align 4
  %i23 = load i32, i32* @ply, align 4
  %idxprom35 = sext i32 %i23 to i64
  %arrayidx36 = getelementptr inbounds [300 x i32], [300 x i32]* @recaps, i64 0, i64 %idxprom35
  store i32 0, i32* %arrayidx36, align 4
  %i24 = load i32, i32* @ply, align 4
  %cmp37 = icmp slt i32 %i24, 300
  br i1 %cmp37, label %land.lhs.true38, label %if.else48

land.lhs.true38:                                  ; preds = %if.end30
  %tobool39 = icmp ne i32 %i21, 0
  br i1 %tobool39, label %land.lhs.true40, label %if.else48

land.lhs.true40:                                  ; preds = %land.lhs.true38
  %i25 = load i32, i32* @ply, align 4
  %i26 = load i32, i32* @i_depth, align 4
  %mul41 = mul nsw i32 %i26, 2
  %cmp42 = icmp sle i32 %i25, %mul41
  br i1 %cmp42, label %if.then44, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true40
  %cmp43 = icmp eq i32 %depth, 0
  br i1 %cmp43, label %if.then44, label %if.else48

if.then44:                                        ; preds = %lor.lhs.false, %land.lhs.true40
  %inc45 = add nsw i32 %depth, 1
  %i27 = load i32, i32* @ext_check, align 4
  %inc46 = add i32 %i27, 1
  store i32 %inc46, i32* @ext_check, align 4
  %inc47 = add nsw i32 0, 1
  br label %if.end87

if.else48:                                        ; preds = %lor.lhs.false, %land.lhs.true38, %if.end30
  %i28 = load i32, i32* @ply, align 4
  %cmp49 = icmp slt i32 %i28, 300
  br i1 %cmp49, label %land.lhs.true50, label %if.end86

land.lhs.true50:                                  ; preds = %if.else48
  %i29 = load i32, i32* @ply, align 4
  %cmp51 = icmp sgt i32 %i29, 2
  br i1 %cmp51, label %land.lhs.true52, label %if.end86

land.lhs.true52:                                  ; preds = %land.lhs.true50
  %i30 = load i32, i32* @ply, align 4
  %i31 = load i32, i32* @i_depth, align 4
  %mul53 = mul nsw i32 %i31, 2
  %cmp54 = icmp sle i32 %i30, %mul53
  br i1 %cmp54, label %land.lhs.true55, label %if.end86

land.lhs.true55:                                  ; preds = %land.lhs.true52
  %i32 = load i32, i32* @ply, align 4
  %sub = sub nsw i32 %i32, 2
  %idxprom56 = sext i32 %sub to i64
  %arrayidx57 = getelementptr inbounds [300 x i32], [300 x i32]* @recaps, i64 0, i64 %idxprom56
  %i33 = load i32, i32* %arrayidx57, align 4
  %tobool58 = icmp ne i32 %i33, 0
  br i1 %tobool58, label %if.end86, label %land.lhs.true59

land.lhs.true59:                                  ; preds = %land.lhs.true55
  %i34 = load i32, i32* @cfg_recap, align 4
  %tobool60 = icmp ne i32 %i34, 0
  br i1 %tobool60, label %land.lhs.true61, label %if.end86

land.lhs.true61:                                  ; preds = %land.lhs.true59
  %i35 = load i32, i32* @ply, align 4
  %sub62 = sub nsw i32 %i35, 1
  %idxprom63 = sext i32 %sub62 to i64
  %arrayidx64 = getelementptr inbounds [300 x %struct.move_s], [300 x %struct.move_s]* @path, i64 0, i64 %idxprom63
  %captured = getelementptr inbounds %struct.move_s, %struct.move_s* %arrayidx64, i32 0, i32 2
  %i36 = load i32, i32* %captured, align 8
  %cmp65 = icmp ne i32 %i36, 13
  br i1 %cmp65, label %land.lhs.true66, label %if.end86

land.lhs.true66:                                  ; preds = %land.lhs.true61
  %i37 = load i32, i32* @ply, align 4
  %sub67 = sub nsw i32 %i37, 1
  %idxprom68 = sext i32 %sub67 to i64
  %arrayidx69 = getelementptr inbounds [300 x %struct.move_s], [300 x %struct.move_s]* @path, i64 0, i64 %idxprom68
  %captured70 = getelementptr inbounds %struct.move_s, %struct.move_s* %arrayidx69, i32 0, i32 2
  %i38 = load i32, i32* %captured70, align 8
  %idxprom71 = sext i32 %i38 to i64
  %arrayidx72 = getelementptr inbounds [14 x i32], [14 x i32]* @search.rc_index, i64 0, i64 %idxprom71
  %i39 = load i32, i32* %arrayidx72, align 4
  %i40 = load i32, i32* @ply, align 4
  %sub73 = sub nsw i32 %i40, 2
  %idxprom74 = sext i32 %sub73 to i64
  %arrayidx75 = getelementptr inbounds [300 x %struct.move_s], [300 x %struct.move_s]* @path, i64 0, i64 %idxprom74
  %captured76 = getelementptr inbounds %struct.move_s, %struct.move_s* %arrayidx75, i32 0, i32 2
  %i41 = load i32, i32* %captured76, align 8
  %idxprom77 = sext i32 %i41 to i64
  %arrayidx78 = getelementptr inbounds [14 x i32], [14 x i32]* @search.rc_index, i64 0, i64 %idxprom77
  %i42 = load i32, i32* %arrayidx78, align 4
  %cmp79 = icmp eq i32 %i39, %i42
  br i1 %cmp79, label %if.then80, label %if.end86

if.then80:                                        ; preds = %land.lhs.true66
  %inc81 = add nsw i32 %depth, 1
  %i43 = load i32, i32* @ext_recap, align 4
  %inc82 = add i32 %i43, 1
  store i32 %inc82, i32* @ext_recap, align 4
  %inc83 = add nsw i32 0, 1
  %i44 = load i32, i32* @ply, align 4
  %idxprom84 = sext i32 %i44 to i64
  %arrayidx85 = getelementptr inbounds [300 x i32], [300 x i32]* @recaps, i64 0, i64 %idxprom84
  store i32 1, i32* %arrayidx85, align 4
  br label %if.end86

if.end86:                                         ; preds = %if.then80, %land.lhs.true66, %land.lhs.true61, %land.lhs.true59, %land.lhs.true55, %land.lhs.true52, %land.lhs.true50, %if.else48
  %extend.0 = phi i32 [ 0, %land.lhs.true55 ], [ %inc83, %if.then80 ], [ 0, %land.lhs.true66 ], [ 0, %land.lhs.true61 ], [ 0, %land.lhs.true59 ], [ 0, %land.lhs.true52 ], [ 0, %land.lhs.true50 ], [ 0, %if.else48 ]
  %depth.addr.0 = phi i32 [ %depth, %land.lhs.true55 ], [ %inc81, %if.then80 ], [ %depth, %land.lhs.true66 ], [ %depth, %land.lhs.true61 ], [ %depth, %land.lhs.true59 ], [ %depth, %land.lhs.true52 ], [ %depth, %land.lhs.true50 ], [ %depth, %if.else48 ]
  br label %if.end87

if.end87:                                         ; preds = %if.end86, %if.then44
  %extend.1 = phi i32 [ %inc47, %if.then44 ], [ %extend.0, %if.end86 ]
  %depth.addr.1 = phi i32 [ %inc45, %if.then44 ], [ %depth.addr.0, %if.end86 ]
  %cmp88 = icmp sle i32 %depth.addr.1, 0
  br i1 %cmp88, label %if.then91, label %lor.lhs.false89

lor.lhs.false89:                                  ; preds = %if.end87
  %i45 = load i32, i32* @ply, align 4
  %cmp90 = icmp sge i32 %i45, 300
  br i1 %cmp90, label %if.then91, label %if.end120

if.then91:                                        ; preds = %lor.lhs.false89, %if.end87
  %i46 = load i32, i32* @Variant, align 4
  %cmp92 = icmp ne i32 %i46, 3
  br i1 %cmp92, label %land.lhs.true93, label %if.else98

land.lhs.true93:                                  ; preds = %if.then91
  %i47 = load i32, i32* @Variant, align 4
  %cmp94 = icmp ne i32 %i47, 4
  br i1 %cmp94, label %if.then95, label %if.else98

if.then95:                                        ; preds = %land.lhs.true93
  store i32 1, i32* @captures, align 4
  %i48 = load i32, i32* @ply, align 4
  %sub96 = sub nsw i32 300, %i48
  %call97 = call i32 @qsearch(i32 %alpha, i32 %beta, i32 %sub96)
  store i32 0, i32* @captures, align 4
  br label %return

if.else98:                                        ; preds = %land.lhs.true93, %if.then91
  %i49 = load i32, i32* @Variant, align 4
  %cmp99 = icmp eq i32 %i49, 3
  br i1 %cmp99, label %if.then100, label %if.else102

if.then100:                                       ; preds = %if.else98
  %call101 = call i32 @suicide_eval()
  br label %return

if.else102:                                       ; preds = %if.else98
  %i50 = load i32, i32* @Variant, align 4
  %cmp103 = icmp eq i32 %i50, 4
  br i1 %cmp103, label %if.then104, label %if.end117

if.then104:                                       ; preds = %if.else102
  %call105 = call i32 @losers_eval()
  store i32 %call105, i32* %i, align 4
  %i51 = load i32, i32* %i, align 4
  %call106 = call i32 @abs(i32 %i51) #10
  %cmp107 = icmp eq i32 %call106, 1000000
  br i1 %cmp107, label %if.then108, label %if.else116

if.then108:                                       ; preds = %if.then104
  %i52 = load i32, i32* %i, align 4
  %cmp109 = icmp sgt i32 %i52, 0
  br i1 %cmp109, label %cond.true110, label %cond.false112

cond.true110:                                     ; preds = %if.then108
  %i53 = load i32, i32* @ply, align 4
  %sub111 = sub nsw i32 1000000, %i53
  br label %cond.end114

cond.false112:                                    ; preds = %if.then108
  %i54 = load i32, i32* @ply, align 4
  %add113 = add nsw i32 -1000000, %i54
  br label %cond.end114

cond.end114:                                      ; preds = %cond.false112, %cond.true110
  %cond115 = phi i32 [ %sub111, %cond.true110 ], [ %add113, %cond.false112 ]
  br label %return

if.else116:                                       ; preds = %if.then104
  %i55 = load i32, i32* %i, align 4
  br label %return

if.end117:                                        ; preds = %if.else102
  br label %if.end118

if.end118:                                        ; preds = %if.end117
  br label %if.end119

if.end119:                                        ; preds = %if.end118
  br label %if.end120

if.end120:                                        ; preds = %if.end119, %lor.lhs.false89
  %call121 = call i32 @ProbeTT(i32* %bound, i32 %beta, i32* %best, i32* %threat, i32* %donull, i32 %depth.addr.1)
  switch i32 %call121, label %sw.epilog [
    i32 3, label %sw.bb
    i32 1, label %sw.bb122
    i32 2, label %sw.bb126
    i32 0, label %sw.bb130
    i32 4, label %sw.bb131
  ]

sw.bb:                                            ; preds = %if.end120
  %i56 = load i32, i32* %bound, align 4
  br label %return

sw.bb122:                                         ; preds = %if.end120
  %i57 = load i32, i32* %bound, align 4
  %cmp123 = icmp sle i32 %i57, %alpha
  br i1 %cmp123, label %if.then124, label %if.end125

if.then124:                                       ; preds = %sw.bb122
  %i58 = load i32, i32* %bound, align 4
  br label %return

if.end125:                                        ; preds = %sw.bb122
  br label %sw.epilog

sw.bb126:                                         ; preds = %if.end120
  %i59 = load i32, i32* %bound, align 4
  %cmp127 = icmp sge i32 %i59, %beta
  br i1 %cmp127, label %if.then128, label %if.end129

if.then128:                                       ; preds = %sw.bb126
  %i60 = load i32, i32* %bound, align 4
  br label %return

if.end129:                                        ; preds = %sw.bb126
  br label %sw.epilog

sw.bb130:                                         ; preds = %if.end120
  br label %sw.epilog

sw.bb131:                                         ; preds = %if.end120
  store i32 -1, i32* %best, align 4
  store i32 0, i32* %threat, align 4
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.bb131, %sw.bb130, %if.end129, %if.end125, %if.end120
  %i61 = load i32, i32* %best, align 4
  %cmp132 = icmp eq i32 %i61, 500
  br i1 %cmp132, label %if.then133, label %if.end134

if.then133:                                       ; preds = %sw.epilog
  store i32 -1, i32* %best, align 4
  br label %if.end134

if.end134:                                        ; preds = %if.then133, %sw.epilog
  %i62 = load i32, i32* @ep_square, align 4
  %i63 = load i32, i32* @Variant, align 4
  %cmp135 = icmp eq i32 %i63, 4
  br i1 %cmp135, label %if.then136, label %if.end167

if.then136:                                       ; preds = %if.end134
  %call137 = call i32 @losers_eval()
  store i32 %call137, i32* %i, align 4
  %i64 = load i32, i32* %i, align 4
  %call138 = call i32 @abs(i32 %i64) #10
  %cmp139 = icmp eq i32 %call138, 1000000
  br i1 %cmp139, label %if.then140, label %if.end148

if.then140:                                       ; preds = %if.then136
  %i65 = load i32, i32* %i, align 4
  %cmp141 = icmp sgt i32 %i65, 0
  br i1 %cmp141, label %cond.true142, label %cond.false144

cond.true142:                                     ; preds = %if.then140
  %i66 = load i32, i32* %i, align 4
  %i67 = load i32, i32* @ply, align 4
  %sub143 = sub nsw i32 %i66, %i67
  br label %cond.end146

cond.false144:                                    ; preds = %if.then140
  %i68 = load i32, i32* %i, align 4
  %i69 = load i32, i32* @ply, align 4
  %add145 = add nsw i32 %i68, %i69
  br label %cond.end146

cond.end146:                                      ; preds = %cond.false144, %cond.true142
  %cond147 = phi i32 [ %sub143, %cond.true142 ], [ %add145, %cond.false144 ]
  br label %return

if.end148:                                        ; preds = %if.then136
  store i32 1, i32* @captures, align 4
  %arrayidx149 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %moves, i64 0, i64 0
  call void @gen(%struct.move_s* %arrayidx149)
  %i70 = load i32, i32* @numb_moves, align 4
  store i32 0, i32* @captures, align 4
  %tobool150 = icmp ne i32 %i70, 0
  br i1 %tobool150, label %if.then151, label %if.end162

if.then151:                                       ; preds = %if.end148
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then151
  %legalmoves.0 = phi i32 [ 0, %if.then151 ], [ %legalmoves.1, %for.inc ]
  %i71 = load i32, i32* %i, align 4
  %cmp152 = icmp slt i32 %i71, %i70
  br i1 %cmp152, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %arrayidx153 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %moves, i64 0, i64 0
  %i72 = load i32, i32* %i, align 4
  call void @make(%struct.move_s* %arrayidx153, i32 %i72)
  %arrayidx154 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %moves, i64 0, i64 0
  %i73 = load i32, i32* %i, align 4
  %call155 = call i32 @check_legal(%struct.move_s* %arrayidx154, i32 %i73, i32 %i21)
  %tobool156 = icmp ne i32 %call155, 0
  br i1 %tobool156, label %if.then157, label %if.end159

if.then157:                                       ; preds = %for.body
  %inc158 = add nsw i32 %legalmoves.0, 1
  br label %if.end159

if.end159:                                        ; preds = %if.then157, %for.body
  %legalmoves.1 = phi i32 [ %inc158, %if.then157 ], [ %legalmoves.0, %for.body ]
  %arrayidx160 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %moves, i64 0, i64 0
  %i74 = load i32, i32* %i, align 4
  call void @unmake(%struct.move_s* %arrayidx160, i32 %i74)
  br label %for.inc

for.inc:                                          ; preds = %if.end159
  %i75 = load i32, i32* %i, align 4
  %inc161 = add nsw i32 %i75, 1
  store i32 %inc161, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end162

if.end162:                                        ; preds = %for.end, %if.end148
  %legalmoves.2 = phi i32 [ %legalmoves.0, %for.end ], [ 0, %if.end148 ]
  %tobool163 = icmp ne i32 %legalmoves.2, 0
  br i1 %tobool163, label %if.end166, label %if.then164

if.then164:                                       ; preds = %if.end162
  store i32 0, i32* @captures, align 4
  %arrayidx165 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %moves, i64 0, i64 0
  call void @gen(%struct.move_s* %arrayidx165)
  %i76 = load i32, i32* @numb_moves, align 4
  br label %if.end166

if.end166:                                        ; preds = %if.then164, %if.end162
  %num_moves.0 = phi i32 [ %i70, %if.end162 ], [ %i76, %if.then164 ]
  br label %if.end167

if.end167:                                        ; preds = %if.end166, %if.end134
  %num_moves.1 = phi i32 [ %num_moves.0, %if.end166 ], [ 0, %if.end134 ]
  %cmp168 = icmp eq i32 %is_null, 0
  br i1 %cmp168, label %land.lhs.true169, label %if.else243

land.lhs.true169:                                 ; preds = %if.end167
  %i77 = load i32, i32* @phase, align 4
  %cmp170 = icmp ne i32 %i77, 2
  br i1 %cmp170, label %land.lhs.true175, label %lor.lhs.false171

lor.lhs.false171:                                 ; preds = %land.lhs.true169
  %i78 = load i32, i32* @phase, align 4
  %cmp172 = icmp eq i32 %i78, 2
  br i1 %cmp172, label %land.lhs.true173, label %if.else243

land.lhs.true173:                                 ; preds = %lor.lhs.false171
  %cmp174 = icmp sle i32 %depth.addr.1, 6
  br i1 %cmp174, label %land.lhs.true175, label %if.else243

land.lhs.true175:                                 ; preds = %land.lhs.true173, %land.lhs.true169
  %tobool176 = icmp ne i32 %i21, 0
  br i1 %tobool176, label %if.else243, label %land.lhs.true177

land.lhs.true177:                                 ; preds = %land.lhs.true175
  %i79 = load i32, i32* %donull, align 4
  %tobool178 = icmp ne i32 %i79, 0
  br i1 %tobool178, label %land.lhs.true179, label %if.else243

land.lhs.true179:                                 ; preds = %land.lhs.true177
  %i80 = load i32, i32* @searching_pv, align 4
  %tobool180 = icmp ne i32 %i80, 0
  br i1 %tobool180, label %if.else243, label %land.lhs.true181

land.lhs.true181:                                 ; preds = %land.lhs.true179
  %i81 = load i32, i32* %threat, align 4
  %cmp182 = icmp eq i32 %i81, 0
  br i1 %cmp182, label %land.lhs.true183, label %if.else243

land.lhs.true183:                                 ; preds = %land.lhs.true181
  %i82 = load i32, i32* @Variant, align 4
  %cmp184 = icmp ne i32 %i82, 3
  br i1 %cmp184, label %land.lhs.true185, label %lor.lhs.false187

land.lhs.true185:                                 ; preds = %land.lhs.true183
  %i83 = load i32, i32* @Variant, align 4
  %cmp186 = icmp ne i32 %i83, 4
  br i1 %cmp186, label %if.then193, label %lor.lhs.false187

lor.lhs.false187:                                 ; preds = %land.lhs.true185, %land.lhs.true183
  %i84 = load i32, i32* @Variant, align 4
  %cmp188 = icmp eq i32 %i84, 4
  br i1 %cmp188, label %land.lhs.true189, label %if.else243

land.lhs.true189:                                 ; preds = %lor.lhs.false187
  %arrayidx190 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %moves, i64 0, i64 0
  %captured191 = getelementptr inbounds %struct.move_s, %struct.move_s* %arrayidx190, i32 0, i32 2
  %i85 = load i32, i32* %captured191, align 8
  %cmp192 = icmp eq i32 %i85, 13
  br i1 %cmp192, label %if.then193, label %if.else243

if.then193:                                       ; preds = %land.lhs.true189, %land.lhs.true185
  store i32 0, i32* @ep_square, align 4
  %i86 = load i32, i32* @white_to_move, align 4
  %xor = xor i32 %i86, 1
  store i32 %xor, i32* @white_to_move, align 4
  %i87 = load i32, i32* @ply, align 4
  %inc194 = add nsw i32 %i87, 1
  store i32 %inc194, i32* @ply, align 4
  %i88 = load i32, i32* @fifty, align 4
  %inc195 = add nsw i32 %i88, 1
  store i32 %inc195, i32* @fifty, align 4
  %i89 = load i32, i32* @hash, align 4
  %xor196 = xor i32 %i89, -559038737
  store i32 %xor196, i32* @hash, align 4
  %i90 = load i32, i32* @Variant, align 4
  %cmp197 = icmp ne i32 %i90, 2
  br i1 %cmp197, label %land.lhs.true198, label %if.else215

land.lhs.true198:                                 ; preds = %if.then193
  %i91 = load i32, i32* @Variant, align 4
  %cmp199 = icmp ne i32 %i91, 4
  br i1 %cmp199, label %if.then200, label %if.else215

if.then200:                                       ; preds = %land.lhs.true198
  %sub201 = sub nsw i32 0, %beta
  %sub202 = sub nsw i32 0, %beta
  %add203 = add nsw i32 %sub202, 1
  %cmp204 = icmp sgt i32 %depth.addr.1, 3
  br i1 %cmp204, label %cond.true205, label %cond.false208

cond.true205:                                     ; preds = %if.then200
  %sub206 = sub nsw i32 %depth.addr.1, 2
  %sub207 = sub nsw i32 %sub206, 1
  br label %cond.end211

cond.false208:                                    ; preds = %if.then200
  %sub209 = sub nsw i32 %depth.addr.1, 1
  %sub210 = sub nsw i32 %sub209, 1
  br label %cond.end211

cond.end211:                                      ; preds = %cond.false208, %cond.true205
  %cond212 = phi i32 [ %sub207, %cond.true205 ], [ %sub210, %cond.false208 ]
  %call213 = call i32 @search(i32 %sub201, i32 %add203, i32 %cond212, i32 1)
  %sub214 = sub nsw i32 0, %call213
  br label %if.end223

if.else215:                                       ; preds = %land.lhs.true198, %if.then193
  %sub216 = sub nsw i32 0, %beta
  %sub217 = sub nsw i32 0, %beta
  %add218 = add nsw i32 %sub217, 1
  %sub219 = sub nsw i32 %depth.addr.1, 3
  %sub220 = sub nsw i32 %sub219, 1
  %call221 = call i32 @search(i32 %sub216, i32 %add218, i32 %sub220, i32 1)
  %sub222 = sub nsw i32 0, %call221
  br label %if.end223

if.end223:                                        ; preds = %if.else215, %cond.end211
  %score.0 = phi i32 [ %sub214, %cond.end211 ], [ %sub222, %if.else215 ]
  %i92 = load i32, i32* @hash, align 4
  %xor224 = xor i32 %i92, -559038737
  store i32 %xor224, i32* @hash, align 4
  %i93 = load i32, i32* @fifty, align 4
  %dec = add nsw i32 %i93, -1
  store i32 %dec, i32* @fifty, align 4
  %i94 = load i32, i32* @ply, align 4
  %dec225 = add nsw i32 %i94, -1
  store i32 %dec225, i32* @ply, align 4
  %i95 = load i32, i32* @white_to_move, align 4
  %xor226 = xor i32 %i95, 1
  store i32 %xor226, i32* @white_to_move, align 4
  store i32 %i62, i32* @ep_square, align 4
  %i96 = load i32, i32* @time_exit, align 4
  %tobool227 = icmp ne i32 %i96, 0
  br i1 %tobool227, label %if.then228, label %if.end229

if.then228:                                       ; preds = %if.end223
  br label %return

if.end229:                                        ; preds = %if.end223
  %i97 = load i32, i32* @NTries, align 4
  %inc230 = add i32 %i97, 1
  store i32 %inc230, i32* @NTries, align 4
  %cmp231 = icmp sge i32 %score.0, %beta
  br i1 %cmp231, label %if.then232, label %if.else234

if.then232:                                       ; preds = %if.end229
  %i98 = load i32, i32* @NCuts, align 4
  %inc233 = add i32 %i98, 1
  store i32 %inc233, i32* @NCuts, align 4
  call void @StoreTT(i32 %score.0, i32 %alpha, i32 %beta, i32 500, i32 0, i32 %depth.addr.1)
  br label %return

if.else234:                                       ; preds = %if.end229
  %cmp235 = icmp slt i32 %score.0, -999900
  br i1 %cmp235, label %if.then236, label %if.end241

if.then236:                                       ; preds = %if.else234
  store i32 1, i32* %threat, align 4
  %i99 = load i32, i32* @TExt, align 4
  %inc237 = add i32 %i99, 1
  store i32 %inc237, i32* @TExt, align 4
  %inc238 = add nsw i32 %depth.addr.1, 1
  %inc239 = add nsw i32 %extend.1, 1
  %i100 = load i32, i32* @ext_onerep, align 4
  %inc240 = add i32 %i100, 1
  store i32 %inc240, i32* @ext_onerep, align 4
  br label %if.end241

if.end241:                                        ; preds = %if.then236, %if.else234
  %extend.2 = phi i32 [ %inc239, %if.then236 ], [ %extend.1, %if.else234 ]
  %depth.addr.2 = phi i32 [ %inc238, %if.then236 ], [ %depth.addr.1, %if.else234 ]
  br label %if.end242

if.end242:                                        ; preds = %if.end241
  br label %if.end251

if.else243:                                       ; preds = %land.lhs.true189, %lor.lhs.false187, %land.lhs.true181, %land.lhs.true179, %land.lhs.true177, %land.lhs.true175, %land.lhs.true173, %lor.lhs.false171, %if.end167
  %i101 = load i32, i32* %threat, align 4
  %cmp244 = icmp eq i32 %i101, 1
  br i1 %cmp244, label %if.then245, label %if.end250

if.then245:                                       ; preds = %if.else243
  %i102 = load i32, i32* @TExt, align 4
  %inc246 = add i32 %i102, 1
  store i32 %inc246, i32* @TExt, align 4
  %inc247 = add nsw i32 %depth.addr.1, 1
  %inc248 = add nsw i32 %extend.1, 1
  %i103 = load i32, i32* @ext_onerep, align 4
  %inc249 = add i32 %i103, 1
  store i32 %inc249, i32* @ext_onerep, align 4
  br label %if.end250

if.end250:                                        ; preds = %if.then245, %if.else243
  %extend.3 = phi i32 [ %inc248, %if.then245 ], [ %extend.1, %if.else243 ]
  %depth.addr.3 = phi i32 [ %inc247, %if.then245 ], [ %depth.addr.1, %if.else243 ]
  br label %if.end251

if.end251:                                        ; preds = %if.end250, %if.end242
  %extend.4 = phi i32 [ %extend.3, %if.end250 ], [ %extend.2, %if.end242 ]
  %depth.addr.4 = phi i32 [ %depth.addr.3, %if.end250 ], [ %depth.addr.2, %if.end242 ]
  %i104 = load i32, i32* @Variant, align 4
  %cmp252 = icmp ne i32 %i104, 4
  br i1 %cmp252, label %if.then253, label %if.end255

if.then253:                                       ; preds = %if.end251
  %arrayidx254 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %moves, i64 0, i64 0
  call void @gen(%struct.move_s* %arrayidx254)
  %i105 = load i32, i32* @numb_moves, align 4
  br label %if.end255

if.end255:                                        ; preds = %if.then253, %if.end251
  %num_moves.2 = phi i32 [ %i105, %if.then253 ], [ %num_moves.1, %if.end251 ]
  %i106 = load i32, i32* @cfg_onerep, align 4
  %tobool256 = icmp ne i32 %i106, 0
  br i1 %tobool256, label %land.lhs.true257, label %if.end278

land.lhs.true257:                                 ; preds = %if.end255
  %tobool258 = icmp ne i32 %i21, 0
  br i1 %tobool258, label %if.then259, label %if.end278

if.then259:                                       ; preds = %land.lhs.true257
  %tobool260 = icmp ne i32 %num_moves.2, 0
  br i1 %tobool260, label %if.then261, label %if.end277

if.then261:                                       ; preds = %if.then259
  store i32 0, i32* %i, align 4
  br label %for.cond262

for.cond262:                                      ; preds = %for.inc274, %if.then261
  %legalmoves.4 = phi i32 [ 0, %if.then261 ], [ %legalmoves.5, %for.inc274 ]
  %i107 = load i32, i32* %i, align 4
  %cmp263 = icmp slt i32 %i107, %num_moves.2
  br i1 %cmp263, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %for.cond262
  %cmp264 = icmp slt i32 %legalmoves.4, 2
  br label %land.end

land.end:                                         ; preds = %land.rhs, %for.cond262
  %i108 = phi i1 [ false, %for.cond262 ], [ %cmp264, %land.rhs ]
  br i1 %i108, label %for.body265, label %for.end276

for.body265:                                      ; preds = %land.end
  %arrayidx266 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %moves, i64 0, i64 0
  %i109 = load i32, i32* %i, align 4
  call void @make(%struct.move_s* %arrayidx266, i32 %i109)
  %arrayidx267 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %moves, i64 0, i64 0
  %i110 = load i32, i32* %i, align 4
  %call268 = call i32 @check_legal(%struct.move_s* %arrayidx267, i32 %i110, i32 %i21)
  %tobool269 = icmp ne i32 %call268, 0
  br i1 %tobool269, label %if.then270, label %if.end272

if.then270:                                       ; preds = %for.body265
  %inc271 = add nsw i32 %legalmoves.4, 1
  br label %if.end272

if.end272:                                        ; preds = %if.then270, %for.body265
  %legalmoves.5 = phi i32 [ %inc271, %if.then270 ], [ %legalmoves.4, %for.body265 ]
  %arrayidx273 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %moves, i64 0, i64 0
  %i111 = load i32, i32* %i, align 4
  call void @unmake(%struct.move_s* %arrayidx273, i32 %i111)
  br label %for.inc274

for.inc274:                                       ; preds = %if.end272
  %i112 = load i32, i32* %i, align 4
  %inc275 = add nsw i32 %i112, 1
  store i32 %inc275, i32* %i, align 4
  br label %for.cond262

for.end276:                                       ; preds = %land.end
  br label %if.end277

if.end277:                                        ; preds = %for.end276, %if.then259
  %legalmoves.6 = phi i32 [ %legalmoves.4, %for.end276 ], [ 0, %if.then259 ]
  br label %if.end278

if.end278:                                        ; preds = %if.end277, %land.lhs.true257, %if.end255
  %legalmoves.7 = phi i32 [ %legalmoves.6, %if.end277 ], [ 0, %land.lhs.true257 ], [ 0, %if.end255 ]
  %i113 = load i32, i32* @ply, align 4
  %cmp279 = icmp slt i32 %i113, 300
  br i1 %cmp279, label %if.then280, label %if.end303

if.then280:                                       ; preds = %if.end278
  %i114 = load i32, i32* @Variant, align 4
  %cmp281 = icmp eq i32 %i114, 3
  br i1 %cmp281, label %land.lhs.true282, label %if.else289

land.lhs.true282:                                 ; preds = %if.then280
  %cmp283 = icmp eq i32 %num_moves.2, 1
  br i1 %cmp283, label %if.then284, label %if.else289

if.then284:                                       ; preds = %land.lhs.true282
  %inc285 = add nsw i32 %depth.addr.4, 1
  %i115 = load i32, i32* @ext_onerep, align 4
  %inc286 = add i32 %i115, 1
  store i32 %inc286, i32* @ext_onerep, align 4
  %i116 = load i32, i32* @ply, align 4
  %idxprom287 = sext i32 %i116 to i64
  %arrayidx288 = getelementptr inbounds [300 x i32], [300 x i32]* @singular, i64 0, i64 %idxprom287
  store i32 1, i32* %arrayidx288, align 4
  br label %if.end302

if.else289:                                       ; preds = %land.lhs.true282, %if.then280
  %cmp290 = icmp eq i32 %legalmoves.7, 1
  br i1 %cmp290, label %land.lhs.true291, label %if.end301

land.lhs.true291:                                 ; preds = %if.else289
  %i117 = load i32, i32* @ply, align 4
  %sub292 = sub nsw i32 %i117, 2
  %idxprom293 = sext i32 %sub292 to i64
  %arrayidx294 = getelementptr inbounds [300 x i32], [300 x i32]* @singular, i64 0, i64 %idxprom293
  %i118 = load i32, i32* %arrayidx294, align 4
  %tobool295 = icmp ne i32 %i118, 0
  br i1 %tobool295, label %if.end301, label %if.then296

if.then296:                                       ; preds = %land.lhs.true291
  %inc297 = add nsw i32 %depth.addr.4, 1
  %i119 = load i32, i32* @ext_onerep, align 4
  %inc298 = add i32 %i119, 1
  store i32 %inc298, i32* @ext_onerep, align 4
  %i120 = load i32, i32* @ply, align 4
  %idxprom299 = sext i32 %i120 to i64
  %arrayidx300 = getelementptr inbounds [300 x i32], [300 x i32]* @singular, i64 0, i64 %idxprom299
  store i32 1, i32* %arrayidx300, align 4
  br label %if.end301

if.end301:                                        ; preds = %if.then296, %land.lhs.true291, %if.else289
  %depth.addr.5 = phi i32 [ %depth.addr.4, %land.lhs.true291 ], [ %inc297, %if.then296 ], [ %depth.addr.4, %if.else289 ]
  br label %if.end302

if.end302:                                        ; preds = %if.end301, %if.then284
  %depth.addr.6 = phi i32 [ %inc285, %if.then284 ], [ %depth.addr.5, %if.end301 ]
  br label %if.end303

if.end303:                                        ; preds = %if.end302, %if.end278
  %depth.addr.7 = phi i32 [ %depth.addr.6, %if.end302 ], [ %depth.addr.4, %if.end278 ]
  %i121 = load i32, i32* @phase, align 4
  %cmp304 = icmp ne i32 %i121, 2
  br i1 %cmp304, label %land.lhs.true305, label %if.end354

land.lhs.true305:                                 ; preds = %if.end303
  %i122 = load i32, i32* @Variant, align 4
  %cmp306 = icmp ne i32 %i122, 3
  br i1 %cmp306, label %land.lhs.true307, label %if.end354

land.lhs.true307:                                 ; preds = %land.lhs.true305
  %i123 = load i32, i32* @cfg_futprune, align 4
  %tobool308 = icmp ne i32 %i123, 0
  br i1 %tobool308, label %if.then309, label %if.end354

if.then309:                                       ; preds = %land.lhs.true307
  %i124 = load i32, i32* @white_to_move, align 4
  %tobool310 = icmp ne i32 %i124, 0
  br i1 %tobool310, label %cond.true311, label %cond.false312

cond.true311:                                     ; preds = %if.then309
  %i125 = load i32, i32* @Material, align 4
  br label %cond.end314

cond.false312:                                    ; preds = %if.then309
  %i126 = load i32, i32* @Material, align 4
  %sub313 = sub nsw i32 0, %i126
  br label %cond.end314

cond.end314:                                      ; preds = %cond.false312, %cond.true311
  %cond315 = phi i32 [ %i125, %cond.true311 ], [ %sub313, %cond.false312 ]
  %add316 = add nsw i32 %cond315, 900
  %tobool317 = icmp ne i32 %extend.4, 0
  br i1 %tobool317, label %if.end323, label %land.lhs.true318

land.lhs.true318:                                 ; preds = %cond.end314
  %cmp319 = icmp eq i32 %depth.addr.7, 3
  br i1 %cmp319, label %land.lhs.true320, label %if.end323

land.lhs.true320:                                 ; preds = %land.lhs.true318
  %cmp321 = icmp sle i32 %add316, %alpha
  br i1 %cmp321, label %if.then322, label %if.end323

if.then322:                                       ; preds = %land.lhs.true320
  br label %if.end323

if.end323:                                        ; preds = %if.then322, %land.lhs.true320, %land.lhs.true318, %cond.end314
  %depth.addr.8 = phi i32 [ %depth.addr.7, %cond.end314 ], [ 2, %if.then322 ], [ %depth.addr.7, %land.lhs.true320 ], [ %depth.addr.7, %land.lhs.true318 ]
  %i127 = load i32, i32* @white_to_move, align 4
  %tobool324 = icmp ne i32 %i127, 0
  br i1 %tobool324, label %cond.true325, label %cond.false326

cond.true325:                                     ; preds = %if.end323
  %i128 = load i32, i32* @Material, align 4
  br label %cond.end328

cond.false326:                                    ; preds = %if.end323
  %i129 = load i32, i32* @Material, align 4
  %sub327 = sub nsw i32 0, %i129
  br label %cond.end328

cond.end328:                                      ; preds = %cond.false326, %cond.true325
  %cond329 = phi i32 [ %i128, %cond.true325 ], [ %sub327, %cond.false326 ]
  %add330 = add nsw i32 %cond329, 500
  %tobool331 = icmp ne i32 %extend.4, 0
  br i1 %tobool331, label %if.end337, label %land.lhs.true332

land.lhs.true332:                                 ; preds = %cond.end328
  %cmp333 = icmp eq i32 %depth.addr.8, 2
  br i1 %cmp333, label %land.lhs.true334, label %if.end337

land.lhs.true334:                                 ; preds = %land.lhs.true332
  %cmp335 = icmp sle i32 %add330, %alpha
  br i1 %cmp335, label %if.then336, label %if.end337

if.then336:                                       ; preds = %land.lhs.true334
  br label %if.end337

if.end337:                                        ; preds = %if.then336, %land.lhs.true334, %land.lhs.true332, %cond.end328
  %fmax.0 = phi i32 [ -1000000, %cond.end328 ], [ %add330, %if.then336 ], [ -1000000, %land.lhs.true334 ], [ -1000000, %land.lhs.true332 ]
  %selective.0 = phi i32 [ 0, %cond.end328 ], [ 1, %if.then336 ], [ 0, %land.lhs.true334 ], [ 0, %land.lhs.true332 ]
  %best_score.0 = phi i32 [ -1000000, %cond.end328 ], [ %add330, %if.then336 ], [ -1000000, %land.lhs.true334 ], [ -1000000, %land.lhs.true332 ]
  %i130 = load i32, i32* @white_to_move, align 4
  %tobool338 = icmp ne i32 %i130, 0
  br i1 %tobool338, label %cond.true339, label %cond.false340

cond.true339:                                     ; preds = %if.end337
  %i131 = load i32, i32* @Material, align 4
  br label %cond.end342

cond.false340:                                    ; preds = %if.end337
  %i132 = load i32, i32* @Material, align 4
  %sub341 = sub nsw i32 0, %i132
  br label %cond.end342

cond.end342:                                      ; preds = %cond.false340, %cond.true339
  %cond343 = phi i32 [ %i131, %cond.true339 ], [ %sub341, %cond.false340 ]
  %i133 = load i32, i32* @Variant, align 4
  %cmp344 = icmp eq i32 %i133, 2
  %i134 = zext i1 %cmp344 to i64
  %cond345 = select i1 %cmp344, i32 150, i32 200
  %add346 = add nsw i32 %cond343, %cond345
  %tobool347 = icmp ne i32 %extend.4, 0
  br i1 %tobool347, label %if.end353, label %land.lhs.true348

land.lhs.true348:                                 ; preds = %cond.end342
  %cmp349 = icmp eq i32 %depth.addr.8, 1
  br i1 %cmp349, label %land.lhs.true350, label %if.end353

land.lhs.true350:                                 ; preds = %land.lhs.true348
  %cmp351 = icmp sle i32 %add346, %alpha
  br i1 %cmp351, label %if.then352, label %if.end353

if.then352:                                       ; preds = %land.lhs.true350
  br label %if.end353

if.end353:                                        ; preds = %if.then352, %land.lhs.true350, %land.lhs.true348, %cond.end342
  %fmax.1 = phi i32 [ %fmax.0, %cond.end342 ], [ %add346, %if.then352 ], [ %fmax.0, %land.lhs.true350 ], [ %fmax.0, %land.lhs.true348 ]
  %selective.1 = phi i32 [ %selective.0, %cond.end342 ], [ 1, %if.then352 ], [ %selective.0, %land.lhs.true350 ], [ %selective.0, %land.lhs.true348 ]
  %best_score.1 = phi i32 [ %best_score.0, %cond.end342 ], [ %add346, %if.then352 ], [ %best_score.0, %land.lhs.true350 ], [ %best_score.0, %land.lhs.true348 ]
  br label %if.end354

if.end354:                                        ; preds = %if.end353, %land.lhs.true307, %land.lhs.true305, %if.end303
  %fmax.2 = phi i32 [ %fmax.1, %if.end353 ], [ -1000000, %land.lhs.true307 ], [ -1000000, %land.lhs.true305 ], [ -1000000, %if.end303 ]
  %selective.2 = phi i32 [ %selective.1, %if.end353 ], [ 0, %land.lhs.true307 ], [ 0, %land.lhs.true305 ], [ 0, %if.end303 ]
  %best_score.2 = phi i32 [ %best_score.1, %if.end353 ], [ -1000000, %land.lhs.true307 ], [ -1000000, %land.lhs.true305 ], [ -1000000, %if.end303 ]
  %depth.addr.9 = phi i32 [ %depth.addr.8, %if.end353 ], [ %depth.addr.7, %land.lhs.true307 ], [ %depth.addr.7, %land.lhs.true305 ], [ %depth.addr.7, %if.end303 ]
  %cmp355 = icmp sgt i32 %num_moves.2, 0
  br i1 %cmp355, label %if.then356, label %if.else791

if.then356:                                       ; preds = %if.end354
  %arrayidx357 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %moves, i64 0, i64 0
  %arrayidx358 = getelementptr inbounds [512 x i32], [512 x i32]* %move_ordering, i64 0, i64 0
  %arrayidx359 = getelementptr inbounds [512 x i32], [512 x i32]* %see_values, i64 0, i64 0
  %i135 = load i32, i32* %best, align 4
  call void @order_moves(%struct.move_s* %arrayidx357, i32* %arrayidx358, i32* %arrayidx359, i32 %num_moves.2, i32 %i135)
  br label %while.cond

while.cond:                                       ; preds = %if.end790, %if.then356
  %first.0 = phi i32 [ 1, %if.then356 ], [ %first.1, %if.end790 ]
  %best_score.3 = phi i32 [ %best_score.2, %if.then356 ], [ %best_score.10, %if.end790 ]
  %sbest.0 = phi i32 [ -1, %if.then356 ], [ %sbest.1, %if.end790 ]
  %no_moves.0 = phi i32 [ 1, %if.then356 ], [ %no_moves.1, %if.end790 ]
  %score.1 = phi i32 [ -1000000, %if.then356 ], [ %score.6, %if.end790 ]
  %legalmoves.8 = phi i32 [ %legalmoves.7, %if.then356 ], [ %legalmoves.9, %if.end790 ]
  %alpha.addr.0 = phi i32 [ %alpha, %if.then356 ], [ %alpha.addr.1, %if.end790 ]
  %arrayidx360 = getelementptr inbounds [512 x i32], [512 x i32]* %move_ordering, i64 0, i64 0
  %call361 = call i32 @remove_one(i32* %i, i32* %arrayidx360, i32 %num_moves.2)
  %tobool362 = icmp ne i32 %call361, 0
  br i1 %tobool362, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %arrayidx363 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %moves, i64 0, i64 0
  %i136 = load i32, i32* %i, align 4
  call void @make(%struct.move_s* %arrayidx363, i32 %i136)
  %i137 = load i32, i32* @hash, align 4
  %i138 = load i32, i32* @move_number, align 4
  %i139 = load i32, i32* @ply, align 4
  %add364 = add nsw i32 %i138, %i139
  %sub365 = sub nsw i32 %add364, 1
  %idxprom366 = sext i32 %sub365 to i64
  %arrayidx367 = getelementptr inbounds [600 x i32], [600 x i32]* @hash_history, i64 0, i64 %idxprom366
  store i32 %i137, i32* %arrayidx367, align 4
  %i140 = load i32, i32* @ply, align 4
  %sub368 = sub nsw i32 %i140, 1
  %idxprom369 = sext i32 %sub368 to i64
  %arrayidx370 = getelementptr inbounds [300 x %struct.move_s], [300 x %struct.move_s]* @path, i64 0, i64 %idxprom369
  %i141 = load i32, i32* %i, align 4
  %idxprom371 = sext i32 %i141 to i64
  %arrayidx372 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %moves, i64 0, i64 %idxprom371
  %i142 = bitcast %struct.move_s* %arrayidx370 to i8*
  %i143 = bitcast %struct.move_s* %arrayidx372 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %i142, i8* align 8 %i143, i64 24, i1 false)
  %arrayidx373 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %moves, i64 0, i64 0
  %i144 = load i32, i32* %i, align 4
  %call374 = call i32 @check_legal(%struct.move_s* %arrayidx373, i32 %i144, i32 %i21)
  %tobool375 = icmp ne i32 %call374, 0
  br i1 %tobool375, label %if.then376, label %if.end562

if.then376:                                       ; preds = %while.body
  %arrayidx377 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %moves, i64 0, i64 0
  %i145 = load i32, i32* %i, align 4
  %call378 = call i32 @f_in_check(%struct.move_s* %arrayidx377, i32 %i145)
  %i146 = load i32, i32* @ply, align 4
  %idxprom379 = sext i32 %i146 to i64
  %arrayidx380 = getelementptr inbounds [300 x i32], [300 x i32]* @checks, i64 0, i64 %idxprom379
  store i32 %call378, i32* %arrayidx380, align 4
  %tobool381 = icmp ne i32 %call378, 0
  br i1 %tobool381, label %if.end419, label %land.lhs.true382

land.lhs.true382:                                 ; preds = %if.then376
  %i147 = load i32, i32* @Variant, align 4
  %cmp383 = icmp eq i32 %i147, 2
  br i1 %cmp383, label %land.lhs.true388, label %lor.lhs.false384

lor.lhs.false384:                                 ; preds = %land.lhs.true382
  %i148 = load i32, i32* @Variant, align 4
  %cmp385 = icmp eq i32 %i148, 3
  br i1 %cmp385, label %land.lhs.true388, label %lor.lhs.false386

lor.lhs.false386:                                 ; preds = %lor.lhs.false384
  %i149 = load i32, i32* @Variant, align 4
  %cmp387 = icmp eq i32 %i149, 4
  br i1 %cmp387, label %land.lhs.true388, label %if.end419

land.lhs.true388:                                 ; preds = %lor.lhs.false386, %lor.lhs.false384, %land.lhs.true382
  %cmp389 = icmp slt i32 %depth.addr.9, 3
  br i1 %cmp389, label %land.lhs.true390, label %if.end419

land.lhs.true390:                                 ; preds = %land.lhs.true388
  %i150 = load i32, i32* %i, align 4
  %idxprom391 = sext i32 %i150 to i64
  %arrayidx392 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %moves, i64 0, i64 %idxprom391
  %target = getelementptr inbounds %struct.move_s, %struct.move_s* %arrayidx392, i32 0, i32 1
  %i151 = load i32, i32* %target, align 4
  %idxprom393 = sext i32 %i151 to i64
  %arrayidx394 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom393
  %i152 = load i32, i32* %arrayidx394, align 4
  %cmp395 = icmp eq i32 %i152, 1
  br i1 %cmp395, label %land.lhs.true396, label %lor.lhs.false403

land.lhs.true396:                                 ; preds = %land.lhs.true390
  %i153 = load i32, i32* %i, align 4
  %idxprom397 = sext i32 %i153 to i64
  %arrayidx398 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %moves, i64 0, i64 %idxprom397
  %target399 = getelementptr inbounds %struct.move_s, %struct.move_s* %arrayidx398, i32 0, i32 1
  %i154 = load i32, i32* %target399, align 4
  %idxprom400 = sext i32 %i154 to i64
  %arrayidx401 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xrank to [144 x i32]*), i64 0, i64 %idxprom400
  %i155 = load i32, i32* %arrayidx401, align 4
  %cmp402 = icmp sge i32 %i155, 6
  br i1 %cmp402, label %if.then417, label %lor.lhs.false403

lor.lhs.false403:                                 ; preds = %land.lhs.true396, %land.lhs.true390
  %i156 = load i32, i32* %i, align 4
  %idxprom404 = sext i32 %i156 to i64
  %arrayidx405 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %moves, i64 0, i64 %idxprom404
  %target406 = getelementptr inbounds %struct.move_s, %struct.move_s* %arrayidx405, i32 0, i32 1
  %i157 = load i32, i32* %target406, align 4
  %idxprom407 = sext i32 %i157 to i64
  %arrayidx408 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom407
  %i158 = load i32, i32* %arrayidx408, align 4
  %cmp409 = icmp eq i32 %i158, 2
  br i1 %cmp409, label %land.lhs.true410, label %if.end419

land.lhs.true410:                                 ; preds = %lor.lhs.false403
  %i159 = load i32, i32* %i, align 4
  %idxprom411 = sext i32 %i159 to i64
  %arrayidx412 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %moves, i64 0, i64 %idxprom411
  %target413 = getelementptr inbounds %struct.move_s, %struct.move_s* %arrayidx412, i32 0, i32 1
  %i160 = load i32, i32* %target413, align 4
  %idxprom414 = sext i32 %i160 to i64
  %arrayidx415 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xrank to [144 x i32]*), i64 0, i64 %idxprom414
  %i161 = load i32, i32* %arrayidx415, align 4
  %cmp416 = icmp sle i32 %i161, 3
  br i1 %cmp416, label %if.then417, label %if.end419

if.then417:                                       ; preds = %land.lhs.true410, %land.lhs.true396
  %inc418 = add nsw i32 0, 1
  br label %if.end419

if.end419:                                        ; preds = %if.then417, %land.lhs.true410, %lor.lhs.false403, %land.lhs.true388, %lor.lhs.false386, %if.then376
  %extend.5 = phi i32 [ 0, %if.then376 ], [ %inc418, %if.then417 ], [ 0, %land.lhs.true410 ], [ 0, %lor.lhs.false403 ], [ 0, %land.lhs.true388 ], [ 0, %lor.lhs.false386 ]
  %i162 = load i32, i32* %i, align 4
  %idxprom420 = sext i32 %i162 to i64
  %arrayidx421 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %moves, i64 0, i64 %idxprom420
  %from = getelementptr inbounds %struct.move_s, %struct.move_s* %arrayidx421, i32 0, i32 0
  %i163 = load i32, i32* %from, align 8
  %cmp422 = icmp eq i32 %i163, 0
  br i1 %cmp422, label %land.lhs.true423, label %if.else436

land.lhs.true423:                                 ; preds = %if.end419
  %cmp424 = icmp sgt i32 %depth.addr.9, 1
  br i1 %cmp424, label %land.lhs.true425, label %if.else436

land.lhs.true425:                                 ; preds = %land.lhs.true423
  %cmp426 = icmp eq i32 %call378, 0
  br i1 %cmp426, label %land.lhs.true427, label %if.else436

land.lhs.true427:                                 ; preds = %land.lhs.true425
  %cmp428 = icmp eq i32 %i21, 0
  br i1 %cmp428, label %land.lhs.true429, label %if.else436

land.lhs.true429:                                 ; preds = %land.lhs.true427
  %i164 = load i32, i32* @searching_pv, align 4
  %tobool430 = icmp ne i32 %i164, 0
  br i1 %tobool430, label %if.else436, label %land.lhs.true431

land.lhs.true431:                                 ; preds = %land.lhs.true429
  %i165 = load i32, i32* @cfg_razordrop, align 4
  %tobool432 = icmp ne i32 %i165, 0
  br i1 %tobool432, label %if.then433, label %if.else436

if.then433:                                       ; preds = %land.lhs.true431
  %i166 = load i32, i32* @razor_drop, align 4
  %inc434 = add i32 %i166, 1
  store i32 %inc434, i32* @razor_drop, align 4
  %dec435 = add nsw i32 %extend.5, -1
  br label %if.end482

if.else436:                                       ; preds = %land.lhs.true431, %land.lhs.true429, %land.lhs.true427, %land.lhs.true425, %land.lhs.true423, %if.end419
  %i167 = load i32, i32* %i, align 4
  %idxprom437 = sext i32 %i167 to i64
  %arrayidx438 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %moves, i64 0, i64 %idxprom437
  %from439 = getelementptr inbounds %struct.move_s, %struct.move_s* %arrayidx438, i32 0, i32 0
  %i168 = load i32, i32* %from439, align 8
  %cmp440 = icmp eq i32 %i168, 0
  br i1 %cmp440, label %land.lhs.true441, label %if.end481

land.lhs.true441:                                 ; preds = %if.else436
  %cmp442 = icmp eq i32 %depth.addr.9, 1
  br i1 %cmp442, label %land.lhs.true443, label %if.end481

land.lhs.true443:                                 ; preds = %land.lhs.true441
  %cmp444 = icmp eq i32 %i21, 0
  br i1 %cmp444, label %land.lhs.true445, label %if.end481

land.lhs.true445:                                 ; preds = %land.lhs.true443
  %i169 = load i32, i32* @cfg_cutdrop, align 4
  %tobool446 = icmp ne i32 %i169, 0
  br i1 %tobool446, label %if.then447, label %if.end481

if.then447:                                       ; preds = %land.lhs.true445
  %i170 = load i32, i32* @white_to_move, align 4
  %tobool448 = icmp ne i32 %i170, 0
  br i1 %tobool448, label %if.then449, label %if.else464

if.then449:                                       ; preds = %if.then447
  %i171 = load i32, i32* %i, align 4
  %idxprom450 = sext i32 %i171 to i64
  %arrayidx451 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %moves, i64 0, i64 %idxprom450
  %target452 = getelementptr inbounds %struct.move_s, %struct.move_s* %arrayidx451, i32 0, i32 1
  %i172 = load i32, i32* %target452, align 4
  %call453 = call i32 @calc_attackers(i32 %i172, i32 1)
  %i173 = load i32, i32* %i, align 4
  %idxprom454 = sext i32 %i173 to i64
  %arrayidx455 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %moves, i64 0, i64 %idxprom454
  %target456 = getelementptr inbounds %struct.move_s, %struct.move_s* %arrayidx455, i32 0, i32 1
  %i174 = load i32, i32* %target456, align 4
  %call457 = call i32 @calc_attackers(i32 %i174, i32 0)
  %sub458 = sub nsw i32 %call453, %call457
  %cmp459 = icmp sgt i32 %sub458, 0
  %conv = zext i1 %cmp459 to i32
  %tobool460 = icmp ne i32 %conv, 0
  br i1 %tobool460, label %if.then461, label %if.end463

if.then461:                                       ; preds = %if.then449
  %i175 = load i32, i32* @drop_cuts, align 4
  %inc462 = add i32 %i175, 1
  store i32 %inc462, i32* @drop_cuts, align 4
  br label %if.end463

if.end463:                                        ; preds = %if.then461, %if.then449
  br label %if.end480

if.else464:                                       ; preds = %if.then447
  %i176 = load i32, i32* %i, align 4
  %idxprom465 = sext i32 %i176 to i64
  %arrayidx466 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %moves, i64 0, i64 %idxprom465
  %target467 = getelementptr inbounds %struct.move_s, %struct.move_s* %arrayidx466, i32 0, i32 1
  %i177 = load i32, i32* %target467, align 4
  %call468 = call i32 @calc_attackers(i32 %i177, i32 0)
  %i178 = load i32, i32* %i, align 4
  %idxprom469 = sext i32 %i178 to i64
  %arrayidx470 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %moves, i64 0, i64 %idxprom469
  %target471 = getelementptr inbounds %struct.move_s, %struct.move_s* %arrayidx470, i32 0, i32 1
  %i179 = load i32, i32* %target471, align 4
  %call472 = call i32 @calc_attackers(i32 %i179, i32 1)
  %sub473 = sub nsw i32 %call468, %call472
  %cmp474 = icmp sgt i32 %sub473, 0
  %conv475 = zext i1 %cmp474 to i32
  %tobool476 = icmp ne i32 %conv475, 0
  br i1 %tobool476, label %if.then477, label %if.end479

if.then477:                                       ; preds = %if.else464
  %i180 = load i32, i32* @drop_cuts, align 4
  %inc478 = add i32 %i180, 1
  store i32 %inc478, i32* @drop_cuts, align 4
  br label %if.end479

if.end479:                                        ; preds = %if.then477, %if.else464
  br label %if.end480

if.end480:                                        ; preds = %if.end479, %if.end463
  %dropcut.0 = phi i32 [ %conv, %if.end463 ], [ %conv475, %if.end479 ]
  br label %if.end481

if.end481:                                        ; preds = %if.end480, %land.lhs.true445, %land.lhs.true443, %land.lhs.true441, %if.else436
  %dropcut.1 = phi i32 [ %dropcut.0, %if.end480 ], [ 0, %land.lhs.true445 ], [ 0, %land.lhs.true443 ], [ 0, %land.lhs.true441 ], [ 0, %if.else436 ]
  br label %if.end482

if.end482:                                        ; preds = %if.end481, %if.then433
  %extend.6 = phi i32 [ %extend.5, %if.end481 ], [ %dec435, %if.then433 ]
  %dropcut.2 = phi i32 [ %dropcut.1, %if.end481 ], [ 0, %if.then433 ]
  %tobool483 = icmp ne i32 %dropcut.2, 0
  br i1 %tobool483, label %if.else558, label %land.lhs.true484

land.lhs.true484:                                 ; preds = %if.end482
  %tobool485 = icmp ne i32 %selective.2, 0
  br i1 %tobool485, label %lor.lhs.false486, label %if.then509

lor.lhs.false486:                                 ; preds = %land.lhs.true484
  %cmp487 = icmp ne i32 %call378, 0
  br i1 %cmp487, label %if.then509, label %lor.lhs.false489

lor.lhs.false489:                                 ; preds = %lor.lhs.false486
  %i181 = load i32, i32* %i, align 4
  %idxprom490 = sext i32 %i181 to i64
  %arrayidx491 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %moves, i64 0, i64 %idxprom490
  %captured492 = getelementptr inbounds %struct.move_s, %struct.move_s* %arrayidx491, i32 0, i32 2
  %i182 = load i32, i32* %captured492, align 8
  %idxprom493 = sext i32 %i182 to i64
  %arrayidx494 = getelementptr inbounds [14 x i32], [14 x i32]* @material, i64 0, i64 %idxprom493
  %i183 = load i32, i32* %arrayidx494, align 4
  %call495 = call i32 @abs(i32 %i183) #10
  %i184 = load i32, i32* @Variant, align 4
  %cmp496 = icmp eq i32 %i184, 2
  br i1 %cmp496, label %lor.end, label %lor.rhs

lor.rhs:                                          ; preds = %lor.lhs.false489
  %i185 = load i32, i32* @Variant, align 4
  %cmp498 = icmp eq i32 %i185, 4
  br label %lor.end

lor.end:                                          ; preds = %lor.rhs, %lor.lhs.false489
  %i186 = phi i1 [ true, %lor.lhs.false489 ], [ %cmp498, %lor.rhs ]
  %i187 = zext i1 %i186 to i64
  %cond500 = select i1 %i186, i32 1, i32 2
  %mul501 = mul nsw i32 %call495, %cond500
  %add502 = add nsw i32 %fmax.2, %mul501
  %cmp503 = icmp sgt i32 %add502, %alpha.addr.0
  br i1 %cmp503, label %if.then509, label %lor.lhs.false505

lor.lhs.false505:                                 ; preds = %lor.end
  %i188 = load i32, i32* %i, align 4
  %idxprom506 = sext i32 %i188 to i64
  %arrayidx507 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %moves, i64 0, i64 %idxprom506
  %promoted = getelementptr inbounds %struct.move_s, %struct.move_s* %arrayidx507, i32 0, i32 3
  %i189 = load i32, i32* %promoted, align 4
  %tobool508 = icmp ne i32 %i189, 0
  br i1 %tobool508, label %if.then509, label %if.else558

if.then509:                                       ; preds = %lor.lhs.false505, %lor.end, %lor.lhs.false486, %land.lhs.true484
  %cmp510 = icmp eq i32 %first.0, 1
  br i1 %cmp510, label %if.then512, label %if.else520

if.then512:                                       ; preds = %if.then509
  %sub513 = sub nsw i32 0, %beta
  %sub514 = sub nsw i32 0, %alpha.addr.0
  %add515 = add nsw i32 %depth.addr.9, %extend.6
  %sub516 = sub nsw i32 %add515, 1
  %call517 = call i32 @search(i32 %sub513, i32 %sub514, i32 %sub516, i32 0)
  %sub518 = sub nsw i32 0, %call517
  %i190 = load i32, i32* @FULL, align 4
  %inc519 = add i32 %i190, 1
  store i32 %inc519, i32* @FULL, align 4
  br label %if.end557

if.else520:                                       ; preds = %if.then509
  %sub521 = sub nsw i32 0, %alpha.addr.0
  %sub522 = sub nsw i32 %sub521, 1
  %sub523 = sub nsw i32 0, %alpha.addr.0
  %add524 = add nsw i32 %depth.addr.9, %extend.6
  %sub525 = sub nsw i32 %add524, 1
  %call526 = call i32 @search(i32 %sub522, i32 %sub523, i32 %sub525, i32 0)
  %sub527 = sub nsw i32 0, %call526
  %i191 = load i32, i32* @PVS, align 4
  %inc528 = add i32 %i191, 1
  store i32 %inc528, i32* @PVS, align 4
  %cmp529 = icmp sgt i32 %sub527, %best_score.3
  br i1 %cmp529, label %land.lhs.true531, label %if.end556

land.lhs.true531:                                 ; preds = %if.else520
  %i192 = load i32, i32* @time_exit, align 4
  %tobool532 = icmp ne i32 %i192, 0
  br i1 %tobool532, label %if.end556, label %land.lhs.true533

land.lhs.true533:                                 ; preds = %land.lhs.true531
  %cmp534 = icmp ne i32 %sub527, -50000
  br i1 %cmp534, label %if.then536, label %if.end556

if.then536:                                       ; preds = %land.lhs.true533
  %cmp537 = icmp sgt i32 %sub527, %alpha.addr.0
  br i1 %cmp537, label %land.lhs.true539, label %if.else554

land.lhs.true539:                                 ; preds = %if.then536
  %cmp540 = icmp slt i32 %sub527, %beta
  br i1 %cmp540, label %if.then542, label %if.else554

if.then542:                                       ; preds = %land.lhs.true539
  %sub543 = sub nsw i32 0, %beta
  %sub544 = sub nsw i32 0, %alpha.addr.0
  %add545 = add nsw i32 %depth.addr.9, %extend.6
  %sub546 = sub nsw i32 %add545, 1
  %call547 = call i32 @search(i32 %sub543, i32 %sub544, i32 %sub546, i32 0)
  %sub548 = sub nsw i32 0, %call547
  %i193 = load i32, i32* @PVSF, align 4
  %inc549 = add i32 %i193, 1
  store i32 %inc549, i32* @PVSF, align 4
  %cmp550 = icmp sgt i32 %sub548, %best_score.3
  br i1 %cmp550, label %if.then552, label %if.end553

if.then552:                                       ; preds = %if.then542
  br label %if.end553

if.end553:                                        ; preds = %if.then552, %if.then542
  %best_score.4 = phi i32 [ %sub548, %if.then552 ], [ %best_score.3, %if.then542 ]
  br label %if.end555

if.else554:                                       ; preds = %land.lhs.true539, %if.then536
  br label %if.end555

if.end555:                                        ; preds = %if.else554, %if.end553
  %best_score.5 = phi i32 [ %best_score.4, %if.end553 ], [ %sub527, %if.else554 ]
  %score.2 = phi i32 [ %sub548, %if.end553 ], [ %sub527, %if.else554 ]
  br label %if.end556

if.end556:                                        ; preds = %if.end555, %land.lhs.true533, %land.lhs.true531, %if.else520
  %best_score.6 = phi i32 [ %best_score.3, %land.lhs.true531 ], [ %best_score.5, %if.end555 ], [ %best_score.3, %land.lhs.true533 ], [ %best_score.3, %if.else520 ]
  %score.3 = phi i32 [ %sub527, %land.lhs.true531 ], [ %score.2, %if.end555 ], [ %sub527, %land.lhs.true533 ], [ %sub527, %if.else520 ]
  br label %if.end557

if.end557:                                        ; preds = %if.end556, %if.then512
  %best_score.7 = phi i32 [ %best_score.3, %if.then512 ], [ %best_score.6, %if.end556 ]
  %score.4 = phi i32 [ %sub518, %if.then512 ], [ %score.3, %if.end556 ]
  br label %if.end560

if.else558:                                       ; preds = %lor.lhs.false505, %if.end482
  %i194 = load i32, i32* @razor_material, align 4
  %inc559 = add i32 %i194, 1
  store i32 %inc559, i32* @razor_material, align 4
  br label %if.end560

if.end560:                                        ; preds = %if.else558, %if.end557
  %best_score.8 = phi i32 [ %best_score.3, %if.else558 ], [ %best_score.7, %if.end557 ]
  %legal_move.0 = phi i32 [ 0, %if.else558 ], [ 1, %if.end557 ]
  %score.5 = phi i32 [ %score.1, %if.else558 ], [ %score.4, %if.end557 ]
  %inc561 = add nsw i32 %legalmoves.8, 1
  br label %if.end562

if.end562:                                        ; preds = %if.end560, %while.body
  %best_score.9 = phi i32 [ %best_score.8, %if.end560 ], [ %best_score.3, %while.body ]
  %legal_move.1 = phi i32 [ %legal_move.0, %if.end560 ], [ 0, %while.body ]
  %no_moves.1 = phi i32 [ 0, %if.end560 ], [ %no_moves.0, %while.body ]
  %score.6 = phi i32 [ %score.5, %if.end560 ], [ %score.1, %while.body ]
  %legalmoves.9 = phi i32 [ %inc561, %if.end560 ], [ %legalmoves.8, %while.body ]
  %cmp563 = icmp sgt i32 %score.6, %best_score.9
  br i1 %cmp563, label %land.lhs.true565, label %if.end568

land.lhs.true565:                                 ; preds = %if.end562
  %tobool566 = icmp ne i32 %legal_move.1, 0
  br i1 %tobool566, label %if.then567, label %if.end568

if.then567:                                       ; preds = %land.lhs.true565
  br label %if.end568

if.end568:                                        ; preds = %if.then567, %land.lhs.true565, %if.end562
  %best_score.10 = phi i32 [ %score.6, %if.then567 ], [ %best_score.9, %land.lhs.true565 ], [ %best_score.9, %if.end562 ]
  %arrayidx569 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %moves, i64 0, i64 0
  %i195 = load i32, i32* %i, align 4
  call void @unmake(%struct.move_s* %arrayidx569, i32 %i195)
  %i196 = load i32, i32* @time_exit, align 4
  %tobool570 = icmp ne i32 %i196, 0
  br i1 %tobool570, label %if.then571, label %if.end572

if.then571:                                       ; preds = %if.end568
  br label %return

if.end572:                                        ; preds = %if.end568
  %cmp573 = icmp sgt i32 %score.6, %alpha.addr.0
  br i1 %cmp573, label %land.lhs.true575, label %if.end787

land.lhs.true575:                                 ; preds = %if.end572
  %tobool576 = icmp ne i32 %legal_move.1, 0
  br i1 %tobool576, label %if.then577, label %if.end787

if.then577:                                       ; preds = %land.lhs.true575
  %cmp578 = icmp sge i32 %score.6, %beta
  br i1 %cmp578, label %if.then580, label %if.end755

if.then580:                                       ; preds = %if.then577
  %i197 = load i32, i32* %i, align 4
  %idxprom581 = sext i32 %i197 to i64
  %arrayidx582 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %moves, i64 0, i64 %idxprom581
  %from583 = getelementptr inbounds %struct.move_s, %struct.move_s* %arrayidx582, i32 0, i32 0
  %i198 = load i32, i32* %from583, align 8
  %idxprom584 = sext i32 %i198 to i64
  %arrayidx585 = getelementptr inbounds [144 x [144 x i32]], [144 x [144 x i32]]* @history_h, i64 0, i64 %idxprom584
  %i199 = load i32, i32* %i, align 4
  %idxprom586 = sext i32 %i199 to i64
  %arrayidx587 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %moves, i64 0, i64 %idxprom586
  %target588 = getelementptr inbounds %struct.move_s, %struct.move_s* %arrayidx587, i32 0, i32 1
  %i200 = load i32, i32* %target588, align 4
  %idxprom589 = sext i32 %i200 to i64
  %arrayidx590 = getelementptr inbounds [144 x i32], [144 x i32]* %arrayidx585, i64 0, i64 %idxprom589
  %i201 = load i32, i32* %arrayidx590, align 4
  %inc591 = add i32 %i201, 1
  store i32 %inc591, i32* %arrayidx590, align 4
  %i202 = load i32, i32* %i, align 4
  %idxprom592 = sext i32 %i202 to i64
  %arrayidx593 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %moves, i64 0, i64 %idxprom592
  %captured594 = getelementptr inbounds %struct.move_s, %struct.move_s* %arrayidx593, i32 0, i32 2
  %i203 = load i32, i32* %captured594, align 8
  %cmp595 = icmp eq i32 %i203, 13
  br i1 %cmp595, label %if.then597, label %if.end748

if.then597:                                       ; preds = %if.then580
  %i204 = load i32, i32* %i, align 4
  %idxprom598 = sext i32 %i204 to i64
  %arrayidx599 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %moves, i64 0, i64 %idxprom598
  %from600 = getelementptr inbounds %struct.move_s, %struct.move_s* %arrayidx599, i32 0, i32 0
  %i205 = load i32, i32* %from600, align 8
  %i206 = load i32, i32* @ply, align 4
  %idxprom601 = sext i32 %i206 to i64
  %arrayidx602 = getelementptr inbounds [300 x %struct.move_s], [300 x %struct.move_s]* @killer1, i64 0, i64 %idxprom601
  %from603 = getelementptr inbounds %struct.move_s, %struct.move_s* %arrayidx602, i32 0, i32 0
  %i207 = load i32, i32* %from603, align 8
  %cmp604 = icmp eq i32 %i205, %i207
  br i1 %cmp604, label %land.lhs.true606, label %if.else628

land.lhs.true606:                                 ; preds = %if.then597
  %i208 = load i32, i32* %i, align 4
  %idxprom607 = sext i32 %i208 to i64
  %arrayidx608 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %moves, i64 0, i64 %idxprom607
  %target609 = getelementptr inbounds %struct.move_s, %struct.move_s* %arrayidx608, i32 0, i32 1
  %i209 = load i32, i32* %target609, align 4
  %i210 = load i32, i32* @ply, align 4
  %idxprom610 = sext i32 %i210 to i64
  %arrayidx611 = getelementptr inbounds [300 x %struct.move_s], [300 x %struct.move_s]* @killer1, i64 0, i64 %idxprom610
  %target612 = getelementptr inbounds %struct.move_s, %struct.move_s* %arrayidx611, i32 0, i32 1
  %i211 = load i32, i32* %target612, align 4
  %cmp613 = icmp eq i32 %i209, %i211
  br i1 %cmp613, label %land.lhs.true615, label %if.else628

land.lhs.true615:                                 ; preds = %land.lhs.true606
  %i212 = load i32, i32* %i, align 4
  %idxprom616 = sext i32 %i212 to i64
  %arrayidx617 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %moves, i64 0, i64 %idxprom616
  %promoted618 = getelementptr inbounds %struct.move_s, %struct.move_s* %arrayidx617, i32 0, i32 3
  %i213 = load i32, i32* %promoted618, align 4
  %i214 = load i32, i32* @ply, align 4
  %idxprom619 = sext i32 %i214 to i64
  %arrayidx620 = getelementptr inbounds [300 x %struct.move_s], [300 x %struct.move_s]* @killer1, i64 0, i64 %idxprom619
  %promoted621 = getelementptr inbounds %struct.move_s, %struct.move_s* %arrayidx620, i32 0, i32 3
  %i215 = load i32, i32* %promoted621, align 4
  %cmp622 = icmp eq i32 %i213, %i215
  br i1 %cmp622, label %if.then624, label %if.else628

if.then624:                                       ; preds = %land.lhs.true615
  %i216 = load i32, i32* @ply, align 4
  %idxprom625 = sext i32 %i216 to i64
  %arrayidx626 = getelementptr inbounds [300 x i32], [300 x i32]* @killer_scores, i64 0, i64 %idxprom625
  %i217 = load i32, i32* %arrayidx626, align 4
  %inc627 = add nsw i32 %i217, 1
  store i32 %inc627, i32* %arrayidx626, align 4
  br label %if.end747

if.else628:                                       ; preds = %land.lhs.true615, %land.lhs.true606, %if.then597
  %i218 = load i32, i32* %i, align 4
  %idxprom629 = sext i32 %i218 to i64
  %arrayidx630 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %moves, i64 0, i64 %idxprom629
  %from631 = getelementptr inbounds %struct.move_s, %struct.move_s* %arrayidx630, i32 0, i32 0
  %i219 = load i32, i32* %from631, align 8
  %i220 = load i32, i32* @ply, align 4
  %idxprom632 = sext i32 %i220 to i64
  %arrayidx633 = getelementptr inbounds [300 x %struct.move_s], [300 x %struct.move_s]* @killer2, i64 0, i64 %idxprom632
  %from634 = getelementptr inbounds %struct.move_s, %struct.move_s* %arrayidx633, i32 0, i32 0
  %i221 = load i32, i32* %from634, align 8
  %cmp635 = icmp eq i32 %i219, %i221
  br i1 %cmp635, label %land.lhs.true637, label %if.else683

land.lhs.true637:                                 ; preds = %if.else628
  %i222 = load i32, i32* %i, align 4
  %idxprom638 = sext i32 %i222 to i64
  %arrayidx639 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %moves, i64 0, i64 %idxprom638
  %target640 = getelementptr inbounds %struct.move_s, %struct.move_s* %arrayidx639, i32 0, i32 1
  %i223 = load i32, i32* %target640, align 4
  %i224 = load i32, i32* @ply, align 4
  %idxprom641 = sext i32 %i224 to i64
  %arrayidx642 = getelementptr inbounds [300 x %struct.move_s], [300 x %struct.move_s]* @killer2, i64 0, i64 %idxprom641
  %target643 = getelementptr inbounds %struct.move_s, %struct.move_s* %arrayidx642, i32 0, i32 1
  %i225 = load i32, i32* %target643, align 4
  %cmp644 = icmp eq i32 %i223, %i225
  br i1 %cmp644, label %land.lhs.true646, label %if.else683

land.lhs.true646:                                 ; preds = %land.lhs.true637
  %i226 = load i32, i32* %i, align 4
  %idxprom647 = sext i32 %i226 to i64
  %arrayidx648 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %moves, i64 0, i64 %idxprom647
  %promoted649 = getelementptr inbounds %struct.move_s, %struct.move_s* %arrayidx648, i32 0, i32 3
  %i227 = load i32, i32* %promoted649, align 4
  %i228 = load i32, i32* @ply, align 4
  %idxprom650 = sext i32 %i228 to i64
  %arrayidx651 = getelementptr inbounds [300 x %struct.move_s], [300 x %struct.move_s]* @killer2, i64 0, i64 %idxprom650
  %promoted652 = getelementptr inbounds %struct.move_s, %struct.move_s* %arrayidx651, i32 0, i32 3
  %i229 = load i32, i32* %promoted652, align 4
  %cmp653 = icmp eq i32 %i227, %i229
  br i1 %cmp653, label %if.then655, label %if.else683

if.then655:                                       ; preds = %land.lhs.true646
  %i230 = load i32, i32* @ply, align 4
  %idxprom656 = sext i32 %i230 to i64
  %arrayidx657 = getelementptr inbounds [300 x i32], [300 x i32]* @killer_scores2, i64 0, i64 %idxprom656
  %i231 = load i32, i32* %arrayidx657, align 4
  %inc658 = add nsw i32 %i231, 1
  store i32 %inc658, i32* %arrayidx657, align 4
  %i232 = load i32, i32* @ply, align 4
  %idxprom659 = sext i32 %i232 to i64
  %arrayidx660 = getelementptr inbounds [300 x i32], [300 x i32]* @killer_scores2, i64 0, i64 %idxprom659
  %i233 = load i32, i32* %arrayidx660, align 4
  %i234 = load i32, i32* @ply, align 4
  %idxprom661 = sext i32 %i234 to i64
  %arrayidx662 = getelementptr inbounds [300 x i32], [300 x i32]* @killer_scores, i64 0, i64 %idxprom661
  %i235 = load i32, i32* %arrayidx662, align 4
  %cmp663 = icmp sgt i32 %i233, %i235
  br i1 %cmp663, label %if.then665, label %if.end682

if.then665:                                       ; preds = %if.then655
  %i236 = load i32, i32* @ply, align 4
  %idxprom666 = sext i32 %i236 to i64
  %arrayidx667 = getelementptr inbounds [300 x %struct.move_s], [300 x %struct.move_s]* @killer1, i64 0, i64 %idxprom666
  %i237 = bitcast %struct.move_s* %kswap to i8*
  %i238 = bitcast %struct.move_s* %arrayidx667 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %i237, i8* align 8 %i238, i64 24, i1 false)
  %i239 = load i32, i32* @ply, align 4
  %idxprom668 = sext i32 %i239 to i64
  %arrayidx669 = getelementptr inbounds [300 x %struct.move_s], [300 x %struct.move_s]* @killer1, i64 0, i64 %idxprom668
  %i240 = load i32, i32* @ply, align 4
  %idxprom670 = sext i32 %i240 to i64
  %arrayidx671 = getelementptr inbounds [300 x %struct.move_s], [300 x %struct.move_s]* @killer2, i64 0, i64 %idxprom670
  %i241 = bitcast %struct.move_s* %arrayidx669 to i8*
  %i242 = bitcast %struct.move_s* %arrayidx671 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %i241, i8* align 8 %i242, i64 24, i1 false)
  %i243 = load i32, i32* @ply, align 4
  %idxprom672 = sext i32 %i243 to i64
  %arrayidx673 = getelementptr inbounds [300 x %struct.move_s], [300 x %struct.move_s]* @killer2, i64 0, i64 %idxprom672
  %i244 = bitcast %struct.move_s* %arrayidx673 to i8*
  %i245 = bitcast %struct.move_s* %kswap to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %i244, i8* align 4 %i245, i64 24, i1 false)
  %i246 = load i32, i32* @ply, align 4
  %idxprom674 = sext i32 %i246 to i64
  %arrayidx675 = getelementptr inbounds [300 x i32], [300 x i32]* @killer_scores, i64 0, i64 %idxprom674
  %i247 = load i32, i32* %arrayidx675, align 4
  %i248 = load i32, i32* @ply, align 4
  %idxprom676 = sext i32 %i248 to i64
  %arrayidx677 = getelementptr inbounds [300 x i32], [300 x i32]* @killer_scores2, i64 0, i64 %idxprom676
  %i249 = load i32, i32* %arrayidx677, align 4
  %i250 = load i32, i32* @ply, align 4
  %idxprom678 = sext i32 %i250 to i64
  %arrayidx679 = getelementptr inbounds [300 x i32], [300 x i32]* @killer_scores, i64 0, i64 %idxprom678
  store i32 %i249, i32* %arrayidx679, align 4
  %i251 = load i32, i32* @ply, align 4
  %idxprom680 = sext i32 %i251 to i64
  %arrayidx681 = getelementptr inbounds [300 x i32], [300 x i32]* @killer_scores2, i64 0, i64 %idxprom680
  store i32 %i247, i32* %arrayidx681, align 4
  br label %if.end682

if.end682:                                        ; preds = %if.then665, %if.then655
  br label %if.end746

if.else683:                                       ; preds = %land.lhs.true646, %land.lhs.true637, %if.else628
  %i252 = load i32, i32* %i, align 4
  %idxprom684 = sext i32 %i252 to i64
  %arrayidx685 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %moves, i64 0, i64 %idxprom684
  %from686 = getelementptr inbounds %struct.move_s, %struct.move_s* %arrayidx685, i32 0, i32 0
  %i253 = load i32, i32* %from686, align 8
  %i254 = load i32, i32* @ply, align 4
  %idxprom687 = sext i32 %i254 to i64
  %arrayidx688 = getelementptr inbounds [300 x %struct.move_s], [300 x %struct.move_s]* @killer3, i64 0, i64 %idxprom687
  %from689 = getelementptr inbounds %struct.move_s, %struct.move_s* %arrayidx688, i32 0, i32 0
  %i255 = load i32, i32* %from689, align 8
  %cmp690 = icmp eq i32 %i253, %i255
  br i1 %cmp690, label %land.lhs.true692, label %if.else738

land.lhs.true692:                                 ; preds = %if.else683
  %i256 = load i32, i32* %i, align 4
  %idxprom693 = sext i32 %i256 to i64
  %arrayidx694 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %moves, i64 0, i64 %idxprom693
  %target695 = getelementptr inbounds %struct.move_s, %struct.move_s* %arrayidx694, i32 0, i32 1
  %i257 = load i32, i32* %target695, align 4
  %i258 = load i32, i32* @ply, align 4
  %idxprom696 = sext i32 %i258 to i64
  %arrayidx697 = getelementptr inbounds [300 x %struct.move_s], [300 x %struct.move_s]* @killer3, i64 0, i64 %idxprom696
  %target698 = getelementptr inbounds %struct.move_s, %struct.move_s* %arrayidx697, i32 0, i32 1
  %i259 = load i32, i32* %target698, align 4
  %cmp699 = icmp eq i32 %i257, %i259
  br i1 %cmp699, label %land.lhs.true701, label %if.else738

land.lhs.true701:                                 ; preds = %land.lhs.true692
  %i260 = load i32, i32* %i, align 4
  %idxprom702 = sext i32 %i260 to i64
  %arrayidx703 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %moves, i64 0, i64 %idxprom702
  %promoted704 = getelementptr inbounds %struct.move_s, %struct.move_s* %arrayidx703, i32 0, i32 3
  %i261 = load i32, i32* %promoted704, align 4
  %i262 = load i32, i32* @ply, align 4
  %idxprom705 = sext i32 %i262 to i64
  %arrayidx706 = getelementptr inbounds [300 x %struct.move_s], [300 x %struct.move_s]* @killer3, i64 0, i64 %idxprom705
  %promoted707 = getelementptr inbounds %struct.move_s, %struct.move_s* %arrayidx706, i32 0, i32 3
  %i263 = load i32, i32* %promoted707, align 4
  %cmp708 = icmp eq i32 %i261, %i263
  br i1 %cmp708, label %if.then710, label %if.else738

if.then710:                                       ; preds = %land.lhs.true701
  %i264 = load i32, i32* @ply, align 4
  %idxprom711 = sext i32 %i264 to i64
  %arrayidx712 = getelementptr inbounds [300 x i32], [300 x i32]* @killer_scores3, i64 0, i64 %idxprom711
  %i265 = load i32, i32* %arrayidx712, align 4
  %inc713 = add nsw i32 %i265, 1
  store i32 %inc713, i32* %arrayidx712, align 4
  %i266 = load i32, i32* @ply, align 4
  %idxprom714 = sext i32 %i266 to i64
  %arrayidx715 = getelementptr inbounds [300 x i32], [300 x i32]* @killer_scores3, i64 0, i64 %idxprom714
  %i267 = load i32, i32* %arrayidx715, align 4
  %i268 = load i32, i32* @ply, align 4
  %idxprom716 = sext i32 %i268 to i64
  %arrayidx717 = getelementptr inbounds [300 x i32], [300 x i32]* @killer_scores2, i64 0, i64 %idxprom716
  %i269 = load i32, i32* %arrayidx717, align 4
  %cmp718 = icmp sgt i32 %i267, %i269
  br i1 %cmp718, label %if.then720, label %if.end737

if.then720:                                       ; preds = %if.then710
  %i270 = load i32, i32* @ply, align 4
  %idxprom721 = sext i32 %i270 to i64
  %arrayidx722 = getelementptr inbounds [300 x %struct.move_s], [300 x %struct.move_s]* @killer2, i64 0, i64 %idxprom721
  %i271 = bitcast %struct.move_s* %kswap to i8*
  %i272 = bitcast %struct.move_s* %arrayidx722 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %i271, i8* align 8 %i272, i64 24, i1 false)
  %i273 = load i32, i32* @ply, align 4
  %idxprom723 = sext i32 %i273 to i64
  %arrayidx724 = getelementptr inbounds [300 x %struct.move_s], [300 x %struct.move_s]* @killer2, i64 0, i64 %idxprom723
  %i274 = load i32, i32* @ply, align 4
  %idxprom725 = sext i32 %i274 to i64
  %arrayidx726 = getelementptr inbounds [300 x %struct.move_s], [300 x %struct.move_s]* @killer3, i64 0, i64 %idxprom725
  %i275 = bitcast %struct.move_s* %arrayidx724 to i8*
  %i276 = bitcast %struct.move_s* %arrayidx726 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %i275, i8* align 8 %i276, i64 24, i1 false)
  %i277 = load i32, i32* @ply, align 4
  %idxprom727 = sext i32 %i277 to i64
  %arrayidx728 = getelementptr inbounds [300 x %struct.move_s], [300 x %struct.move_s]* @killer3, i64 0, i64 %idxprom727
  %i278 = bitcast %struct.move_s* %arrayidx728 to i8*
  %i279 = bitcast %struct.move_s* %kswap to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %i278, i8* align 4 %i279, i64 24, i1 false)
  %i280 = load i32, i32* @ply, align 4
  %idxprom729 = sext i32 %i280 to i64
  %arrayidx730 = getelementptr inbounds [300 x i32], [300 x i32]* @killer_scores2, i64 0, i64 %idxprom729
  %i281 = load i32, i32* %arrayidx730, align 4
  %i282 = load i32, i32* @ply, align 4
  %idxprom731 = sext i32 %i282 to i64
  %arrayidx732 = getelementptr inbounds [300 x i32], [300 x i32]* @killer_scores3, i64 0, i64 %idxprom731
  %i283 = load i32, i32* %arrayidx732, align 4
  %i284 = load i32, i32* @ply, align 4
  %idxprom733 = sext i32 %i284 to i64
  %arrayidx734 = getelementptr inbounds [300 x i32], [300 x i32]* @killer_scores2, i64 0, i64 %idxprom733
  store i32 %i283, i32* %arrayidx734, align 4
  %i285 = load i32, i32* @ply, align 4
  %idxprom735 = sext i32 %i285 to i64
  %arrayidx736 = getelementptr inbounds [300 x i32], [300 x i32]* @killer_scores3, i64 0, i64 %idxprom735
  store i32 %i281, i32* %arrayidx736, align 4
  br label %if.end737

if.end737:                                        ; preds = %if.then720, %if.then710
  br label %if.end745

if.else738:                                       ; preds = %land.lhs.true701, %land.lhs.true692, %if.else683
  %i286 = load i32, i32* @ply, align 4
  %idxprom739 = sext i32 %i286 to i64
  %arrayidx740 = getelementptr inbounds [300 x i32], [300 x i32]* @killer_scores3, i64 0, i64 %idxprom739
  store i32 1, i32* %arrayidx740, align 4
  %i287 = load i32, i32* @ply, align 4
  %idxprom741 = sext i32 %i287 to i64
  %arrayidx742 = getelementptr inbounds [300 x %struct.move_s], [300 x %struct.move_s]* @killer3, i64 0, i64 %idxprom741
  %i288 = load i32, i32* %i, align 4
  %idxprom743 = sext i32 %i288 to i64
  %arrayidx744 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %moves, i64 0, i64 %idxprom743
  %i289 = bitcast %struct.move_s* %arrayidx742 to i8*
  %i290 = bitcast %struct.move_s* %arrayidx744 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %i289, i8* align 8 %i290, i64 24, i1 false)
  br label %if.end745

if.end745:                                        ; preds = %if.else738, %if.end737
  br label %if.end746

if.end746:                                        ; preds = %if.end745, %if.end682
  br label %if.end747

if.end747:                                        ; preds = %if.end746, %if.then624
  br label %if.end748

if.end748:                                        ; preds = %if.end747, %if.then580
  %cmp749 = icmp eq i32 %first.0, 1
  br i1 %cmp749, label %if.then751, label %if.end753

if.then751:                                       ; preds = %if.end748
  %i291 = load i32, i32* @FHF, align 4
  %inc752 = add i32 %i291, 1
  store i32 %inc752, i32* @FHF, align 4
  br label %if.end753

if.end753:                                        ; preds = %if.then751, %if.end748
  %i292 = load i32, i32* @FH, align 4
  %inc754 = add i32 %i292, 1
  store i32 %inc754, i32* @FH, align 4
  %i293 = load i32, i32* %i, align 4
  %i294 = load i32, i32* %threat, align 4
  call void @StoreTT(i32 %score.6, i32 %alpha, i32 %beta, i32 %i293, i32 %i294, i32 %depth.addr.9)
  br label %return

if.end755:                                        ; preds = %if.then577
  %i295 = load i32, i32* %i, align 4
  %i296 = load i32, i32* @ply, align 4
  %idxprom756 = sext i32 %i296 to i64
  %arrayidx757 = getelementptr inbounds [300 x [300 x %struct.move_s]], [300 x [300 x %struct.move_s]]* @pv, i64 0, i64 %idxprom756
  %i297 = load i32, i32* @ply, align 4
  %idxprom758 = sext i32 %i297 to i64
  %arrayidx759 = getelementptr inbounds [300 x %struct.move_s], [300 x %struct.move_s]* %arrayidx757, i64 0, i64 %idxprom758
  %i298 = load i32, i32* %i, align 4
  %idxprom760 = sext i32 %i298 to i64
  %arrayidx761 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %moves, i64 0, i64 %idxprom760
  %i299 = bitcast %struct.move_s* %arrayidx759 to i8*
  %i300 = bitcast %struct.move_s* %arrayidx761 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %i299, i8* align 8 %i300, i64 24, i1 false)
  %i301 = load i32, i32* @ply, align 4
  %add762 = add nsw i32 %i301, 1
  br label %for.cond763

for.cond763:                                      ; preds = %for.inc779, %if.end755
  %j.0 = phi i32 [ %add762, %if.end755 ], [ %inc780, %for.inc779 ]
  %i302 = load i32, i32* @ply, align 4
  %add764 = add nsw i32 %i302, 1
  %idxprom765 = sext i32 %add764 to i64
  %arrayidx766 = getelementptr inbounds [300 x i32], [300 x i32]* @pv_length, i64 0, i64 %idxprom765
  %i303 = load i32, i32* %arrayidx766, align 4
  %cmp767 = icmp slt i32 %j.0, %i303
  br i1 %cmp767, label %for.body769, label %for.end781

for.body769:                                      ; preds = %for.cond763
  %i304 = load i32, i32* @ply, align 4
  %idxprom770 = sext i32 %i304 to i64
  %arrayidx771 = getelementptr inbounds [300 x [300 x %struct.move_s]], [300 x [300 x %struct.move_s]]* @pv, i64 0, i64 %idxprom770
  %idxprom772 = sext i32 %j.0 to i64
  %arrayidx773 = getelementptr inbounds [300 x %struct.move_s], [300 x %struct.move_s]* %arrayidx771, i64 0, i64 %idxprom772
  %i305 = load i32, i32* @ply, align 4
  %add774 = add nsw i32 %i305, 1
  %idxprom775 = sext i32 %add774 to i64
  %arrayidx776 = getelementptr inbounds [300 x [300 x %struct.move_s]], [300 x [300 x %struct.move_s]]* @pv, i64 0, i64 %idxprom775
  %idxprom777 = sext i32 %j.0 to i64
  %arrayidx778 = getelementptr inbounds [300 x %struct.move_s], [300 x %struct.move_s]* %arrayidx776, i64 0, i64 %idxprom777
  %i306 = bitcast %struct.move_s* %arrayidx773 to i8*
  %i307 = bitcast %struct.move_s* %arrayidx778 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %i306, i8* align 8 %i307, i64 24, i1 false)
  br label %for.inc779

for.inc779:                                       ; preds = %for.body769
  %inc780 = add nsw i32 %j.0, 1
  br label %for.cond763

for.end781:                                       ; preds = %for.cond763
  %i308 = load i32, i32* @ply, align 4
  %add782 = add nsw i32 %i308, 1
  %idxprom783 = sext i32 %add782 to i64
  %arrayidx784 = getelementptr inbounds [300 x i32], [300 x i32]* @pv_length, i64 0, i64 %idxprom783
  %i309 = load i32, i32* %arrayidx784, align 4
  %i310 = load i32, i32* @ply, align 4
  %idxprom785 = sext i32 %i310 to i64
  %arrayidx786 = getelementptr inbounds [300 x i32], [300 x i32]* @pv_length, i64 0, i64 %idxprom785
  store i32 %i309, i32* %arrayidx786, align 4
  br label %if.end787

if.end787:                                        ; preds = %for.end781, %land.lhs.true575, %if.end572
  %sbest.1 = phi i32 [ %i295, %for.end781 ], [ %sbest.0, %land.lhs.true575 ], [ %sbest.0, %if.end572 ]
  %alpha.addr.1 = phi i32 [ %score.6, %for.end781 ], [ %alpha.addr.0, %land.lhs.true575 ], [ %alpha.addr.0, %if.end572 ]
  %tobool788 = icmp ne i32 %legal_move.1, 0
  br i1 %tobool788, label %if.then789, label %if.end790

if.then789:                                       ; preds = %if.end787
  br label %if.end790

if.end790:                                        ; preds = %if.then789, %if.end787
  %first.1 = phi i32 [ 0, %if.then789 ], [ %first.0, %if.end787 ]
  br label %while.cond

while.end:                                        ; preds = %while.cond
  br label %if.end794

if.else791:                                       ; preds = %if.end354
  %i311 = load i32, i32* @ply, align 4
  %sub792 = sub nsw i32 1000000, %i311
  %i312 = load i32, i32* %threat, align 4
  call void @StoreTT(i32 %sub792, i32 %alpha, i32 %beta, i32 0, i32 %i312, i32 %depth.addr.9)
  %i313 = load i32, i32* @ply, align 4
  %sub793 = sub nsw i32 1000000, %i313
  br label %return

if.end794:                                        ; preds = %while.end
  %tobool795 = icmp ne i32 %no_moves.0, 0
  br i1 %tobool795, label %if.then796, label %if.else812

if.then796:                                       ; preds = %if.end794
  %i314 = load i32, i32* @Variant, align 4
  %cmp797 = icmp ne i32 %i314, 4
  br i1 %cmp797, label %land.lhs.true799, label %if.else809

land.lhs.true799:                                 ; preds = %if.then796
  %i315 = load i32, i32* @Variant, align 4
  %cmp800 = icmp ne i32 %i315, 3
  br i1 %cmp800, label %if.then802, label %if.else809

if.then802:                                       ; preds = %land.lhs.true799
  %call803 = call i32 @in_check()
  %tobool804 = icmp ne i32 %call803, 0
  br i1 %tobool804, label %if.then805, label %if.else808

if.then805:                                       ; preds = %if.then802
  %i316 = load i32, i32* @ply, align 4
  %add806 = add nsw i32 -1000000, %i316
  %i317 = load i32, i32* %threat, align 4
  call void @StoreTT(i32 %add806, i32 %alpha, i32 %beta, i32 0, i32 %i317, i32 %depth.addr.9)
  %i318 = load i32, i32* @ply, align 4
  %add807 = add nsw i32 -1000000, %i318
  br label %return

if.else808:                                       ; preds = %if.then802
  %i319 = load i32, i32* %threat, align 4
  call void @StoreTT(i32 0, i32 %alpha, i32 %beta, i32 0, i32 %i319, i32 %depth.addr.9)
  br label %return

if.else809:                                       ; preds = %land.lhs.true799, %if.then796
  %i320 = load i32, i32* @ply, align 4
  %sub810 = sub nsw i32 1000000, %i320
  %i321 = load i32, i32* %threat, align 4
  call void @StoreTT(i32 %sub810, i32 %alpha, i32 %beta, i32 0, i32 %i321, i32 %depth.addr.9)
  %i322 = load i32, i32* @ply, align 4
  %sub811 = sub nsw i32 1000000, %i322
  br label %return

if.else812:                                       ; preds = %if.end794
  %i323 = load i32, i32* @fifty, align 4
  %cmp813 = icmp sgt i32 %i323, 100
  br i1 %cmp813, label %if.then815, label %if.end816

if.then815:                                       ; preds = %if.else812
  br label %return

if.end816:                                        ; preds = %if.else812
  br label %if.end817

if.end817:                                        ; preds = %if.end816
  %cmp818 = icmp eq i32 %sbest.0, -1
  br i1 %cmp818, label %if.then820, label %if.end821

if.then820:                                       ; preds = %if.end817
  br label %if.end821

if.end821:                                        ; preds = %if.then820, %if.end817
  %sbest.2 = phi i32 [ 500, %if.then820 ], [ %sbest.0, %if.end817 ]
  %cmp822 = icmp sle i32 %best_score.3, %alpha
  br i1 %cmp822, label %if.then824, label %if.else828

if.then824:                                       ; preds = %if.end821
  %tobool825 = icmp ne i32 %selective.2, 0
  br i1 %tobool825, label %if.end827, label %if.then826

if.then826:                                       ; preds = %if.then824
  %i324 = load i32, i32* %threat, align 4
  call void @StoreTT(i32 %best_score.3, i32 %alpha, i32 %beta, i32 %sbest.2, i32 %i324, i32 %depth.addr.9)
  br label %if.end827

if.end827:                                        ; preds = %if.then826, %if.then824
  br label %if.end833

if.else828:                                       ; preds = %if.end821
  %tobool829 = icmp ne i32 %selective.2, 0
  br i1 %tobool829, label %if.else831, label %if.then830

if.then830:                                       ; preds = %if.else828
  %i325 = load i32, i32* %threat, align 4
  call void @StoreTT(i32 %best_score.3, i32 %alpha, i32 %beta, i32 %sbest.2, i32 %i325, i32 %depth.addr.9)
  br label %if.end832

if.else831:                                       ; preds = %if.else828
  %i326 = load i32, i32* %threat, align 4
  call void @StoreTT(i32 %best_score.3, i32 -1000000, i32 -1000000, i32 %sbest.2, i32 %i326, i32 %depth.addr.9)
  br label %if.end832

if.end832:                                        ; preds = %if.else831, %if.then830
  br label %if.end833

if.end833:                                        ; preds = %if.end832, %if.end827
  br label %return

return:                                           ; preds = %if.end833, %if.then815, %if.else809, %if.else808, %if.then805, %if.else791, %if.end753, %if.then571, %if.then232, %if.then228, %cond.end146, %if.then128, %if.then124, %sw.bb, %if.else116, %cond.end114, %if.then100, %if.then95, %if.then29, %if.else23, %if.then2
  %retval.0 = phi i32 [ 0, %if.then29 ], [ %call97, %if.then95 ], [ %call101, %if.then100 ], [ %cond115, %cond.end114 ], [ %i55, %if.else116 ], [ %cond147, %cond.end146 ], [ 0, %if.then571 ], [ %score.6, %if.end753 ], [ %add807, %if.then805 ], [ 0, %if.else808 ], [ %sub811, %if.else809 ], [ 0, %if.then815 ], [ %best_score.3, %if.end833 ], [ %sub793, %if.else791 ], [ 0, %if.then228 ], [ %score.0, %if.then232 ], [ %i60, %if.then128 ], [ %i58, %if.then124 ], [ %i56, %sw.bb ], [ 0, %if.then2 ], [ 0, %if.else23 ]
  ret i32 %retval.0
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @search_root(%struct.move_s* noalias sret(%struct.move_s) align 4 %agg.result, i32 %originalalpha, i32 %originalbeta, i32 %depth) #0 {
entry:
  %moves = alloca [512 x %struct.move_s], align 16
  %best_move = alloca %struct.move_s, align 4
  %i = alloca i32, align 4
  %move_ordering = alloca [512 x i32], align 16
  %see_values = alloca [512 x i32], align 16
  %kswap = alloca %struct.move_s, align 4
  %i1 = bitcast %struct.move_s* %best_move to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %i1, i8* align 4 bitcast (%struct.move_s* @dummy to i8*), i64 24, i1 false)
  store i32 1, i32* @ply, align 4
  store i32 1, i32* @searching_pv, align 4
  store i32 0, i32* @time_exit, align 4
  store i32 0, i32* @time_failure, align 4
  store i32 -1000000, i32* @cur_score, align 4
  %i2 = load i32, i32* @nodes, align 4
  %inc = add nsw i32 %i2, 1
  store i32 %inc, i32* @nodes, align 4
  %call = call i32 @is_draw()
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  store i32 5, i32* @result, align 4
  store i32 0, i32* @cur_score, align 4
  %i3 = load i32, i32* @ply, align 4
  %idxprom = sext i32 %i3 to i64
  %arrayidx = getelementptr inbounds [300 x i32], [300 x i32]* @pv_length, i64 0, i64 %idxprom
  store i32 0, i32* %arrayidx, align 4
  %i4 = bitcast %struct.move_s* %agg.result to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %i4, i8* align 4 bitcast (%struct.move_s* @dummy to i8*), i64 24, i1 false)
  br label %return

if.end:                                           ; preds = %entry
  %i5 = load i32, i32* @ply, align 4
  %i6 = load i32, i32* @ply, align 4
  %idxprom1 = sext i32 %i6 to i64
  %arrayidx2 = getelementptr inbounds [300 x i32], [300 x i32]* @pv_length, i64 0, i64 %idxprom1
  store i32 %i5, i32* %arrayidx2, align 4
  %i7 = load i32, i32* @hash, align 4
  %i8 = load i32, i32* @move_number, align 4
  %i9 = load i32, i32* @ply, align 4
  %add = add nsw i32 %i8, %i9
  %sub = sub nsw i32 %add, 1
  %idxprom3 = sext i32 %sub to i64
  %arrayidx4 = getelementptr inbounds [600 x i32], [600 x i32]* @hash_history, i64 0, i64 %idxprom3
  store i32 %i7, i32* %arrayidx4, align 4
  %call5 = call i32 @in_check()
  %tobool6 = icmp ne i32 %call5, 0
  br i1 %tobool6, label %if.then7, label %if.end10

if.then7:                                         ; preds = %if.end
  %i10 = load i32, i32* @ext_check, align 4
  %inc8 = add i32 %i10, 1
  store i32 %inc8, i32* @ext_check, align 4
  %inc9 = add nsw i32 %depth, 1
  br label %if.end10

if.end10:                                         ; preds = %if.then7, %if.end
  %depth.addr.0 = phi i32 [ %inc9, %if.then7 ], [ %depth, %if.end ]
  %i11 = load i32, i32* @ply, align 4
  %idxprom11 = sext i32 %i11 to i64
  %arrayidx12 = getelementptr inbounds [300 x i32], [300 x i32]* @checks, i64 0, i64 %idxprom11
  store i32 %call5, i32* %arrayidx12, align 4
  %i12 = load i32, i32* @ply, align 4
  %idxprom13 = sext i32 %i12 to i64
  %arrayidx14 = getelementptr inbounds [300 x i32], [300 x i32]* @recaps, i64 0, i64 %idxprom13
  store i32 0, i32* %arrayidx14, align 4
  %i13 = load i32, i32* @ply, align 4
  %idxprom15 = sext i32 %i13 to i64
  %arrayidx16 = getelementptr inbounds [300 x i32], [300 x i32]* @singular, i64 0, i64 %idxprom15
  store i32 0, i32* %arrayidx16, align 4
  %i14 = load i32, i32* @Variant, align 4
  %cmp = icmp eq i32 %i14, 4
  br i1 %cmp, label %if.then17, label %if.else

if.then17:                                        ; preds = %if.end10
  store i32 0, i32* @legals, align 4
  store i32 1, i32* @captures, align 4
  %arrayidx18 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %moves, i64 0, i64 0
  call void @gen(%struct.move_s* %arrayidx18)
  %i15 = load i32, i32* @numb_moves, align 4
  store i32 0, i32* @captures, align 4
  %tobool19 = icmp ne i32 %i15, 0
  br i1 %tobool19, label %if.then20, label %if.end31

if.then20:                                        ; preds = %if.then17
  store i32 0, i32* %i, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then20
  %i16 = load i32, i32* %i, align 4
  %cmp21 = icmp slt i32 %i16, %i15
  br i1 %cmp21, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %arrayidx22 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %moves, i64 0, i64 0
  %i17 = load i32, i32* %i, align 4
  call void @make(%struct.move_s* %arrayidx22, i32 %i17)
  %arrayidx23 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %moves, i64 0, i64 0
  %i18 = load i32, i32* %i, align 4
  %call24 = call i32 @check_legal(%struct.move_s* %arrayidx23, i32 %i18, i32 %call5)
  %tobool25 = icmp ne i32 %call24, 0
  br i1 %tobool25, label %if.then26, label %if.end28

if.then26:                                        ; preds = %for.body
  %i19 = load i32, i32* @legals, align 4
  %inc27 = add nsw i32 %i19, 1
  store i32 %inc27, i32* @legals, align 4
  br label %if.end28

if.end28:                                         ; preds = %if.then26, %for.body
  %arrayidx29 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %moves, i64 0, i64 0
  %i20 = load i32, i32* %i, align 4
  call void @unmake(%struct.move_s* %arrayidx29, i32 %i20)
  br label %for.inc

for.inc:                                          ; preds = %if.end28
  %i21 = load i32, i32* %i, align 4
  %inc30 = add nsw i32 %i21, 1
  store i32 %inc30, i32* %i, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end31

if.end31:                                         ; preds = %for.end, %if.then17
  %i22 = load i32, i32* @legals, align 4
  %tobool32 = icmp ne i32 %i22, 0
  br i1 %tobool32, label %if.end49, label %if.then33

if.then33:                                        ; preds = %if.end31
  store i32 0, i32* @captures, align 4
  %arrayidx34 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %moves, i64 0, i64 0
  call void @gen(%struct.move_s* %arrayidx34)
  %i23 = load i32, i32* @numb_moves, align 4
  store i32 0, i32* %i, align 4
  br label %for.cond35

for.cond35:                                       ; preds = %for.inc46, %if.then33
  %i24 = load i32, i32* %i, align 4
  %cmp36 = icmp slt i32 %i24, %i23
  br i1 %cmp36, label %for.body37, label %for.end48

for.body37:                                       ; preds = %for.cond35
  %arrayidx38 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %moves, i64 0, i64 0
  %i25 = load i32, i32* %i, align 4
  call void @make(%struct.move_s* %arrayidx38, i32 %i25)
  %arrayidx39 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %moves, i64 0, i64 0
  %i26 = load i32, i32* %i, align 4
  %call40 = call i32 @check_legal(%struct.move_s* %arrayidx39, i32 %i26, i32 %call5)
  %tobool41 = icmp ne i32 %call40, 0
  br i1 %tobool41, label %if.then42, label %if.end44

if.then42:                                        ; preds = %for.body37
  %i27 = load i32, i32* @legals, align 4
  %inc43 = add nsw i32 %i27, 1
  store i32 %inc43, i32* @legals, align 4
  br label %if.end44

if.end44:                                         ; preds = %if.then42, %for.body37
  %arrayidx45 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %moves, i64 0, i64 0
  %i28 = load i32, i32* %i, align 4
  call void @unmake(%struct.move_s* %arrayidx45, i32 %i28)
  br label %for.inc46

for.inc46:                                        ; preds = %if.end44
  %i29 = load i32, i32* %i, align 4
  %inc47 = add nsw i32 %i29, 1
  store i32 %inc47, i32* %i, align 4
  br label %for.cond35

for.end48:                                        ; preds = %for.cond35
  br label %if.end49

if.end49:                                         ; preds = %for.end48, %if.end31
  %num_moves.0 = phi i32 [ %i15, %if.end31 ], [ %i23, %for.end48 ]
  br label %if.end51

if.else:                                          ; preds = %if.end10
  %arrayidx50 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %moves, i64 0, i64 0
  call void @gen(%struct.move_s* %arrayidx50)
  %i30 = load i32, i32* @numb_moves, align 4
  br label %if.end51

if.end51:                                         ; preds = %if.else, %if.end49
  %num_moves.1 = phi i32 [ %num_moves.0, %if.end49 ], [ %i30, %if.else ]
  %i31 = load i32, i32* @legals, align 4
  store i32 %i31, i32* @movetotal, align 4
  %arrayidx52 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %moves, i64 0, i64 0
  %arrayidx53 = getelementptr inbounds [512 x i32], [512 x i32]* %move_ordering, i64 0, i64 0
  %arrayidx54 = getelementptr inbounds [512 x i32], [512 x i32]* %see_values, i64 0, i64 0
  call void @order_moves(%struct.move_s* %arrayidx52, i32* %arrayidx53, i32* %arrayidx54, i32 %num_moves.1, i32 -1)
  br label %while.cond

while.cond:                                       ; preds = %if.end447, %if.then65, %if.end51
  %alpha.0 = phi i32 [ %originalalpha, %if.end51 ], [ %alpha.1, %if.end447 ], [ %alpha.0, %if.then65 ]
  %first.0 = phi i32 [ 1, %if.end51 ], [ %first.1, %if.end447 ], [ %first.0, %if.then65 ]
  %no_moves.0 = phi i32 [ 1, %if.end51 ], [ %no_moves.1, %if.end447 ], [ %no_moves.0, %if.then65 ]
  %root_score.0 = phi i32 [ -1000000, %if.end51 ], [ %root_score.3, %if.end447 ], [ %root_score.0, %if.then65 ]
  %mc.0 = phi i32 [ 0, %if.end51 ], [ %mc.1, %if.end447 ], [ %mc.0, %if.then65 ]
  %arrayidx55 = getelementptr inbounds [512 x i32], [512 x i32]* %move_ordering, i64 0, i64 0
  %call56 = call i32 @remove_one(i32* %i, i32* %arrayidx55, i32 %num_moves.1)
  %tobool57 = icmp ne i32 %call56, 0
  br i1 %tobool57, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %i32 = load i32, i32* @alllosers, align 4
  %tobool58 = icmp ne i32 %i32, 0
  br i1 %tobool58, label %if.end66, label %land.lhs.true

land.lhs.true:                                    ; preds = %while.body
  %i33 = load i32, i32* %i, align 4
  %idxprom59 = sext i32 %i33 to i64
  %arrayidx60 = getelementptr inbounds [300 x i32], [300 x i32]* @rootlosers, i64 0, i64 %idxprom59
  %i34 = load i32, i32* %arrayidx60, align 4
  %tobool61 = icmp ne i32 %i34, 0
  br i1 %tobool61, label %land.lhs.true62, label %if.end66

land.lhs.true62:                                  ; preds = %land.lhs.true
  %i35 = load i32, i32* @Variant, align 4
  %cmp63 = icmp eq i32 %i35, 4
  br i1 %cmp63, label %if.then65, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true62
  %i36 = load i32, i32* @Variant, align 4
  %cmp64 = icmp eq i32 %i36, 3
  br i1 %cmp64, label %if.then65, label %if.end66

if.then65:                                        ; preds = %lor.lhs.false, %land.lhs.true62
  br label %while.cond

if.end66:                                         ; preds = %lor.lhs.false, %land.lhs.true, %while.body
  %arrayidx67 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %moves, i64 0, i64 0
  %i37 = load i32, i32* %i, align 4
  call void @make(%struct.move_s* %arrayidx67, i32 %i37)
  %i38 = load i32, i32* @hash, align 4
  %i39 = load i32, i32* @move_number, align 4
  %i40 = load i32, i32* @ply, align 4
  %add68 = add nsw i32 %i39, %i40
  %sub69 = sub nsw i32 %add68, 1
  %idxprom70 = sext i32 %sub69 to i64
  %arrayidx71 = getelementptr inbounds [600 x i32], [600 x i32]* @hash_history, i64 0, i64 %idxprom70
  store i32 %i38, i32* %arrayidx71, align 4
  %i41 = load i32, i32* @ply, align 4
  %sub72 = sub nsw i32 %i41, 1
  %idxprom73 = sext i32 %sub72 to i64
  %arrayidx74 = getelementptr inbounds [300 x %struct.move_s], [300 x %struct.move_s]* @path, i64 0, i64 %idxprom73
  %i42 = load i32, i32* %i, align 4
  %idxprom75 = sext i32 %i42 to i64
  %arrayidx76 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %moves, i64 0, i64 %idxprom75
  %i43 = bitcast %struct.move_s* %arrayidx74 to i8*
  %i44 = bitcast %struct.move_s* %arrayidx76 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %i43, i8* align 8 %i44, i64 24, i1 false)
  %i45 = load i32, i32* @nodes, align 4
  %arrayidx77 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %moves, i64 0, i64 0
  %i46 = load i32, i32* %i, align 4
  %call78 = call i32 @check_legal(%struct.move_s* %arrayidx77, i32 %i46, i32 %call5)
  %tobool79 = icmp ne i32 %call78, 0
  br i1 %tobool79, label %if.then80, label %if.end248

if.then80:                                        ; preds = %if.end66
  %arrayidx81 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %moves, i64 0, i64 0
  %i47 = load i32, i32* %i, align 4
  call void @unmake(%struct.move_s* %arrayidx81, i32 %i47)
  %inc82 = add nsw i32 %mc.0, 1
  %i48 = load i32, i32* @movetotal, align 4
  %sub83 = sub nsw i32 %i48, %inc82
  store i32 %sub83, i32* @moveleft, align 4
  %i49 = load i32, i32* %i, align 4
  %idxprom84 = sext i32 %i49 to i64
  %arrayidx85 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %moves, i64 0, i64 %idxprom84
  call void @comp_to_san(%struct.move_s* byval(%struct.move_s) align 8 %arrayidx85, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @searching_move, i64 0, i64 0))
  %arrayidx86 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %moves, i64 0, i64 0
  %i50 = load i32, i32* %i, align 4
  call void @make(%struct.move_s* %arrayidx86, i32 %i50)
  %arrayidx87 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %moves, i64 0, i64 0
  %i51 = load i32, i32* %i, align 4
  %call88 = call i32 @f_in_check(%struct.move_s* %arrayidx87, i32 %i51)
  %i52 = load i32, i32* @ply, align 4
  %idxprom89 = sext i32 %i52 to i64
  %arrayidx90 = getelementptr inbounds [300 x i32], [300 x i32]* @checks, i64 0, i64 %idxprom89
  store i32 %call88, i32* %arrayidx90, align 4
  %i53 = load i32, i32* @ply, align 4
  %idxprom91 = sext i32 %i53 to i64
  %arrayidx92 = getelementptr inbounds [300 x i32], [300 x i32]* @recaps, i64 0, i64 %idxprom91
  store i32 0, i32* %arrayidx92, align 4
  %i54 = load i32, i32* @ply, align 4
  %idxprom93 = sext i32 %i54 to i64
  %arrayidx94 = getelementptr inbounds [300 x i32], [300 x i32]* @singular, i64 0, i64 %idxprom93
  store i32 0, i32* %arrayidx94, align 4
  %cmp95 = icmp eq i32 %first.0, 1
  br i1 %cmp95, label %if.then98, label %lor.lhs.false96

lor.lhs.false96:                                  ; preds = %if.then80
  %i55 = load i32, i32* @i_depth, align 4
  %cmp97 = icmp slt i32 %i55, 2
  br i1 %cmp97, label %if.then98, label %if.else162

if.then98:                                        ; preds = %lor.lhs.false96, %if.then80
  %sub99 = sub nsw i32 0, %originalbeta
  %sub100 = sub nsw i32 0, %alpha.0
  %sub101 = sub nsw i32 %depth.addr.0, 1
  %call102 = call i32 @search(i32 %sub99, i32 %sub100, i32 %sub101, i32 0)
  %sub103 = sub nsw i32 0, %call102
  %i56 = load i32, i32* @time_exit, align 4
  %tobool104 = icmp ne i32 %i56, 0
  br i1 %tobool104, label %if.end161, label %land.lhs.true105

land.lhs.true105:                                 ; preds = %if.then98
  %i57 = load i32, i32* @post, align 4
  %tobool106 = icmp ne i32 %i57, 0
  br i1 %tobool106, label %land.lhs.true109, label %lor.lhs.false107

lor.lhs.false107:                                 ; preds = %land.lhs.true105
  %i58 = load i32, i32* @xb_mode, align 4
  %tobool108 = icmp ne i32 %i58, 0
  br i1 %tobool108, label %if.end161, label %land.lhs.true109

land.lhs.true109:                                 ; preds = %lor.lhs.false107, %land.lhs.true105
  %i59 = load i32, i32* @i_depth, align 4
  %cmp110 = icmp sge i32 %i59, 2
  br i1 %cmp110, label %if.then111, label %if.end161

if.then111:                                       ; preds = %land.lhs.true109
  %cmp112 = icmp sge i32 %sub103, %originalbeta
  br i1 %cmp112, label %if.then113, label %if.else116

if.then113:                                       ; preds = %if.then111
  %i60 = load i32, i32* %i, align 4
  %idxprom114 = sext i32 %i60 to i64
  %arrayidx115 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %moves, i64 0, i64 %idxprom114
  call void @post_fh_thinking(i32 %sub103, %struct.move_s* %arrayidx115)
  br label %if.end153

if.else116:                                       ; preds = %if.then111
  %cmp117 = icmp sle i32 %sub103, %alpha.0
  br i1 %cmp117, label %if.then118, label %if.else121

if.then118:                                       ; preds = %if.else116
  store i32 1, i32* @failed, align 4
  %i61 = load i32, i32* %i, align 4
  %idxprom119 = sext i32 %i61 to i64
  %arrayidx120 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %moves, i64 0, i64 %idxprom119
  call void @post_fl_thinking(i32 %sub103, %struct.move_s* %arrayidx120)
  br label %if.end152

if.else121:                                       ; preds = %if.else116
  %i62 = load i32, i32* @ply, align 4
  %sub122 = sub nsw i32 %i62, 1
  %idxprom123 = sext i32 %sub122 to i64
  %arrayidx124 = getelementptr inbounds [300 x [300 x %struct.move_s]], [300 x [300 x %struct.move_s]]* @pv, i64 0, i64 %idxprom123
  %i63 = load i32, i32* @ply, align 4
  %sub125 = sub nsw i32 %i63, 1
  %idxprom126 = sext i32 %sub125 to i64
  %arrayidx127 = getelementptr inbounds [300 x %struct.move_s], [300 x %struct.move_s]* %arrayidx124, i64 0, i64 %idxprom126
  %i64 = load i32, i32* %i, align 4
  %idxprom128 = sext i32 %i64 to i64
  %arrayidx129 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %moves, i64 0, i64 %idxprom128
  %i65 = bitcast %struct.move_s* %arrayidx127 to i8*
  %i66 = bitcast %struct.move_s* %arrayidx129 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %i65, i8* align 8 %i66, i64 24, i1 false)
  %i67 = load i32, i32* @ply, align 4
  br label %for.cond130

for.cond130:                                      ; preds = %for.inc144, %if.else121
  %j.0 = phi i32 [ %i67, %if.else121 ], [ %inc145, %for.inc144 ]
  %i68 = load i32, i32* @ply, align 4
  %idxprom131 = sext i32 %i68 to i64
  %arrayidx132 = getelementptr inbounds [300 x i32], [300 x i32]* @pv_length, i64 0, i64 %idxprom131
  %i69 = load i32, i32* %arrayidx132, align 4
  %cmp133 = icmp slt i32 %j.0, %i69
  br i1 %cmp133, label %for.body134, label %for.end146

for.body134:                                      ; preds = %for.cond130
  %i70 = load i32, i32* @ply, align 4
  %sub135 = sub nsw i32 %i70, 1
  %idxprom136 = sext i32 %sub135 to i64
  %arrayidx137 = getelementptr inbounds [300 x [300 x %struct.move_s]], [300 x [300 x %struct.move_s]]* @pv, i64 0, i64 %idxprom136
  %idxprom138 = sext i32 %j.0 to i64
  %arrayidx139 = getelementptr inbounds [300 x %struct.move_s], [300 x %struct.move_s]* %arrayidx137, i64 0, i64 %idxprom138
  %i71 = load i32, i32* @ply, align 4
  %idxprom140 = sext i32 %i71 to i64
  %arrayidx141 = getelementptr inbounds [300 x [300 x %struct.move_s]], [300 x [300 x %struct.move_s]]* @pv, i64 0, i64 %idxprom140
  %idxprom142 = sext i32 %j.0 to i64
  %arrayidx143 = getelementptr inbounds [300 x %struct.move_s], [300 x %struct.move_s]* %arrayidx141, i64 0, i64 %idxprom142
  %i72 = bitcast %struct.move_s* %arrayidx139 to i8*
  %i73 = bitcast %struct.move_s* %arrayidx143 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %i72, i8* align 8 %i73, i64 24, i1 false)
  br label %for.inc144

for.inc144:                                       ; preds = %for.body134
  %inc145 = add nsw i32 %j.0, 1
  br label %for.cond130

for.end146:                                       ; preds = %for.cond130
  %i74 = load i32, i32* @ply, align 4
  %idxprom147 = sext i32 %i74 to i64
  %arrayidx148 = getelementptr inbounds [300 x i32], [300 x i32]* @pv_length, i64 0, i64 %idxprom147
  %i75 = load i32, i32* %arrayidx148, align 4
  %i76 = load i32, i32* @ply, align 4
  %sub149 = sub nsw i32 %i76, 1
  %idxprom150 = sext i32 %sub149 to i64
  %arrayidx151 = getelementptr inbounds [300 x i32], [300 x i32]* @pv_length, i64 0, i64 %idxprom150
  store i32 %i75, i32* %arrayidx151, align 4
  call void @post_thinking(i32 %sub103)
  br label %if.end152

if.end152:                                        ; preds = %for.end146, %if.then118
  br label %if.end153

if.end153:                                        ; preds = %if.end152, %if.then113
  %i77 = load i32, i32* @cur_score, align 4
  %cmp154 = icmp sgt i32 %sub103, %i77
  br i1 %cmp154, label %land.lhs.true155, label %if.end160

land.lhs.true155:                                 ; preds = %if.end153
  %i78 = load i32, i32* @time_exit, align 4
  %tobool156 = icmp ne i32 %i78, 0
  br i1 %tobool156, label %if.end160, label %if.then157

if.then157:                                       ; preds = %land.lhs.true155
  store i32 %sub103, i32* @cur_score, align 4
  %i79 = load i32, i32* %i, align 4
  store i32 %i79, i32* @bestmovenum, align 4
  %i80 = load i32, i32* %i, align 4
  %idxprom158 = sext i32 %i80 to i64
  %arrayidx159 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %moves, i64 0, i64 %idxprom158
  %i81 = bitcast %struct.move_s* %best_move to i8*
  %i82 = bitcast %struct.move_s* %arrayidx159 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %i81, i8* align 8 %i82, i64 24, i1 false)
  br label %if.end160

if.end160:                                        ; preds = %if.then157, %land.lhs.true155, %if.end153
  br label %if.end161

if.end161:                                        ; preds = %if.end160, %land.lhs.true109, %lor.lhs.false107, %if.then98
  br label %if.end232

if.else162:                                       ; preds = %lor.lhs.false96
  %sub163 = sub nsw i32 0, %alpha.0
  %sub164 = sub nsw i32 %sub163, 1
  %sub165 = sub nsw i32 0, %alpha.0
  %sub166 = sub nsw i32 %depth.addr.0, 1
  %call167 = call i32 @search(i32 %sub164, i32 %sub165, i32 %sub166, i32 0)
  %sub168 = sub nsw i32 0, %call167
  %cmp169 = icmp sgt i32 %sub168, %alpha.0
  br i1 %cmp169, label %land.lhs.true170, label %if.end224

land.lhs.true170:                                 ; preds = %if.else162
  %cmp171 = icmp slt i32 %sub168, %originalbeta
  br i1 %cmp171, label %land.lhs.true172, label %if.end224

land.lhs.true172:                                 ; preds = %land.lhs.true170
  %i83 = load i32, i32* @time_exit, align 4
  %tobool173 = icmp ne i32 %i83, 0
  br i1 %tobool173, label %if.end224, label %if.then174

if.then174:                                       ; preds = %land.lhs.true172
  %i84 = load i32, i32* %i, align 4
  %idxprom175 = sext i32 %i84 to i64
  %arrayidx176 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %moves, i64 0, i64 %idxprom175
  call void @post_fail_thinking(i32 %sub168, %struct.move_s* %arrayidx176)
  %sub177 = sub nsw i32 0, %originalbeta
  %sub178 = sub nsw i32 0, %alpha.0
  %sub179 = sub nsw i32 %depth.addr.0, 1
  %call180 = call i32 @search(i32 %sub177, i32 %sub178, i32 %sub179, i32 0)
  %sub181 = sub nsw i32 0, %call180
  %cmp182 = icmp sgt i32 %sub181, %alpha.0
  br i1 %cmp182, label %land.lhs.true183, label %if.end223

land.lhs.true183:                                 ; preds = %if.then174
  %i85 = load i32, i32* @time_exit, align 4
  %tobool184 = icmp ne i32 %i85, 0
  br i1 %tobool184, label %if.end223, label %if.then185

if.then185:                                       ; preds = %land.lhs.true183
  store i32 0, i32* @failed, align 4
  store i32 %sub181, i32* @cur_score, align 4
  %i86 = load i32, i32* %i, align 4
  store i32 %i86, i32* @bestmovenum, align 4
  %i87 = load i32, i32* %i, align 4
  %idxprom186 = sext i32 %i87 to i64
  %arrayidx187 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %moves, i64 0, i64 %idxprom186
  %i88 = bitcast %struct.move_s* %best_move to i8*
  %i89 = bitcast %struct.move_s* %arrayidx187 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %i88, i8* align 8 %i89, i64 24, i1 false)
  %cmp188 = icmp slt i32 %sub181, %originalbeta
  br i1 %cmp188, label %land.lhs.true189, label %if.end222

land.lhs.true189:                                 ; preds = %if.then185
  %i90 = load i32, i32* @i_depth, align 4
  %cmp190 = icmp sge i32 %i90, 2
  br i1 %cmp190, label %if.then191, label %if.end222

if.then191:                                       ; preds = %land.lhs.true189
  %i91 = load i32, i32* @ply, align 4
  %sub192 = sub nsw i32 %i91, 1
  %idxprom193 = sext i32 %sub192 to i64
  %arrayidx194 = getelementptr inbounds [300 x [300 x %struct.move_s]], [300 x [300 x %struct.move_s]]* @pv, i64 0, i64 %idxprom193
  %i92 = load i32, i32* @ply, align 4
  %sub195 = sub nsw i32 %i92, 1
  %idxprom196 = sext i32 %sub195 to i64
  %arrayidx197 = getelementptr inbounds [300 x %struct.move_s], [300 x %struct.move_s]* %arrayidx194, i64 0, i64 %idxprom196
  %i93 = load i32, i32* %i, align 4
  %idxprom198 = sext i32 %i93 to i64
  %arrayidx199 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %moves, i64 0, i64 %idxprom198
  %i94 = bitcast %struct.move_s* %arrayidx197 to i8*
  %i95 = bitcast %struct.move_s* %arrayidx199 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %i94, i8* align 8 %i95, i64 24, i1 false)
  %i96 = load i32, i32* @ply, align 4
  br label %for.cond200

for.cond200:                                      ; preds = %for.inc214, %if.then191
  %j.1 = phi i32 [ %i96, %if.then191 ], [ %inc215, %for.inc214 ]
  %i97 = load i32, i32* @ply, align 4
  %idxprom201 = sext i32 %i97 to i64
  %arrayidx202 = getelementptr inbounds [300 x i32], [300 x i32]* @pv_length, i64 0, i64 %idxprom201
  %i98 = load i32, i32* %arrayidx202, align 4
  %cmp203 = icmp slt i32 %j.1, %i98
  br i1 %cmp203, label %for.body204, label %for.end216

for.body204:                                      ; preds = %for.cond200
  %i99 = load i32, i32* @ply, align 4
  %sub205 = sub nsw i32 %i99, 1
  %idxprom206 = sext i32 %sub205 to i64
  %arrayidx207 = getelementptr inbounds [300 x [300 x %struct.move_s]], [300 x [300 x %struct.move_s]]* @pv, i64 0, i64 %idxprom206
  %idxprom208 = sext i32 %j.1 to i64
  %arrayidx209 = getelementptr inbounds [300 x %struct.move_s], [300 x %struct.move_s]* %arrayidx207, i64 0, i64 %idxprom208
  %i100 = load i32, i32* @ply, align 4
  %idxprom210 = sext i32 %i100 to i64
  %arrayidx211 = getelementptr inbounds [300 x [300 x %struct.move_s]], [300 x [300 x %struct.move_s]]* @pv, i64 0, i64 %idxprom210
  %idxprom212 = sext i32 %j.1 to i64
  %arrayidx213 = getelementptr inbounds [300 x %struct.move_s], [300 x %struct.move_s]* %arrayidx211, i64 0, i64 %idxprom212
  %i101 = bitcast %struct.move_s* %arrayidx209 to i8*
  %i102 = bitcast %struct.move_s* %arrayidx213 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %i101, i8* align 8 %i102, i64 24, i1 false)
  br label %for.inc214

for.inc214:                                       ; preds = %for.body204
  %inc215 = add nsw i32 %j.1, 1
  br label %for.cond200

for.end216:                                       ; preds = %for.cond200
  %i103 = load i32, i32* @ply, align 4
  %idxprom217 = sext i32 %i103 to i64
  %arrayidx218 = getelementptr inbounds [300 x i32], [300 x i32]* @pv_length, i64 0, i64 %idxprom217
  %i104 = load i32, i32* %arrayidx218, align 4
  %i105 = load i32, i32* @ply, align 4
  %sub219 = sub nsw i32 %i105, 1
  %idxprom220 = sext i32 %sub219 to i64
  %arrayidx221 = getelementptr inbounds [300 x i32], [300 x i32]* @pv_length, i64 0, i64 %idxprom220
  store i32 %i104, i32* %arrayidx221, align 4
  br label %if.end222

if.end222:                                        ; preds = %for.end216, %land.lhs.true189, %if.then185
  br label %if.end223

if.end223:                                        ; preds = %if.end222, %land.lhs.true183, %if.then174
  br label %if.end224

if.end224:                                        ; preds = %if.end223, %land.lhs.true172, %land.lhs.true170, %if.else162
  %root_score.1 = phi i32 [ %sub168, %land.lhs.true172 ], [ %sub181, %if.end223 ], [ %sub168, %land.lhs.true170 ], [ %sub168, %if.else162 ]
  %cmp225 = icmp sge i32 %root_score.1, %originalbeta
  br i1 %cmp225, label %land.lhs.true226, label %if.end231

land.lhs.true226:                                 ; preds = %if.end224
  %i106 = load i32, i32* @time_exit, align 4
  %tobool227 = icmp ne i32 %i106, 0
  br i1 %tobool227, label %if.end231, label %if.then228

if.then228:                                       ; preds = %land.lhs.true226
  %i107 = load i32, i32* %i, align 4
  %idxprom229 = sext i32 %i107 to i64
  %arrayidx230 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %moves, i64 0, i64 %idxprom229
  call void @post_fh_thinking(i32 %root_score.1, %struct.move_s* %arrayidx230)
  br label %if.end231

if.end231:                                        ; preds = %if.then228, %land.lhs.true226, %if.end224
  br label %if.end232

if.end232:                                        ; preds = %if.end231, %if.end161
  %root_score.2 = phi i32 [ %sub103, %if.end161 ], [ %root_score.1, %if.end231 ]
  %i108 = load i32, i32* @cur_score, align 4
  %cmp233 = icmp sgt i32 %root_score.2, %i108
  br i1 %cmp233, label %land.lhs.true234, label %if.end239

land.lhs.true234:                                 ; preds = %if.end232
  %i109 = load i32, i32* @time_exit, align 4
  %tobool235 = icmp ne i32 %i109, 0
  br i1 %tobool235, label %if.end239, label %if.then236

if.then236:                                       ; preds = %land.lhs.true234
  store i32 %root_score.2, i32* @cur_score, align 4
  %i110 = load i32, i32* %i, align 4
  store i32 %i110, i32* @bestmovenum, align 4
  %i111 = load i32, i32* %i, align 4
  %idxprom237 = sext i32 %i111 to i64
  %arrayidx238 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %moves, i64 0, i64 %idxprom237
  %i112 = bitcast %struct.move_s* %best_move to i8*
  %i113 = bitcast %struct.move_s* %arrayidx238 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %i112, i8* align 8 %i113, i64 24, i1 false)
  br label %if.end239

if.end239:                                        ; preds = %if.then236, %land.lhs.true234, %if.end232
  %i114 = load i32, i32* @time_exit, align 4
  %tobool240 = icmp ne i32 %i114, 0
  br i1 %tobool240, label %land.lhs.true241, label %if.end247

land.lhs.true241:                                 ; preds = %if.end239
  %i115 = load i32, i32* @cur_score, align 4
  %cmp242 = icmp eq i32 %i115, -1000000
  br i1 %cmp242, label %if.then243, label %if.end247

if.then243:                                       ; preds = %land.lhs.true241
  %tobool244 = icmp ne i32 %no_moves.0, 0
  br i1 %tobool244, label %if.then245, label %if.end246

if.then245:                                       ; preds = %if.then243
  store i32 1, i32* @time_failure, align 4
  br label %if.end246

if.end246:                                        ; preds = %if.then245, %if.then243
  br label %if.end247

if.end247:                                        ; preds = %if.end246, %land.lhs.true241, %if.end239
  br label %if.end248

if.end248:                                        ; preds = %if.end247, %if.end66
  %legal_move.0 = phi i32 [ 1, %if.end247 ], [ 0, %if.end66 ]
  %no_moves.1 = phi i32 [ 0, %if.end247 ], [ %no_moves.0, %if.end66 ]
  %root_score.3 = phi i32 [ %root_score.2, %if.end247 ], [ %root_score.0, %if.end66 ]
  %mc.1 = phi i32 [ %inc82, %if.end247 ], [ %mc.0, %if.end66 ]
  %arrayidx249 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %moves, i64 0, i64 0
  %i116 = load i32, i32* %i, align 4
  call void @unmake(%struct.move_s* %arrayidx249, i32 %i116)
  %i117 = load i32, i32* @time_exit, align 4
  %tobool250 = icmp ne i32 %i117, 0
  br i1 %tobool250, label %if.then251, label %if.end252

if.then251:                                       ; preds = %if.end248
  %i118 = bitcast %struct.move_s* %agg.result to i8*
  %i119 = bitcast %struct.move_s* %best_move to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %i118, i8* align 4 %i119, i64 24, i1 false)
  br label %return

if.end252:                                        ; preds = %if.end248
  %cmp253 = icmp sgt i32 %root_score.3, %alpha.0
  br i1 %cmp253, label %land.lhs.true254, label %if.end444

land.lhs.true254:                                 ; preds = %if.end252
  %tobool255 = icmp ne i32 %legal_move.0, 0
  br i1 %tobool255, label %if.then256, label %if.end444

if.then256:                                       ; preds = %land.lhs.true254
  %i120 = load i32, i32* %i, align 4
  %idxprom257 = sext i32 %i120 to i64
  %arrayidx258 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %moves, i64 0, i64 %idxprom257
  %from = getelementptr inbounds %struct.move_s, %struct.move_s* %arrayidx258, i32 0, i32 0
  %i121 = load i32, i32* %from, align 8
  %i122 = load i32, i32* @ply, align 4
  %idxprom259 = sext i32 %i122 to i64
  %arrayidx260 = getelementptr inbounds [300 x %struct.move_s], [300 x %struct.move_s]* @killer1, i64 0, i64 %idxprom259
  %from261 = getelementptr inbounds %struct.move_s, %struct.move_s* %arrayidx260, i32 0, i32 0
  %i123 = load i32, i32* %from261, align 8
  %cmp262 = icmp eq i32 %i121, %i123
  br i1 %cmp262, label %land.lhs.true263, label %if.else281

land.lhs.true263:                                 ; preds = %if.then256
  %i124 = load i32, i32* %i, align 4
  %idxprom264 = sext i32 %i124 to i64
  %arrayidx265 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %moves, i64 0, i64 %idxprom264
  %target = getelementptr inbounds %struct.move_s, %struct.move_s* %arrayidx265, i32 0, i32 1
  %i125 = load i32, i32* %target, align 4
  %i126 = load i32, i32* @ply, align 4
  %idxprom266 = sext i32 %i126 to i64
  %arrayidx267 = getelementptr inbounds [300 x %struct.move_s], [300 x %struct.move_s]* @killer1, i64 0, i64 %idxprom266
  %target268 = getelementptr inbounds %struct.move_s, %struct.move_s* %arrayidx267, i32 0, i32 1
  %i127 = load i32, i32* %target268, align 4
  %cmp269 = icmp eq i32 %i125, %i127
  br i1 %cmp269, label %land.lhs.true270, label %if.else281

land.lhs.true270:                                 ; preds = %land.lhs.true263
  %i128 = load i32, i32* %i, align 4
  %idxprom271 = sext i32 %i128 to i64
  %arrayidx272 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %moves, i64 0, i64 %idxprom271
  %promoted = getelementptr inbounds %struct.move_s, %struct.move_s* %arrayidx272, i32 0, i32 3
  %i129 = load i32, i32* %promoted, align 4
  %i130 = load i32, i32* @ply, align 4
  %idxprom273 = sext i32 %i130 to i64
  %arrayidx274 = getelementptr inbounds [300 x %struct.move_s], [300 x %struct.move_s]* @killer1, i64 0, i64 %idxprom273
  %promoted275 = getelementptr inbounds %struct.move_s, %struct.move_s* %arrayidx274, i32 0, i32 3
  %i131 = load i32, i32* %promoted275, align 4
  %cmp276 = icmp eq i32 %i129, %i131
  br i1 %cmp276, label %if.then277, label %if.else281

if.then277:                                       ; preds = %land.lhs.true270
  %i132 = load i32, i32* @ply, align 4
  %idxprom278 = sext i32 %i132 to i64
  %arrayidx279 = getelementptr inbounds [300 x i32], [300 x i32]* @killer_scores, i64 0, i64 %idxprom278
  %i133 = load i32, i32* %arrayidx279, align 4
  %inc280 = add nsw i32 %i133, 1
  store i32 %inc280, i32* %arrayidx279, align 4
  br label %if.end392

if.else281:                                       ; preds = %land.lhs.true270, %land.lhs.true263, %if.then256
  %i134 = load i32, i32* %i, align 4
  %idxprom282 = sext i32 %i134 to i64
  %arrayidx283 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %moves, i64 0, i64 %idxprom282
  %from284 = getelementptr inbounds %struct.move_s, %struct.move_s* %arrayidx283, i32 0, i32 0
  %i135 = load i32, i32* %from284, align 8
  %i136 = load i32, i32* @ply, align 4
  %idxprom285 = sext i32 %i136 to i64
  %arrayidx286 = getelementptr inbounds [300 x %struct.move_s], [300 x %struct.move_s]* @killer2, i64 0, i64 %idxprom285
  %from287 = getelementptr inbounds %struct.move_s, %struct.move_s* %arrayidx286, i32 0, i32 0
  %i137 = load i32, i32* %from287, align 8
  %cmp288 = icmp eq i32 %i135, %i137
  br i1 %cmp288, label %land.lhs.true289, label %if.else332

land.lhs.true289:                                 ; preds = %if.else281
  %i138 = load i32, i32* %i, align 4
  %idxprom290 = sext i32 %i138 to i64
  %arrayidx291 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %moves, i64 0, i64 %idxprom290
  %target292 = getelementptr inbounds %struct.move_s, %struct.move_s* %arrayidx291, i32 0, i32 1
  %i139 = load i32, i32* %target292, align 4
  %i140 = load i32, i32* @ply, align 4
  %idxprom293 = sext i32 %i140 to i64
  %arrayidx294 = getelementptr inbounds [300 x %struct.move_s], [300 x %struct.move_s]* @killer2, i64 0, i64 %idxprom293
  %target295 = getelementptr inbounds %struct.move_s, %struct.move_s* %arrayidx294, i32 0, i32 1
  %i141 = load i32, i32* %target295, align 4
  %cmp296 = icmp eq i32 %i139, %i141
  br i1 %cmp296, label %land.lhs.true297, label %if.else332

land.lhs.true297:                                 ; preds = %land.lhs.true289
  %i142 = load i32, i32* %i, align 4
  %idxprom298 = sext i32 %i142 to i64
  %arrayidx299 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %moves, i64 0, i64 %idxprom298
  %promoted300 = getelementptr inbounds %struct.move_s, %struct.move_s* %arrayidx299, i32 0, i32 3
  %i143 = load i32, i32* %promoted300, align 4
  %i144 = load i32, i32* @ply, align 4
  %idxprom301 = sext i32 %i144 to i64
  %arrayidx302 = getelementptr inbounds [300 x %struct.move_s], [300 x %struct.move_s]* @killer2, i64 0, i64 %idxprom301
  %promoted303 = getelementptr inbounds %struct.move_s, %struct.move_s* %arrayidx302, i32 0, i32 3
  %i145 = load i32, i32* %promoted303, align 4
  %cmp304 = icmp eq i32 %i143, %i145
  br i1 %cmp304, label %if.then305, label %if.else332

if.then305:                                       ; preds = %land.lhs.true297
  %i146 = load i32, i32* @ply, align 4
  %idxprom306 = sext i32 %i146 to i64
  %arrayidx307 = getelementptr inbounds [300 x i32], [300 x i32]* @killer_scores2, i64 0, i64 %idxprom306
  %i147 = load i32, i32* %arrayidx307, align 4
  %inc308 = add nsw i32 %i147, 1
  store i32 %inc308, i32* %arrayidx307, align 4
  %i148 = load i32, i32* @ply, align 4
  %idxprom309 = sext i32 %i148 to i64
  %arrayidx310 = getelementptr inbounds [300 x i32], [300 x i32]* @killer_scores2, i64 0, i64 %idxprom309
  %i149 = load i32, i32* %arrayidx310, align 4
  %i150 = load i32, i32* @ply, align 4
  %idxprom311 = sext i32 %i150 to i64
  %arrayidx312 = getelementptr inbounds [300 x i32], [300 x i32]* @killer_scores, i64 0, i64 %idxprom311
  %i151 = load i32, i32* %arrayidx312, align 4
  %cmp313 = icmp sgt i32 %i149, %i151
  br i1 %cmp313, label %if.then314, label %if.end331

if.then314:                                       ; preds = %if.then305
  %i152 = load i32, i32* @ply, align 4
  %idxprom315 = sext i32 %i152 to i64
  %arrayidx316 = getelementptr inbounds [300 x %struct.move_s], [300 x %struct.move_s]* @killer1, i64 0, i64 %idxprom315
  %i153 = bitcast %struct.move_s* %kswap to i8*
  %i154 = bitcast %struct.move_s* %arrayidx316 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %i153, i8* align 8 %i154, i64 24, i1 false)
  %i155 = load i32, i32* @ply, align 4
  %idxprom317 = sext i32 %i155 to i64
  %arrayidx318 = getelementptr inbounds [300 x %struct.move_s], [300 x %struct.move_s]* @killer1, i64 0, i64 %idxprom317
  %i156 = load i32, i32* @ply, align 4
  %idxprom319 = sext i32 %i156 to i64
  %arrayidx320 = getelementptr inbounds [300 x %struct.move_s], [300 x %struct.move_s]* @killer2, i64 0, i64 %idxprom319
  %i157 = bitcast %struct.move_s* %arrayidx318 to i8*
  %i158 = bitcast %struct.move_s* %arrayidx320 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %i157, i8* align 8 %i158, i64 24, i1 false)
  %i159 = load i32, i32* @ply, align 4
  %idxprom321 = sext i32 %i159 to i64
  %arrayidx322 = getelementptr inbounds [300 x %struct.move_s], [300 x %struct.move_s]* @killer2, i64 0, i64 %idxprom321
  %i160 = bitcast %struct.move_s* %arrayidx322 to i8*
  %i161 = bitcast %struct.move_s* %kswap to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %i160, i8* align 4 %i161, i64 24, i1 false)
  %i162 = load i32, i32* @ply, align 4
  %idxprom323 = sext i32 %i162 to i64
  %arrayidx324 = getelementptr inbounds [300 x i32], [300 x i32]* @killer_scores, i64 0, i64 %idxprom323
  %i163 = load i32, i32* %arrayidx324, align 4
  %i164 = load i32, i32* @ply, align 4
  %idxprom325 = sext i32 %i164 to i64
  %arrayidx326 = getelementptr inbounds [300 x i32], [300 x i32]* @killer_scores2, i64 0, i64 %idxprom325
  %i165 = load i32, i32* %arrayidx326, align 4
  %i166 = load i32, i32* @ply, align 4
  %idxprom327 = sext i32 %i166 to i64
  %arrayidx328 = getelementptr inbounds [300 x i32], [300 x i32]* @killer_scores, i64 0, i64 %idxprom327
  store i32 %i165, i32* %arrayidx328, align 4
  %i167 = load i32, i32* @ply, align 4
  %idxprom329 = sext i32 %i167 to i64
  %arrayidx330 = getelementptr inbounds [300 x i32], [300 x i32]* @killer_scores2, i64 0, i64 %idxprom329
  store i32 %i163, i32* %arrayidx330, align 4
  br label %if.end331

if.end331:                                        ; preds = %if.then314, %if.then305
  br label %if.end391

if.else332:                                       ; preds = %land.lhs.true297, %land.lhs.true289, %if.else281
  %i168 = load i32, i32* %i, align 4
  %idxprom333 = sext i32 %i168 to i64
  %arrayidx334 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %moves, i64 0, i64 %idxprom333
  %from335 = getelementptr inbounds %struct.move_s, %struct.move_s* %arrayidx334, i32 0, i32 0
  %i169 = load i32, i32* %from335, align 8
  %i170 = load i32, i32* @ply, align 4
  %idxprom336 = sext i32 %i170 to i64
  %arrayidx337 = getelementptr inbounds [300 x %struct.move_s], [300 x %struct.move_s]* @killer3, i64 0, i64 %idxprom336
  %from338 = getelementptr inbounds %struct.move_s, %struct.move_s* %arrayidx337, i32 0, i32 0
  %i171 = load i32, i32* %from338, align 8
  %cmp339 = icmp eq i32 %i169, %i171
  br i1 %cmp339, label %land.lhs.true340, label %if.else383

land.lhs.true340:                                 ; preds = %if.else332
  %i172 = load i32, i32* %i, align 4
  %idxprom341 = sext i32 %i172 to i64
  %arrayidx342 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %moves, i64 0, i64 %idxprom341
  %target343 = getelementptr inbounds %struct.move_s, %struct.move_s* %arrayidx342, i32 0, i32 1
  %i173 = load i32, i32* %target343, align 4
  %i174 = load i32, i32* @ply, align 4
  %idxprom344 = sext i32 %i174 to i64
  %arrayidx345 = getelementptr inbounds [300 x %struct.move_s], [300 x %struct.move_s]* @killer3, i64 0, i64 %idxprom344
  %target346 = getelementptr inbounds %struct.move_s, %struct.move_s* %arrayidx345, i32 0, i32 1
  %i175 = load i32, i32* %target346, align 4
  %cmp347 = icmp eq i32 %i173, %i175
  br i1 %cmp347, label %land.lhs.true348, label %if.else383

land.lhs.true348:                                 ; preds = %land.lhs.true340
  %i176 = load i32, i32* %i, align 4
  %idxprom349 = sext i32 %i176 to i64
  %arrayidx350 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %moves, i64 0, i64 %idxprom349
  %promoted351 = getelementptr inbounds %struct.move_s, %struct.move_s* %arrayidx350, i32 0, i32 3
  %i177 = load i32, i32* %promoted351, align 4
  %i178 = load i32, i32* @ply, align 4
  %idxprom352 = sext i32 %i178 to i64
  %arrayidx353 = getelementptr inbounds [300 x %struct.move_s], [300 x %struct.move_s]* @killer3, i64 0, i64 %idxprom352
  %promoted354 = getelementptr inbounds %struct.move_s, %struct.move_s* %arrayidx353, i32 0, i32 3
  %i179 = load i32, i32* %promoted354, align 4
  %cmp355 = icmp eq i32 %i177, %i179
  br i1 %cmp355, label %if.then356, label %if.else383

if.then356:                                       ; preds = %land.lhs.true348
  %i180 = load i32, i32* @ply, align 4
  %idxprom357 = sext i32 %i180 to i64
  %arrayidx358 = getelementptr inbounds [300 x i32], [300 x i32]* @killer_scores3, i64 0, i64 %idxprom357
  %i181 = load i32, i32* %arrayidx358, align 4
  %inc359 = add nsw i32 %i181, 1
  store i32 %inc359, i32* %arrayidx358, align 4
  %i182 = load i32, i32* @ply, align 4
  %idxprom360 = sext i32 %i182 to i64
  %arrayidx361 = getelementptr inbounds [300 x i32], [300 x i32]* @killer_scores3, i64 0, i64 %idxprom360
  %i183 = load i32, i32* %arrayidx361, align 4
  %i184 = load i32, i32* @ply, align 4
  %idxprom362 = sext i32 %i184 to i64
  %arrayidx363 = getelementptr inbounds [300 x i32], [300 x i32]* @killer_scores2, i64 0, i64 %idxprom362
  %i185 = load i32, i32* %arrayidx363, align 4
  %cmp364 = icmp sgt i32 %i183, %i185
  br i1 %cmp364, label %if.then365, label %if.end382

if.then365:                                       ; preds = %if.then356
  %i186 = load i32, i32* @ply, align 4
  %idxprom366 = sext i32 %i186 to i64
  %arrayidx367 = getelementptr inbounds [300 x %struct.move_s], [300 x %struct.move_s]* @killer2, i64 0, i64 %idxprom366
  %i187 = bitcast %struct.move_s* %kswap to i8*
  %i188 = bitcast %struct.move_s* %arrayidx367 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %i187, i8* align 8 %i188, i64 24, i1 false)
  %i189 = load i32, i32* @ply, align 4
  %idxprom368 = sext i32 %i189 to i64
  %arrayidx369 = getelementptr inbounds [300 x %struct.move_s], [300 x %struct.move_s]* @killer2, i64 0, i64 %idxprom368
  %i190 = load i32, i32* @ply, align 4
  %idxprom370 = sext i32 %i190 to i64
  %arrayidx371 = getelementptr inbounds [300 x %struct.move_s], [300 x %struct.move_s]* @killer3, i64 0, i64 %idxprom370
  %i191 = bitcast %struct.move_s* %arrayidx369 to i8*
  %i192 = bitcast %struct.move_s* %arrayidx371 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %i191, i8* align 8 %i192, i64 24, i1 false)
  %i193 = load i32, i32* @ply, align 4
  %idxprom372 = sext i32 %i193 to i64
  %arrayidx373 = getelementptr inbounds [300 x %struct.move_s], [300 x %struct.move_s]* @killer3, i64 0, i64 %idxprom372
  %i194 = bitcast %struct.move_s* %arrayidx373 to i8*
  %i195 = bitcast %struct.move_s* %kswap to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %i194, i8* align 4 %i195, i64 24, i1 false)
  %i196 = load i32, i32* @ply, align 4
  %idxprom374 = sext i32 %i196 to i64
  %arrayidx375 = getelementptr inbounds [300 x i32], [300 x i32]* @killer_scores2, i64 0, i64 %idxprom374
  %i197 = load i32, i32* %arrayidx375, align 4
  %i198 = load i32, i32* @ply, align 4
  %idxprom376 = sext i32 %i198 to i64
  %arrayidx377 = getelementptr inbounds [300 x i32], [300 x i32]* @killer_scores3, i64 0, i64 %idxprom376
  %i199 = load i32, i32* %arrayidx377, align 4
  %i200 = load i32, i32* @ply, align 4
  %idxprom378 = sext i32 %i200 to i64
  %arrayidx379 = getelementptr inbounds [300 x i32], [300 x i32]* @killer_scores2, i64 0, i64 %idxprom378
  store i32 %i199, i32* %arrayidx379, align 4
  %i201 = load i32, i32* @ply, align 4
  %idxprom380 = sext i32 %i201 to i64
  %arrayidx381 = getelementptr inbounds [300 x i32], [300 x i32]* @killer_scores3, i64 0, i64 %idxprom380
  store i32 %i197, i32* %arrayidx381, align 4
  br label %if.end382

if.end382:                                        ; preds = %if.then365, %if.then356
  br label %if.end390

if.else383:                                       ; preds = %land.lhs.true348, %land.lhs.true340, %if.else332
  %i202 = load i32, i32* @ply, align 4
  %idxprom384 = sext i32 %i202 to i64
  %arrayidx385 = getelementptr inbounds [300 x i32], [300 x i32]* @killer_scores3, i64 0, i64 %idxprom384
  store i32 1, i32* %arrayidx385, align 4
  %i203 = load i32, i32* @ply, align 4
  %idxprom386 = sext i32 %i203 to i64
  %arrayidx387 = getelementptr inbounds [300 x %struct.move_s], [300 x %struct.move_s]* @killer3, i64 0, i64 %idxprom386
  %i204 = load i32, i32* %i, align 4
  %idxprom388 = sext i32 %i204 to i64
  %arrayidx389 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %moves, i64 0, i64 %idxprom388
  %i205 = bitcast %struct.move_s* %arrayidx387 to i8*
  %i206 = bitcast %struct.move_s* %arrayidx389 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %i205, i8* align 8 %i206, i64 24, i1 false)
  br label %if.end390

if.end390:                                        ; preds = %if.else383, %if.end382
  br label %if.end391

if.end391:                                        ; preds = %if.end390, %if.end331
  br label %if.end392

if.end392:                                        ; preds = %if.end391, %if.then277
  %i207 = load i32, i32* %i, align 4
  %idxprom393 = sext i32 %i207 to i64
  %arrayidx394 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %moves, i64 0, i64 %idxprom393
  %from395 = getelementptr inbounds %struct.move_s, %struct.move_s* %arrayidx394, i32 0, i32 0
  %i208 = load i32, i32* %from395, align 8
  %idxprom396 = sext i32 %i208 to i64
  %arrayidx397 = getelementptr inbounds [144 x [144 x i32]], [144 x [144 x i32]]* @history_h, i64 0, i64 %idxprom396
  %i209 = load i32, i32* %i, align 4
  %idxprom398 = sext i32 %i209 to i64
  %arrayidx399 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %moves, i64 0, i64 %idxprom398
  %target400 = getelementptr inbounds %struct.move_s, %struct.move_s* %arrayidx399, i32 0, i32 1
  %i210 = load i32, i32* %target400, align 4
  %idxprom401 = sext i32 %i210 to i64
  %arrayidx402 = getelementptr inbounds [144 x i32], [144 x i32]* %arrayidx397, i64 0, i64 %idxprom401
  %i211 = load i32, i32* %arrayidx402, align 4
  %inc403 = add i32 %i211, 1
  store i32 %inc403, i32* %arrayidx402, align 4
  %i212 = load i32, i32* %i, align 4
  %idxprom404 = sext i32 %i212 to i64
  %arrayidx405 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %moves, i64 0, i64 %idxprom404
  %i213 = bitcast %struct.move_s* %best_move to i8*
  %i214 = bitcast %struct.move_s* %arrayidx405 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %i213, i8* align 8 %i214, i64 24, i1 false)
  %i215 = load i32, i32* %i, align 4
  store i32 %i215, i32* @bestmovenum, align 4
  store i32 %root_score.3, i32* @cur_score, align 4
  %i216 = load i32, i32* @ply, align 4
  %idxprom406 = sext i32 %i216 to i64
  %arrayidx407 = getelementptr inbounds [300 x [300 x %struct.move_s]], [300 x [300 x %struct.move_s]]* @pv, i64 0, i64 %idxprom406
  %i217 = load i32, i32* @ply, align 4
  %idxprom408 = sext i32 %i217 to i64
  %arrayidx409 = getelementptr inbounds [300 x %struct.move_s], [300 x %struct.move_s]* %arrayidx407, i64 0, i64 %idxprom408
  %i218 = load i32, i32* %i, align 4
  %idxprom410 = sext i32 %i218 to i64
  %arrayidx411 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %moves, i64 0, i64 %idxprom410
  %i219 = bitcast %struct.move_s* %arrayidx409 to i8*
  %i220 = bitcast %struct.move_s* %arrayidx411 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %i219, i8* align 8 %i220, i64 24, i1 false)
  %i221 = load i32, i32* @ply, align 4
  %add412 = add nsw i32 %i221, 1
  br label %for.cond413

for.cond413:                                      ; preds = %for.inc428, %if.end392
  %j.2 = phi i32 [ %add412, %if.end392 ], [ %inc429, %for.inc428 ]
  %i222 = load i32, i32* @ply, align 4
  %add414 = add nsw i32 %i222, 1
  %idxprom415 = sext i32 %add414 to i64
  %arrayidx416 = getelementptr inbounds [300 x i32], [300 x i32]* @pv_length, i64 0, i64 %idxprom415
  %i223 = load i32, i32* %arrayidx416, align 4
  %cmp417 = icmp slt i32 %j.2, %i223
  br i1 %cmp417, label %for.body418, label %for.end430

for.body418:                                      ; preds = %for.cond413
  %i224 = load i32, i32* @ply, align 4
  %idxprom419 = sext i32 %i224 to i64
  %arrayidx420 = getelementptr inbounds [300 x [300 x %struct.move_s]], [300 x [300 x %struct.move_s]]* @pv, i64 0, i64 %idxprom419
  %idxprom421 = sext i32 %j.2 to i64
  %arrayidx422 = getelementptr inbounds [300 x %struct.move_s], [300 x %struct.move_s]* %arrayidx420, i64 0, i64 %idxprom421
  %i225 = load i32, i32* @ply, align 4
  %add423 = add nsw i32 %i225, 1
  %idxprom424 = sext i32 %add423 to i64
  %arrayidx425 = getelementptr inbounds [300 x [300 x %struct.move_s]], [300 x [300 x %struct.move_s]]* @pv, i64 0, i64 %idxprom424
  %idxprom426 = sext i32 %j.2 to i64
  %arrayidx427 = getelementptr inbounds [300 x %struct.move_s], [300 x %struct.move_s]* %arrayidx425, i64 0, i64 %idxprom426
  %i226 = bitcast %struct.move_s* %arrayidx422 to i8*
  %i227 = bitcast %struct.move_s* %arrayidx427 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %i226, i8* align 8 %i227, i64 24, i1 false)
  br label %for.inc428

for.inc428:                                       ; preds = %for.body418
  %inc429 = add nsw i32 %j.2, 1
  br label %for.cond413

for.end430:                                       ; preds = %for.cond413
  %i228 = load i32, i32* @ply, align 4
  %add431 = add nsw i32 %i228, 1
  %idxprom432 = sext i32 %add431 to i64
  %arrayidx433 = getelementptr inbounds [300 x i32], [300 x i32]* @pv_length, i64 0, i64 %idxprom432
  %i229 = load i32, i32* %arrayidx433, align 4
  %i230 = load i32, i32* @ply, align 4
  %idxprom434 = sext i32 %i230 to i64
  %arrayidx435 = getelementptr inbounds [300 x i32], [300 x i32]* @pv_length, i64 0, i64 %idxprom434
  store i32 %i229, i32* %arrayidx435, align 4
  %i231 = load i32, i32* @cur_score, align 4
  %cmp436 = icmp sge i32 %i231, %originalbeta
  br i1 %cmp436, label %if.then437, label %if.end438

if.then437:                                       ; preds = %for.end430
  %i232 = bitcast %struct.move_s* %agg.result to i8*
  %i233 = bitcast %struct.move_s* %best_move to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %i232, i8* align 4 %i233, i64 24, i1 false)
  br label %return

if.end438:                                        ; preds = %for.end430
  %i234 = load i32, i32* @post, align 4
  %tobool439 = icmp ne i32 %i234, 0
  br i1 %tobool439, label %land.lhs.true440, label %if.end443

land.lhs.true440:                                 ; preds = %if.end438
  %i235 = load i32, i32* @i_depth, align 4
  %cmp441 = icmp sge i32 %i235, 2
  br i1 %cmp441, label %if.then442, label %if.end443

if.then442:                                       ; preds = %land.lhs.true440
  call void @post_thinking(i32 %root_score.3)
  br label %if.end443

if.end443:                                        ; preds = %if.then442, %land.lhs.true440, %if.end438
  br label %if.end444

if.end444:                                        ; preds = %if.end443, %land.lhs.true254, %if.end252
  %alpha.1 = phi i32 [ %root_score.3, %if.end443 ], [ %alpha.0, %land.lhs.true254 ], [ %alpha.0, %if.end252 ]
  %tobool445 = icmp ne i32 %legal_move.0, 0
  br i1 %tobool445, label %if.then446, label %if.end447

if.then446:                                       ; preds = %if.end444
  br label %if.end447

if.end447:                                        ; preds = %if.then446, %if.end444
  %first.1 = phi i32 [ 0, %if.then446 ], [ %first.0, %if.end444 ]
  %i236 = load i32, i32* @nodes, align 4
  %sub448 = sub nsw i32 %i236, %i45
  %i237 = load i32, i32* %i, align 4
  %idxprom449 = sext i32 %i237 to i64
  %arrayidx450 = getelementptr inbounds [512 x i32], [512 x i32]* @rootnodecount, i64 0, i64 %idxprom449
  store i32 %sub448, i32* %arrayidx450, align 4
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %tobool451 = icmp ne i32 %no_moves.0, 0
  br i1 %tobool451, label %land.lhs.true452, label %if.else474

land.lhs.true452:                                 ; preds = %while.end
  %i238 = load i32, i32* @is_pondering, align 4
  %tobool453 = icmp ne i32 %i238, 0
  br i1 %tobool453, label %if.else474, label %if.then454

if.then454:                                       ; preds = %land.lhs.true452
  %i239 = load i32, i32* @Variant, align 4
  %cmp455 = icmp ne i32 %i239, 3
  br i1 %cmp455, label %land.lhs.true456, label %if.else468

land.lhs.true456:                                 ; preds = %if.then454
  %i240 = load i32, i32* @Variant, align 4
  %cmp457 = icmp ne i32 %i240, 4
  br i1 %cmp457, label %if.then458, label %if.else468

if.then458:                                       ; preds = %land.lhs.true456
  %call459 = call i32 @in_check()
  %tobool460 = icmp ne i32 %call459, 0
  br i1 %tobool460, label %if.then461, label %if.else466

if.then461:                                       ; preds = %if.then458
  %i241 = load i32, i32* @white_to_move, align 4
  %cmp462 = icmp eq i32 %i241, 1
  br i1 %cmp462, label %if.then463, label %if.else464

if.then463:                                       ; preds = %if.then461
  store i32 2, i32* @result, align 4
  br label %if.end465

if.else464:                                       ; preds = %if.then461
  store i32 3, i32* @result, align 4
  br label %if.end465

if.end465:                                        ; preds = %if.else464, %if.then463
  br label %if.end467

if.else466:                                       ; preds = %if.then458
  store i32 1, i32* @result, align 4
  br label %if.end467

if.end467:                                        ; preds = %if.else466, %if.end465
  br label %if.end473

if.else468:                                       ; preds = %land.lhs.true456, %if.then454
  %i242 = load i32, i32* @white_to_move, align 4
  %cmp469 = icmp eq i32 %i242, 1
  br i1 %cmp469, label %if.then470, label %if.else471

if.then470:                                       ; preds = %if.else468
  store i32 3, i32* @result, align 4
  br label %if.end472

if.else471:                                       ; preds = %if.else468
  store i32 2, i32* @result, align 4
  br label %if.end472

if.end472:                                        ; preds = %if.else471, %if.then470
  br label %if.end473

if.end473:                                        ; preds = %if.end472, %if.end467
  br label %if.end483

if.else474:                                       ; preds = %land.lhs.true452, %while.end
  %i243 = load i32, i32* @is_pondering, align 4
  %tobool475 = icmp ne i32 %i243, 0
  br i1 %tobool475, label %if.end482, label %if.then476

if.then476:                                       ; preds = %if.else474
  %i244 = load i32, i32* @fifty, align 4
  %cmp477 = icmp sgt i32 %i244, 100
  br i1 %cmp477, label %if.then478, label %if.end481

if.then478:                                       ; preds = %if.then476
  store i32 4, i32* @result, align 4
  store i32 0, i32* @cur_score, align 4
  %i245 = load i32, i32* @ply, align 4
  %idxprom479 = sext i32 %i245 to i64
  %arrayidx480 = getelementptr inbounds [300 x i32], [300 x i32]* @pv_length, i64 0, i64 %idxprom479
  store i32 0, i32* %arrayidx480, align 4
  %i246 = bitcast %struct.move_s* %agg.result to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %i246, i8* align 4 bitcast (%struct.move_s* @dummy to i8*), i64 24, i1 false)
  br label %return

if.end481:                                        ; preds = %if.then476
  br label %if.end482

if.end482:                                        ; preds = %if.end481, %if.else474
  br label %if.end483

if.end483:                                        ; preds = %if.end482, %if.end473
  %i247 = bitcast %struct.move_s* %agg.result to i8*
  %i248 = bitcast %struct.move_s* %best_move to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %i247, i8* align 4 %i248, i64 24, i1 false)
  br label %return

return:                                           ; preds = %if.end483, %if.then478, %if.then437, %if.then251, %if.then
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @think(%struct.move_s* noalias sret(%struct.move_s) align 4 %agg.result) #0 {
entry:
  %comp_move = alloca %struct.move_s, align 8
  %temp_move = alloca %struct.move_s, align 4
  %old_move = alloca %struct.move_s, align 4
  %moves = alloca [512 x %struct.move_s], align 16
  %output = alloca [8 x i8], align 1
  %tmp = alloca %struct.move_s, align 4
  %tmp197 = alloca %struct.move_s, align 4
  %tmp208 = alloca %struct.move_s, align 4
  %tmp287 = alloca %struct.move_s, align 4
  store i32 0, i32* @userealholdings, align 4
  br label %restart

restart:                                          ; preds = %if.else483, %if.end338, %entry
  %lastlegal.0 = phi i32 [ 0, %entry ], [ %lastlegal.5, %if.else483 ], [ %lastlegal.5, %if.end338 ]
  %pn_restart.0 = phi i32 [ 0, %entry ], [ %pn_restart.0, %if.else483 ], [ %inc293, %if.end338 ]
  %temp_score.0 = phi i32 [ 0, %entry ], [ %temp_score.6, %if.else483 ], [ %temp_score.6, %if.end338 ]
  %k.0 = phi i32 [ 0, %entry ], [ %k.0, %if.else483 ], [ %k.1, %if.end338 ]
  store i32 0, i32* @nodes, align 4
  store i32 0, i32* @qnodes, align 4
  store i32 1, i32* @ply, align 4
  store i32 0, i32* @ECacheProbes, align 4
  store i32 0, i32* @ECacheHits, align 4
  store i32 0, i32* @TTProbes, align 4
  store i32 0, i32* @TTHits, align 4
  store i32 0, i32* @TTStores, align 4
  store i32 0, i32* @NCuts, align 4
  store i32 0, i32* @NTries, align 4
  store i32 0, i32* @TExt, align 4
  store i32 0, i32* @FH, align 4
  store i32 0, i32* @FHF, align 4
  store i32 0, i32* @PVS, align 4
  store i32 0, i32* @FULL, align 4
  store i32 0, i32* @PVSF, align 4
  store i32 0, i32* @ext_check, align 4
  store i32 0, i32* @ext_recap, align 4
  store i32 0, i32* @ext_onerep, align 4
  store i32 0, i32* @razor_drop, align 4
  store i32 0, i32* @razor_material, align 4
  store i32 0, i32* @drop_cuts, align 4
  store i32 0, i32* @extendedtime, align 4
  store i32 0, i32* @forcedwin, align 4
  store i32 200, i32* @maxposdiff, align 4
  store i8 0, i8* @true_i_depth, align 1
  store i32 -1, i32* @bestmovenum, align 4
  %call = call i32 @interrupt()
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %restart
  %i = load i32, i32* @is_analyzing, align 4
  %tobool1 = icmp ne i32 %i, 0
  br i1 %tobool1, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true
  %i1 = load i32, i32* @is_pondering, align 4
  %tobool2 = icmp ne i32 %i1, 0
  br i1 %tobool2, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false, %land.lhs.true
  %i2 = bitcast %struct.move_s* %agg.result to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %i2, i8* align 4 bitcast (%struct.move_s* @dummy to i8*), i64 24, i1 false)
  br label %return

if.end:                                           ; preds = %lor.lhs.false, %restart
  %call3 = call i64 @rtime()
  store i64 %call3, i64* @start_time, align 8
  store i32 0, i32* @legals, align 4
  %i3 = load i32, i32* @Variant, align 4
  %cmp = icmp eq i32 %i3, 4
  br i1 %cmp, label %if.then4, label %if.else

if.then4:                                         ; preds = %if.end
  store i32 1, i32* @captures, align 4
  br label %if.end5

if.else:                                          ; preds = %if.end
  store i32 0, i32* @captures, align 4
  br label %if.end5

if.end5:                                          ; preds = %if.else, %if.then4
  %arrayidx = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %moves, i64 0, i64 0
  call void @gen(%struct.move_s* %arrayidx)
  %i4 = load i32, i32* @numb_moves, align 4
  %call6 = call i32 @in_check()
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end5
  %l.0 = phi i32 [ 0, %if.end5 ], [ %inc15, %for.inc ]
  %lastlegal.1 = phi i32 [ %lastlegal.0, %if.end5 ], [ %lastlegal.2, %for.inc ]
  %i5 = load i32, i32* @numb_moves, align 4
  %cmp7 = icmp slt i32 %l.0, %i5
  br i1 %cmp7, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %arrayidx8 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %moves, i64 0, i64 0
  call void @make(%struct.move_s* %arrayidx8, i32 %l.0)
  %arrayidx9 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %moves, i64 0, i64 0
  %call10 = call i32 @check_legal(%struct.move_s* %arrayidx9, i32 %l.0, i32 %call6)
  %tobool11 = icmp ne i32 %call10, 0
  br i1 %tobool11, label %if.then12, label %if.end13

if.then12:                                        ; preds = %for.body
  %i6 = load i32, i32* @legals, align 4
  %inc = add nsw i32 %i6, 1
  store i32 %inc, i32* @legals, align 4
  br label %if.end13

if.end13:                                         ; preds = %if.then12, %for.body
  %lastlegal.2 = phi i32 [ %l.0, %if.then12 ], [ %lastlegal.1, %for.body ]
  %arrayidx14 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %moves, i64 0, i64 0
  call void @unmake(%struct.move_s* %arrayidx14, i32 %l.0)
  br label %for.inc

for.inc:                                          ; preds = %if.end13
  %inc15 = add nsw i32 %l.0, 1
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %i7 = load i32, i32* @Variant, align 4
  %cmp16 = icmp eq i32 %i7, 4
  br i1 %cmp16, label %land.lhs.true17, label %if.end35

land.lhs.true17:                                  ; preds = %for.end
  %i8 = load i32, i32* @legals, align 4
  %cmp18 = icmp eq i32 %i8, 0
  br i1 %cmp18, label %if.then19, label %if.end35

if.then19:                                        ; preds = %land.lhs.true17
  store i32 0, i32* @captures, align 4
  %arrayidx20 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %moves, i64 0, i64 0
  call void @gen(%struct.move_s* %arrayidx20)
  %i9 = load i32, i32* @numb_moves, align 4
  br label %for.cond21

for.cond21:                                       ; preds = %for.inc32, %if.then19
  %l.1 = phi i32 [ 0, %if.then19 ], [ %inc33, %for.inc32 ]
  %lastlegal.3 = phi i32 [ %lastlegal.1, %if.then19 ], [ %lastlegal.4, %for.inc32 ]
  %i10 = load i32, i32* @numb_moves, align 4
  %cmp22 = icmp slt i32 %l.1, %i10
  br i1 %cmp22, label %for.body23, label %for.end34

for.body23:                                       ; preds = %for.cond21
  %arrayidx24 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %moves, i64 0, i64 0
  call void @make(%struct.move_s* %arrayidx24, i32 %l.1)
  %arrayidx25 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %moves, i64 0, i64 0
  %call26 = call i32 @check_legal(%struct.move_s* %arrayidx25, i32 %l.1, i32 %call6)
  %tobool27 = icmp ne i32 %call26, 0
  br i1 %tobool27, label %if.then28, label %if.end30

if.then28:                                        ; preds = %for.body23
  %i11 = load i32, i32* @legals, align 4
  %inc29 = add nsw i32 %i11, 1
  store i32 %inc29, i32* @legals, align 4
  br label %if.end30

if.end30:                                         ; preds = %if.then28, %for.body23
  %lastlegal.4 = phi i32 [ %l.1, %if.then28 ], [ %lastlegal.3, %for.body23 ]
  %arrayidx31 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %moves, i64 0, i64 0
  call void @unmake(%struct.move_s* %arrayidx31, i32 %l.1)
  br label %for.inc32

for.inc32:                                        ; preds = %if.end30
  %inc33 = add nsw i32 %l.1, 1
  br label %for.cond21

for.end34:                                        ; preds = %for.cond21
  br label %if.end35

if.end35:                                         ; preds = %for.end34, %land.lhs.true17, %for.end
  %lastlegal.5 = phi i32 [ %lastlegal.3, %for.end34 ], [ %lastlegal.1, %land.lhs.true17 ], [ %lastlegal.1, %for.end ]
  %num_moves.0 = phi i32 [ %i9, %for.end34 ], [ %i4, %land.lhs.true17 ], [ %i4, %for.end ]
  %i12 = load i32, i32* @Variant, align 4
  %cmp36 = icmp ne i32 %i12, 1
  br i1 %cmp36, label %land.lhs.true37, label %if.end44

land.lhs.true37:                                  ; preds = %if.end35
  %i13 = load i32, i32* @is_pondering, align 4
  %tobool38 = icmp ne i32 %i13, 0
  br i1 %tobool38, label %if.end44, label %if.then39

if.then39:                                        ; preds = %land.lhs.true37
  %i14 = load i32, i32* @legals, align 4
  %cmp40 = icmp eq i32 %i14, 1
  br i1 %cmp40, label %if.then41, label %if.end43

if.then41:                                        ; preds = %if.then39
  %i15 = load i32, i32* @inc, align 4
  %mul = mul nsw i32 %i15, 100
  %i16 = load i32, i32* @time_cushion, align 4
  %add = add nsw i32 %i16, %mul
  store i32 %add, i32* @time_cushion, align 4
  %idxprom = sext i32 %lastlegal.5 to i64
  %arrayidx42 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %moves, i64 0, i64 %idxprom
  %i17 = bitcast %struct.move_s* %agg.result to i8*
  %i18 = bitcast %struct.move_s* %arrayidx42 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %i17, i8* align 8 %i18, i64 24, i1 false)
  br label %return

if.end43:                                         ; preds = %if.then39
  br label %if.end44

if.end44:                                         ; preds = %if.end43, %land.lhs.true37, %if.end35
  call void @check_phase()
  %i19 = load i32, i32* @phase, align 4
  switch i32 %i19, label %sw.epilog [
    i32 0, label %sw.bb
    i32 1, label %sw.bb46
    i32 2, label %sw.bb48
  ]

sw.bb:                                            ; preds = %if.end44
  %call45 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.1.126, i64 0, i64 0))
  br label %sw.epilog

sw.bb46:                                          ; preds = %if.end44
  %call47 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.2.127, i64 0, i64 0))
  br label %sw.epilog

sw.bb48:                                          ; preds = %if.end44
  %call49 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.3.128, i64 0, i64 0))
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.bb48, %sw.bb46, %sw.bb, %if.end44
  %i20 = load i32, i32* @is_pondering, align 4
  %tobool50 = icmp ne i32 %i20, 0
  br i1 %tobool50, label %if.else66, label %if.then51

if.then51:                                        ; preds = %sw.epilog
  %i21 = load i32, i32* @fixed_time, align 4
  %tobool52 = icmp ne i32 %i21, 0
  br i1 %tobool52, label %if.else64, label %if.then53

if.then53:                                        ; preds = %if.then51
  %i22 = load i32, i32* @go_fast, align 4
  %tobool54 = icmp ne i32 %i22, 0
  br i1 %tobool54, label %if.then55, label %if.else61

if.then55:                                        ; preds = %if.then53
  %call56 = call i32 @allocate_time()
  %cmp57 = icmp sgt i32 %call56, 40
  br i1 %cmp57, label %if.then58, label %if.else59

if.then58:                                        ; preds = %if.then55
  store i32 40, i32* @time_for_move, align 4
  br label %if.end60

if.else59:                                        ; preds = %if.then55
  store i32 %call56, i32* @time_for_move, align 4
  br label %if.end60

if.end60:                                         ; preds = %if.else59, %if.then58
  br label %if.end63

if.else61:                                        ; preds = %if.then53
  %call62 = call i32 @allocate_time()
  store i32 %call62, i32* @time_for_move, align 4
  br label %if.end63

if.end63:                                         ; preds = %if.else61, %if.end60
  br label %if.end65

if.else64:                                        ; preds = %if.then51
  %i23 = load i32, i32* @fixed_time, align 4
  store i32 %i23, i32* @time_for_move, align 4
  br label %if.end65

if.end65:                                         ; preds = %if.else64, %if.end63
  br label %if.end67

if.else66:                                        ; preds = %sw.epilog
  store i32 999999, i32* @time_for_move, align 4
  br label %if.end67

if.end67:                                         ; preds = %if.else66, %if.end65
  %tobool68 = icmp ne i32 %pn_restart.0, 0
  br i1 %tobool68, label %if.then69, label %if.end76

if.then69:                                        ; preds = %if.end67
  %i24 = load i32, i32* @time_for_move, align 4
  %conv = sitofp i32 %i24 to float
  %mul70 = fmul float %conv, 2.000000e+00
  %conv71 = fpext float %mul70 to double
  %conv72 = sitofp i32 %pn_restart.0 to float
  %conv73 = fpext float %conv72 to double
  %add74 = fadd double %conv73, 1.000000e+00
  %div = fdiv double %conv71, %add74
  %conv75 = fptosi double %div to i32
  store i32 %conv75, i32* @time_for_move, align 4
  br label %if.end76

if.end76:                                         ; preds = %if.then69, %if.end67
  %i25 = load i32, i32* @time_for_move, align 4
  %call77 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.4.129, i64 0, i64 0), i32 %i25)
  %tobool78 = icmp ne i32 %pn_restart.0, 0
  br i1 %tobool78, label %if.end80, label %if.then79

if.then79:                                        ; preds = %if.end76
  call void @clear_tt()
  call void @reset_ecache()
  call void @llvm.memset.p0i8.i64(i8* align 16 bitcast ([300 x i32]* @rootlosers to i8*), i8 0, i64 1200, i1 false)
  br label %if.end80

if.end80:                                         ; preds = %if.then79, %if.end76
  %tobool81 = icmp ne i32 %pn_restart.0, 0
  br i1 %tobool81, label %if.else102, label %land.lhs.true82

land.lhs.true82:                                  ; preds = %if.end80
  %i26 = load i32, i32* @is_pondering, align 4
  %tobool83 = icmp ne i32 %i26, 0
  br i1 %tobool83, label %if.else102, label %land.lhs.true84

land.lhs.true84:                                  ; preds = %land.lhs.true82
  %i27 = load i32, i32* @Variant, align 4
  %cmp85 = icmp eq i32 %i27, 3
  br i1 %cmp85, label %land.lhs.true90, label %lor.lhs.false87

lor.lhs.false87:                                  ; preds = %land.lhs.true84
  %i28 = load i32, i32* @Variant, align 4
  %cmp88 = icmp eq i32 %i28, 4
  br i1 %cmp88, label %land.lhs.true90, label %if.else102

land.lhs.true90:                                  ; preds = %lor.lhs.false87, %land.lhs.true84
  %i29 = load i32, i32* @piece_count, align 4
  %cmp91 = icmp sgt i32 %i29, 3
  br i1 %cmp91, label %if.then96, label %lor.lhs.false93

lor.lhs.false93:                                  ; preds = %land.lhs.true90
  %i30 = load i32, i32* @Variant, align 4
  %cmp94 = icmp ne i32 %i30, 3
  br i1 %cmp94, label %if.then96, label %if.else102

if.then96:                                        ; preds = %lor.lhs.false93, %land.lhs.true90
  %i31 = load i32, i32* @time_for_move, align 4
  %conv97 = sitofp i32 %i31 to float
  %conv98 = fpext float %conv97 to double
  %mul99 = fmul double %conv98, 1.000000e+00
  %div100 = fdiv double %mul99, 3.000000e+00
  %conv101 = fptosi double %div100 to i32
  store i32 %conv101, i32* @pn_time, align 4
  call void @proofnumberscan()
  br label %if.end106

if.else102:                                       ; preds = %lor.lhs.false93, %lor.lhs.false87, %land.lhs.true82, %if.end80
  %tobool103 = icmp ne i32 %pn_restart.0, 0
  br i1 %tobool103, label %if.end105, label %if.then104

if.then104:                                       ; preds = %if.else102
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 bitcast (%struct.move_s* @pn_move to i8*), i8* align 4 bitcast (%struct.move_s* @dummy to i8*), i64 24, i1 false)
  br label %if.end105

if.end105:                                        ; preds = %if.then104, %if.else102
  br label %if.end106

if.end106:                                        ; preds = %if.end105, %if.then96
  %i32 = load i32, i32* @result, align 4
  %tobool107 = icmp ne i32 %i32, 0
  br i1 %tobool107, label %land.lhs.true108, label %if.end112

land.lhs.true108:                                 ; preds = %if.end106
  %i33 = load i32, i32* getelementptr inbounds (%struct.move_s, %struct.move_s* @pn_move, i32 0, i32 1), align 4
  %i34 = load i32, i32* getelementptr inbounds (%struct.move_s, %struct.move_s* @dummy, i32 0, i32 1), align 4
  %cmp109 = icmp eq i32 %i33, %i34
  br i1 %cmp109, label %if.then111, label %if.end112

if.then111:                                       ; preds = %land.lhs.true108
  %i35 = bitcast %struct.move_s* %agg.result to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %i35, i8* align 4 bitcast (%struct.move_s* @pn_move to i8*), i64 24, i1 false)
  br label %return

if.end112:                                        ; preds = %land.lhs.true108, %if.end106
  %i36 = load i32, i32* @forcedwin, align 4
  %tobool113 = icmp ne i32 %i36, 0
  br i1 %tobool113, label %land.lhs.true116, label %lor.lhs.false114

lor.lhs.false114:                                 ; preds = %if.end112
  %i37 = load i32, i32* @result, align 4
  %tobool115 = icmp ne i32 %i37, 0
  br i1 %tobool115, label %land.lhs.true116, label %if.else122

land.lhs.true116:                                 ; preds = %lor.lhs.false114, %if.end112
  %i38 = load i32, i32* getelementptr inbounds (%struct.move_s, %struct.move_s* @pn_move, i32 0, i32 1), align 4
  %i39 = load i32, i32* getelementptr inbounds (%struct.move_s, %struct.move_s* @dummy, i32 0, i32 1), align 4
  %cmp117 = icmp ne i32 %i38, %i39
  br i1 %cmp117, label %land.lhs.true119, label %if.else122

land.lhs.true119:                                 ; preds = %land.lhs.true116
  %i40 = load i32, i32* @is_analyzing, align 4
  %tobool120 = icmp ne i32 %i40, 0
  br i1 %tobool120, label %if.else122, label %if.then121

if.then121:                                       ; preds = %land.lhs.true119
  %i41 = bitcast %struct.move_s* %comp_move to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %i41, i8* align 4 bitcast (%struct.move_s* @pn_move to i8*), i64 24, i1 false)
  br label %if.end272

if.else122:                                       ; preds = %land.lhs.true119, %land.lhs.true116, %lor.lhs.false114
  br label %for.cond123

for.cond123:                                      ; preds = %for.inc138, %if.else122
  %i.0 = phi i32 [ 0, %if.else122 ], [ %inc139, %for.inc138 ]
  %cmp124 = icmp slt i32 %i.0, 300
  br i1 %cmp124, label %for.body126, label %for.end140

for.body126:                                      ; preds = %for.cond123
  br label %for.cond127

for.cond127:                                      ; preds = %for.inc135, %for.body126
  %j.0 = phi i32 [ 0, %for.body126 ], [ %inc136, %for.inc135 ]
  %cmp128 = icmp slt i32 %j.0, 300
  br i1 %cmp128, label %for.body130, label %for.end137

for.body130:                                      ; preds = %for.cond127
  %idxprom131 = sext i32 %i.0 to i64
  %arrayidx132 = getelementptr inbounds [300 x [300 x %struct.move_s]], [300 x [300 x %struct.move_s]]* @pv, i64 0, i64 %idxprom131
  %idxprom133 = sext i32 %j.0 to i64
  %arrayidx134 = getelementptr inbounds [300 x %struct.move_s], [300 x %struct.move_s]* %arrayidx132, i64 0, i64 %idxprom133
  %i42 = bitcast %struct.move_s* %arrayidx134 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %i42, i8* align 4 bitcast (%struct.move_s* @dummy to i8*), i64 24, i1 false)
  br label %for.inc135

for.inc135:                                       ; preds = %for.body130
  %inc136 = add nsw i32 %j.0, 1
  br label %for.cond127

for.end137:                                       ; preds = %for.cond127
  br label %for.inc138

for.inc138:                                       ; preds = %for.end137
  %inc139 = add nsw i32 %i.0, 1
  br label %for.cond123

for.end140:                                       ; preds = %for.cond123
  call void @llvm.memset.p0i8.i64(i8* align 16 bitcast ([144 x [144 x i32]]* @history_h to i8*), i8 0, i64 82944, i1 false)
  br label %for.cond141

for.cond141:                                      ; preds = %for.inc157, %for.end140
  %i.1 = phi i32 [ 0, %for.end140 ], [ %inc158, %for.inc157 ]
  %cmp142 = icmp slt i32 %i.1, 300
  br i1 %cmp142, label %for.body144, label %for.end159

for.body144:                                      ; preds = %for.cond141
  %idxprom145 = sext i32 %i.1 to i64
  %arrayidx146 = getelementptr inbounds [300 x i32], [300 x i32]* @killer_scores, i64 0, i64 %idxprom145
  store i32 0, i32* %arrayidx146, align 4
  %idxprom147 = sext i32 %i.1 to i64
  %arrayidx148 = getelementptr inbounds [300 x i32], [300 x i32]* @killer_scores2, i64 0, i64 %idxprom147
  store i32 0, i32* %arrayidx148, align 4
  %idxprom149 = sext i32 %i.1 to i64
  %arrayidx150 = getelementptr inbounds [300 x i32], [300 x i32]* @killer_scores3, i64 0, i64 %idxprom149
  store i32 0, i32* %arrayidx150, align 4
  %idxprom151 = sext i32 %i.1 to i64
  %arrayidx152 = getelementptr inbounds [300 x %struct.move_s], [300 x %struct.move_s]* @killer1, i64 0, i64 %idxprom151
  %i43 = bitcast %struct.move_s* %arrayidx152 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %i43, i8* align 4 bitcast (%struct.move_s* @dummy to i8*), i64 24, i1 false)
  %idxprom153 = sext i32 %i.1 to i64
  %arrayidx154 = getelementptr inbounds [300 x %struct.move_s], [300 x %struct.move_s]* @killer2, i64 0, i64 %idxprom153
  %i44 = bitcast %struct.move_s* %arrayidx154 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %i44, i8* align 4 bitcast (%struct.move_s* @dummy to i8*), i64 24, i1 false)
  %idxprom155 = sext i32 %i.1 to i64
  %arrayidx156 = getelementptr inbounds [300 x %struct.move_s], [300 x %struct.move_s]* @killer3, i64 0, i64 %idxprom155
  %i45 = bitcast %struct.move_s* %arrayidx156 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %i45, i8* align 4 bitcast (%struct.move_s* @dummy to i8*), i64 24, i1 false)
  br label %for.inc157

for.inc157:                                       ; preds = %for.body144
  %inc158 = add nsw i32 %i.1, 1
  br label %for.cond141

for.end159:                                       ; preds = %for.cond141
  call void @llvm.memset.p0i8.i64(i8* align 16 bitcast ([512 x i32]* @rootnodecount to i8*), i8 0, i64 2048, i1 false)
  store i32 0, i32* @cur_score, align 4
  store i32 1, i32* @i_depth, align 4
  br label %for.cond160

for.cond160:                                      ; preds = %for.inc269, %for.end159
  %rs.0 = phi i32 [ 0, %for.end159 ], [ %rs.2, %for.inc269 ]
  %temp_score.1 = phi i32 [ 0, %for.end159 ], [ %temp_score.4, %for.inc269 ]
  %i46 = load i32, i32* @i_depth, align 4
  %i47 = load i32, i32* @maxdepth, align 4
  %cmp161 = icmp sle i32 %i46, %i47
  br i1 %cmp161, label %for.body163, label %for.end271

for.body163:                                      ; preds = %for.cond160
  %call164 = call i64 @rtime()
  %i48 = load i64, i64* @start_time, align 8
  %call165 = call i32 @rdifftime(i64 %call164, i64 %i48)
  %conv166 = sitofp i32 %call165 to double
  %i49 = load i32, i32* @time_for_move, align 4
  %conv167 = sitofp i32 %i49 to double
  %mul168 = fmul double %conv167, 2.100000e+00
  %div169 = fdiv double %mul168, 3.000000e+00
  %cmp170 = fcmp ogt double %conv166, %div169
  br i1 %cmp170, label %land.lhs.true172, label %if.end176

land.lhs.true172:                                 ; preds = %for.body163
  %i50 = load i32, i32* @i_depth, align 4
  %cmp173 = icmp sgt i32 %i50, 2
  br i1 %cmp173, label %if.then175, label %if.end176

if.then175:                                       ; preds = %land.lhs.true172
  br label %for.end271

if.end176:                                        ; preds = %land.lhs.true172, %for.body163
  store i32 0, i32* @failed, align 4
  %i51 = load i32, i32* @Variant, align 4
  %cmp177 = icmp eq i32 %i51, 2
  %i52 = zext i1 %cmp177 to i64
  %cond = select i1 %cmp177, i32 35, i32 100
  %sub = sub nsw i32 %temp_score.1, %cond
  %i53 = load i32, i32* @Variant, align 4
  %cmp179 = icmp eq i32 %i53, 2
  %i54 = zext i1 %cmp179 to i64
  %cond181 = select i1 %cmp179, i32 35, i32 100
  %add182 = add nsw i32 %temp_score.1, %cond181
  %i55 = load i32, i32* @i_depth, align 4
  call void @search_root(%struct.move_s* sret(%struct.move_s) align 4 %tmp, i32 %sub, i32 %add182, i32 %i55)
  %i56 = bitcast %struct.move_s* %temp_move to i8*
  %i57 = bitcast %struct.move_s* %tmp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %i56, i8* align 4 %i57, i64 24, i1 false)
  %i58 = load i32, i32* @result, align 4
  %tobool183 = icmp ne i32 %i58, 0
  br i1 %tobool183, label %if.then184, label %if.end185

if.then184:                                       ; preds = %if.end176
  br label %for.end271

if.end185:                                        ; preds = %if.end176
  %i59 = load i32, i32* @cur_score, align 4
  %cmp186 = icmp sle i32 %i59, %sub
  br i1 %cmp186, label %if.then188, label %if.else189

if.then188:                                       ; preds = %if.end185
  store i32 1, i32* @failed, align 4
  br label %if.end190

if.else189:                                       ; preds = %if.end185
  store i32 0, i32* @failed, align 4
  br label %if.end190

if.end190:                                        ; preds = %if.else189, %if.then188
  %i60 = load i32, i32* @cur_score, align 4
  %cmp191 = icmp sle i32 %i60, %sub
  br i1 %cmp191, label %land.lhs.true193, label %if.else201

land.lhs.true193:                                 ; preds = %if.end190
  %i61 = load i32, i32* @time_exit, align 4
  %tobool194 = icmp ne i32 %i61, 0
  br i1 %tobool194, label %if.else201, label %if.then195

if.then195:                                       ; preds = %land.lhs.true193
  %inc196 = add nsw i32 %rs.0, 1
  %i62 = load i32, i32* @i_depth, align 4
  call void @search_root(%struct.move_s* sret(%struct.move_s) align 4 %tmp197, i32 -1000000, i32 1000000, i32 %i62)
  %i63 = bitcast %struct.move_s* %temp_move to i8*
  %i64 = bitcast %struct.move_s* %tmp197 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %i63, i8* align 4 %i64, i64 24, i1 false)
  %i65 = load i32, i32* @time_exit, align 4
  %tobool198 = icmp ne i32 %i65, 0
  br i1 %tobool198, label %if.end200, label %if.then199

if.then199:                                       ; preds = %if.then195
  store i32 0, i32* @failed, align 4
  br label %if.end200

if.end200:                                        ; preds = %if.then199, %if.then195
  br label %if.end213

if.else201:                                       ; preds = %land.lhs.true193, %if.end190
  %i66 = load i32, i32* @cur_score, align 4
  %cmp202 = icmp sge i32 %i66, %add182
  br i1 %cmp202, label %land.lhs.true204, label %if.end212

land.lhs.true204:                                 ; preds = %if.else201
  %i67 = load i32, i32* @time_exit, align 4
  %tobool205 = icmp ne i32 %i67, 0
  br i1 %tobool205, label %if.end212, label %if.then206

if.then206:                                       ; preds = %land.lhs.true204
  %i68 = bitcast %struct.move_s* %comp_move to i8*
  %i69 = bitcast %struct.move_s* %temp_move to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %i68, i8* align 4 %i69, i64 24, i1 false)
  %i70 = load i32, i32* @cur_score, align 4
  %inc207 = add nsw i32 %rs.0, 1
  %i71 = load i32, i32* @i_depth, align 4
  call void @search_root(%struct.move_s* sret(%struct.move_s) align 4 %tmp208, i32 -1000000, i32 1000000, i32 %i71)
  %i72 = bitcast %struct.move_s* %temp_move to i8*
  %i73 = bitcast %struct.move_s* %tmp208 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %i72, i8* align 4 %i73, i64 24, i1 false)
  %i74 = load i32, i32* @time_exit, align 4
  %tobool209 = icmp ne i32 %i74, 0
  br i1 %tobool209, label %if.end211, label %if.then210

if.then210:                                       ; preds = %if.then206
  store i32 0, i32* @failed, align 4
  br label %if.end211

if.end211:                                        ; preds = %if.then210, %if.then206
  br label %if.end212

if.end212:                                        ; preds = %if.end211, %land.lhs.true204, %if.else201
  %rs.1 = phi i32 [ %rs.0, %land.lhs.true204 ], [ %inc207, %if.end211 ], [ %rs.0, %if.else201 ]
  %temp_score.2 = phi i32 [ %temp_score.1, %land.lhs.true204 ], [ %i70, %if.end211 ], [ %temp_score.1, %if.else201 ]
  br label %if.end213

if.end213:                                        ; preds = %if.end212, %if.end200
  %rs.2 = phi i32 [ %rs.1, %if.end212 ], [ %inc196, %if.end200 ]
  %temp_score.3 = phi i32 [ %temp_score.2, %if.end212 ], [ %temp_score.1, %if.end200 ]
  %call214 = call i32 @interrupt()
  %tobool215 = icmp ne i32 %call214, 0
  br i1 %tobool215, label %land.lhs.true216, label %if.end227

land.lhs.true216:                                 ; preds = %if.end213
  %i75 = load i32, i32* @i_depth, align 4
  %cmp217 = icmp sgt i32 %i75, 1
  br i1 %cmp217, label %if.then219, label %if.end227

if.then219:                                       ; preds = %land.lhs.true216
  %i76 = load i32, i32* @is_pondering, align 4
  %tobool220 = icmp ne i32 %i76, 0
  br i1 %tobool220, label %if.then221, label %if.else222

if.then221:                                       ; preds = %if.then219
  %i77 = bitcast %struct.move_s* %agg.result to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %i77, i8* align 4 bitcast (%struct.move_s* @dummy to i8*), i64 24, i1 false)
  br label %return

if.else222:                                       ; preds = %if.then219
  %i78 = load i32, i32* @go_fast, align 4
  %tobool223 = icmp ne i32 %i78, 0
  br i1 %tobool223, label %if.end225, label %if.then224

if.then224:                                       ; preds = %if.else222
  br label %for.end271

if.end225:                                        ; preds = %if.else222
  br label %if.end226

if.end226:                                        ; preds = %if.end225
  br label %if.end227

if.end227:                                        ; preds = %if.end226, %land.lhs.true216, %if.end213
  %i79 = load i32, i32* @time_failure, align 4
  %tobool228 = icmp ne i32 %i79, 0
  br i1 %tobool228, label %if.end252, label %land.lhs.true229

land.lhs.true229:                                 ; preds = %if.end227
  %i80 = load i32, i32* @failed, align 4
  %tobool230 = icmp ne i32 %i80, 0
  br i1 %tobool230, label %if.end252, label %if.then231

if.then231:                                       ; preds = %land.lhs.true229
  %i81 = load i32, i32* @cur_score, align 4
  %cmp232 = icmp eq i32 %i81, -1000000
  br i1 %cmp232, label %if.then234, label %if.end235

if.then234:                                       ; preds = %if.then231
  %i82 = bitcast %struct.move_s* %agg.result to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %i82, i8* align 4 bitcast (%struct.move_s* @dummy to i8*), i64 24, i1 false)
  br label %return

if.end235:                                        ; preds = %if.then231
  %i83 = bitcast %struct.move_s* %comp_move to i8*
  %i84 = bitcast %struct.move_s* %temp_move to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %i83, i8* align 4 %i84, i64 24, i1 false)
  %i85 = load i32, i32* @cur_score, align 4
  call void @stringize_pv(i8* getelementptr inbounds ([256 x i8], [256 x i8]* @postpv, i64 0, i64 0))
  %i86 = load i32, i32* @time_exit, align 4
  %tobool236 = icmp ne i32 %i86, 0
  br i1 %tobool236, label %if.end239, label %if.then237

if.then237:                                       ; preds = %if.end235
  %i87 = load i32, i32* @i_depth, align 4
  %conv238 = trunc i32 %i87 to i8
  store i8 %conv238, i8* @true_i_depth, align 1
  br label %if.end239

if.end239:                                        ; preds = %if.then237, %if.end235
  %i88 = load i32, i32* @i_depth, align 4
  %cmp240 = icmp sge i32 %i88, 2
  br i1 %cmp240, label %if.then242, label %if.end243

if.then242:                                       ; preds = %if.end239
  %i89 = load i32, i32* @cur_score, align 4
  call void @post_thinking(i32 %i89)
  br label %if.end243

if.end243:                                        ; preds = %if.then242, %if.end239
  %cmp244 = icmp sgt i32 %i85, 900000
  br i1 %cmp244, label %land.lhs.true246, label %if.end251

land.lhs.true246:                                 ; preds = %if.end243
  %i90 = load i32, i32* @cur_score, align 4
  %sub247 = sub nsw i32 1000000, %i90
  %i91 = load i32, i32* @i_depth, align 4
  %cmp248 = icmp slt i32 %sub247, %i91
  br i1 %cmp248, label %if.then250, label %if.end251

if.then250:                                       ; preds = %land.lhs.true246
  br label %for.end271

if.end251:                                        ; preds = %land.lhs.true246, %if.end243
  br label %if.end252

if.end252:                                        ; preds = %if.end251, %land.lhs.true229, %if.end227
  %temp_score.4 = phi i32 [ %temp_score.3, %if.end227 ], [ %temp_score.3, %land.lhs.true229 ], [ %i85, %if.end251 ]
  %i92 = load i32, i32* @time_exit, align 4
  %tobool253 = icmp ne i32 %i92, 0
  br i1 %tobool253, label %if.then254, label %if.end255

if.then254:                                       ; preds = %if.end252
  br label %for.end271

if.end255:                                        ; preds = %if.end252
  br label %for.cond256

for.cond256:                                      ; preds = %for.inc266, %if.end255
  %j.1 = phi i32 [ 0, %if.end255 ], [ %inc267, %for.inc266 ]
  %cmp257 = icmp slt i32 %j.1, 300
  br i1 %cmp257, label %for.body259, label %for.end268

for.body259:                                      ; preds = %for.cond256
  %idxprom260 = sext i32 %j.1 to i64
  %arrayidx261 = getelementptr inbounds [300 x i32], [300 x i32]* @killer_scores, i64 0, i64 %idxprom260
  store i32 0, i32* %arrayidx261, align 4
  %idxprom262 = sext i32 %j.1 to i64
  %arrayidx263 = getelementptr inbounds [300 x i32], [300 x i32]* @killer_scores2, i64 0, i64 %idxprom262
  store i32 0, i32* %arrayidx263, align 4
  %idxprom264 = sext i32 %j.1 to i64
  %arrayidx265 = getelementptr inbounds [300 x i32], [300 x i32]* @killer_scores3, i64 0, i64 %idxprom264
  store i32 0, i32* %arrayidx265, align 4
  br label %for.inc266

for.inc266:                                       ; preds = %for.body259
  %inc267 = add nsw i32 %j.1, 1
  br label %for.cond256

for.end268:                                       ; preds = %for.cond256
  br label %for.inc269

for.inc269:                                       ; preds = %for.end268
  %i93 = load i32, i32* @i_depth, align 4
  %inc270 = add nsw i32 %i93, 1
  store i32 %inc270, i32* @i_depth, align 4
  br label %for.cond160

for.end271:                                       ; preds = %if.then254, %if.then250, %if.then224, %if.then184, %if.then175, %for.cond160
  %temp_score.5 = phi i32 [ %temp_score.1, %if.then175 ], [ %temp_score.1, %if.then184 ], [ %temp_score.4, %if.then254 ], [ %i85, %if.then250 ], [ %temp_score.3, %if.then224 ], [ %temp_score.1, %for.cond160 ]
  br label %if.end272

if.end272:                                        ; preds = %for.end271, %if.then121
  %temp_score.6 = phi i32 [ %temp_score.5, %for.end271 ], [ %temp_score.0, %if.then121 ]
  %i94 = load i32, i32* @forcedwin, align 4
  %tobool273 = icmp ne i32 %i94, 0
  br i1 %tobool273, label %if.end341, label %if.then274

if.then274:                                       ; preds = %if.end272
  %i95 = bitcast %struct.move_s* %old_move to i8*
  %i96 = bitcast %struct.move_s* %comp_move to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %i95, i8* align 4 %i96, i64 24, i1 false)
  %i97 = load i32, i32* @Variant, align 4
  %cmp275 = icmp eq i32 %i97, 4
  br i1 %cmp275, label %land.lhs.true280, label %lor.lhs.false277

lor.lhs.false277:                                 ; preds = %if.then274
  %i98 = load i32, i32* @Variant, align 4
  %cmp278 = icmp eq i32 %i98, 3
  br i1 %cmp278, label %land.lhs.true280, label %if.end340

land.lhs.true280:                                 ; preds = %lor.lhs.false277, %if.then274
  %i99 = load i32, i32* @result, align 4
  %tobool281 = icmp ne i32 %i99, 0
  br i1 %tobool281, label %if.end340, label %land.lhs.true282

land.lhs.true282:                                 ; preds = %land.lhs.true280
  %i100 = load i32, i32* @alllosers, align 4
  %tobool283 = icmp ne i32 %i100, 0
  br i1 %tobool283, label %if.end340, label %land.lhs.true284

land.lhs.true284:                                 ; preds = %land.lhs.true282
  %i101 = load i32, i32* @is_pondering, align 4
  %tobool285 = icmp ne i32 %i101, 0
  br i1 %tobool285, label %if.end340, label %if.then286

if.then286:                                       ; preds = %land.lhs.true284
  store i32 0, i32* @s_threat, align 4
  call void @proofnumbercheck(%struct.move_s* sret(%struct.move_s) align 4 %tmp287, %struct.move_s* byval(%struct.move_s) align 8 %comp_move)
  %i102 = bitcast %struct.move_s* %comp_move to i8*
  %i103 = bitcast %struct.move_s* %tmp287 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %i102, i8* align 4 %i103, i64 24, i1 false)
  %cmp288 = icmp slt i32 %pn_restart.0, 10
  br i1 %cmp288, label %land.lhs.true290, label %if.end339

land.lhs.true290:                                 ; preds = %if.then286
  %i104 = load i32, i32* @s_threat, align 4
  %tobool291 = icmp ne i32 %i104, 0
  br i1 %tobool291, label %if.then292, label %if.end339

if.then292:                                       ; preds = %land.lhs.true290
  %inc293 = add nsw i32 %pn_restart.0, 1
  br label %for.cond294

for.cond294:                                      ; preds = %for.inc319, %if.then292
  %i.2 = phi i32 [ 0, %if.then292 ], [ %inc320, %for.inc319 ]
  %cmp295 = icmp slt i32 %i.2, %num_moves.0
  br i1 %cmp295, label %for.body297, label %for.end321

for.body297:                                      ; preds = %for.cond294
  %idxprom298 = sext i32 %i.2 to i64
  %arrayidx299 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %moves, i64 0, i64 %idxprom298
  %from = getelementptr inbounds %struct.move_s, %struct.move_s* %arrayidx299, i32 0, i32 0
  %i105 = load i32, i32* %from, align 8
  %from300 = getelementptr inbounds %struct.move_s, %struct.move_s* %old_move, i32 0, i32 0
  %i106 = load i32, i32* %from300, align 4
  %cmp301 = icmp eq i32 %i105, %i106
  br i1 %cmp301, label %land.lhs.true303, label %if.end318

land.lhs.true303:                                 ; preds = %for.body297
  %idxprom304 = sext i32 %i.2 to i64
  %arrayidx305 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %moves, i64 0, i64 %idxprom304
  %target = getelementptr inbounds %struct.move_s, %struct.move_s* %arrayidx305, i32 0, i32 1
  %i107 = load i32, i32* %target, align 4
  %target306 = getelementptr inbounds %struct.move_s, %struct.move_s* %old_move, i32 0, i32 1
  %i108 = load i32, i32* %target306, align 4
  %cmp307 = icmp eq i32 %i107, %i108
  br i1 %cmp307, label %land.lhs.true309, label %if.end318

land.lhs.true309:                                 ; preds = %land.lhs.true303
  %idxprom310 = sext i32 %i.2 to i64
  %arrayidx311 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %moves, i64 0, i64 %idxprom310
  %promoted = getelementptr inbounds %struct.move_s, %struct.move_s* %arrayidx311, i32 0, i32 3
  %i109 = load i32, i32* %promoted, align 4
  %promoted312 = getelementptr inbounds %struct.move_s, %struct.move_s* %old_move, i32 0, i32 3
  %i110 = load i32, i32* %promoted312, align 4
  %cmp313 = icmp eq i32 %i109, %i110
  br i1 %cmp313, label %if.then315, label %if.end318

if.then315:                                       ; preds = %land.lhs.true309
  %idxprom316 = sext i32 %i.2 to i64
  %arrayidx317 = getelementptr inbounds [300 x i32], [300 x i32]* @rootlosers, i64 0, i64 %idxprom316
  store i32 1, i32* %arrayidx317, align 4
  br label %for.end321

if.end318:                                        ; preds = %land.lhs.true309, %land.lhs.true303, %for.body297
  br label %for.inc319

for.inc319:                                       ; preds = %if.end318
  %inc320 = add nsw i32 %i.2, 1
  br label %for.cond294

for.end321:                                       ; preds = %if.then315, %for.cond294
  br label %for.cond322

for.cond322:                                      ; preds = %for.inc332, %for.end321
  %k.1 = phi i32 [ %k.0, %for.end321 ], [ %k.2, %for.inc332 ]
  %j.2 = phi i32 [ 0, %for.end321 ], [ %inc333, %for.inc332 ]
  %cmp323 = icmp slt i32 %j.2, %num_moves.0
  br i1 %cmp323, label %for.body325, label %for.end334

for.body325:                                      ; preds = %for.cond322
  %idxprom326 = sext i32 %j.2 to i64
  %arrayidx327 = getelementptr inbounds [300 x i32], [300 x i32]* @rootlosers, i64 0, i64 %idxprom326
  %i111 = load i32, i32* %arrayidx327, align 4
  %tobool328 = icmp ne i32 %i111, 0
  br i1 %tobool328, label %if.then329, label %if.end331

if.then329:                                       ; preds = %for.body325
  %inc330 = add nsw i32 %k.1, 1
  br label %if.end331

if.end331:                                        ; preds = %if.then329, %for.body325
  %k.2 = phi i32 [ %inc330, %if.then329 ], [ %k.1, %for.body325 ]
  br label %for.inc332

for.inc332:                                       ; preds = %if.end331
  %inc333 = add nsw i32 %j.2, 1
  br label %for.cond322

for.end334:                                       ; preds = %for.cond322
  %i112 = load i32, i32* @legals, align 4
  %cmp335 = icmp eq i32 %k.1, %i112
  br i1 %cmp335, label %if.then337, label %if.end338

if.then337:                                       ; preds = %for.end334
  store i32 1, i32* @alllosers, align 4
  br label %if.end338

if.end338:                                        ; preds = %if.then337, %for.end334
  br label %restart

if.end339:                                        ; preds = %land.lhs.true290, %if.then286
  br label %if.end340

if.end340:                                        ; preds = %if.end339, %land.lhs.true284, %land.lhs.true282, %land.lhs.true280, %lor.lhs.false277
  br label %if.end341

if.end341:                                        ; preds = %if.end340, %if.end272
  %i113 = load i32, i32* @alllosers, align 4
  %tobool342 = icmp ne i32 %i113, 0
  br i1 %tobool342, label %if.then343, label %if.end344

if.then343:                                       ; preds = %if.end341
  %i114 = bitcast %struct.move_s* %comp_move to i8*
  %i115 = bitcast %struct.move_s* %old_move to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %i114, i8* align 4 %i115, i64 24, i1 false)
  br label %if.end344

if.end344:                                        ; preds = %if.then343, %if.end341
  %cmp345 = icmp ne i32 %pn_restart.0, 0
  br i1 %cmp345, label %land.lhs.true347, label %if.end352

land.lhs.true347:                                 ; preds = %if.end344
  %i116 = load i32, i32* @xb_mode, align 4
  %tobool348 = icmp ne i32 %i116, 0
  br i1 %tobool348, label %if.then349, label %if.end352

if.then349:                                       ; preds = %land.lhs.true347
  %arraydecay = getelementptr inbounds [8 x i8], [8 x i8]* %output, i64 0, i64 0
  call void @comp_to_san(%struct.move_s* byval(%struct.move_s) align 8 %comp_move, i8* %arraydecay)
  %arraydecay350 = getelementptr inbounds [8 x i8], [8 x i8]* %output, i64 0, i64 0
  %call351 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.5.130, i64 0, i64 0), i32 %pn_restart.0, i8* %arraydecay350)
  store i32 0, i32* @result, align 4
  br label %if.end352

if.end352:                                        ; preds = %if.then349, %land.lhs.true347, %if.end344
  %call353 = call i64 @rtime()
  %i117 = load i64, i64* @start_time, align 8
  %call354 = call i32 @rdifftime(i64 %call353, i64 %i117)
  %i118 = load i32, i32* @time_left, align 4
  %sub355 = sub nsw i32 %i118, %call354
  store i32 %sub355, i32* @time_left, align 4
  %i119 = load i32, i32* @moves_to_tc, align 4
  %tobool356 = icmp ne i32 %i119, 0
  br i1 %tobool356, label %land.lhs.true357, label %if.end363

land.lhs.true357:                                 ; preds = %if.end352
  %i120 = load i32, i32* @is_pondering, align 4
  %tobool358 = icmp ne i32 %i120, 0
  br i1 %tobool358, label %if.end363, label %if.then359

if.then359:                                       ; preds = %land.lhs.true357
  %i121 = load i32, i32* @time_for_move, align 4
  %sub360 = sub nsw i32 %i121, %call354
  %i122 = load i32, i32* @inc, align 4
  %add361 = add nsw i32 %sub360, %i122
  %i123 = load i32, i32* @time_cushion, align 4
  %add362 = add nsw i32 %i123, %add361
  store i32 %add362, i32* @time_cushion, align 4
  br label %if.end363

if.end363:                                        ; preds = %if.then359, %land.lhs.true357, %if.end352
  %cmp364 = icmp eq i32 %temp_score.6, 999998
  br i1 %cmp364, label %land.lhs.true366, label %if.else374

land.lhs.true366:                                 ; preds = %if.end363
  %i124 = load i32, i32* @is_pondering, align 4
  %tobool367 = icmp ne i32 %i124, 0
  br i1 %tobool367, label %if.else374, label %if.then368

if.then368:                                       ; preds = %land.lhs.true366
  %i125 = load i32, i32* @white_to_move, align 4
  %cmp369 = icmp eq i32 %i125, 1
  br i1 %cmp369, label %if.then371, label %if.else372

if.then371:                                       ; preds = %if.then368
  store i32 3, i32* @result, align 4
  br label %if.end373

if.else372:                                       ; preds = %if.then368
  store i32 2, i32* @result, align 4
  br label %if.end373

if.end373:                                        ; preds = %if.else372, %if.then371
  br label %if.end386

if.else374:                                       ; preds = %land.lhs.true366, %if.end363
  %cmp375 = icmp eq i32 %temp_score.6, -999998
  br i1 %cmp375, label %land.lhs.true377, label %if.end385

land.lhs.true377:                                 ; preds = %if.else374
  %i126 = load i32, i32* @is_pondering, align 4
  %tobool378 = icmp ne i32 %i126, 0
  br i1 %tobool378, label %if.end385, label %if.then379

if.then379:                                       ; preds = %land.lhs.true377
  %i127 = load i32, i32* @white_to_move, align 4
  %cmp380 = icmp eq i32 %i127, 1
  br i1 %cmp380, label %if.then382, label %if.else383

if.then382:                                       ; preds = %if.then379
  store i32 2, i32* @result, align 4
  br label %if.end384

if.else383:                                       ; preds = %if.then379
  store i32 3, i32* @result, align 4
  br label %if.end384

if.end384:                                        ; preds = %if.else383, %if.then382
  br label %if.end385

if.end385:                                        ; preds = %if.end384, %land.lhs.true377, %if.else374
  br label %if.end386

if.end386:                                        ; preds = %if.end385, %if.end373
  %i128 = load i32, i32* @post, align 4
  %tobool387 = icmp ne i32 %i128, 0
  br i1 %tobool387, label %land.lhs.true388, label %if.end425

land.lhs.true388:                                 ; preds = %if.end386
  %i129 = load i32, i32* @xb_mode, align 4
  %tobool389 = icmp ne i32 %i129, 0
  br i1 %tobool389, label %land.lhs.true390, label %if.end425

land.lhs.true390:                                 ; preds = %land.lhs.true388
  %i130 = load i32, i32* @is_pondering, align 4
  %tobool391 = icmp ne i32 %i130, 0
  br i1 %tobool391, label %if.end425, label %land.lhs.true392

land.lhs.true392:                                 ; preds = %land.lhs.true390
  %i131 = load i32, i32* @result, align 4
  %cmp393 = icmp ne i32 %i131, 3
  br i1 %cmp393, label %land.lhs.true395, label %if.end425

land.lhs.true395:                                 ; preds = %land.lhs.true392
  %i132 = load i32, i32* @result, align 4
  %cmp396 = icmp ne i32 %i132, 2
  br i1 %cmp396, label %land.lhs.true398, label %if.end425

land.lhs.true398:                                 ; preds = %land.lhs.true395
  %i133 = load i32, i32* @result, align 4
  %cmp399 = icmp ne i32 %i133, 4
  br i1 %cmp399, label %land.lhs.true401, label %if.end425

land.lhs.true401:                                 ; preds = %land.lhs.true398
  %i134 = load i32, i32* @result, align 4
  %cmp402 = icmp ne i32 %i134, 5
  br i1 %cmp402, label %land.lhs.true404, label %if.end425

land.lhs.true404:                                 ; preds = %land.lhs.true401
  %i135 = load i32, i32* @result, align 4
  %cmp405 = icmp ne i32 %i135, 1
  br i1 %cmp405, label %land.lhs.true407, label %if.end425

land.lhs.true407:                                 ; preds = %land.lhs.true404
  %i136 = load i32, i32* @forcedwin, align 4
  %tobool408 = icmp ne i32 %i136, 0
  br i1 %tobool408, label %if.end425, label %if.then409

if.then409:                                       ; preds = %land.lhs.true407
  %cmp410 = icmp sgt i32 %temp_score.6, 999600
  br i1 %cmp410, label %if.then412, label %if.end424

if.then412:                                       ; preds = %if.then409
  %i137 = load i32, i32* @Variant, align 4
  %cmp413 = icmp ne i32 %i137, 1
  br i1 %cmp413, label %if.then415, label %if.else419

if.then415:                                       ; preds = %if.then412
  %sub416 = sub nsw i32 1000000, %temp_score.6
  %div417 = sdiv i32 %sub416, 2
  %call418 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.6.131, i64 0, i64 0), i32 %div417)
  br label %if.end423

if.else419:                                       ; preds = %if.then412
  %sub420 = sub nsw i32 1000000, %temp_score.6
  %div421 = sdiv i32 %sub420, 2
  %call422 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.7.132, i64 0, i64 0), i32 %div421)
  br label %if.end423

if.end423:                                        ; preds = %if.else419, %if.then415
  br label %if.end424

if.end424:                                        ; preds = %if.end423, %if.then409
  br label %if.end425

if.end425:                                        ; preds = %if.end424, %land.lhs.true407, %land.lhs.true404, %land.lhs.true401, %land.lhs.true398, %land.lhs.true395, %land.lhs.true392, %land.lhs.true390, %land.lhs.true388, %if.end386
  %i138 = load i32, i32* @result, align 4
  %cmp426 = icmp ne i32 %i138, 2
  br i1 %cmp426, label %land.lhs.true428, label %if.end457

land.lhs.true428:                                 ; preds = %if.end425
  %i139 = load i32, i32* @result, align 4
  %cmp429 = icmp ne i32 %i139, 3
  br i1 %cmp429, label %land.lhs.true431, label %if.end457

land.lhs.true431:                                 ; preds = %land.lhs.true428
  %i140 = load i32, i32* @result, align 4
  %cmp432 = icmp ne i32 %i140, 1
  br i1 %cmp432, label %land.lhs.true434, label %if.end457

land.lhs.true434:                                 ; preds = %land.lhs.true431
  %i141 = load i32, i32* @result, align 4
  %cmp435 = icmp ne i32 %i141, 4
  br i1 %cmp435, label %land.lhs.true437, label %if.end457

land.lhs.true437:                                 ; preds = %land.lhs.true434
  %i142 = load i32, i32* @result, align 4
  %cmp438 = icmp ne i32 %i142, 5
  br i1 %cmp438, label %land.lhs.true440, label %if.end457

land.lhs.true440:                                 ; preds = %land.lhs.true437
  %i143 = load i8, i8* @true_i_depth, align 1
  %conv441 = sext i8 %i143 to i32
  %cmp442 = icmp sge i32 %conv441, 3
  br i1 %cmp442, label %land.lhs.true444, label %if.end457

land.lhs.true444:                                 ; preds = %land.lhs.true440
  %i144 = load i32, i32* getelementptr inbounds (%struct.move_s, %struct.move_s* @pn_move, i32 0, i32 1), align 4
  %i145 = load i32, i32* getelementptr inbounds (%struct.move_s, %struct.move_s* @dummy, i32 0, i32 1), align 4
  %cmp445 = icmp eq i32 %i144, %i145
  br i1 %cmp445, label %land.lhs.true447, label %if.end457

land.lhs.true447:                                 ; preds = %land.lhs.true444
  %i146 = load i32, i32* @is_pondering, align 4
  %tobool448 = icmp ne i32 %i146, 0
  br i1 %tobool448, label %if.end457, label %land.lhs.true449

land.lhs.true449:                                 ; preds = %land.lhs.true447
  %i147 = load i32, i32* @Variant, align 4
  %cmp450 = icmp ne i32 %i147, 1
  br i1 %cmp450, label %if.then452, label %if.end457

if.then452:                                       ; preds = %land.lhs.true449
  %i148 = load i32, i32* @bestmovenum, align 4
  %cmp453 = icmp eq i32 %i148, -1
  br i1 %cmp453, label %if.then455, label %if.end456

if.then455:                                       ; preds = %if.then452
  store i32 0, i32* null, align 4
  br label %if.end456

if.end456:                                        ; preds = %if.then455, %if.then452
  br label %if.end457

if.end457:                                        ; preds = %if.end456, %land.lhs.true449, %land.lhs.true447, %land.lhs.true444, %land.lhs.true440, %land.lhs.true437, %land.lhs.true434, %land.lhs.true431, %land.lhs.true428, %if.end425
  %i149 = load i32, i32* @Variant, align 4
  %cmp458 = icmp eq i32 %i149, 1
  br i1 %cmp458, label %land.lhs.true460, label %if.else471

land.lhs.true460:                                 ; preds = %if.end457
  %cmp461 = icmp sgt i32 %temp_score.6, -999900
  br i1 %cmp461, label %if.then463, label %if.else471

if.then463:                                       ; preds = %land.lhs.true460
  %i150 = load i32, i32* @tradefreely, align 4
  %cmp464 = icmp eq i32 %i150, 0
  br i1 %cmp464, label %land.lhs.true466, label %if.end470

land.lhs.true466:                                 ; preds = %if.then463
  %i151 = load i32, i32* @userealholdings, align 4
  %tobool467 = icmp ne i32 %i151, 0
  br i1 %tobool467, label %if.end470, label %if.then468

if.then468:                                       ; preds = %land.lhs.true466
  store i32 1, i32* @tradefreely, align 4
  %call469 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.8.133, i64 0, i64 0))
  br label %if.end470

if.end470:                                        ; preds = %if.then468, %land.lhs.true466, %if.then463
  br label %if.end515

if.else471:                                       ; preds = %land.lhs.true460, %if.end457
  %cmp472 = icmp slt i32 %temp_score.6, -999900
  br i1 %cmp472, label %land.lhs.true474, label %if.else497

land.lhs.true474:                                 ; preds = %if.else471
  %i152 = load i32, i32* @Variant, align 4
  %cmp475 = icmp eq i32 %i152, 1
  br i1 %cmp475, label %land.lhs.true477, label %if.else497

land.lhs.true477:                                 ; preds = %land.lhs.true474
  %i153 = load i32, i32* getelementptr inbounds (%struct.move_s, %struct.move_s* @pn_move, i32 0, i32 1), align 4
  %i154 = load i32, i32* getelementptr inbounds (%struct.move_s, %struct.move_s* @dummy, i32 0, i32 1), align 4
  %cmp478 = icmp eq i32 %i153, %i154
  br i1 %cmp478, label %if.then480, label %if.else497

if.then480:                                       ; preds = %land.lhs.true477
  %i155 = load i32, i32* @userealholdings, align 4
  %tobool481 = icmp ne i32 %i155, 0
  br i1 %tobool481, label %if.then482, label %if.else483

if.then482:                                       ; preds = %if.then480
  store i32 1, i32* @must_sit, align 4
  br label %if.end485

if.else483:                                       ; preds = %if.then480
  store i32 1, i32* @userealholdings, align 4
  call void @ProcessHoldings(i8* getelementptr inbounds ([255 x i8], [255 x i8]* @realholdings, i64 0, i64 0))
  store i32 0, i32* @tradefreely, align 4
  %call484 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.9.134, i64 0, i64 0))
  br label %restart

if.end485:                                        ; preds = %if.then482
  %cmp486 = icmp sgt i32 %temp_score.6, -1000000
  br i1 %cmp486, label %if.then488, label %if.end496

if.then488:                                       ; preds = %if.end485
  %i156 = load i32, i32* @partnerdead, align 4
  %tobool489 = icmp ne i32 %i156, 0
  br i1 %tobool489, label %if.then490, label %if.else493

if.then490:                                       ; preds = %if.then488
  %call491 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.10.135, i64 0, i64 0))
  %call492 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.11.136, i64 0, i64 0))
  br label %if.end495

if.else493:                                       ; preds = %if.then488
  %call494 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.12.137, i64 0, i64 0))
  br label %if.end495

if.end495:                                        ; preds = %if.else493, %if.then490
  br label %if.end496

if.end496:                                        ; preds = %if.end495, %if.end485
  br label %if.end514

if.else497:                                       ; preds = %land.lhs.true477, %land.lhs.true474, %if.else471
  %cmp498 = icmp sgt i32 %temp_score.6, -60000
  br i1 %cmp498, label %land.lhs.true500, label %if.end513

land.lhs.true500:                                 ; preds = %if.else497
  %cmp501 = icmp slt i32 %temp_score.6, -40000
  br i1 %cmp501, label %land.lhs.true503, label %if.end513

land.lhs.true503:                                 ; preds = %land.lhs.true500
  %i157 = load i32, i32* @Variant, align 4
  %cmp504 = icmp eq i32 %i157, 1
  br i1 %cmp504, label %land.lhs.true506, label %if.end513

land.lhs.true506:                                 ; preds = %land.lhs.true503
  %i158 = load i32, i32* @partnerdead, align 4
  %tobool507 = icmp ne i32 %i158, 0
  br i1 %tobool507, label %if.end513, label %land.lhs.true508

land.lhs.true508:                                 ; preds = %land.lhs.true506
  %i159 = load i32, i32* getelementptr inbounds (%struct.move_s, %struct.move_s* @pn_move, i32 0, i32 1), align 4
  %i160 = load i32, i32* getelementptr inbounds (%struct.move_s, %struct.move_s* @dummy, i32 0, i32 1), align 4
  %cmp509 = icmp eq i32 %i159, %i160
  br i1 %cmp509, label %if.then511, label %if.end513

if.then511:                                       ; preds = %land.lhs.true508
  store i32 1, i32* @must_sit, align 4
  %call512 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([62 x i8], [62 x i8]* @.str.13.138, i64 0, i64 0))
  br label %if.end513

if.end513:                                        ; preds = %if.then511, %land.lhs.true508, %land.lhs.true506, %land.lhs.true503, %land.lhs.true500, %if.else497
  br label %if.end514

if.end514:                                        ; preds = %if.end513, %if.end496
  br label %if.end515

if.end515:                                        ; preds = %if.end514, %if.end470
  %i161 = bitcast %struct.move_s* %agg.result to i8*
  %i162 = bitcast %struct.move_s* %comp_move to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %i161, i8* align 4 %i162, i64 24, i1 false)
  br label %return

return:                                           ; preds = %if.end515, %if.then234, %if.then221, %if.then111, %if.then41, %if.then
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @tree(i32 %depth, i32 %indent, %struct._IO_FILE* %output, i8* %disp_b) #0 {
entry:
  %moves = alloca [512 x %struct.move_s], align 16
  %tobool = icmp ne i32 %depth, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  br label %for.end21

if.end:                                           ; preds = %entry
  %arrayidx = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %moves, i64 0, i64 0
  call void @gen(%struct.move_s* %arrayidx)
  %i = load i32, i32* @numb_moves, align 4
  %call = call i32 @in_check()
  br label %for.cond

for.cond:                                         ; preds = %for.inc19, %if.end
  %i.0 = phi i32 [ 0, %if.end ], [ %inc20, %for.inc19 ]
  %cmp = icmp slt i32 %i.0, %i
  br i1 %cmp, label %for.body, label %for.end21

for.body:                                         ; preds = %for.cond
  %arrayidx1 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %moves, i64 0, i64 0
  call void @make(%struct.move_s* %arrayidx1, i32 %i.0)
  %arrayidx2 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %moves, i64 0, i64 0
  %call3 = call i32 @check_legal(%struct.move_s* %arrayidx2, i32 %i.0, i32 %call)
  %tobool4 = icmp ne i32 %call3, 0
  br i1 %tobool4, label %if.then5, label %if.end17

if.then5:                                         ; preds = %for.body
  br label %for.cond6

for.cond6:                                        ; preds = %for.inc, %if.then5
  %j.0 = phi i32 [ 0, %if.then5 ], [ %inc, %for.inc ]
  %cmp7 = icmp slt i32 %j.0, %indent
  br i1 %cmp7, label %for.body8, label %for.end

for.body8:                                        ; preds = %for.cond6
  %call9 = call i32 @fputc(i32 32, %struct._IO_FILE* %output)
  br label %for.inc

for.inc:                                          ; preds = %for.body8
  %inc = add nsw i32 %j.0, 1
  br label %for.cond6

for.end:                                          ; preds = %for.cond6
  %arrayidx10 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %moves, i64 0, i64 0
  call void @print_move(%struct.move_s* %arrayidx10, i32 %i.0, %struct._IO_FILE* %output)
  %call11 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %output, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.14.139, i64 0, i64 0))
  %arrayidx12 = getelementptr inbounds i8, i8* %disp_b, i64 0
  %i1 = load i8, i8* %arrayidx12, align 1
  %conv = sext i8 %i1 to i32
  %cmp13 = icmp eq i32 %conv, 121
  br i1 %cmp13, label %if.then15, label %if.end16

if.then15:                                        ; preds = %for.end
  call void @display_board(%struct._IO_FILE* %output, i32 1)
  br label %if.end16

if.end16:                                         ; preds = %if.then15, %for.end
  %sub = sub nsw i32 %depth, 1
  %add = add nsw i32 %indent, 2
  call void @tree(i32 %sub, i32 %add, %struct._IO_FILE* %output, i8* %disp_b)
  br label %if.end17

if.end17:                                         ; preds = %if.end16, %for.body
  %arrayidx18 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %moves, i64 0, i64 0
  call void @unmake(%struct.move_s* %arrayidx18, i32 %i.0)
  br label %for.inc19

for.inc19:                                        ; preds = %if.end17
  %inc20 = add nsw i32 %i.0, 1
  br label %for.cond

for.end21:                                        ; preds = %for.cond, %if.then
  ret void
}

declare dso_local i32 @fputc(i32, %struct._IO_FILE*) #4

declare dso_local i32 @fprintf(%struct._IO_FILE*, i8*, ...) #4

; Function Attrs: noinline nounwind uwtable
define dso_local void @setup_attackers(i32 %square) #0 {
entry:
  %i = load i32, i32* getelementptr inbounds ([2 x i32], [2 x i32]* @see_num_attackers, i64 0, i64 0), align 4
  %i1 = load i32, i32* getelementptr inbounds ([2 x i32], [2 x i32]* @see_num_attackers, i64 0, i64 1), align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %numw.0 = phi i32 [ %i, %entry ], [ %numw.1, %for.inc ]
  %i.0 = phi i32 [ 0, %entry ], [ %inc54, %for.inc ]
  %numb.0 = phi i32 [ %i1, %entry ], [ %numb.1, %for.inc ]
  %cmp = icmp slt i32 %i.0, 4
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %idxprom = sext i32 %i.0 to i64
  %arrayidx = getelementptr inbounds [4 x i32], [4 x i32]* @setup_attackers.rook_o, i64 0, i64 %idxprom
  %i2 = load i32, i32* %arrayidx, align 4
  %add = add nsw i32 %square, %i2
  %idxprom1 = sext i32 %add to i64
  %arrayidx2 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom1
  %i3 = load i32, i32* %arrayidx2, align 4
  %cmp3 = icmp eq i32 %i3, 5
  br i1 %cmp3, label %if.then, label %if.else

if.then:                                          ; preds = %for.body
  %idxprom4 = sext i32 %numw.0 to i64
  %arrayidx5 = getelementptr inbounds [16 x %struct.see_data], [16 x %struct.see_data]* getelementptr inbounds ([2 x [16 x %struct.see_data]], [2 x [16 x %struct.see_data]]* @see_attackers, i64 0, i64 0), i64 0, i64 %idxprom4
  %piece = getelementptr inbounds %struct.see_data, %struct.see_data* %arrayidx5, i32 0, i32 0
  store i32 %i3, i32* %piece, align 8
  %idxprom6 = sext i32 %numw.0 to i64
  %arrayidx7 = getelementptr inbounds [16 x %struct.see_data], [16 x %struct.see_data]* getelementptr inbounds ([2 x [16 x %struct.see_data]], [2 x [16 x %struct.see_data]]* @see_attackers, i64 0, i64 0), i64 0, i64 %idxprom6
  %square8 = getelementptr inbounds %struct.see_data, %struct.see_data* %arrayidx7, i32 0, i32 1
  store i32 %add, i32* %square8, align 4
  %inc = add nsw i32 %numw.0, 1
  br label %for.end

if.else:                                          ; preds = %for.body
  %cmp9 = icmp eq i32 %i3, 6
  br i1 %cmp9, label %if.then10, label %if.else18

if.then10:                                        ; preds = %if.else
  %idxprom11 = sext i32 %numb.0 to i64
  %arrayidx12 = getelementptr inbounds [16 x %struct.see_data], [16 x %struct.see_data]* getelementptr inbounds ([2 x [16 x %struct.see_data]], [2 x [16 x %struct.see_data]]* @see_attackers, i64 0, i64 1), i64 0, i64 %idxprom11
  %piece13 = getelementptr inbounds %struct.see_data, %struct.see_data* %arrayidx12, i32 0, i32 0
  store i32 %i3, i32* %piece13, align 8
  %idxprom14 = sext i32 %numb.0 to i64
  %arrayidx15 = getelementptr inbounds [16 x %struct.see_data], [16 x %struct.see_data]* getelementptr inbounds ([2 x [16 x %struct.see_data]], [2 x [16 x %struct.see_data]]* @see_attackers, i64 0, i64 1), i64 0, i64 %idxprom14
  %square16 = getelementptr inbounds %struct.see_data, %struct.see_data* %arrayidx15, i32 0, i32 1
  store i32 %add, i32* %square16, align 4
  %inc17 = add nsw i32 %numb.0, 1
  br label %for.end

if.else18:                                        ; preds = %if.else
  br label %while.cond

while.cond:                                       ; preds = %if.end46, %if.else18
  %b_sq.0 = phi i32 [ %i3, %if.else18 ], [ %i5, %if.end46 ]
  %a_sq.0 = phi i32 [ %add, %if.else18 ], [ %add49, %if.end46 ]
  %cmp19 = icmp ne i32 %b_sq.0, 0
  br i1 %cmp19, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %cmp20 = icmp eq i32 %b_sq.0, 7
  br i1 %cmp20, label %if.then22, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %while.body
  %cmp21 = icmp eq i32 %b_sq.0, 9
  br i1 %cmp21, label %if.then22, label %if.else30

if.then22:                                        ; preds = %lor.lhs.false, %while.body
  %idxprom23 = sext i32 %numw.0 to i64
  %arrayidx24 = getelementptr inbounds [16 x %struct.see_data], [16 x %struct.see_data]* getelementptr inbounds ([2 x [16 x %struct.see_data]], [2 x [16 x %struct.see_data]]* @see_attackers, i64 0, i64 0), i64 0, i64 %idxprom23
  %piece25 = getelementptr inbounds %struct.see_data, %struct.see_data* %arrayidx24, i32 0, i32 0
  store i32 %b_sq.0, i32* %piece25, align 8
  %idxprom26 = sext i32 %numw.0 to i64
  %arrayidx27 = getelementptr inbounds [16 x %struct.see_data], [16 x %struct.see_data]* getelementptr inbounds ([2 x [16 x %struct.see_data]], [2 x [16 x %struct.see_data]]* @see_attackers, i64 0, i64 0), i64 0, i64 %idxprom26
  %square28 = getelementptr inbounds %struct.see_data, %struct.see_data* %arrayidx27, i32 0, i32 1
  store i32 %a_sq.0, i32* %square28, align 4
  %inc29 = add nsw i32 %numw.0, 1
  br label %while.end

if.else30:                                        ; preds = %lor.lhs.false
  %cmp31 = icmp eq i32 %b_sq.0, 8
  br i1 %cmp31, label %if.then34, label %lor.lhs.false32

lor.lhs.false32:                                  ; preds = %if.else30
  %cmp33 = icmp eq i32 %b_sq.0, 10
  br i1 %cmp33, label %if.then34, label %if.else42

if.then34:                                        ; preds = %lor.lhs.false32, %if.else30
  %idxprom35 = sext i32 %numb.0 to i64
  %arrayidx36 = getelementptr inbounds [16 x %struct.see_data], [16 x %struct.see_data]* getelementptr inbounds ([2 x [16 x %struct.see_data]], [2 x [16 x %struct.see_data]]* @see_attackers, i64 0, i64 1), i64 0, i64 %idxprom35
  %piece37 = getelementptr inbounds %struct.see_data, %struct.see_data* %arrayidx36, i32 0, i32 0
  store i32 %b_sq.0, i32* %piece37, align 8
  %idxprom38 = sext i32 %numb.0 to i64
  %arrayidx39 = getelementptr inbounds [16 x %struct.see_data], [16 x %struct.see_data]* getelementptr inbounds ([2 x [16 x %struct.see_data]], [2 x [16 x %struct.see_data]]* @see_attackers, i64 0, i64 1), i64 0, i64 %idxprom38
  %square40 = getelementptr inbounds %struct.see_data, %struct.see_data* %arrayidx39, i32 0, i32 1
  store i32 %a_sq.0, i32* %square40, align 4
  %inc41 = add nsw i32 %numb.0, 1
  br label %while.end

if.else42:                                        ; preds = %lor.lhs.false32
  %cmp43 = icmp ne i32 %b_sq.0, 13
  br i1 %cmp43, label %if.then44, label %if.end

if.then44:                                        ; preds = %if.else42
  br label %while.end

if.end:                                           ; preds = %if.else42
  br label %if.end45

if.end45:                                         ; preds = %if.end
  br label %if.end46

if.end46:                                         ; preds = %if.end45
  %idxprom47 = sext i32 %i.0 to i64
  %arrayidx48 = getelementptr inbounds [4 x i32], [4 x i32]* @setup_attackers.rook_o, i64 0, i64 %idxprom47
  %i4 = load i32, i32* %arrayidx48, align 4
  %add49 = add nsw i32 %a_sq.0, %i4
  %idxprom50 = sext i32 %add49 to i64
  %arrayidx51 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom50
  %i5 = load i32, i32* %arrayidx51, align 4
  br label %while.cond

while.end:                                        ; preds = %if.then44, %if.then34, %if.then22, %while.cond
  %numw.1 = phi i32 [ %inc29, %if.then22 ], [ %numw.0, %if.then34 ], [ %numw.0, %if.then44 ], [ %numw.0, %while.cond ]
  %numb.1 = phi i32 [ %numb.0, %if.then22 ], [ %inc41, %if.then34 ], [ %numb.0, %if.then44 ], [ %numb.0, %while.cond ]
  br label %if.end52

if.end52:                                         ; preds = %while.end
  br label %if.end53

if.end53:                                         ; preds = %if.end52
  br label %for.inc

for.inc:                                          ; preds = %if.end53
  %inc54 = add nsw i32 %i.0, 1
  br label %for.cond

for.end:                                          ; preds = %if.then10, %if.then, %for.cond
  %numw.2 = phi i32 [ %inc, %if.then ], [ %numw.0, %if.then10 ], [ %numw.0, %for.cond ]
  %numb.2 = phi i32 [ %numb.0, %if.then ], [ %inc17, %if.then10 ], [ %numb.0, %for.cond ]
  br label %for.cond55

for.cond55:                                       ; preds = %for.inc148, %for.end
  %numw.3 = phi i32 [ %numw.2, %for.end ], [ %numw.4, %for.inc148 ]
  %i.1 = phi i32 [ 0, %for.end ], [ %inc149, %for.inc148 ]
  %numb.3 = phi i32 [ %numb.2, %for.end ], [ %numb.4, %for.inc148 ]
  %cmp56 = icmp slt i32 %i.1, 4
  br i1 %cmp56, label %for.body57, label %for.end150

for.body57:                                       ; preds = %for.cond55
  %idxprom58 = sext i32 %i.1 to i64
  %arrayidx59 = getelementptr inbounds [4 x i32], [4 x i32]* @setup_attackers.bishop_o, i64 0, i64 %idxprom58
  %i6 = load i32, i32* %arrayidx59, align 4
  %add60 = add nsw i32 %square, %i6
  %idxprom61 = sext i32 %add60 to i64
  %arrayidx62 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom61
  %i7 = load i32, i32* %arrayidx62, align 4
  %cmp63 = icmp eq i32 %i7, 1
  br i1 %cmp63, label %land.lhs.true, label %if.else72

land.lhs.true:                                    ; preds = %for.body57
  %rem = srem i32 %i.1, 2
  %tobool = icmp ne i32 %rem, 0
  br i1 %tobool, label %if.then64, label %if.else72

if.then64:                                        ; preds = %land.lhs.true
  %idxprom65 = sext i32 %numw.3 to i64
  %arrayidx66 = getelementptr inbounds [16 x %struct.see_data], [16 x %struct.see_data]* getelementptr inbounds ([2 x [16 x %struct.see_data]], [2 x [16 x %struct.see_data]]* @see_attackers, i64 0, i64 0), i64 0, i64 %idxprom65
  %piece67 = getelementptr inbounds %struct.see_data, %struct.see_data* %arrayidx66, i32 0, i32 0
  store i32 %i7, i32* %piece67, align 8
  %idxprom68 = sext i32 %numw.3 to i64
  %arrayidx69 = getelementptr inbounds [16 x %struct.see_data], [16 x %struct.see_data]* getelementptr inbounds ([2 x [16 x %struct.see_data]], [2 x [16 x %struct.see_data]]* @see_attackers, i64 0, i64 0), i64 0, i64 %idxprom68
  %square70 = getelementptr inbounds %struct.see_data, %struct.see_data* %arrayidx69, i32 0, i32 1
  store i32 %add60, i32* %square70, align 4
  %inc71 = add nsw i32 %numw.3, 1
  br label %for.end150

if.else72:                                        ; preds = %land.lhs.true, %for.body57
  %cmp73 = icmp eq i32 %i7, 2
  br i1 %cmp73, label %land.lhs.true74, label %if.else85

land.lhs.true74:                                  ; preds = %if.else72
  %rem75 = srem i32 %i.1, 2
  %tobool76 = icmp ne i32 %rem75, 0
  br i1 %tobool76, label %if.else85, label %if.then77

if.then77:                                        ; preds = %land.lhs.true74
  %idxprom78 = sext i32 %numb.3 to i64
  %arrayidx79 = getelementptr inbounds [16 x %struct.see_data], [16 x %struct.see_data]* getelementptr inbounds ([2 x [16 x %struct.see_data]], [2 x [16 x %struct.see_data]]* @see_attackers, i64 0, i64 1), i64 0, i64 %idxprom78
  %piece80 = getelementptr inbounds %struct.see_data, %struct.see_data* %arrayidx79, i32 0, i32 0
  store i32 %i7, i32* %piece80, align 8
  %idxprom81 = sext i32 %numb.3 to i64
  %arrayidx82 = getelementptr inbounds [16 x %struct.see_data], [16 x %struct.see_data]* getelementptr inbounds ([2 x [16 x %struct.see_data]], [2 x [16 x %struct.see_data]]* @see_attackers, i64 0, i64 1), i64 0, i64 %idxprom81
  %square83 = getelementptr inbounds %struct.see_data, %struct.see_data* %arrayidx82, i32 0, i32 1
  store i32 %add60, i32* %square83, align 4
  %inc84 = add nsw i32 %numb.3, 1
  br label %for.end150

if.else85:                                        ; preds = %land.lhs.true74, %if.else72
  %cmp86 = icmp eq i32 %i7, 5
  br i1 %cmp86, label %if.then87, label %if.else95

if.then87:                                        ; preds = %if.else85
  %idxprom88 = sext i32 %numw.3 to i64
  %arrayidx89 = getelementptr inbounds [16 x %struct.see_data], [16 x %struct.see_data]* getelementptr inbounds ([2 x [16 x %struct.see_data]], [2 x [16 x %struct.see_data]]* @see_attackers, i64 0, i64 0), i64 0, i64 %idxprom88
  %piece90 = getelementptr inbounds %struct.see_data, %struct.see_data* %arrayidx89, i32 0, i32 0
  store i32 %i7, i32* %piece90, align 8
  %idxprom91 = sext i32 %numw.3 to i64
  %arrayidx92 = getelementptr inbounds [16 x %struct.see_data], [16 x %struct.see_data]* getelementptr inbounds ([2 x [16 x %struct.see_data]], [2 x [16 x %struct.see_data]]* @see_attackers, i64 0, i64 0), i64 0, i64 %idxprom91
  %square93 = getelementptr inbounds %struct.see_data, %struct.see_data* %arrayidx92, i32 0, i32 1
  store i32 %add60, i32* %square93, align 4
  %inc94 = add nsw i32 %numw.3, 1
  br label %for.end150

if.else95:                                        ; preds = %if.else85
  %cmp96 = icmp eq i32 %i7, 6
  br i1 %cmp96, label %if.then97, label %if.else105

if.then97:                                        ; preds = %if.else95
  %idxprom98 = sext i32 %numb.3 to i64
  %arrayidx99 = getelementptr inbounds [16 x %struct.see_data], [16 x %struct.see_data]* getelementptr inbounds ([2 x [16 x %struct.see_data]], [2 x [16 x %struct.see_data]]* @see_attackers, i64 0, i64 1), i64 0, i64 %idxprom98
  %piece100 = getelementptr inbounds %struct.see_data, %struct.see_data* %arrayidx99, i32 0, i32 0
  store i32 %i7, i32* %piece100, align 8
  %idxprom101 = sext i32 %numb.3 to i64
  %arrayidx102 = getelementptr inbounds [16 x %struct.see_data], [16 x %struct.see_data]* getelementptr inbounds ([2 x [16 x %struct.see_data]], [2 x [16 x %struct.see_data]]* @see_attackers, i64 0, i64 1), i64 0, i64 %idxprom101
  %square103 = getelementptr inbounds %struct.see_data, %struct.see_data* %arrayidx102, i32 0, i32 1
  store i32 %add60, i32* %square103, align 4
  %inc104 = add nsw i32 %numb.3, 1
  br label %for.end150

if.else105:                                       ; preds = %if.else95
  br label %while.cond106

while.cond106:                                    ; preds = %if.end137, %if.else105
  %b_sq.1 = phi i32 [ %i7, %if.else105 ], [ %i9, %if.end137 ]
  %a_sq.1 = phi i32 [ %add60, %if.else105 ], [ %add140, %if.end137 ]
  %cmp107 = icmp ne i32 %b_sq.1, 0
  br i1 %cmp107, label %while.body108, label %while.end143

while.body108:                                    ; preds = %while.cond106
  %cmp109 = icmp eq i32 %b_sq.1, 11
  br i1 %cmp109, label %if.then112, label %lor.lhs.false110

lor.lhs.false110:                                 ; preds = %while.body108
  %cmp111 = icmp eq i32 %b_sq.1, 9
  br i1 %cmp111, label %if.then112, label %if.else120

if.then112:                                       ; preds = %lor.lhs.false110, %while.body108
  %idxprom113 = sext i32 %numw.3 to i64
  %arrayidx114 = getelementptr inbounds [16 x %struct.see_data], [16 x %struct.see_data]* getelementptr inbounds ([2 x [16 x %struct.see_data]], [2 x [16 x %struct.see_data]]* @see_attackers, i64 0, i64 0), i64 0, i64 %idxprom113
  %piece115 = getelementptr inbounds %struct.see_data, %struct.see_data* %arrayidx114, i32 0, i32 0
  store i32 %b_sq.1, i32* %piece115, align 8
  %idxprom116 = sext i32 %numw.3 to i64
  %arrayidx117 = getelementptr inbounds [16 x %struct.see_data], [16 x %struct.see_data]* getelementptr inbounds ([2 x [16 x %struct.see_data]], [2 x [16 x %struct.see_data]]* @see_attackers, i64 0, i64 0), i64 0, i64 %idxprom116
  %square118 = getelementptr inbounds %struct.see_data, %struct.see_data* %arrayidx117, i32 0, i32 1
  store i32 %a_sq.1, i32* %square118, align 4
  %inc119 = add nsw i32 %numw.3, 1
  br label %while.end143

if.else120:                                       ; preds = %lor.lhs.false110
  %cmp121 = icmp eq i32 %b_sq.1, 12
  br i1 %cmp121, label %if.then124, label %lor.lhs.false122

lor.lhs.false122:                                 ; preds = %if.else120
  %cmp123 = icmp eq i32 %b_sq.1, 10
  br i1 %cmp123, label %if.then124, label %if.else132

if.then124:                                       ; preds = %lor.lhs.false122, %if.else120
  %idxprom125 = sext i32 %numb.3 to i64
  %arrayidx126 = getelementptr inbounds [16 x %struct.see_data], [16 x %struct.see_data]* getelementptr inbounds ([2 x [16 x %struct.see_data]], [2 x [16 x %struct.see_data]]* @see_attackers, i64 0, i64 1), i64 0, i64 %idxprom125
  %piece127 = getelementptr inbounds %struct.see_data, %struct.see_data* %arrayidx126, i32 0, i32 0
  store i32 %b_sq.1, i32* %piece127, align 8
  %idxprom128 = sext i32 %numb.3 to i64
  %arrayidx129 = getelementptr inbounds [16 x %struct.see_data], [16 x %struct.see_data]* getelementptr inbounds ([2 x [16 x %struct.see_data]], [2 x [16 x %struct.see_data]]* @see_attackers, i64 0, i64 1), i64 0, i64 %idxprom128
  %square130 = getelementptr inbounds %struct.see_data, %struct.see_data* %arrayidx129, i32 0, i32 1
  store i32 %a_sq.1, i32* %square130, align 4
  %inc131 = add nsw i32 %numb.3, 1
  br label %while.end143

if.else132:                                       ; preds = %lor.lhs.false122
  %cmp133 = icmp ne i32 %b_sq.1, 13
  br i1 %cmp133, label %if.then134, label %if.end135

if.then134:                                       ; preds = %if.else132
  br label %while.end143

if.end135:                                        ; preds = %if.else132
  br label %if.end136

if.end136:                                        ; preds = %if.end135
  br label %if.end137

if.end137:                                        ; preds = %if.end136
  %idxprom138 = sext i32 %i.1 to i64
  %arrayidx139 = getelementptr inbounds [4 x i32], [4 x i32]* @setup_attackers.bishop_o, i64 0, i64 %idxprom138
  %i8 = load i32, i32* %arrayidx139, align 4
  %add140 = add nsw i32 %a_sq.1, %i8
  %idxprom141 = sext i32 %add140 to i64
  %arrayidx142 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom141
  %i9 = load i32, i32* %arrayidx142, align 4
  br label %while.cond106

while.end143:                                     ; preds = %if.then134, %if.then124, %if.then112, %while.cond106
  %numw.4 = phi i32 [ %inc119, %if.then112 ], [ %numw.3, %if.then124 ], [ %numw.3, %if.then134 ], [ %numw.3, %while.cond106 ]
  %numb.4 = phi i32 [ %numb.3, %if.then112 ], [ %inc131, %if.then124 ], [ %numb.3, %if.then134 ], [ %numb.3, %while.cond106 ]
  br label %if.end144

if.end144:                                        ; preds = %while.end143
  br label %if.end145

if.end145:                                        ; preds = %if.end144
  br label %if.end146

if.end146:                                        ; preds = %if.end145
  br label %if.end147

if.end147:                                        ; preds = %if.end146
  br label %for.inc148

for.inc148:                                       ; preds = %if.end147
  %inc149 = add nsw i32 %i.1, 1
  br label %for.cond55

for.end150:                                       ; preds = %if.then97, %if.then87, %if.then77, %if.then64, %for.cond55
  %numw.5 = phi i32 [ %inc71, %if.then64 ], [ %inc94, %if.then87 ], [ %numw.3, %if.then97 ], [ %numw.3, %if.then77 ], [ %numw.3, %for.cond55 ]
  %numb.5 = phi i32 [ %numb.3, %if.then64 ], [ %numb.3, %if.then87 ], [ %inc104, %if.then97 ], [ %inc84, %if.then77 ], [ %numb.3, %for.cond55 ]
  br label %for.cond151

for.cond151:                                      ; preds = %for.inc180, %for.end150
  %numw.6 = phi i32 [ %numw.5, %for.end150 ], [ %numw.7, %for.inc180 ]
  %i.2 = phi i32 [ 0, %for.end150 ], [ %inc181, %for.inc180 ]
  %numb.6 = phi i32 [ %numb.5, %for.end150 ], [ %numb.8, %for.inc180 ]
  %cmp152 = icmp slt i32 %i.2, 8
  br i1 %cmp152, label %for.body153, label %for.end182

for.body153:                                      ; preds = %for.cond151
  %idxprom154 = sext i32 %i.2 to i64
  %arrayidx155 = getelementptr inbounds [8 x i32], [8 x i32]* @setup_attackers.knight_o, i64 0, i64 %idxprom154
  %i10 = load i32, i32* %arrayidx155, align 4
  %add156 = add nsw i32 %square, %i10
  %idxprom157 = sext i32 %add156 to i64
  %arrayidx158 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom157
  %i11 = load i32, i32* %arrayidx158, align 4
  %cmp159 = icmp eq i32 %i11, 3
  br i1 %cmp159, label %if.then160, label %if.else168

if.then160:                                       ; preds = %for.body153
  %idxprom161 = sext i32 %numw.6 to i64
  %arrayidx162 = getelementptr inbounds [16 x %struct.see_data], [16 x %struct.see_data]* getelementptr inbounds ([2 x [16 x %struct.see_data]], [2 x [16 x %struct.see_data]]* @see_attackers, i64 0, i64 0), i64 0, i64 %idxprom161
  %piece163 = getelementptr inbounds %struct.see_data, %struct.see_data* %arrayidx162, i32 0, i32 0
  store i32 %i11, i32* %piece163, align 8
  %idxprom164 = sext i32 %numw.6 to i64
  %arrayidx165 = getelementptr inbounds [16 x %struct.see_data], [16 x %struct.see_data]* getelementptr inbounds ([2 x [16 x %struct.see_data]], [2 x [16 x %struct.see_data]]* @see_attackers, i64 0, i64 0), i64 0, i64 %idxprom164
  %square166 = getelementptr inbounds %struct.see_data, %struct.see_data* %arrayidx165, i32 0, i32 1
  store i32 %add156, i32* %square166, align 4
  %inc167 = add nsw i32 %numw.6, 1
  br label %if.end179

if.else168:                                       ; preds = %for.body153
  %cmp169 = icmp eq i32 %i11, 4
  br i1 %cmp169, label %if.then170, label %if.end178

if.then170:                                       ; preds = %if.else168
  %idxprom171 = sext i32 %numb.6 to i64
  %arrayidx172 = getelementptr inbounds [16 x %struct.see_data], [16 x %struct.see_data]* getelementptr inbounds ([2 x [16 x %struct.see_data]], [2 x [16 x %struct.see_data]]* @see_attackers, i64 0, i64 1), i64 0, i64 %idxprom171
  %piece173 = getelementptr inbounds %struct.see_data, %struct.see_data* %arrayidx172, i32 0, i32 0
  store i32 %i11, i32* %piece173, align 8
  %idxprom174 = sext i32 %numb.6 to i64
  %arrayidx175 = getelementptr inbounds [16 x %struct.see_data], [16 x %struct.see_data]* getelementptr inbounds ([2 x [16 x %struct.see_data]], [2 x [16 x %struct.see_data]]* @see_attackers, i64 0, i64 1), i64 0, i64 %idxprom174
  %square176 = getelementptr inbounds %struct.see_data, %struct.see_data* %arrayidx175, i32 0, i32 1
  store i32 %add156, i32* %square176, align 4
  %inc177 = add nsw i32 %numb.6, 1
  br label %if.end178

if.end178:                                        ; preds = %if.then170, %if.else168
  %numb.7 = phi i32 [ %inc177, %if.then170 ], [ %numb.6, %if.else168 ]
  br label %if.end179

if.end179:                                        ; preds = %if.end178, %if.then160
  %numw.7 = phi i32 [ %inc167, %if.then160 ], [ %numw.6, %if.end178 ]
  %numb.8 = phi i32 [ %numb.6, %if.then160 ], [ %numb.7, %if.end178 ]
  br label %for.inc180

for.inc180:                                       ; preds = %if.end179
  %inc181 = add nsw i32 %i.2, 1
  br label %for.cond151

for.end182:                                       ; preds = %for.cond151
  store i32 %numw.6, i32* getelementptr inbounds ([2 x i32], [2 x i32]* @see_num_attackers, i64 0, i64 0), align 4
  store i32 %numb.6, i32* getelementptr inbounds ([2 x i32], [2 x i32]* @see_num_attackers, i64 0, i64 1), align 4
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @findlowest(i32 %color, i32 %next) #0 {
entry:
  %swap = alloca %struct.see_data, align 4
  %idxprom = sext i32 %color to i64
  %arrayidx = getelementptr inbounds [2 x [16 x %struct.see_data]], [2 x [16 x %struct.see_data]]* @see_attackers, i64 0, i64 %idxprom
  %idxprom1 = sext i32 %next to i64
  %arrayidx2 = getelementptr inbounds [16 x %struct.see_data], [16 x %struct.see_data]* %arrayidx, i64 0, i64 %idxprom1
  %piece = getelementptr inbounds %struct.see_data, %struct.see_data* %arrayidx2, i32 0, i32 0
  %i = load i32, i32* %piece, align 8
  %idxprom3 = sext i32 %i to i64
  %arrayidx4 = getelementptr inbounds [14 x i32], [14 x i32]* @material, i64 0, i64 %idxprom3
  %i1 = load i32, i32* %arrayidx4, align 4
  %call = call i32 @abs(i32 %i1) #10
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %lowestp.0 = phi i32 [ %next, %entry ], [ %lowestp.1, %for.inc ]
  %lowestv.0 = phi i32 [ %call, %entry ], [ %lowestv.1, %for.inc ]
  %i.0 = phi i32 [ %next, %entry ], [ %inc, %for.inc ]
  %idxprom5 = sext i32 %color to i64
  %arrayidx6 = getelementptr inbounds [2 x i32], [2 x i32]* @see_num_attackers, i64 0, i64 %idxprom5
  %i2 = load i32, i32* %arrayidx6, align 4
  %cmp = icmp slt i32 %i.0, %i2
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %idxprom7 = sext i32 %color to i64
  %arrayidx8 = getelementptr inbounds [2 x [16 x %struct.see_data]], [2 x [16 x %struct.see_data]]* @see_attackers, i64 0, i64 %idxprom7
  %idxprom9 = sext i32 %i.0 to i64
  %arrayidx10 = getelementptr inbounds [16 x %struct.see_data], [16 x %struct.see_data]* %arrayidx8, i64 0, i64 %idxprom9
  %piece11 = getelementptr inbounds %struct.see_data, %struct.see_data* %arrayidx10, i32 0, i32 0
  %i3 = load i32, i32* %piece11, align 8
  %idxprom12 = sext i32 %i3 to i64
  %arrayidx13 = getelementptr inbounds [14 x i32], [14 x i32]* @material, i64 0, i64 %idxprom12
  %i4 = load i32, i32* %arrayidx13, align 4
  %call14 = call i32 @abs(i32 %i4) #10
  %cmp15 = icmp slt i32 %call14, %lowestv.0
  br i1 %cmp15, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %idxprom16 = sext i32 %color to i64
  %arrayidx17 = getelementptr inbounds [2 x [16 x %struct.see_data]], [2 x [16 x %struct.see_data]]* @see_attackers, i64 0, i64 %idxprom16
  %idxprom18 = sext i32 %i.0 to i64
  %arrayidx19 = getelementptr inbounds [16 x %struct.see_data], [16 x %struct.see_data]* %arrayidx17, i64 0, i64 %idxprom18
  %piece20 = getelementptr inbounds %struct.see_data, %struct.see_data* %arrayidx19, i32 0, i32 0
  %i5 = load i32, i32* %piece20, align 8
  %idxprom21 = sext i32 %i5 to i64
  %arrayidx22 = getelementptr inbounds [14 x i32], [14 x i32]* @material, i64 0, i64 %idxprom21
  %i6 = load i32, i32* %arrayidx22, align 4
  %call23 = call i32 @abs(i32 %i6) #10
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  %lowestp.1 = phi i32 [ %i.0, %if.then ], [ %lowestp.0, %for.body ]
  %lowestv.1 = phi i32 [ %call23, %if.then ], [ %lowestv.0, %for.body ]
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %inc = add nsw i32 %i.0, 1
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %idxprom24 = sext i32 %color to i64
  %arrayidx25 = getelementptr inbounds [2 x [16 x %struct.see_data]], [2 x [16 x %struct.see_data]]* @see_attackers, i64 0, i64 %idxprom24
  %idxprom26 = sext i32 %next to i64
  %arrayidx27 = getelementptr inbounds [16 x %struct.see_data], [16 x %struct.see_data]* %arrayidx25, i64 0, i64 %idxprom26
  %i7 = bitcast %struct.see_data* %swap to i8*
  %i8 = bitcast %struct.see_data* %arrayidx27 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %i7, i8* align 8 %i8, i64 8, i1 false)
  %idxprom28 = sext i32 %color to i64
  %arrayidx29 = getelementptr inbounds [2 x [16 x %struct.see_data]], [2 x [16 x %struct.see_data]]* @see_attackers, i64 0, i64 %idxprom28
  %idxprom30 = sext i32 %next to i64
  %arrayidx31 = getelementptr inbounds [16 x %struct.see_data], [16 x %struct.see_data]* %arrayidx29, i64 0, i64 %idxprom30
  %idxprom32 = sext i32 %color to i64
  %arrayidx33 = getelementptr inbounds [2 x [16 x %struct.see_data]], [2 x [16 x %struct.see_data]]* @see_attackers, i64 0, i64 %idxprom32
  %idxprom34 = sext i32 %lowestp.0 to i64
  %arrayidx35 = getelementptr inbounds [16 x %struct.see_data], [16 x %struct.see_data]* %arrayidx33, i64 0, i64 %idxprom34
  %i9 = bitcast %struct.see_data* %arrayidx31 to i8*
  %i10 = bitcast %struct.see_data* %arrayidx35 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %i9, i8* align 8 %i10, i64 8, i1 false)
  %idxprom36 = sext i32 %color to i64
  %arrayidx37 = getelementptr inbounds [2 x [16 x %struct.see_data]], [2 x [16 x %struct.see_data]]* @see_attackers, i64 0, i64 %idxprom36
  %idxprom38 = sext i32 %lowestp.0 to i64
  %arrayidx39 = getelementptr inbounds [16 x %struct.see_data], [16 x %struct.see_data]* %arrayidx37, i64 0, i64 %idxprom38
  %i11 = bitcast %struct.see_data* %arrayidx39 to i8*
  %i12 = bitcast %struct.see_data* %swap to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %i11, i8* align 4 %i12, i64 8, i1 false)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @see(i32 %color, i32 %square, i32 %from) #0 {
entry:
  %caps = alloca [2 x i32], align 4
  store i32 0, i32* getelementptr inbounds ([2 x i32], [2 x i32]* @see_num_attackers, i64 0, i64 0), align 4
  store i32 0, i32* getelementptr inbounds ([2 x i32], [2 x i32]* @see_num_attackers, i64 0, i64 1), align 4
  %idxprom = sext i32 %from to i64
  %arrayidx = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom
  %i = load i32, i32* %arrayidx, align 4
  %idxprom1 = sext i32 %from to i64
  %arrayidx2 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom1
  store i32 13, i32* %arrayidx2, align 4
  %idxprom3 = sext i32 %color to i64
  %arrayidx4 = getelementptr inbounds [2 x i32], [2 x i32]* @see_num_attackers, i64 0, i64 %idxprom3
  %i1 = load i32, i32* %arrayidx4, align 4
  %inc = add nsw i32 %i1, 1
  store i32 %inc, i32* %arrayidx4, align 4
  %idxprom5 = sext i32 %color to i64
  %arrayidx6 = getelementptr inbounds [2 x [16 x %struct.see_data]], [2 x [16 x %struct.see_data]]* @see_attackers, i64 0, i64 %idxprom5
  %arrayidx7 = getelementptr inbounds [16 x %struct.see_data], [16 x %struct.see_data]* %arrayidx6, i64 0, i64 0
  %piece = getelementptr inbounds %struct.see_data, %struct.see_data* %arrayidx7, i32 0, i32 0
  store i32 %i, i32* %piece, align 16
  %idxprom8 = sext i32 %color to i64
  %arrayidx9 = getelementptr inbounds [2 x [16 x %struct.see_data]], [2 x [16 x %struct.see_data]]* @see_attackers, i64 0, i64 %idxprom8
  %arrayidx10 = getelementptr inbounds [16 x %struct.see_data], [16 x %struct.see_data]* %arrayidx9, i64 0, i64 0
  %square11 = getelementptr inbounds %struct.see_data, %struct.see_data* %arrayidx10, i32 0, i32 1
  store i32 %from, i32* %square11, align 4
  call void @setup_attackers(i32 %square)
  %idxprom12 = sext i32 %square to i64
  %arrayidx13 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom12
  %i2 = load i32, i32* %arrayidx13, align 4
  %idxprom14 = sext i32 %i2 to i64
  %arrayidx15 = getelementptr inbounds [14 x i32], [14 x i32]* @material, i64 0, i64 %idxprom14
  %i3 = load i32, i32* %arrayidx15, align 4
  %call = call i32 @abs(i32 %i3) #10
  %tobool = icmp ne i32 %color, 0
  %lnot = xor i1 %tobool, true
  %lnot.ext = zext i1 %lnot to i32
  %idxprom16 = sext i32 %lnot.ext to i64
  %arrayidx17 = getelementptr inbounds [2 x i32], [2 x i32]* @see_num_attackers, i64 0, i64 %idxprom16
  %i4 = load i32, i32* %arrayidx17, align 4
  %tobool18 = icmp ne i32 %i4, 0
  br i1 %tobool18, label %if.else, label %if.then

if.then:                                          ; preds = %entry
  %idxprom19 = sext i32 %from to i64
  %arrayidx20 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom19
  store i32 %i, i32* %arrayidx20, align 4
  br label %return

if.else:                                          ; preds = %entry
  br label %if.end

if.end:                                           ; preds = %if.else
  %idxprom21 = sext i32 %color to i64
  %arrayidx22 = getelementptr inbounds [2 x i32], [2 x i32]* %caps, i64 0, i64 %idxprom21
  store i32 1, i32* %arrayidx22, align 4
  %tobool23 = icmp ne i32 %color, 0
  %lnot24 = xor i1 %tobool23, true
  %lnot.ext25 = zext i1 %lnot24 to i32
  %idxprom26 = sext i32 %lnot.ext25 to i64
  %arrayidx27 = getelementptr inbounds [2 x i32], [2 x i32]* %caps, i64 0, i64 %idxprom26
  store i32 0, i32* %arrayidx27, align 4
  %tobool28 = icmp ne i32 %color, 0
  %lnot29 = xor i1 %tobool28, true
  %lnot.ext30 = zext i1 %lnot29 to i32
  br label %while.cond

while.cond:                                       ; preds = %if.end109, %if.end
  %sside.0 = phi i32 [ %lnot.ext30, %if.end ], [ %xor, %if.end109 ]
  %value.0 = phi i32 [ %call, %if.end ], [ %value.1, %if.end109 ]
  %ourbestvalue.0 = phi i32 [ -1000000, %if.end ], [ %ourbestvalue.3, %if.end109 ]
  %hisbestvalue.0 = phi i32 [ %call, %if.end ], [ %hisbestvalue.3, %if.end109 ]
  %idxprom31 = sext i32 %sside.0 to i64
  %arrayidx32 = getelementptr inbounds [2 x i32], [2 x i32]* %caps, i64 0, i64 %idxprom31
  %i5 = load i32, i32* %arrayidx32, align 4
  %idxprom33 = sext i32 %sside.0 to i64
  %arrayidx34 = getelementptr inbounds [2 x i32], [2 x i32]* @see_num_attackers, i64 0, i64 %idxprom33
  %i6 = load i32, i32* %arrayidx34, align 4
  %cmp = icmp slt i32 %i5, %i6
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %idxprom35 = sext i32 %sside.0 to i64
  %arrayidx36 = getelementptr inbounds [2 x i32], [2 x i32]* %caps, i64 0, i64 %idxprom35
  %i7 = load i32, i32* %arrayidx36, align 4
  call void @findlowest(i32 %sside.0, i32 %i7)
  %cmp37 = icmp eq i32 %sside.0, %color
  br i1 %cmp37, label %if.then38, label %if.else72

if.then38:                                        ; preds = %while.body
  %tobool39 = icmp ne i32 %sside.0, 0
  %lnot40 = xor i1 %tobool39, true
  %lnot.ext41 = zext i1 %lnot40 to i32
  %idxprom42 = sext i32 %lnot.ext41 to i64
  %arrayidx43 = getelementptr inbounds [2 x [16 x %struct.see_data]], [2 x [16 x %struct.see_data]]* @see_attackers, i64 0, i64 %idxprom42
  %tobool44 = icmp ne i32 %sside.0, 0
  %lnot45 = xor i1 %tobool44, true
  %lnot.ext46 = zext i1 %lnot45 to i32
  %idxprom47 = sext i32 %lnot.ext46 to i64
  %arrayidx48 = getelementptr inbounds [2 x i32], [2 x i32]* %caps, i64 0, i64 %idxprom47
  %i8 = load i32, i32* %arrayidx48, align 4
  %sub = sub nsw i32 %i8, 1
  %idxprom49 = sext i32 %sub to i64
  %arrayidx50 = getelementptr inbounds [16 x %struct.see_data], [16 x %struct.see_data]* %arrayidx43, i64 0, i64 %idxprom49
  %piece51 = getelementptr inbounds %struct.see_data, %struct.see_data* %arrayidx50, i32 0, i32 0
  %i9 = load i32, i32* %piece51, align 8
  %idxprom52 = sext i32 %i9 to i64
  %arrayidx53 = getelementptr inbounds [14 x i32], [14 x i32]* @material, i64 0, i64 %idxprom52
  %i10 = load i32, i32* %arrayidx53, align 4
  %call54 = call i32 @abs(i32 %i10) #10
  %add = add nsw i32 %value.0, %call54
  %tobool55 = icmp ne i32 %sside.0, 0
  %lnot56 = xor i1 %tobool55, true
  %lnot.ext57 = zext i1 %lnot56 to i32
  %idxprom58 = sext i32 %lnot.ext57 to i64
  %arrayidx59 = getelementptr inbounds [2 x i32], [2 x i32]* @see_num_attackers, i64 0, i64 %idxprom58
  %i11 = load i32, i32* %arrayidx59, align 4
  %tobool60 = icmp ne i32 %sside.0, 0
  %lnot61 = xor i1 %tobool60, true
  %lnot.ext62 = zext i1 %lnot61 to i32
  %idxprom63 = sext i32 %lnot.ext62 to i64
  %arrayidx64 = getelementptr inbounds [2 x i32], [2 x i32]* %caps, i64 0, i64 %idxprom63
  %i12 = load i32, i32* %arrayidx64, align 4
  %cmp65 = icmp sle i32 %i11, %i12
  br i1 %cmp65, label %land.lhs.true, label %if.end68

land.lhs.true:                                    ; preds = %if.then38
  %cmp66 = icmp sgt i32 %add, %ourbestvalue.0
  br i1 %cmp66, label %if.then67, label %if.end68

if.then67:                                        ; preds = %land.lhs.true
  br label %if.end68

if.end68:                                         ; preds = %if.then67, %land.lhs.true, %if.then38
  %ourbestvalue.1 = phi i32 [ %add, %if.then67 ], [ %ourbestvalue.0, %land.lhs.true ], [ %ourbestvalue.0, %if.then38 ]
  %cmp69 = icmp slt i32 %add, %hisbestvalue.0
  br i1 %cmp69, label %if.then70, label %if.end71

if.then70:                                        ; preds = %if.end68
  br label %if.end71

if.end71:                                         ; preds = %if.then70, %if.end68
  %hisbestvalue.1 = phi i32 [ %add, %if.then70 ], [ %hisbestvalue.0, %if.end68 ]
  br label %if.end109

if.else72:                                        ; preds = %while.body
  %tobool73 = icmp ne i32 %sside.0, 0
  %lnot74 = xor i1 %tobool73, true
  %lnot.ext75 = zext i1 %lnot74 to i32
  %idxprom76 = sext i32 %lnot.ext75 to i64
  %arrayidx77 = getelementptr inbounds [2 x [16 x %struct.see_data]], [2 x [16 x %struct.see_data]]* @see_attackers, i64 0, i64 %idxprom76
  %tobool78 = icmp ne i32 %sside.0, 0
  %lnot79 = xor i1 %tobool78, true
  %lnot.ext80 = zext i1 %lnot79 to i32
  %idxprom81 = sext i32 %lnot.ext80 to i64
  %arrayidx82 = getelementptr inbounds [2 x i32], [2 x i32]* %caps, i64 0, i64 %idxprom81
  %i13 = load i32, i32* %arrayidx82, align 4
  %sub83 = sub nsw i32 %i13, 1
  %idxprom84 = sext i32 %sub83 to i64
  %arrayidx85 = getelementptr inbounds [16 x %struct.see_data], [16 x %struct.see_data]* %arrayidx77, i64 0, i64 %idxprom84
  %piece86 = getelementptr inbounds %struct.see_data, %struct.see_data* %arrayidx85, i32 0, i32 0
  %i14 = load i32, i32* %piece86, align 8
  %idxprom87 = sext i32 %i14 to i64
  %arrayidx88 = getelementptr inbounds [14 x i32], [14 x i32]* @material, i64 0, i64 %idxprom87
  %i15 = load i32, i32* %arrayidx88, align 4
  %call89 = call i32 @abs(i32 %i15) #10
  %sub90 = sub nsw i32 %value.0, %call89
  %cmp91 = icmp sgt i32 %sub90, %ourbestvalue.0
  br i1 %cmp91, label %if.then92, label %if.end93

if.then92:                                        ; preds = %if.else72
  br label %if.end93

if.end93:                                         ; preds = %if.then92, %if.else72
  %ourbestvalue.2 = phi i32 [ %sub90, %if.then92 ], [ %ourbestvalue.0, %if.else72 ]
  %tobool94 = icmp ne i32 %sside.0, 0
  %lnot95 = xor i1 %tobool94, true
  %lnot.ext96 = zext i1 %lnot95 to i32
  %idxprom97 = sext i32 %lnot.ext96 to i64
  %arrayidx98 = getelementptr inbounds [2 x i32], [2 x i32]* @see_num_attackers, i64 0, i64 %idxprom97
  %i16 = load i32, i32* %arrayidx98, align 4
  %tobool99 = icmp ne i32 %sside.0, 0
  %lnot100 = xor i1 %tobool99, true
  %lnot.ext101 = zext i1 %lnot100 to i32
  %idxprom102 = sext i32 %lnot.ext101 to i64
  %arrayidx103 = getelementptr inbounds [2 x i32], [2 x i32]* %caps, i64 0, i64 %idxprom102
  %i17 = load i32, i32* %arrayidx103, align 4
  %cmp104 = icmp sle i32 %i16, %i17
  br i1 %cmp104, label %land.lhs.true105, label %if.end108

land.lhs.true105:                                 ; preds = %if.end93
  %cmp106 = icmp slt i32 %sub90, %hisbestvalue.0
  br i1 %cmp106, label %if.then107, label %if.end108

if.then107:                                       ; preds = %land.lhs.true105
  br label %if.end108

if.end108:                                        ; preds = %if.then107, %land.lhs.true105, %if.end93
  %hisbestvalue.2 = phi i32 [ %sub90, %if.then107 ], [ %hisbestvalue.0, %land.lhs.true105 ], [ %hisbestvalue.0, %if.end93 ]
  br label %if.end109

if.end109:                                        ; preds = %if.end108, %if.end71
  %value.1 = phi i32 [ %add, %if.end71 ], [ %sub90, %if.end108 ]
  %ourbestvalue.3 = phi i32 [ %ourbestvalue.1, %if.end71 ], [ %ourbestvalue.2, %if.end108 ]
  %hisbestvalue.3 = phi i32 [ %hisbestvalue.1, %if.end71 ], [ %hisbestvalue.2, %if.end108 ]
  %idxprom110 = sext i32 %sside.0 to i64
  %arrayidx111 = getelementptr inbounds [2 x i32], [2 x i32]* %caps, i64 0, i64 %idxprom110
  %i18 = load i32, i32* %arrayidx111, align 4
  %inc112 = add nsw i32 %i18, 1
  store i32 %inc112, i32* %arrayidx111, align 4
  %xor = xor i32 %sside.0, 1
  br label %while.cond

while.end:                                        ; preds = %while.cond
  %idxprom113 = sext i32 %from to i64
  %arrayidx114 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom113
  store i32 %i, i32* %arrayidx114, align 4
  %cmp115 = icmp sgt i32 %ourbestvalue.0, %hisbestvalue.0
  br i1 %cmp115, label %cond.true, label %cond.false

cond.true:                                        ; preds = %while.end
  br label %cond.end

cond.false:                                       ; preds = %while.end
  br label %cond.end

cond.end:                                         ; preds = %cond.false, %cond.true
  %cond = phi i32 [ %hisbestvalue.0, %cond.true ], [ %ourbestvalue.0, %cond.false ]
  br label %return

return:                                           ; preds = %cond.end, %if.then
  %retval.0 = phi i32 [ %cond, %cond.end ], [ %call, %if.then ]
  ret i32 %retval.0
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @suicide_eval() #0 {
entry:
  %call = call i32 @suicide_mid_eval()
  ret i32 %call
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @suicide_mid_eval() #0 {
entry:
  %pawns = alloca [2 x [11 x i32]], align 16
  %white_back_pawn = alloca [11 x i32], align 16
  %black_back_pawn = alloca [11 x i32], align 16
  %score = alloca i32, align 4
  %in_cache = alloca i32, align 4
  store i32 0, i32* %score, align 4
  store i32 0, i32* %in_cache, align 4
  call void @checkECache(i32* %score, i32* %in_cache)
  %i = load i32, i32* %in_cache, align 4
  %tobool = icmp ne i32 %i, 0
  br i1 %tobool, label %if.then, label %if.end2

if.then:                                          ; preds = %entry
  %i1 = load i32, i32* @white_to_move, align 4
  %cmp = icmp eq i32 %i1, 1
  br i1 %cmp, label %if.then1, label %if.end

if.then1:                                         ; preds = %if.then
  %i2 = load i32, i32* %score, align 4
  br label %return

if.end:                                           ; preds = %if.then
  %i3 = load i32, i32* %score, align 4
  %sub = sub nsw i32 0, %i3
  br label %return

if.end2:                                          ; preds = %entry
  %i4 = load i32, i32* @Material, align 4
  store i32 %i4, i32* %score, align 4
  %arraydecay = getelementptr inbounds [2 x [11 x i32]], [2 x [11 x i32]]* %pawns, i64 0, i64 0
  %i5 = bitcast [11 x i32]* %arraydecay to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %i5, i8 0, i64 88, i1 false)
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end2
  %i.0 = phi i32 [ 0, %if.end2 ], [ %inc, %for.inc ]
  %cmp3 = icmp slt i32 %i.0, 11
  br i1 %cmp3, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %idxprom = sext i32 %i.0 to i64
  %arrayidx = getelementptr inbounds [11 x i32], [11 x i32]* %white_back_pawn, i64 0, i64 %idxprom
  store i32 7, i32* %arrayidx, align 4
  %idxprom4 = sext i32 %i.0 to i64
  %arrayidx5 = getelementptr inbounds [11 x i32], [11 x i32]* %black_back_pawn, i64 0, i64 %idxprom4
  store i32 2, i32* %arrayidx5, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %inc = add nsw i32 %i.0, 1
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %for.cond6

for.cond6:                                        ; preds = %for.inc52, %for.end
  %j.0 = phi i32 [ 1, %for.end ], [ %inc53, %for.inc52 ]
  %a.0 = phi i32 [ 1, %for.end ], [ %a.1, %for.inc52 ]
  %i6 = load i32, i32* @piece_count, align 4
  %cmp7 = icmp sle i32 %a.0, %i6
  br i1 %cmp7, label %for.body8, label %for.end54

for.body8:                                        ; preds = %for.cond6
  %idxprom9 = sext i32 %j.0 to i64
  %arrayidx10 = getelementptr inbounds [62 x i32], [62 x i32]* @pieces, i64 0, i64 %idxprom9
  %i7 = load i32, i32* %arrayidx10, align 4
  %tobool11 = icmp ne i32 %i7, 0
  br i1 %tobool11, label %if.else, label %if.then12

if.then12:                                        ; preds = %for.body8
  br label %for.inc52

if.else:                                          ; preds = %for.body8
  %inc13 = add nsw i32 %a.0, 1
  br label %if.end14

if.end14:                                         ; preds = %if.else
  %idxprom15 = sext i32 %i7 to i64
  %arrayidx16 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xfile to [144 x i32]*), i64 0, i64 %idxprom15
  %i8 = load i32, i32* %arrayidx16, align 4
  %add = add nsw i32 %i8, 1
  %idxprom17 = sext i32 %i7 to i64
  %arrayidx18 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xrank to [144 x i32]*), i64 0, i64 %idxprom17
  %i9 = load i32, i32* %arrayidx18, align 4
  %idxprom19 = sext i32 %i7 to i64
  %arrayidx20 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom19
  %i10 = load i32, i32* %arrayidx20, align 4
  %cmp21 = icmp eq i32 %i10, 1
  br i1 %cmp21, label %if.then22, label %if.else34

if.then22:                                        ; preds = %if.end14
  %arrayidx23 = getelementptr inbounds [2 x [11 x i32]], [2 x [11 x i32]]* %pawns, i64 0, i64 1
  %idxprom24 = sext i32 %add to i64
  %arrayidx25 = getelementptr inbounds [11 x i32], [11 x i32]* %arrayidx23, i64 0, i64 %idxprom24
  %i11 = load i32, i32* %arrayidx25, align 4
  %inc26 = add nsw i32 %i11, 1
  store i32 %inc26, i32* %arrayidx25, align 4
  %idxprom27 = sext i32 %add to i64
  %arrayidx28 = getelementptr inbounds [11 x i32], [11 x i32]* %white_back_pawn, i64 0, i64 %idxprom27
  %i12 = load i32, i32* %arrayidx28, align 4
  %cmp29 = icmp slt i32 %i9, %i12
  br i1 %cmp29, label %if.then30, label %if.end33

if.then30:                                        ; preds = %if.then22
  %idxprom31 = sext i32 %add to i64
  %arrayidx32 = getelementptr inbounds [11 x i32], [11 x i32]* %white_back_pawn, i64 0, i64 %idxprom31
  store i32 %i9, i32* %arrayidx32, align 4
  br label %if.end33

if.end33:                                         ; preds = %if.then30, %if.then22
  br label %if.end51

if.else34:                                        ; preds = %if.end14
  %idxprom35 = sext i32 %i7 to i64
  %arrayidx36 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom35
  %i13 = load i32, i32* %arrayidx36, align 4
  %cmp37 = icmp eq i32 %i13, 2
  br i1 %cmp37, label %if.then38, label %if.end50

if.then38:                                        ; preds = %if.else34
  %arrayidx39 = getelementptr inbounds [2 x [11 x i32]], [2 x [11 x i32]]* %pawns, i64 0, i64 0
  %idxprom40 = sext i32 %add to i64
  %arrayidx41 = getelementptr inbounds [11 x i32], [11 x i32]* %arrayidx39, i64 0, i64 %idxprom40
  %i14 = load i32, i32* %arrayidx41, align 4
  %inc42 = add nsw i32 %i14, 1
  store i32 %inc42, i32* %arrayidx41, align 4
  %idxprom43 = sext i32 %add to i64
  %arrayidx44 = getelementptr inbounds [11 x i32], [11 x i32]* %black_back_pawn, i64 0, i64 %idxprom43
  %i15 = load i32, i32* %arrayidx44, align 4
  %cmp45 = icmp sgt i32 %i9, %i15
  br i1 %cmp45, label %if.then46, label %if.end49

if.then46:                                        ; preds = %if.then38
  %idxprom47 = sext i32 %add to i64
  %arrayidx48 = getelementptr inbounds [11 x i32], [11 x i32]* %black_back_pawn, i64 0, i64 %idxprom47
  store i32 %i9, i32* %arrayidx48, align 4
  br label %if.end49

if.end49:                                         ; preds = %if.then46, %if.then38
  br label %if.end50

if.end50:                                         ; preds = %if.end49, %if.else34
  br label %if.end51

if.end51:                                         ; preds = %if.end50, %if.end33
  br label %for.inc52

for.inc52:                                        ; preds = %if.end51, %if.then12
  %a.1 = phi i32 [ %inc13, %if.end51 ], [ %a.0, %if.then12 ]
  %inc53 = add nsw i32 %j.0, 1
  br label %for.cond6

for.end54:                                        ; preds = %for.cond6
  br label %for.cond55

for.cond55:                                       ; preds = %for.inc380, %for.end54
  %bp.0 = phi i32 [ 0, %for.end54 ], [ %bp.2, %for.inc380 ]
  %wp.0 = phi i32 [ 0, %for.end54 ], [ %wp.2, %for.inc380 ]
  %bn.0 = phi i32 [ 0, %for.end54 ], [ %bn.2, %for.inc380 ]
  %wn.0 = phi i32 [ 0, %for.end54 ], [ %wn.2, %for.inc380 ]
  %br.0 = phi i32 [ 0, %for.end54 ], [ %br.2, %for.inc380 ]
  %wr.0 = phi i32 [ 0, %for.end54 ], [ %wr.2, %for.inc380 ]
  %bk.0 = phi i32 [ 0, %for.end54 ], [ %bk.2, %for.inc380 ]
  %wk.0 = phi i32 [ 0, %for.end54 ], [ %wk.2, %for.inc380 ]
  %bbc.0 = phi i32 [ 0, %for.end54 ], [ %bbc.2, %for.inc380 ]
  %wbc.0 = phi i32 [ 0, %for.end54 ], [ %wbc.2, %for.inc380 ]
  %bb.0 = phi i32 [ 0, %for.end54 ], [ %bb.4, %for.inc380 ]
  %wb.0 = phi i32 [ 0, %for.end54 ], [ %wb.4, %for.inc380 ]
  %j.1 = phi i32 [ 1, %for.end54 ], [ %inc381, %for.inc380 ]
  %a.2 = phi i32 [ 1, %for.end54 ], [ %a.3, %for.inc380 ]
  %i16 = load i32, i32* @piece_count, align 4
  %cmp56 = icmp sle i32 %a.2, %i16
  br i1 %cmp56, label %for.body57, label %for.end382

for.body57:                                       ; preds = %for.cond55
  %idxprom58 = sext i32 %j.1 to i64
  %arrayidx59 = getelementptr inbounds [62 x i32], [62 x i32]* @pieces, i64 0, i64 %idxprom58
  %i17 = load i32, i32* %arrayidx59, align 4
  %tobool60 = icmp ne i32 %i17, 0
  br i1 %tobool60, label %if.else62, label %if.then61

if.then61:                                        ; preds = %for.body57
  br label %for.inc380

if.else62:                                        ; preds = %for.body57
  %inc63 = add nsw i32 %a.2, 1
  br label %if.end64

if.end64:                                         ; preds = %if.else62
  %idxprom65 = sext i32 %i17 to i64
  %arrayidx66 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xfile to [144 x i32]*), i64 0, i64 %idxprom65
  %i18 = load i32, i32* %arrayidx66, align 4
  %add67 = add nsw i32 %i18, 1
  %idxprom68 = sext i32 %i17 to i64
  %arrayidx69 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xrank to [144 x i32]*), i64 0, i64 %idxprom68
  %i19 = load i32, i32* %arrayidx69, align 4
  %idxprom70 = sext i32 %i17 to i64
  %arrayidx71 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom70
  %i20 = load i32, i32* %arrayidx71, align 4
  switch i32 %i20, label %sw.epilog [
    i32 1, label %sw.bb
    i32 2, label %sw.bb177
    i32 7, label %sw.bb287
    i32 8, label %sw.bb294
    i32 11, label %sw.bb301
    i32 12, label %sw.bb318
    i32 3, label %sw.bb335
    i32 4, label %sw.bb342
    i32 9, label %sw.bb349
    i32 10, label %sw.bb357
    i32 5, label %sw.bb365
    i32 6, label %sw.bb372
  ]

sw.bb:                                            ; preds = %if.end64
  %idxprom72 = sext i32 %i17 to i64
  %arrayidx73 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @scentral to [144 x i32]*), i64 0, i64 %idxprom72
  %i21 = load i32, i32* %arrayidx73, align 4
  %i22 = load i32, i32* %score, align 4
  %add74 = add nsw i32 %i22, %i21
  store i32 %add74, i32* %score, align 4
  %call = call i32 @s_pawn_mobility(i32 %i17)
  %i23 = load i32, i32* %score, align 4
  %add75 = add nsw i32 %i23, %call
  store i32 %add75, i32* %score, align 4
  %call76 = call i32 @black_saccers(i32 %i17)
  %i24 = load i32, i32* %score, align 4
  %sub77 = sub nsw i32 %i24, %call76
  store i32 %sub77, i32* %score, align 4
  %inc78 = add nsw i32 %wp.0, 1
  %add79 = add nsw i32 %add67, 1
  %idxprom80 = sext i32 %add79 to i64
  %arrayidx81 = getelementptr inbounds [11 x i32], [11 x i32]* %white_back_pawn, i64 0, i64 %idxprom80
  %i25 = load i32, i32* %arrayidx81, align 4
  %cmp82 = icmp sgt i32 %i25, %i19
  br i1 %cmp82, label %land.lhs.true, label %if.end103

land.lhs.true:                                    ; preds = %sw.bb
  %sub83 = sub nsw i32 %add67, 1
  %idxprom84 = sext i32 %sub83 to i64
  %arrayidx85 = getelementptr inbounds [11 x i32], [11 x i32]* %white_back_pawn, i64 0, i64 %idxprom84
  %i26 = load i32, i32* %arrayidx85, align 4
  %cmp86 = icmp sgt i32 %i26, %i19
  br i1 %cmp86, label %if.then87, label %if.end103

if.then87:                                        ; preds = %land.lhs.true
  %i27 = load i32, i32* %score, align 4
  %sub88 = sub nsw i32 %i27, 8
  store i32 %sub88, i32* %score, align 4
  %arrayidx89 = getelementptr inbounds [2 x [11 x i32]], [2 x [11 x i32]]* %pawns, i64 0, i64 1
  %add90 = add nsw i32 %add67, 1
  %idxprom91 = sext i32 %add90 to i64
  %arrayidx92 = getelementptr inbounds [11 x i32], [11 x i32]* %arrayidx89, i64 0, i64 %idxprom91
  %i28 = load i32, i32* %arrayidx92, align 4
  %tobool93 = icmp ne i32 %i28, 0
  br i1 %tobool93, label %if.end102, label %land.lhs.true94

land.lhs.true94:                                  ; preds = %if.then87
  %arrayidx95 = getelementptr inbounds [2 x [11 x i32]], [2 x [11 x i32]]* %pawns, i64 0, i64 1
  %sub96 = sub nsw i32 %add67, 1
  %idxprom97 = sext i32 %sub96 to i64
  %arrayidx98 = getelementptr inbounds [11 x i32], [11 x i32]* %arrayidx95, i64 0, i64 %idxprom97
  %i29 = load i32, i32* %arrayidx98, align 4
  %tobool99 = icmp ne i32 %i29, 0
  br i1 %tobool99, label %if.end102, label %if.then100

if.then100:                                       ; preds = %land.lhs.true94
  %i30 = load i32, i32* %score, align 4
  %sub101 = sub nsw i32 %i30, 12
  store i32 %sub101, i32* %score, align 4
  br label %if.end102

if.end102:                                        ; preds = %if.then100, %land.lhs.true94, %if.then87
  %isolated.0 = phi i32 [ 0, %if.then87 ], [ 0, %land.lhs.true94 ], [ 1, %if.then100 ]
  br label %if.end103

if.end103:                                        ; preds = %if.end102, %land.lhs.true, %sw.bb
  %backwards.0 = phi i32 [ 1, %if.end102 ], [ 0, %land.lhs.true ], [ 0, %sw.bb ]
  %isolated.1 = phi i32 [ %isolated.0, %if.end102 ], [ 0, %land.lhs.true ], [ 0, %sw.bb ]
  %arrayidx104 = getelementptr inbounds [2 x [11 x i32]], [2 x [11 x i32]]* %pawns, i64 0, i64 0
  %idxprom105 = sext i32 %add67 to i64
  %arrayidx106 = getelementptr inbounds [11 x i32], [11 x i32]* %arrayidx104, i64 0, i64 %idxprom105
  %i31 = load i32, i32* %arrayidx106, align 4
  %tobool107 = icmp ne i32 %i31, 0
  br i1 %tobool107, label %if.end117, label %if.then108

if.then108:                                       ; preds = %if.end103
  %tobool109 = icmp ne i32 %backwards.0, 0
  br i1 %tobool109, label %if.then110, label %if.end112

if.then110:                                       ; preds = %if.then108
  %i32 = load i32, i32* %score, align 4
  %sub111 = sub nsw i32 %i32, 5
  store i32 %sub111, i32* %score, align 4
  br label %if.end112

if.end112:                                        ; preds = %if.then110, %if.then108
  %tobool113 = icmp ne i32 %isolated.1, 0
  br i1 %tobool113, label %if.then114, label %if.end116

if.then114:                                       ; preds = %if.end112
  %i33 = load i32, i32* %score, align 4
  %sub115 = sub nsw i32 %i33, 8
  store i32 %sub115, i32* %score, align 4
  br label %if.end116

if.end116:                                        ; preds = %if.then114, %if.end112
  br label %if.end117

if.end117:                                        ; preds = %if.end116, %if.end103
  %arrayidx118 = getelementptr inbounds [2 x [11 x i32]], [2 x [11 x i32]]* %pawns, i64 0, i64 1
  %idxprom119 = sext i32 %add67 to i64
  %arrayidx120 = getelementptr inbounds [11 x i32], [11 x i32]* %arrayidx118, i64 0, i64 %idxprom119
  %i34 = load i32, i32* %arrayidx120, align 4
  %cmp121 = icmp sgt i32 %i34, 1
  br i1 %cmp121, label %if.then122, label %if.end128

if.then122:                                       ; preds = %if.end117
  %arrayidx123 = getelementptr inbounds [2 x [11 x i32]], [2 x [11 x i32]]* %pawns, i64 0, i64 1
  %idxprom124 = sext i32 %add67 to i64
  %arrayidx125 = getelementptr inbounds [11 x i32], [11 x i32]* %arrayidx123, i64 0, i64 %idxprom124
  %i35 = load i32, i32* %arrayidx125, align 4
  %sub126 = sub nsw i32 %i35, 1
  %mul = mul nsw i32 15, %sub126
  %i36 = load i32, i32* %score, align 4
  %sub127 = sub nsw i32 %i36, %mul
  store i32 %sub127, i32* %score, align 4
  br label %if.end128

if.end128:                                        ; preds = %if.then122, %if.end117
  %arrayidx129 = getelementptr inbounds [2 x [11 x i32]], [2 x [11 x i32]]* %pawns, i64 0, i64 0
  %idxprom130 = sext i32 %add67 to i64
  %arrayidx131 = getelementptr inbounds [11 x i32], [11 x i32]* %arrayidx129, i64 0, i64 %idxprom130
  %i37 = load i32, i32* %arrayidx131, align 4
  %tobool132 = icmp ne i32 %i37, 0
  br i1 %tobool132, label %if.end168, label %land.lhs.true133

land.lhs.true133:                                 ; preds = %if.end128
  %sub134 = sub nsw i32 %add67, 1
  %idxprom135 = sext i32 %sub134 to i64
  %arrayidx136 = getelementptr inbounds [11 x i32], [11 x i32]* %black_back_pawn, i64 0, i64 %idxprom135
  %i38 = load i32, i32* %arrayidx136, align 4
  %cmp137 = icmp sge i32 %i19, %i38
  br i1 %cmp137, label %land.lhs.true138, label %if.end168

land.lhs.true138:                                 ; preds = %land.lhs.true133
  %add139 = add nsw i32 %add67, 1
  %idxprom140 = sext i32 %add139 to i64
  %arrayidx141 = getelementptr inbounds [11 x i32], [11 x i32]* %black_back_pawn, i64 0, i64 %idxprom140
  %i39 = load i32, i32* %arrayidx141, align 4
  %cmp142 = icmp sge i32 %i19, %i39
  br i1 %cmp142, label %if.then143, label %if.end168

if.then143:                                       ; preds = %land.lhs.true138
  %idxprom144 = sext i32 %i17 to i64
  %arrayidx145 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xrank to [144 x i32]*), i64 0, i64 %idxprom144
  %i40 = load i32, i32* %arrayidx145, align 4
  %sub146 = sub nsw i32 %i40, 2
  %mul147 = mul nsw i32 3, %sub146
  %add148 = add nsw i32 30, %mul147
  %i41 = load i32, i32* %score, align 4
  %add149 = add nsw i32 %i41, %add148
  store i32 %add149, i32* %score, align 4
  %idxprom150 = sext i32 %i17 to i64
  %arrayidx151 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xfile to [144 x i32]*), i64 0, i64 %idxprom150
  %i42 = load i32, i32* %arrayidx151, align 4
  %cmp152 = icmp eq i32 %i42, 1
  br i1 %cmp152, label %if.then156, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.then143
  %idxprom153 = sext i32 %i17 to i64
  %arrayidx154 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xfile to [144 x i32]*), i64 0, i64 %idxprom153
  %i43 = load i32, i32* %arrayidx154, align 4
  %cmp155 = icmp eq i32 %i43, 8
  br i1 %cmp155, label %if.then156, label %if.end163

if.then156:                                       ; preds = %lor.lhs.false, %if.then143
  %idxprom157 = sext i32 %i17 to i64
  %arrayidx158 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xrank to [144 x i32]*), i64 0, i64 %idxprom157
  %i44 = load i32, i32* %arrayidx158, align 4
  %sub159 = sub nsw i32 %i44, 2
  %mul160 = mul nsw i32 2, %sub159
  %add161 = add nsw i32 4, %mul160
  %i45 = load i32, i32* %score, align 4
  %add162 = add nsw i32 %i45, %add161
  store i32 %add162, i32* %score, align 4
  br label %if.end163

if.end163:                                        ; preds = %if.then156, %lor.lhs.false
  %tobool164 = icmp ne i32 %isolated.1, 0
  br i1 %tobool164, label %if.end167, label %if.then165

if.then165:                                       ; preds = %if.end163
  %i46 = load i32, i32* %score, align 4
  %add166 = add nsw i32 %i46, 6
  store i32 %add166, i32* %score, align 4
  br label %if.end167

if.end167:                                        ; preds = %if.then165, %if.end163
  br label %if.end168

if.end168:                                        ; preds = %if.end167, %land.lhs.true138, %land.lhs.true133, %if.end128
  %arrayidx169 = getelementptr inbounds [2 x [11 x i32]], [2 x [11 x i32]]* %pawns, i64 0, i64 1
  %sub170 = sub nsw i32 %add67, 1
  %idxprom171 = sext i32 %sub170 to i64
  %arrayidx172 = getelementptr inbounds [11 x i32], [11 x i32]* %arrayidx169, i64 0, i64 %idxprom171
  %i47 = load i32, i32* %arrayidx172, align 4
  %tobool173 = icmp ne i32 %i47, 0
  br i1 %tobool173, label %if.end176, label %if.then174

if.then174:                                       ; preds = %if.end168
  %i48 = load i32, i32* %score, align 4
  %sub175 = sub nsw i32 %i48, 20
  store i32 %sub175, i32* %score, align 4
  br label %if.end176

if.end176:                                        ; preds = %if.then174, %if.end168
  br label %sw.epilog

sw.bb177:                                         ; preds = %if.end64
  %idxprom178 = sext i32 %i17 to i64
  %arrayidx179 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @scentral to [144 x i32]*), i64 0, i64 %idxprom178
  %i49 = load i32, i32* %arrayidx179, align 4
  %i50 = load i32, i32* %score, align 4
  %sub180 = sub nsw i32 %i50, %i49
  store i32 %sub180, i32* %score, align 4
  %call181 = call i32 @s_pawn_mobility(i32 %i17)
  %i51 = load i32, i32* %score, align 4
  %sub182 = sub nsw i32 %i51, %call181
  store i32 %sub182, i32* %score, align 4
  %call183 = call i32 @white_saccers(i32 %i17)
  %i52 = load i32, i32* %score, align 4
  %add184 = add nsw i32 %i52, %call183
  store i32 %add184, i32* %score, align 4
  %inc185 = add nsw i32 %bp.0, 1
  %add186 = add nsw i32 %add67, 1
  %idxprom187 = sext i32 %add186 to i64
  %arrayidx188 = getelementptr inbounds [11 x i32], [11 x i32]* %black_back_pawn, i64 0, i64 %idxprom187
  %i53 = load i32, i32* %arrayidx188, align 4
  %cmp189 = icmp slt i32 %i53, %i19
  br i1 %cmp189, label %land.lhs.true190, label %if.end211

land.lhs.true190:                                 ; preds = %sw.bb177
  %sub191 = sub nsw i32 %add67, 1
  %idxprom192 = sext i32 %sub191 to i64
  %arrayidx193 = getelementptr inbounds [11 x i32], [11 x i32]* %black_back_pawn, i64 0, i64 %idxprom192
  %i54 = load i32, i32* %arrayidx193, align 4
  %cmp194 = icmp slt i32 %i54, %i19
  br i1 %cmp194, label %if.then195, label %if.end211

if.then195:                                       ; preds = %land.lhs.true190
  %i55 = load i32, i32* %score, align 4
  %add196 = add nsw i32 %i55, 8
  store i32 %add196, i32* %score, align 4
  %arrayidx197 = getelementptr inbounds [2 x [11 x i32]], [2 x [11 x i32]]* %pawns, i64 0, i64 0
  %add198 = add nsw i32 %add67, 1
  %idxprom199 = sext i32 %add198 to i64
  %arrayidx200 = getelementptr inbounds [11 x i32], [11 x i32]* %arrayidx197, i64 0, i64 %idxprom199
  %i56 = load i32, i32* %arrayidx200, align 4
  %tobool201 = icmp ne i32 %i56, 0
  br i1 %tobool201, label %if.end210, label %land.lhs.true202

land.lhs.true202:                                 ; preds = %if.then195
  %arrayidx203 = getelementptr inbounds [2 x [11 x i32]], [2 x [11 x i32]]* %pawns, i64 0, i64 0
  %sub204 = sub nsw i32 %add67, 1
  %idxprom205 = sext i32 %sub204 to i64
  %arrayidx206 = getelementptr inbounds [11 x i32], [11 x i32]* %arrayidx203, i64 0, i64 %idxprom205
  %i57 = load i32, i32* %arrayidx206, align 4
  %tobool207 = icmp ne i32 %i57, 0
  br i1 %tobool207, label %if.end210, label %if.then208

if.then208:                                       ; preds = %land.lhs.true202
  %i58 = load i32, i32* %score, align 4
  %add209 = add nsw i32 %i58, 12
  store i32 %add209, i32* %score, align 4
  br label %if.end210

if.end210:                                        ; preds = %if.then208, %land.lhs.true202, %if.then195
  %isolated.2 = phi i32 [ 0, %if.then195 ], [ 0, %land.lhs.true202 ], [ 1, %if.then208 ]
  br label %if.end211

if.end211:                                        ; preds = %if.end210, %land.lhs.true190, %sw.bb177
  %backwards.1 = phi i32 [ 1, %if.end210 ], [ 0, %land.lhs.true190 ], [ 0, %sw.bb177 ]
  %isolated.3 = phi i32 [ %isolated.2, %if.end210 ], [ 0, %land.lhs.true190 ], [ 0, %sw.bb177 ]
  %arrayidx212 = getelementptr inbounds [2 x [11 x i32]], [2 x [11 x i32]]* %pawns, i64 0, i64 1
  %idxprom213 = sext i32 %add67 to i64
  %arrayidx214 = getelementptr inbounds [11 x i32], [11 x i32]* %arrayidx212, i64 0, i64 %idxprom213
  %i59 = load i32, i32* %arrayidx214, align 4
  %tobool215 = icmp ne i32 %i59, 0
  br i1 %tobool215, label %if.end225, label %if.then216

if.then216:                                       ; preds = %if.end211
  %tobool217 = icmp ne i32 %backwards.1, 0
  br i1 %tobool217, label %if.then218, label %if.end220

if.then218:                                       ; preds = %if.then216
  %i60 = load i32, i32* %score, align 4
  %add219 = add nsw i32 %i60, 5
  store i32 %add219, i32* %score, align 4
  br label %if.end220

if.end220:                                        ; preds = %if.then218, %if.then216
  %tobool221 = icmp ne i32 %isolated.3, 0
  br i1 %tobool221, label %if.then222, label %if.end224

if.then222:                                       ; preds = %if.end220
  %i61 = load i32, i32* %score, align 4
  %add223 = add nsw i32 %i61, 8
  store i32 %add223, i32* %score, align 4
  br label %if.end224

if.end224:                                        ; preds = %if.then222, %if.end220
  br label %if.end225

if.end225:                                        ; preds = %if.end224, %if.end211
  %arrayidx226 = getelementptr inbounds [2 x [11 x i32]], [2 x [11 x i32]]* %pawns, i64 0, i64 0
  %idxprom227 = sext i32 %add67 to i64
  %arrayidx228 = getelementptr inbounds [11 x i32], [11 x i32]* %arrayidx226, i64 0, i64 %idxprom227
  %i62 = load i32, i32* %arrayidx228, align 4
  %cmp229 = icmp sgt i32 %i62, 1
  br i1 %cmp229, label %if.then230, label %if.end237

if.then230:                                       ; preds = %if.end225
  %arrayidx231 = getelementptr inbounds [2 x [11 x i32]], [2 x [11 x i32]]* %pawns, i64 0, i64 0
  %idxprom232 = sext i32 %add67 to i64
  %arrayidx233 = getelementptr inbounds [11 x i32], [11 x i32]* %arrayidx231, i64 0, i64 %idxprom232
  %i63 = load i32, i32* %arrayidx233, align 4
  %sub234 = sub nsw i32 %i63, 1
  %mul235 = mul nsw i32 15, %sub234
  %i64 = load i32, i32* %score, align 4
  %add236 = add nsw i32 %i64, %mul235
  store i32 %add236, i32* %score, align 4
  br label %if.end237

if.end237:                                        ; preds = %if.then230, %if.end225
  %arrayidx238 = getelementptr inbounds [2 x [11 x i32]], [2 x [11 x i32]]* %pawns, i64 0, i64 1
  %idxprom239 = sext i32 %add67 to i64
  %arrayidx240 = getelementptr inbounds [11 x i32], [11 x i32]* %arrayidx238, i64 0, i64 %idxprom239
  %i65 = load i32, i32* %arrayidx240, align 4
  %tobool241 = icmp ne i32 %i65, 0
  br i1 %tobool241, label %if.end278, label %land.lhs.true242

land.lhs.true242:                                 ; preds = %if.end237
  %sub243 = sub nsw i32 %add67, 1
  %idxprom244 = sext i32 %sub243 to i64
  %arrayidx245 = getelementptr inbounds [11 x i32], [11 x i32]* %white_back_pawn, i64 0, i64 %idxprom244
  %i66 = load i32, i32* %arrayidx245, align 4
  %cmp246 = icmp sle i32 %i19, %i66
  br i1 %cmp246, label %land.lhs.true247, label %if.end278

land.lhs.true247:                                 ; preds = %land.lhs.true242
  %add248 = add nsw i32 %add67, 1
  %idxprom249 = sext i32 %add248 to i64
  %arrayidx250 = getelementptr inbounds [11 x i32], [11 x i32]* %white_back_pawn, i64 0, i64 %idxprom249
  %i67 = load i32, i32* %arrayidx250, align 4
  %cmp251 = icmp sle i32 %i19, %i67
  br i1 %cmp251, label %if.then252, label %if.end278

if.then252:                                       ; preds = %land.lhs.true247
  %idxprom253 = sext i32 %i17 to i64
  %arrayidx254 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xrank to [144 x i32]*), i64 0, i64 %idxprom253
  %i68 = load i32, i32* %arrayidx254, align 4
  %sub255 = sub nsw i32 7, %i68
  %mul256 = mul nsw i32 3, %sub255
  %add257 = add nsw i32 30, %mul256
  %i69 = load i32, i32* %score, align 4
  %sub258 = sub nsw i32 %i69, %add257
  store i32 %sub258, i32* %score, align 4
  %idxprom259 = sext i32 %i17 to i64
  %arrayidx260 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xfile to [144 x i32]*), i64 0, i64 %idxprom259
  %i70 = load i32, i32* %arrayidx260, align 4
  %cmp261 = icmp eq i32 %i70, 1
  br i1 %cmp261, label %if.then266, label %lor.lhs.false262

lor.lhs.false262:                                 ; preds = %if.then252
  %idxprom263 = sext i32 %i17 to i64
  %arrayidx264 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xfile to [144 x i32]*), i64 0, i64 %idxprom263
  %i71 = load i32, i32* %arrayidx264, align 4
  %cmp265 = icmp eq i32 %i71, 8
  br i1 %cmp265, label %if.then266, label %if.end273

if.then266:                                       ; preds = %lor.lhs.false262, %if.then252
  %idxprom267 = sext i32 %i17 to i64
  %arrayidx268 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xrank to [144 x i32]*), i64 0, i64 %idxprom267
  %i72 = load i32, i32* %arrayidx268, align 4
  %sub269 = sub nsw i32 7, %i72
  %mul270 = mul nsw i32 2, %sub269
  %add271 = add nsw i32 4, %mul270
  %i73 = load i32, i32* %score, align 4
  %sub272 = sub nsw i32 %i73, %add271
  store i32 %sub272, i32* %score, align 4
  br label %if.end273

if.end273:                                        ; preds = %if.then266, %lor.lhs.false262
  %tobool274 = icmp ne i32 %isolated.3, 0
  br i1 %tobool274, label %if.end277, label %if.then275

if.then275:                                       ; preds = %if.end273
  %i74 = load i32, i32* %score, align 4
  %sub276 = sub nsw i32 %i74, 6
  store i32 %sub276, i32* %score, align 4
  br label %if.end277

if.end277:                                        ; preds = %if.then275, %if.end273
  br label %if.end278

if.end278:                                        ; preds = %if.end277, %land.lhs.true247, %land.lhs.true242, %if.end237
  %arrayidx279 = getelementptr inbounds [2 x [11 x i32]], [2 x [11 x i32]]* %pawns, i64 0, i64 0
  %sub280 = sub nsw i32 %add67, 1
  %idxprom281 = sext i32 %sub280 to i64
  %arrayidx282 = getelementptr inbounds [11 x i32], [11 x i32]* %arrayidx279, i64 0, i64 %idxprom281
  %i75 = load i32, i32* %arrayidx282, align 4
  %tobool283 = icmp ne i32 %i75, 0
  br i1 %tobool283, label %if.end286, label %if.then284

if.then284:                                       ; preds = %if.end278
  %i76 = load i32, i32* %score, align 4
  %add285 = add nsw i32 %i76, 20
  store i32 %add285, i32* %score, align 4
  br label %if.end286

if.end286:                                        ; preds = %if.then284, %if.end278
  br label %sw.epilog

sw.bb287:                                         ; preds = %if.end64
  %idxprom288 = sext i32 %i17 to i64
  %arrayidx289 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @scentral to [144 x i32]*), i64 0, i64 %idxprom288
  %i77 = load i32, i32* %arrayidx289, align 4
  %i78 = load i32, i32* %score, align 4
  %add290 = add nsw i32 %i78, %i77
  store i32 %add290, i32* %score, align 4
  %call291 = call i32 @s_rook_mobility(i32 %i17)
  %i79 = load i32, i32* %score, align 4
  %add292 = add nsw i32 %i79, %call291
  store i32 %add292, i32* %score, align 4
  %inc293 = add nsw i32 %wr.0, 1
  br label %sw.epilog

sw.bb294:                                         ; preds = %if.end64
  %idxprom295 = sext i32 %i17 to i64
  %arrayidx296 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @scentral to [144 x i32]*), i64 0, i64 %idxprom295
  %i80 = load i32, i32* %arrayidx296, align 4
  %i81 = load i32, i32* %score, align 4
  %sub297 = sub nsw i32 %i81, %i80
  store i32 %sub297, i32* %score, align 4
  %call298 = call i32 @s_rook_mobility(i32 %i17)
  %i82 = load i32, i32* %score, align 4
  %sub299 = sub nsw i32 %i82, %call298
  store i32 %sub299, i32* %score, align 4
  %inc300 = add nsw i32 %br.0, 1
  br label %sw.epilog

sw.bb301:                                         ; preds = %if.end64
  %idxprom302 = sext i32 %i17 to i64
  %arrayidx303 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @scentral to [144 x i32]*), i64 0, i64 %idxprom302
  %i83 = load i32, i32* %arrayidx303, align 4
  %i84 = load i32, i32* %score, align 4
  %add304 = add nsw i32 %i84, %i83
  store i32 %add304, i32* %score, align 4
  %call305 = call i32 @s_bishop_mobility(i32 %i17)
  %i85 = load i32, i32* %score, align 4
  %add306 = add nsw i32 %i85, %call305
  store i32 %add306, i32* %score, align 4
  %tobool307 = icmp ne i32 %wb.0, 0
  br i1 %tobool307, label %if.then308, label %if.end314

if.then308:                                       ; preds = %sw.bb301
  %idxprom309 = sext i32 %i17 to i64
  %arrayidx310 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @sqcolor to [144 x i32]*), i64 0, i64 %idxprom309
  %i86 = load i32, i32* %arrayidx310, align 4
  %cmp311 = icmp ne i32 %i86, %wbc.0
  br i1 %cmp311, label %if.then312, label %if.end313

if.then312:                                       ; preds = %if.then308
  br label %if.end313

if.end313:                                        ; preds = %if.then312, %if.then308
  %wb.1 = phi i32 [ 99, %if.then312 ], [ %wb.0, %if.then308 ]
  br label %if.end314

if.end314:                                        ; preds = %if.end313, %sw.bb301
  %wb.2 = phi i32 [ %wb.1, %if.end313 ], [ %wb.0, %sw.bb301 ]
  %inc315 = add nsw i32 %wb.2, 1
  %idxprom316 = sext i32 %i17 to i64
  %arrayidx317 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @sqcolor to [144 x i32]*), i64 0, i64 %idxprom316
  %i87 = load i32, i32* %arrayidx317, align 4
  br label %sw.epilog

sw.bb318:                                         ; preds = %if.end64
  %idxprom319 = sext i32 %i17 to i64
  %arrayidx320 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @scentral to [144 x i32]*), i64 0, i64 %idxprom319
  %i88 = load i32, i32* %arrayidx320, align 4
  %i89 = load i32, i32* %score, align 4
  %sub321 = sub nsw i32 %i89, %i88
  store i32 %sub321, i32* %score, align 4
  %call322 = call i32 @s_bishop_mobility(i32 %i17)
  %i90 = load i32, i32* %score, align 4
  %sub323 = sub nsw i32 %i90, %call322
  store i32 %sub323, i32* %score, align 4
  %tobool324 = icmp ne i32 %bb.0, 0
  br i1 %tobool324, label %if.then325, label %if.end331

if.then325:                                       ; preds = %sw.bb318
  %idxprom326 = sext i32 %i17 to i64
  %arrayidx327 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @sqcolor to [144 x i32]*), i64 0, i64 %idxprom326
  %i91 = load i32, i32* %arrayidx327, align 4
  %cmp328 = icmp ne i32 %i91, %bbc.0
  br i1 %cmp328, label %if.then329, label %if.end330

if.then329:                                       ; preds = %if.then325
  br label %if.end330

if.end330:                                        ; preds = %if.then329, %if.then325
  %bb.1 = phi i32 [ 99, %if.then329 ], [ %bb.0, %if.then325 ]
  br label %if.end331

if.end331:                                        ; preds = %if.end330, %sw.bb318
  %bb.2 = phi i32 [ %bb.1, %if.end330 ], [ %bb.0, %sw.bb318 ]
  %inc332 = add nsw i32 %bb.2, 1
  %idxprom333 = sext i32 %i17 to i64
  %arrayidx334 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @sqcolor to [144 x i32]*), i64 0, i64 %idxprom333
  %i92 = load i32, i32* %arrayidx334, align 4
  br label %sw.epilog

sw.bb335:                                         ; preds = %if.end64
  %idxprom336 = sext i32 %i17 to i64
  %arrayidx337 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @scentral to [144 x i32]*), i64 0, i64 %idxprom336
  %i93 = load i32, i32* %arrayidx337, align 4
  %i94 = load i32, i32* %score, align 4
  %add338 = add nsw i32 %i94, %i93
  store i32 %add338, i32* %score, align 4
  %call339 = call i32 @s_knight_mobility(i32 %i17)
  %i95 = load i32, i32* %score, align 4
  %add340 = add nsw i32 %i95, %call339
  store i32 %add340, i32* %score, align 4
  %inc341 = add nsw i32 %wn.0, 1
  br label %sw.epilog

sw.bb342:                                         ; preds = %if.end64
  %idxprom343 = sext i32 %i17 to i64
  %arrayidx344 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @scentral to [144 x i32]*), i64 0, i64 %idxprom343
  %i96 = load i32, i32* %arrayidx344, align 4
  %i97 = load i32, i32* %score, align 4
  %sub345 = sub nsw i32 %i97, %i96
  store i32 %sub345, i32* %score, align 4
  %call346 = call i32 @s_knight_mobility(i32 %i17)
  %i98 = load i32, i32* %score, align 4
  %sub347 = sub nsw i32 %i98, %call346
  store i32 %sub347, i32* %score, align 4
  %inc348 = add nsw i32 %bn.0, 1
  br label %sw.epilog

sw.bb349:                                         ; preds = %if.end64
  %idxprom350 = sext i32 %i17 to i64
  %arrayidx351 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @scentral to [144 x i32]*), i64 0, i64 %idxprom350
  %i99 = load i32, i32* %arrayidx351, align 4
  %i100 = load i32, i32* %score, align 4
  %add352 = add nsw i32 %i100, %i99
  store i32 %add352, i32* %score, align 4
  %call353 = call i32 @s_rook_mobility(i32 %i17)
  %i101 = load i32, i32* %score, align 4
  %add354 = add nsw i32 %i101, %call353
  store i32 %add354, i32* %score, align 4
  %call355 = call i32 @s_bishop_mobility(i32 %i17)
  %i102 = load i32, i32* %score, align 4
  %add356 = add nsw i32 %i102, %call355
  store i32 %add356, i32* %score, align 4
  br label %sw.epilog

sw.bb357:                                         ; preds = %if.end64
  %idxprom358 = sext i32 %i17 to i64
  %arrayidx359 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @scentral to [144 x i32]*), i64 0, i64 %idxprom358
  %i103 = load i32, i32* %arrayidx359, align 4
  %i104 = load i32, i32* %score, align 4
  %sub360 = sub nsw i32 %i104, %i103
  store i32 %sub360, i32* %score, align 4
  %call361 = call i32 @s_rook_mobility(i32 %i17)
  %i105 = load i32, i32* %score, align 4
  %sub362 = sub nsw i32 %i105, %call361
  store i32 %sub362, i32* %score, align 4
  %call363 = call i32 @s_bishop_mobility(i32 %i17)
  %i106 = load i32, i32* %score, align 4
  %sub364 = sub nsw i32 %i106, %call363
  store i32 %sub364, i32* %score, align 4
  br label %sw.epilog

sw.bb365:                                         ; preds = %if.end64
  %idxprom366 = sext i32 %i17 to i64
  %arrayidx367 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @scentral to [144 x i32]*), i64 0, i64 %idxprom366
  %i107 = load i32, i32* %arrayidx367, align 4
  %shr = ashr i32 %i107, 1
  %i108 = load i32, i32* %score, align 4
  %add368 = add nsw i32 %i108, %shr
  store i32 %add368, i32* %score, align 4
  %call369 = call i32 @s_king_mobility(i32 %i17)
  %i109 = load i32, i32* %score, align 4
  %add370 = add nsw i32 %i109, %call369
  store i32 %add370, i32* %score, align 4
  %inc371 = add nsw i32 %wk.0, 1
  br label %sw.epilog

sw.bb372:                                         ; preds = %if.end64
  %idxprom373 = sext i32 %i17 to i64
  %arrayidx374 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @scentral to [144 x i32]*), i64 0, i64 %idxprom373
  %i110 = load i32, i32* %arrayidx374, align 4
  %shr375 = ashr i32 %i110, 1
  %i111 = load i32, i32* %score, align 4
  %sub376 = sub nsw i32 %i111, %shr375
  store i32 %sub376, i32* %score, align 4
  %call377 = call i32 @s_king_mobility(i32 %i17)
  %i112 = load i32, i32* %score, align 4
  %sub378 = sub nsw i32 %i112, %call377
  store i32 %sub378, i32* %score, align 4
  %inc379 = add nsw i32 %bk.0, 1
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.bb372, %sw.bb365, %sw.bb357, %sw.bb349, %sw.bb342, %sw.bb335, %if.end331, %if.end314, %sw.bb294, %sw.bb287, %if.end286, %if.end176, %if.end64
  %bp.1 = phi i32 [ %bp.0, %if.end64 ], [ %bp.0, %sw.bb372 ], [ %bp.0, %sw.bb365 ], [ %bp.0, %sw.bb357 ], [ %bp.0, %sw.bb349 ], [ %bp.0, %sw.bb342 ], [ %bp.0, %sw.bb335 ], [ %bp.0, %if.end331 ], [ %bp.0, %if.end314 ], [ %bp.0, %sw.bb294 ], [ %bp.0, %sw.bb287 ], [ %inc185, %if.end286 ], [ %bp.0, %if.end176 ]
  %wp.1 = phi i32 [ %wp.0, %if.end64 ], [ %wp.0, %sw.bb372 ], [ %wp.0, %sw.bb365 ], [ %wp.0, %sw.bb357 ], [ %wp.0, %sw.bb349 ], [ %wp.0, %sw.bb342 ], [ %wp.0, %sw.bb335 ], [ %wp.0, %if.end331 ], [ %wp.0, %if.end314 ], [ %wp.0, %sw.bb294 ], [ %wp.0, %sw.bb287 ], [ %wp.0, %if.end286 ], [ %inc78, %if.end176 ]
  %bn.1 = phi i32 [ %bn.0, %if.end64 ], [ %bn.0, %sw.bb372 ], [ %bn.0, %sw.bb365 ], [ %bn.0, %sw.bb357 ], [ %bn.0, %sw.bb349 ], [ %inc348, %sw.bb342 ], [ %bn.0, %sw.bb335 ], [ %bn.0, %if.end331 ], [ %bn.0, %if.end314 ], [ %bn.0, %sw.bb294 ], [ %bn.0, %sw.bb287 ], [ %bn.0, %if.end286 ], [ %bn.0, %if.end176 ]
  %wn.1 = phi i32 [ %wn.0, %if.end64 ], [ %wn.0, %sw.bb372 ], [ %wn.0, %sw.bb365 ], [ %wn.0, %sw.bb357 ], [ %wn.0, %sw.bb349 ], [ %wn.0, %sw.bb342 ], [ %inc341, %sw.bb335 ], [ %wn.0, %if.end331 ], [ %wn.0, %if.end314 ], [ %wn.0, %sw.bb294 ], [ %wn.0, %sw.bb287 ], [ %wn.0, %if.end286 ], [ %wn.0, %if.end176 ]
  %br.1 = phi i32 [ %br.0, %if.end64 ], [ %br.0, %sw.bb372 ], [ %br.0, %sw.bb365 ], [ %br.0, %sw.bb357 ], [ %br.0, %sw.bb349 ], [ %br.0, %sw.bb342 ], [ %br.0, %sw.bb335 ], [ %br.0, %if.end331 ], [ %br.0, %if.end314 ], [ %inc300, %sw.bb294 ], [ %br.0, %sw.bb287 ], [ %br.0, %if.end286 ], [ %br.0, %if.end176 ]
  %wr.1 = phi i32 [ %wr.0, %if.end64 ], [ %wr.0, %sw.bb372 ], [ %wr.0, %sw.bb365 ], [ %wr.0, %sw.bb357 ], [ %wr.0, %sw.bb349 ], [ %wr.0, %sw.bb342 ], [ %wr.0, %sw.bb335 ], [ %wr.0, %if.end331 ], [ %wr.0, %if.end314 ], [ %wr.0, %sw.bb294 ], [ %inc293, %sw.bb287 ], [ %wr.0, %if.end286 ], [ %wr.0, %if.end176 ]
  %bk.1 = phi i32 [ %bk.0, %if.end64 ], [ %inc379, %sw.bb372 ], [ %bk.0, %sw.bb365 ], [ %bk.0, %sw.bb357 ], [ %bk.0, %sw.bb349 ], [ %bk.0, %sw.bb342 ], [ %bk.0, %sw.bb335 ], [ %bk.0, %if.end331 ], [ %bk.0, %if.end314 ], [ %bk.0, %sw.bb294 ], [ %bk.0, %sw.bb287 ], [ %bk.0, %if.end286 ], [ %bk.0, %if.end176 ]
  %wk.1 = phi i32 [ %wk.0, %if.end64 ], [ %wk.0, %sw.bb372 ], [ %inc371, %sw.bb365 ], [ %wk.0, %sw.bb357 ], [ %wk.0, %sw.bb349 ], [ %wk.0, %sw.bb342 ], [ %wk.0, %sw.bb335 ], [ %wk.0, %if.end331 ], [ %wk.0, %if.end314 ], [ %wk.0, %sw.bb294 ], [ %wk.0, %sw.bb287 ], [ %wk.0, %if.end286 ], [ %wk.0, %if.end176 ]
  %bbc.1 = phi i32 [ %bbc.0, %if.end64 ], [ %bbc.0, %sw.bb372 ], [ %bbc.0, %sw.bb365 ], [ %bbc.0, %sw.bb357 ], [ %bbc.0, %sw.bb349 ], [ %bbc.0, %sw.bb342 ], [ %bbc.0, %sw.bb335 ], [ %i92, %if.end331 ], [ %bbc.0, %if.end314 ], [ %bbc.0, %sw.bb294 ], [ %bbc.0, %sw.bb287 ], [ %bbc.0, %if.end286 ], [ %bbc.0, %if.end176 ]
  %wbc.1 = phi i32 [ %wbc.0, %if.end64 ], [ %wbc.0, %sw.bb372 ], [ %wbc.0, %sw.bb365 ], [ %wbc.0, %sw.bb357 ], [ %wbc.0, %sw.bb349 ], [ %wbc.0, %sw.bb342 ], [ %wbc.0, %sw.bb335 ], [ %wbc.0, %if.end331 ], [ %i87, %if.end314 ], [ %wbc.0, %sw.bb294 ], [ %wbc.0, %sw.bb287 ], [ %wbc.0, %if.end286 ], [ %wbc.0, %if.end176 ]
  %bb.3 = phi i32 [ %bb.0, %if.end64 ], [ %bb.0, %sw.bb372 ], [ %bb.0, %sw.bb365 ], [ %bb.0, %sw.bb357 ], [ %bb.0, %sw.bb349 ], [ %bb.0, %sw.bb342 ], [ %bb.0, %sw.bb335 ], [ %inc332, %if.end331 ], [ %bb.0, %if.end314 ], [ %bb.0, %sw.bb294 ], [ %bb.0, %sw.bb287 ], [ %bb.0, %if.end286 ], [ %bb.0, %if.end176 ]
  %wb.3 = phi i32 [ %wb.0, %if.end64 ], [ %wb.0, %sw.bb372 ], [ %wb.0, %sw.bb365 ], [ %wb.0, %sw.bb357 ], [ %wb.0, %sw.bb349 ], [ %wb.0, %sw.bb342 ], [ %wb.0, %sw.bb335 ], [ %wb.0, %if.end331 ], [ %inc315, %if.end314 ], [ %wb.0, %sw.bb294 ], [ %wb.0, %sw.bb287 ], [ %wb.0, %if.end286 ], [ %wb.0, %if.end176 ]
  br label %for.inc380

for.inc380:                                       ; preds = %sw.epilog, %if.then61
  %bp.2 = phi i32 [ %bp.1, %sw.epilog ], [ %bp.0, %if.then61 ]
  %wp.2 = phi i32 [ %wp.1, %sw.epilog ], [ %wp.0, %if.then61 ]
  %bn.2 = phi i32 [ %bn.1, %sw.epilog ], [ %bn.0, %if.then61 ]
  %wn.2 = phi i32 [ %wn.1, %sw.epilog ], [ %wn.0, %if.then61 ]
  %br.2 = phi i32 [ %br.1, %sw.epilog ], [ %br.0, %if.then61 ]
  %wr.2 = phi i32 [ %wr.1, %sw.epilog ], [ %wr.0, %if.then61 ]
  %bk.2 = phi i32 [ %bk.1, %sw.epilog ], [ %bk.0, %if.then61 ]
  %wk.2 = phi i32 [ %wk.1, %sw.epilog ], [ %wk.0, %if.then61 ]
  %bbc.2 = phi i32 [ %bbc.1, %sw.epilog ], [ %bbc.0, %if.then61 ]
  %wbc.2 = phi i32 [ %wbc.1, %sw.epilog ], [ %wbc.0, %if.then61 ]
  %bb.4 = phi i32 [ %bb.3, %sw.epilog ], [ %bb.0, %if.then61 ]
  %wb.4 = phi i32 [ %wb.3, %sw.epilog ], [ %wb.0, %if.then61 ]
  %a.3 = phi i32 [ %inc63, %sw.epilog ], [ %a.2, %if.then61 ]
  %inc381 = add nsw i32 %j.1, 1
  br label %for.cond55

for.end382:                                       ; preds = %for.cond55
  %cmp383 = icmp slt i32 %wb.0, 99
  br i1 %cmp383, label %land.lhs.true384, label %if.end396

land.lhs.true384:                                 ; preds = %for.end382
  %cmp385 = icmp slt i32 %bb.0, 99
  br i1 %cmp385, label %land.lhs.true386, label %if.end396

land.lhs.true386:                                 ; preds = %land.lhs.true384
  %cmp387 = icmp ne i32 %wbc.0, %bbc.0
  br i1 %cmp387, label %land.lhs.true388, label %if.end396

land.lhs.true388:                                 ; preds = %land.lhs.true386
  %i113 = load i32, i32* @piece_count, align 4
  %cmp389 = icmp slt i32 %i113, 32
  br i1 %cmp389, label %if.then390, label %if.end396

if.then390:                                       ; preds = %land.lhs.true388
  %i114 = load i32, i32* %score, align 4
  %conv = sitofp i32 %i114 to float
  %i115 = load i32, i32* @piece_count, align 4
  %conv391 = sitofp i32 %i115 to float
  %conv392 = fpext float %conv391 to double
  %div = fdiv double %conv392, 3.200000e+01
  %conv393 = fptrunc double %div to float
  %mul394 = fmul float %conv, %conv393
  %conv395 = fptosi float %mul394 to i32
  store i32 %conv395, i32* %score, align 4
  br label %if.end396

if.end396:                                        ; preds = %if.then390, %land.lhs.true388, %land.lhs.true386, %land.lhs.true384, %for.end382
  %i116 = load i32, i32* %score, align 4
  call void @storeECache(i32 %i116)
  %i117 = load i32, i32* @white_to_move, align 4
  %cmp397 = icmp eq i32 %i117, 1
  br i1 %cmp397, label %if.then399, label %if.else400

if.then399:                                       ; preds = %if.end396
  %i118 = load i32, i32* %score, align 4
  br label %return

if.else400:                                       ; preds = %if.end396
  %i119 = load i32, i32* %score, align 4
  %sub401 = sub nsw i32 0, %i119
  br label %return

return:                                           ; preds = %if.else400, %if.then399, %if.end, %if.then1
  %retval.0 = phi i32 [ %i2, %if.then1 ], [ %sub, %if.end ], [ %i118, %if.then399 ], [ %sub401, %if.else400 ]
  ret i32 %retval.0
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @s_pawn_mobility(i32 %square) #0 {
entry:
  %idxprom = sext i32 %square to i64
  %arrayidx = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom
  %i = load i32, i32* %arrayidx, align 4
  %cmp = icmp eq i32 %i, 1
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %add = add nsw i32 %square, 12
  %idxprom1 = sext i32 %add to i64
  %arrayidx2 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom1
  %i1 = load i32, i32* %arrayidx2, align 4
  %cmp3 = icmp eq i32 %i1, 13
  br i1 %cmp3, label %if.then4, label %if.end

if.then4:                                         ; preds = %if.then
  %inc = add nsw i32 0, 1
  br label %if.end

if.end:                                           ; preds = %if.then4, %if.then
  %m.0 = phi i32 [ %inc, %if.then4 ], [ 0, %if.then ]
  br label %if.end11

if.else:                                          ; preds = %entry
  %sub = sub nsw i32 %square, 12
  %idxprom5 = sext i32 %sub to i64
  %arrayidx6 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom5
  %i2 = load i32, i32* %arrayidx6, align 4
  %cmp7 = icmp eq i32 %i2, 13
  br i1 %cmp7, label %if.then8, label %if.end10

if.then8:                                         ; preds = %if.else
  %inc9 = add nsw i32 0, 1
  br label %if.end10

if.end10:                                         ; preds = %if.then8, %if.else
  %m.1 = phi i32 [ %inc9, %if.then8 ], [ 0, %if.else ]
  br label %if.end11

if.end11:                                         ; preds = %if.end10, %if.end
  %m.2 = phi i32 [ %m.0, %if.end ], [ %m.1, %if.end10 ]
  %shl = shl i32 %m.2, 3
  ret i32 %shl
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @black_saccers(i32 %square) #0 {
entry:
  %add = add nsw i32 %square, 24
  %idxprom = sext i32 %add to i64
  %arrayidx = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom
  %i = load i32, i32* %arrayidx, align 4
  %cmp = icmp eq i32 %i, 2
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %add1 = add nsw i32 %square, 22
  %idxprom2 = sext i32 %add1 to i64
  %arrayidx3 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom2
  %i1 = load i32, i32* %arrayidx3, align 4
  %cmp4 = icmp eq i32 %i1, 2
  br i1 %cmp4, label %if.then, label %lor.lhs.false5

lor.lhs.false5:                                   ; preds = %lor.lhs.false
  %add6 = add nsw i32 %square, 26
  %idxprom7 = sext i32 %add6 to i64
  %arrayidx8 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom7
  %i2 = load i32, i32* %arrayidx8, align 4
  %cmp9 = icmp eq i32 %i2, 2
  br i1 %cmp9, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false5, %lor.lhs.false, %entry
  br label %return

if.end:                                           ; preds = %lor.lhs.false5
  %idxprom10 = sext i32 %square to i64
  %arrayidx11 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xrank to [144 x i32]*), i64 0, i64 %idxprom10
  %i3 = load i32, i32* %arrayidx11, align 4
  %cmp12 = icmp slt i32 %i3, 6
  br i1 %cmp12, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %if.end
  %add13 = add nsw i32 %square, 25
  %idxprom14 = sext i32 %add13 to i64
  %arrayidx15 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom14
  %i4 = load i32, i32* %arrayidx15, align 4
  %cmp16 = icmp eq i32 %i4, 2
  br i1 %cmp16, label %if.then22, label %lor.lhs.false17

lor.lhs.false17:                                  ; preds = %land.lhs.true
  %add18 = add nsw i32 %square, 23
  %idxprom19 = sext i32 %add18 to i64
  %arrayidx20 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom19
  %i5 = load i32, i32* %arrayidx20, align 4
  %cmp21 = icmp eq i32 %i5, 2
  br i1 %cmp21, label %if.then22, label %if.else

if.then22:                                        ; preds = %lor.lhs.false17, %land.lhs.true
  br label %if.end38

if.else:                                          ; preds = %lor.lhs.false17, %if.end
  %idxprom23 = sext i32 %square to i64
  %arrayidx24 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xrank to [144 x i32]*), i64 0, i64 %idxprom23
  %i6 = load i32, i32* %arrayidx24, align 4
  %cmp25 = icmp eq i32 %i6, 4
  br i1 %cmp25, label %land.lhs.true26, label %if.end37

land.lhs.true26:                                  ; preds = %if.else
  %add27 = add nsw i32 %square, 35
  %idxprom28 = sext i32 %add27 to i64
  %arrayidx29 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom28
  %i7 = load i32, i32* %arrayidx29, align 4
  %cmp30 = icmp eq i32 %i7, 2
  br i1 %cmp30, label %if.then36, label %lor.lhs.false31

lor.lhs.false31:                                  ; preds = %land.lhs.true26
  %add32 = add nsw i32 %square, 37
  %idxprom33 = sext i32 %add32 to i64
  %arrayidx34 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom33
  %i8 = load i32, i32* %arrayidx34, align 4
  %cmp35 = icmp eq i32 %i8, 2
  br i1 %cmp35, label %if.then36, label %if.end37

if.then36:                                        ; preds = %lor.lhs.false31, %land.lhs.true26
  br label %if.end37

if.end37:                                         ; preds = %if.then36, %lor.lhs.false31, %if.else
  %f.0 = phi i32 [ 1, %if.then36 ], [ 0, %lor.lhs.false31 ], [ 0, %if.else ]
  br label %if.end38

if.end38:                                         ; preds = %if.end37, %if.then22
  %f.1 = phi i32 [ 1, %if.then22 ], [ %f.0, %if.end37 ]
  %tobool = icmp ne i32 %f.1, 0
  br i1 %tobool, label %if.end42, label %if.then39

if.then39:                                        ; preds = %if.end38
  %add40 = add nsw i32 %square, 11
  %call = call i32 @is_attacked(i32 %add40, i32 0)
  %tobool41 = icmp ne i32 %call, 0
  %i9 = zext i1 %tobool41 to i64
  %cond = select i1 %tobool41, i32 1, i32 0
  br label %if.end42

if.end42:                                         ; preds = %if.then39, %if.end38
  %f.2 = phi i32 [ %f.1, %if.end38 ], [ %cond, %if.then39 ]
  %tobool43 = icmp ne i32 %f.2, 0
  br i1 %tobool43, label %if.end49, label %if.then44

if.then44:                                        ; preds = %if.end42
  %add45 = add nsw i32 %square, 13
  %call46 = call i32 @is_attacked(i32 %add45, i32 0)
  %tobool47 = icmp ne i32 %call46, 0
  %i10 = zext i1 %tobool47 to i64
  %cond48 = select i1 %tobool47, i32 2, i32 0
  br label %if.end49

if.end49:                                         ; preds = %if.then44, %if.end42
  %f.3 = phi i32 [ %f.2, %if.end42 ], [ %cond48, %if.then44 ]
  %tobool50 = icmp ne i32 %f.3, 0
  br i1 %tobool50, label %if.else52, label %if.then51

if.then51:                                        ; preds = %if.end49
  br label %return

if.else52:                                        ; preds = %if.end49
  %cmp53 = icmp eq i32 %f.3, 1
  br i1 %cmp53, label %if.then54, label %if.else60

if.then54:                                        ; preds = %if.else52
  %add55 = add nsw i32 %square, 11
  %call56 = call i32 @calc_attackers(i32 %add55, i32 0)
  %cmp57 = icmp sgt i32 %call56, 1
  br i1 %cmp57, label %if.then58, label %if.else59

if.then58:                                        ; preds = %if.then54
  br label %return

if.else59:                                        ; preds = %if.then54
  br label %return

if.else60:                                        ; preds = %if.else52
  %add61 = add nsw i32 %square, 13
  %call62 = call i32 @calc_attackers(i32 %add61, i32 0)
  %cmp63 = icmp sgt i32 %call62, 1
  br i1 %cmp63, label %if.then64, label %if.else65

if.then64:                                        ; preds = %if.else60
  br label %return

if.else65:                                        ; preds = %if.else60
  br label %return

return:                                           ; preds = %if.else65, %if.then64, %if.else59, %if.then58, %if.then51, %if.then
  %retval.0 = phi i32 [ 0, %if.then ], [ 0, %if.then58 ], [ 30, %if.else59 ], [ 0, %if.then64 ], [ 30, %if.else65 ], [ 0, %if.then51 ]
  ret i32 %retval.0
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @white_saccers(i32 %square) #0 {
entry:
  %sub = sub nsw i32 %square, 24
  %idxprom = sext i32 %sub to i64
  %arrayidx = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom
  %i = load i32, i32* %arrayidx, align 4
  %cmp = icmp eq i32 %i, 1
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %sub1 = sub nsw i32 %square, 22
  %idxprom2 = sext i32 %sub1 to i64
  %arrayidx3 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom2
  %i1 = load i32, i32* %arrayidx3, align 4
  %cmp4 = icmp eq i32 %i1, 1
  br i1 %cmp4, label %if.then, label %lor.lhs.false5

lor.lhs.false5:                                   ; preds = %lor.lhs.false
  %sub6 = sub nsw i32 %square, 26
  %idxprom7 = sext i32 %sub6 to i64
  %arrayidx8 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom7
  %i2 = load i32, i32* %arrayidx8, align 4
  %cmp9 = icmp eq i32 %i2, 1
  br i1 %cmp9, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false5, %lor.lhs.false, %entry
  br label %return

if.end:                                           ; preds = %lor.lhs.false5
  %idxprom10 = sext i32 %square to i64
  %arrayidx11 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xrank to [144 x i32]*), i64 0, i64 %idxprom10
  %i3 = load i32, i32* %arrayidx11, align 4
  %cmp12 = icmp sgt i32 %i3, 3
  br i1 %cmp12, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %if.end
  %sub13 = sub nsw i32 %square, 25
  %idxprom14 = sext i32 %sub13 to i64
  %arrayidx15 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom14
  %i4 = load i32, i32* %arrayidx15, align 4
  %cmp16 = icmp eq i32 %i4, 1
  br i1 %cmp16, label %if.then22, label %lor.lhs.false17

lor.lhs.false17:                                  ; preds = %land.lhs.true
  %sub18 = sub nsw i32 %square, 23
  %idxprom19 = sext i32 %sub18 to i64
  %arrayidx20 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom19
  %i5 = load i32, i32* %arrayidx20, align 4
  %cmp21 = icmp eq i32 %i5, 1
  br i1 %cmp21, label %if.then22, label %if.else

if.then22:                                        ; preds = %lor.lhs.false17, %land.lhs.true
  br label %if.end38

if.else:                                          ; preds = %lor.lhs.false17, %if.end
  %idxprom23 = sext i32 %square to i64
  %arrayidx24 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xrank to [144 x i32]*), i64 0, i64 %idxprom23
  %i6 = load i32, i32* %arrayidx24, align 4
  %cmp25 = icmp eq i32 %i6, 5
  br i1 %cmp25, label %land.lhs.true26, label %if.end37

land.lhs.true26:                                  ; preds = %if.else
  %sub27 = sub nsw i32 %square, 35
  %idxprom28 = sext i32 %sub27 to i64
  %arrayidx29 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom28
  %i7 = load i32, i32* %arrayidx29, align 4
  %cmp30 = icmp eq i32 %i7, 1
  br i1 %cmp30, label %if.then36, label %lor.lhs.false31

lor.lhs.false31:                                  ; preds = %land.lhs.true26
  %sub32 = sub nsw i32 %square, 37
  %idxprom33 = sext i32 %sub32 to i64
  %arrayidx34 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom33
  %i8 = load i32, i32* %arrayidx34, align 4
  %cmp35 = icmp eq i32 %i8, 1
  br i1 %cmp35, label %if.then36, label %if.end37

if.then36:                                        ; preds = %lor.lhs.false31, %land.lhs.true26
  br label %if.end37

if.end37:                                         ; preds = %if.then36, %lor.lhs.false31, %if.else
  %f.0 = phi i32 [ 1, %if.then36 ], [ 0, %lor.lhs.false31 ], [ 0, %if.else ]
  br label %if.end38

if.end38:                                         ; preds = %if.end37, %if.then22
  %f.1 = phi i32 [ 1, %if.then22 ], [ %f.0, %if.end37 ]
  %tobool = icmp ne i32 %f.1, 0
  br i1 %tobool, label %if.end42, label %if.then39

if.then39:                                        ; preds = %if.end38
  %sub40 = sub nsw i32 %square, 11
  %call = call i32 @is_attacked(i32 %sub40, i32 1)
  %tobool41 = icmp ne i32 %call, 0
  %i9 = zext i1 %tobool41 to i64
  %cond = select i1 %tobool41, i32 1, i32 0
  br label %if.end42

if.end42:                                         ; preds = %if.then39, %if.end38
  %f.2 = phi i32 [ %f.1, %if.end38 ], [ %cond, %if.then39 ]
  %tobool43 = icmp ne i32 %f.2, 0
  br i1 %tobool43, label %if.end49, label %if.then44

if.then44:                                        ; preds = %if.end42
  %sub45 = sub nsw i32 %square, 13
  %call46 = call i32 @is_attacked(i32 %sub45, i32 1)
  %tobool47 = icmp ne i32 %call46, 0
  %i10 = zext i1 %tobool47 to i64
  %cond48 = select i1 %tobool47, i32 2, i32 0
  br label %if.end49

if.end49:                                         ; preds = %if.then44, %if.end42
  %f.3 = phi i32 [ %f.2, %if.end42 ], [ %cond48, %if.then44 ]
  %tobool50 = icmp ne i32 %f.3, 0
  br i1 %tobool50, label %if.else52, label %if.then51

if.then51:                                        ; preds = %if.end49
  br label %return

if.else52:                                        ; preds = %if.end49
  %cmp53 = icmp eq i32 %f.3, 1
  br i1 %cmp53, label %if.then54, label %if.else60

if.then54:                                        ; preds = %if.else52
  %sub55 = sub nsw i32 %square, 11
  %call56 = call i32 @calc_attackers(i32 %sub55, i32 1)
  %cmp57 = icmp sgt i32 %call56, 1
  br i1 %cmp57, label %if.then58, label %if.else59

if.then58:                                        ; preds = %if.then54
  br label %return

if.else59:                                        ; preds = %if.then54
  br label %return

if.else60:                                        ; preds = %if.else52
  %sub61 = sub nsw i32 %square, 13
  %call62 = call i32 @calc_attackers(i32 %sub61, i32 1)
  %cmp63 = icmp sgt i32 %call62, 1
  br i1 %cmp63, label %if.then64, label %if.else65

if.then64:                                        ; preds = %if.else60
  br label %return

if.else65:                                        ; preds = %if.else60
  br label %return

return:                                           ; preds = %if.else65, %if.then64, %if.else59, %if.then58, %if.then51, %if.then
  %retval.0 = phi i32 [ 0, %if.then ], [ 0, %if.then58 ], [ 30, %if.else59 ], [ 0, %if.then64 ], [ 30, %if.else65 ], [ 0, %if.then51 ]
  ret i32 %retval.0
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @s_rook_mobility(i32 %square) #0 {
entry:
  %sub = sub nsw i32 %square, 12
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %l.0 = phi i32 [ %sub, %entry ], [ %sub1, %for.inc ]
  %m.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ]
  %idxprom = sext i32 %l.0 to i64
  %arrayidx = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom
  %i = load i32, i32* %arrayidx, align 4
  %cmp = icmp eq i32 %i, 13
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %inc = add nsw i32 %m.0, 1
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %sub1 = sub nsw i32 %l.0, 12
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %sub2 = sub nsw i32 %square, 1
  br label %for.cond3

for.cond3:                                        ; preds = %for.inc9, %for.end
  %l.1 = phi i32 [ %sub2, %for.end ], [ %sub10, %for.inc9 ]
  %m.1 = phi i32 [ %m.0, %for.end ], [ %inc8, %for.inc9 ]
  %idxprom4 = sext i32 %l.1 to i64
  %arrayidx5 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom4
  %i1 = load i32, i32* %arrayidx5, align 4
  %cmp6 = icmp eq i32 %i1, 13
  br i1 %cmp6, label %for.body7, label %for.end11

for.body7:                                        ; preds = %for.cond3
  %inc8 = add nsw i32 %m.1, 1
  br label %for.inc9

for.inc9:                                         ; preds = %for.body7
  %sub10 = sub nsw i32 %l.1, 1
  br label %for.cond3

for.end11:                                        ; preds = %for.cond3
  %add = add nsw i32 %square, 1
  br label %for.cond12

for.cond12:                                       ; preds = %for.inc18, %for.end11
  %l.2 = phi i32 [ %add, %for.end11 ], [ %add19, %for.inc18 ]
  %m.2 = phi i32 [ %m.1, %for.end11 ], [ %inc17, %for.inc18 ]
  %idxprom13 = sext i32 %l.2 to i64
  %arrayidx14 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom13
  %i2 = load i32, i32* %arrayidx14, align 4
  %cmp15 = icmp eq i32 %i2, 13
  br i1 %cmp15, label %for.body16, label %for.end20

for.body16:                                       ; preds = %for.cond12
  %inc17 = add nsw i32 %m.2, 1
  br label %for.inc18

for.inc18:                                        ; preds = %for.body16
  %add19 = add nsw i32 %l.2, 1
  br label %for.cond12

for.end20:                                        ; preds = %for.cond12
  %add21 = add nsw i32 %square, 12
  br label %for.cond22

for.cond22:                                       ; preds = %for.inc28, %for.end20
  %l.3 = phi i32 [ %add21, %for.end20 ], [ %add29, %for.inc28 ]
  %m.3 = phi i32 [ %m.2, %for.end20 ], [ %inc27, %for.inc28 ]
  %idxprom23 = sext i32 %l.3 to i64
  %arrayidx24 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom23
  %i3 = load i32, i32* %arrayidx24, align 4
  %cmp25 = icmp eq i32 %i3, 13
  br i1 %cmp25, label %for.body26, label %for.end30

for.body26:                                       ; preds = %for.cond22
  %inc27 = add nsw i32 %m.3, 1
  br label %for.inc28

for.inc28:                                        ; preds = %for.body26
  %add29 = add nsw i32 %l.3, 12
  br label %for.cond22

for.end30:                                        ; preds = %for.cond22
  %shl = shl i32 %m.3, 2
  ret i32 %shl
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @s_bishop_mobility(i32 %square) #0 {
entry:
  %sub = sub nsw i32 %square, 13
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %l.0 = phi i32 [ %sub, %entry ], [ %sub1, %for.inc ]
  %m.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ]
  %idxprom = sext i32 %l.0 to i64
  %arrayidx = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom
  %i = load i32, i32* %arrayidx, align 4
  %cmp = icmp eq i32 %i, 13
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %inc = add nsw i32 %m.0, 1
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %sub1 = sub nsw i32 %l.0, 13
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %sub2 = sub nsw i32 %square, 11
  br label %for.cond3

for.cond3:                                        ; preds = %for.inc9, %for.end
  %l.1 = phi i32 [ %sub2, %for.end ], [ %sub10, %for.inc9 ]
  %m.1 = phi i32 [ %m.0, %for.end ], [ %inc8, %for.inc9 ]
  %idxprom4 = sext i32 %l.1 to i64
  %arrayidx5 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom4
  %i1 = load i32, i32* %arrayidx5, align 4
  %cmp6 = icmp eq i32 %i1, 13
  br i1 %cmp6, label %for.body7, label %for.end11

for.body7:                                        ; preds = %for.cond3
  %inc8 = add nsw i32 %m.1, 1
  br label %for.inc9

for.inc9:                                         ; preds = %for.body7
  %sub10 = sub nsw i32 %l.1, 11
  br label %for.cond3

for.end11:                                        ; preds = %for.cond3
  %add = add nsw i32 %square, 11
  br label %for.cond12

for.cond12:                                       ; preds = %for.inc18, %for.end11
  %l.2 = phi i32 [ %add, %for.end11 ], [ %add19, %for.inc18 ]
  %m.2 = phi i32 [ %m.1, %for.end11 ], [ %inc17, %for.inc18 ]
  %idxprom13 = sext i32 %l.2 to i64
  %arrayidx14 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom13
  %i2 = load i32, i32* %arrayidx14, align 4
  %cmp15 = icmp eq i32 %i2, 13
  br i1 %cmp15, label %for.body16, label %for.end20

for.body16:                                       ; preds = %for.cond12
  %inc17 = add nsw i32 %m.2, 1
  br label %for.inc18

for.inc18:                                        ; preds = %for.body16
  %add19 = add nsw i32 %l.2, 11
  br label %for.cond12

for.end20:                                        ; preds = %for.cond12
  %add21 = add nsw i32 %square, 13
  br label %for.cond22

for.cond22:                                       ; preds = %for.inc28, %for.end20
  %l.3 = phi i32 [ %add21, %for.end20 ], [ %add29, %for.inc28 ]
  %m.3 = phi i32 [ %m.2, %for.end20 ], [ %inc27, %for.inc28 ]
  %idxprom23 = sext i32 %l.3 to i64
  %arrayidx24 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom23
  %i3 = load i32, i32* %arrayidx24, align 4
  %cmp25 = icmp eq i32 %i3, 13
  br i1 %cmp25, label %for.body26, label %for.end30

for.body26:                                       ; preds = %for.cond22
  %inc27 = add nsw i32 %m.3, 1
  br label %for.inc28

for.inc28:                                        ; preds = %for.body26
  %add29 = add nsw i32 %l.3, 13
  br label %for.cond22

for.end30:                                        ; preds = %for.cond22
  %shl = shl i32 %m.3, 2
  ret i32 %shl
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @s_knight_mobility(i32 %square) #0 {
entry:
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %d.0 = phi i32 [ 0, %entry ], [ %inc4, %for.inc ]
  %m.0 = phi i32 [ 0, %entry ], [ %m.1, %for.inc ]
  %cmp = icmp slt i32 %d.0, 8
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %idxprom = sext i32 %d.0 to i64
  %arrayidx = getelementptr inbounds [8 x i32], [8 x i32]* @knight_o, i64 0, i64 %idxprom
  %i = load i32, i32* %arrayidx, align 4
  %add = add nsw i32 %square, %i
  %idxprom1 = sext i32 %add to i64
  %arrayidx2 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom1
  %i1 = load i32, i32* %arrayidx2, align 4
  %cmp3 = icmp eq i32 %i1, 13
  br i1 %cmp3, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %inc = add nsw i32 %m.0, 1
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  %m.1 = phi i32 [ %inc, %if.then ], [ %m.0, %for.body ]
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %inc4 = add nsw i32 %d.0, 1
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %shl = shl i32 %m.0, 2
  ret i32 %shl
}

; Function Attrs: noinline nounwind uwtable
define internal i32 @s_king_mobility(i32 %square) #0 {
entry:
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %d.0 = phi i32 [ 0, %entry ], [ %inc4, %for.inc ]
  %m.0 = phi i32 [ 0, %entry ], [ %m.1, %for.inc ]
  %cmp = icmp slt i32 %d.0, 8
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %idxprom = sext i32 %d.0 to i64
  %arrayidx = getelementptr inbounds [8 x i32], [8 x i32]* @king_o, i64 0, i64 %idxprom
  %i = load i32, i32* %arrayidx, align 4
  %add = add nsw i32 %square, %i
  %idxprom1 = sext i32 %add to i64
  %arrayidx2 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom1
  %i1 = load i32, i32* %arrayidx2, align 4
  %cmp3 = icmp eq i32 %i1, 13
  br i1 %cmp3, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %inc = add nsw i32 %m.0, 1
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  %m.1 = phi i32 [ %inc, %if.then ], [ %m.0, %for.body ]
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %inc4 = add nsw i32 %d.0, 1
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %shl = shl i32 %m.0, 2
  ret i32 %shl
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @main(i32 %argc, i8** %argv) #0 {
entry:
  %input = alloca [256 x i8], align 16
  %output = alloca [256 x i8], align 16
  %readbuff = alloca [256 x i8], align 16
  %move = alloca %struct.move_s, align 4
  %comp_move = alloca %struct.move_s, align 8
  %depth = alloca i32, align 4
  %show_board = alloca i32, align 4
  %game_history = alloca [600 x %struct.move_s], align 16
  %game_history_x = alloca [600 x %struct.move_x], align 16
  %pingnum = alloca i32, align 4
  %tmp = alloca %struct.move_s, align 4
  %tmp247 = alloca %struct.move_s, align 4
  %tmp546 = alloca %struct.move_s, align 4
  store i32 4, i32* %depth, align 4
  call void @read_rcfile()
  call void @initialize_zobrist()
  store i32 2, i32* @Variant, align 4
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 bitcast ([14 x i32]* @material to i8*), i8* align 16 bitcast ([14 x i32]* @std_material to i8*), i64 56, i1 false)
  call void @init_game()
  call void @initialize_hash()
  call void @clear_tt()
  call void @reset_ecache()
  store i32 0, i32* @ECacheProbes, align 4
  store i32 0, i32* @ECacheHits, align 4
  store i32 0, i32* @TTProbes, align 4
  store i32 0, i32* @TTStores, align 4
  store i32 0, i32* @TTHits, align 4
  store i32 0, i32* @bookidx, align 4
  store i32 0, i32* @total_moves, align 4
  store i32 0, i32* @ply, align 4
  store i32 40, i32* @moves_to_tc, align 4
  store i32 5, i32* @min_per_game, align 4
  store i32 30000, i32* @time_left, align 4
  store i32 2000, i32* @opp_rating, align 4
  store i32 2000, i32* @my_rating, align 4
  store i32 40, i32* @maxdepth, align 4
  store i32 200, i32* @maxposdiff, align 4
  store i32 1, i32* @must_go, align 4
  store i32 1, i32* @tradefreely, align 4
  store i32 0, i32* @xb_mode, align 4
  store i32 0, i32* @comp_color, align 4
  store i32 1, i32* %show_board, align 4
  store i32 0, i32* @is_pondering, align 4
  store i32 1, i32* @allow_pondering, align 4
  store i32 0, i32* @is_analyzing, align 4
  store i32 0, i32* @have_partner, align 4
  store i32 0, i32* @must_sit, align 4
  store i32 0, i32* @go_fast, align 4
  store i32 0, i32* @fixed_time, align 4
  store i32 0, i32* @phase, align 4
  store i32 0, i32* @root_to_move, align 4
  store i32 0, i32* @kibitzed, align 4
  store i32 0, i32* @move_number, align 4
  %arraydecay = getelementptr inbounds [600 x %struct.move_s], [600 x %struct.move_s]* %game_history, i64 0, i64 0
  %i = bitcast %struct.move_s* %arraydecay to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %i, i8 0, i64 14400, i1 false)
  %arraydecay1 = getelementptr inbounds [600 x %struct.move_x], [600 x %struct.move_x]* %game_history_x, i64 0, i64 0
  %i1 = bitcast %struct.move_x* %arraydecay1 to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %i1, i8 0, i64 9600, i1 false)
  %i2 = load i32, i32* @hash, align 4
  %i3 = load i32, i32* @move_number, align 4
  %idxprom = sext i32 %i3 to i64
  %arrayidx = getelementptr inbounds [600 x i32], [600 x i32]* @hash_history, i64 0, i64 %idxprom
  store i32 %i2, i32* %arrayidx, align 4
  %i4 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  call void @setbuf(%struct._IO_FILE* %i4, i8* null) #8
  %i5 = load %struct._IO_FILE*, %struct._IO_FILE** @stdin, align 8
  call void @setbuf(%struct._IO_FILE* %i5, i8* null) #8
  call void @start_up()
  %cmp = icmp eq i32 %argc, 2
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([15 x i8], [15 x i8]* @.str.280, i64 0, i64 0))
  %arrayidx2 = getelementptr inbounds i8*, i8** %argv, i64 1
  %i6 = load i8*, i8** %arrayidx2, align 8
  call void @run_autotest(i8* %i6)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  br label %while.body

while.body:                                       ; preds = %if.end858, %if.then750, %if.then741, %if.then736, %if.then413, %if.then408, %if.then403, %if.then398, %if.end
  %is_edit_mode.0 = phi i32 [ 0, %if.end ], [ %is_edit_mode.25, %if.end858 ], [ %is_edit_mode.0, %if.then750 ], [ %is_edit_mode.0, %if.then741 ], [ %is_edit_mode.0, %if.then736 ], [ %is_edit_mode.0, %if.then413 ], [ %is_edit_mode.0, %if.then408 ], [ %is_edit_mode.0, %if.then403 ], [ %is_edit_mode.0, %if.then398 ]
  %force_mode.0 = phi i32 [ 0, %if.end ], [ %force_mode.39, %if.end858 ], [ %force_mode.0, %if.then750 ], [ %force_mode.0, %if.then741 ], [ %force_mode.0, %if.then736 ], [ %force_mode.0, %if.then413 ], [ %force_mode.0, %if.then408 ], [ %force_mode.0, %if.then403 ], [ %force_mode.0, %if.then398 ]
  %edit_color.0 = phi i32 [ 0, %if.end ], [ %edit_color.27, %if.end858 ], [ %edit_color.0, %if.then750 ], [ %edit_color.0, %if.then741 ], [ %edit_color.0, %if.then736 ], [ %edit_color.0, %if.then413 ], [ %edit_color.0, %if.then408 ], [ %edit_color.0, %if.then403 ], [ %edit_color.0, %if.then398 ]
  %braindeadinterface.0 = phi i32 [ 0, %if.end ], [ %braindeadinterface.37, %if.end858 ], [ %braindeadinterface.0, %if.then750 ], [ %braindeadinterface.0, %if.then741 ], [ %braindeadinterface.0, %if.then736 ], [ %braindeadinterface.0, %if.then413 ], [ %braindeadinterface.0, %if.then408 ], [ %braindeadinterface.0, %if.then403 ], [ %braindeadinterface.0, %if.then398 ]
  %automode.0 = phi i32 [ 0, %if.end ], [ %automode.10, %if.end858 ], [ 1, %if.then750 ], [ %automode.4, %if.then741 ], [ %automode.4, %if.then736 ], [ %automode.4, %if.then413 ], [ %automode.4, %if.then408 ], [ %automode.4, %if.then403 ], [ %automode.4, %if.then398 ]
  %tobool = icmp ne i32 %is_edit_mode.0, 0
  br i1 %tobool, label %if.end217, label %land.lhs.true

land.lhs.true:                                    ; preds = %while.body
  %i7 = load i32, i32* @comp_color, align 4
  %i8 = load i32, i32* @white_to_move, align 4
  %cmp3 = icmp eq i32 %i7, %i8
  br i1 %cmp3, label %land.lhs.true5, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true
  %tobool4 = icmp ne i32 %automode.0, 0
  br i1 %tobool4, label %land.lhs.true5, label %if.end217

land.lhs.true5:                                   ; preds = %lor.lhs.false, %land.lhs.true
  %tobool6 = icmp ne i32 %force_mode.0, 0
  br i1 %tobool6, label %if.end217, label %land.lhs.true7

land.lhs.true7:                                   ; preds = %land.lhs.true5
  %i9 = load i32, i32* @must_sit, align 4
  %tobool8 = icmp ne i32 %i9, 0
  br i1 %tobool8, label %if.end217, label %land.lhs.true9

land.lhs.true9:                                   ; preds = %land.lhs.true7
  %i10 = load i32, i32* @result, align 4
  %tobool10 = icmp ne i32 %i10, 0
  br i1 %tobool10, label %if.end217, label %if.then11

if.then11:                                        ; preds = %land.lhs.true9
  store i32 0, i32* @is_pondering, align 4
  call void @think(%struct.move_s* sret(%struct.move_s) align 4 %tmp)
  %i11 = bitcast %struct.move_s* %comp_move to i8*
  %i12 = bitcast %struct.move_s* %tmp to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %i11, i8* align 4 %i12, i64 24, i1 false)
  store i32 0, i32* @ply, align 4
  %i13 = load i32, i32* @must_sit, align 4
  %tobool12 = icmp ne i32 %i13, 0
  br i1 %tobool12, label %lor.lhs.false13, label %if.then15

lor.lhs.false13:                                  ; preds = %if.then11
  %i14 = load i32, i32* @must_go, align 4
  %cmp14 = icmp ne i32 %i14, 0
  br i1 %cmp14, label %if.then15, label %if.end216

if.then15:                                        ; preds = %lor.lhs.false13, %if.then11
  %i15 = load i32, i32* @Variant, align 4
  %cmp16 = icmp eq i32 %i15, 4
  br i1 %cmp16, label %land.lhs.true19, label %lor.lhs.false17

lor.lhs.false17:                                  ; preds = %if.then15
  %i16 = load i32, i32* @Variant, align 4
  %cmp18 = icmp eq i32 %i16, 3
  br i1 %cmp18, label %land.lhs.true19, label %lor.lhs.false23

land.lhs.true19:                                  ; preds = %lor.lhs.false17, %if.then15
  %i17 = load i32, i32* @result, align 4
  %cmp20 = icmp ne i32 %i17, 2
  br i1 %cmp20, label %land.lhs.true21, label %lor.lhs.false23

land.lhs.true21:                                  ; preds = %land.lhs.true19
  %i18 = load i32, i32* @result, align 4
  %cmp22 = icmp ne i32 %i18, 3
  br i1 %cmp22, label %land.lhs.true37, label %lor.lhs.false23

lor.lhs.false23:                                  ; preds = %land.lhs.true21, %land.lhs.true19, %lor.lhs.false17
  %i19 = load i32, i32* @Variant, align 4
  %cmp24 = icmp eq i32 %i19, 2
  br i1 %cmp24, label %land.lhs.true29, label %lor.lhs.false25

lor.lhs.false25:                                  ; preds = %lor.lhs.false23
  %i20 = load i32, i32* @Variant, align 4
  %cmp26 = icmp eq i32 %i20, 0
  br i1 %cmp26, label %land.lhs.true29, label %lor.lhs.false27

lor.lhs.false27:                                  ; preds = %lor.lhs.false25
  %i21 = load i32, i32* @Variant, align 4
  %cmp28 = icmp eq i32 %i21, 1
  br i1 %cmp28, label %land.lhs.true29, label %if.else189

land.lhs.true29:                                  ; preds = %lor.lhs.false27, %lor.lhs.false25, %lor.lhs.false23
  %i22 = load i32, i32* @comp_color, align 4
  %cmp30 = icmp eq i32 %i22, 1
  br i1 %cmp30, label %land.lhs.true31, label %lor.lhs.false33

land.lhs.true31:                                  ; preds = %land.lhs.true29
  %i23 = load i32, i32* @result, align 4
  %cmp32 = icmp ne i32 %i23, 2
  br i1 %cmp32, label %land.lhs.true37, label %lor.lhs.false33

lor.lhs.false33:                                  ; preds = %land.lhs.true31, %land.lhs.true29
  %i24 = load i32, i32* @comp_color, align 4
  %cmp34 = icmp eq i32 %i24, 0
  br i1 %cmp34, label %land.lhs.true35, label %if.else189

land.lhs.true35:                                  ; preds = %lor.lhs.false33
  %i25 = load i32, i32* @result, align 4
  %cmp36 = icmp ne i32 %i25, 3
  br i1 %cmp36, label %land.lhs.true37, label %if.else189

land.lhs.true37:                                  ; preds = %land.lhs.true35, %land.lhs.true31, %land.lhs.true21
  %i26 = load i32, i32* @result, align 4
  %cmp38 = icmp ne i32 %i26, 1
  br i1 %cmp38, label %land.lhs.true39, label %if.else189

land.lhs.true39:                                  ; preds = %land.lhs.true37
  %i27 = load i32, i32* @result, align 4
  %cmp40 = icmp ne i32 %i27, 4
  br i1 %cmp40, label %land.lhs.true41, label %if.else189

land.lhs.true41:                                  ; preds = %land.lhs.true39
  %i28 = load i32, i32* @result, align 4
  %cmp42 = icmp ne i32 %i28, 5
  br i1 %cmp42, label %if.then43, label %if.else189

if.then43:                                        ; preds = %land.lhs.true41
  %arraydecay44 = getelementptr inbounds [256 x i8], [256 x i8]* %output, i64 0, i64 0
  call void @comp_to_coord(%struct.move_s* byval(%struct.move_s) align 8 %comp_move, i8* %arraydecay44)
  %i29 = load i32, i32* @hash, align 4
  %i30 = load i32, i32* @move_number, align 4
  %idxprom45 = sext i32 %i30 to i64
  %arrayidx46 = getelementptr inbounds [600 x i32], [600 x i32]* @hash_history, i64 0, i64 %idxprom45
  store i32 %i29, i32* %arrayidx46, align 4
  %i31 = load i32, i32* @move_number, align 4
  %idxprom47 = sext i32 %i31 to i64
  %arrayidx48 = getelementptr inbounds [600 x %struct.move_s], [600 x %struct.move_s]* %game_history, i64 0, i64 %idxprom47
  %i32 = bitcast %struct.move_s* %arrayidx48 to i8*
  %i33 = bitcast %struct.move_s* %comp_move to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %i32, i8* align 4 %i33, i64 24, i1 false)
  call void @make(%struct.move_s* %comp_move, i32 0)
  %i34 = load i32, i32* @move_number, align 4
  %inc = add nsw i32 %i34, 1
  store i32 %inc, i32* @move_number, align 4
  %idxprom49 = sext i32 %i34 to i64
  %arrayidx50 = getelementptr inbounds [600 x %struct.move_x], [600 x %struct.move_x]* %game_history_x, i64 0, i64 %idxprom49
  %i35 = bitcast %struct.move_x* %arrayidx50 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %i35, i8* align 16 bitcast ([300 x %struct.move_x]* @path_x to i8*), i64 16, i1 false)
  store i32 0, i32* @userealholdings, align 4
  %i36 = load i32, i32* @must_go, align 4
  %dec = add nsw i32 %i36, -1
  store i32 %dec, i32* @must_go, align 4
  %call51 = call i32 @is_draw()
  %tobool52 = icmp ne i32 %call51, 0
  br i1 %tobool52, label %if.then53, label %if.else

if.then53:                                        ; preds = %if.then43
  store i32 5, i32* @result, align 4
  br label %if.end57

if.else:                                          ; preds = %if.then43
  %i37 = load i32, i32* @fifty, align 4
  %cmp54 = icmp sgt i32 %i37, 100
  br i1 %cmp54, label %if.then55, label %if.end56

if.then55:                                        ; preds = %if.else
  store i32 4, i32* @result, align 4
  br label %if.end56

if.end56:                                         ; preds = %if.then55, %if.else
  br label %if.end57

if.end57:                                         ; preds = %if.end56, %if.then53
  %i38 = load i32, i32* @root_to_move, align 4
  %xor = xor i32 %i38, 1
  store i32 %xor, i32* @root_to_move, align 4
  call void @reset_piece_square()
  %i39 = load i32, i32* @book_ply, align 4
  %cmp58 = icmp slt i32 %i39, 40
  br i1 %cmp58, label %if.then59, label %if.end68

if.then59:                                        ; preds = %if.end57
  %i40 = load i32, i32* @book_ply, align 4
  %tobool60 = icmp ne i32 %i40, 0
  br i1 %tobool60, label %if.else64, label %if.then61

if.then61:                                        ; preds = %if.then59
  %arraydecay62 = getelementptr inbounds [256 x i8], [256 x i8]* %output, i64 0, i64 0
  %call63 = call i8* @strcpy(i8* getelementptr inbounds ([256 x i8], [256 x i8]* @opening_history, i64 0, i64 0), i8* %arraydecay62) #8
  br label %if.end67

if.else64:                                        ; preds = %if.then59
  %arraydecay65 = getelementptr inbounds [256 x i8], [256 x i8]* %output, i64 0, i64 0
  %call66 = call i8* @strcat(i8* getelementptr inbounds ([256 x i8], [256 x i8]* @opening_history, i64 0, i64 0), i8* %arraydecay65) #8
  br label %if.end67

if.end67:                                         ; preds = %if.else64, %if.then61
  br label %if.end68

if.end68:                                         ; preds = %if.end67, %if.end57
  %i41 = load i32, i32* @book_ply, align 4
  %inc69 = add nsw i32 %i41, 1
  store i32 %inc69, i32* @book_ply, align 4
  %i42 = load i32, i32* @nodes, align 4
  %i43 = load i32, i32* @qnodes, align 4
  %conv = sitofp i32 %i43 to float
  %i44 = load i32, i32* @nodes, align 4
  %conv70 = sitofp i32 %i44 to float
  %div = fdiv float %conv, %conv70
  %conv71 = fpext float %div to double
  %mul = fmul double %conv71, 1.000000e+02
  %conv72 = fptrunc double %mul to float
  %conv73 = fpext float %conv72 to double
  %call74 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.1.281, i64 0, i64 0), i32 %i42, double %conv73)
  %i45 = load i32, i32* @ECacheProbes, align 4
  %i46 = load i32, i32* @ECacheHits, align 4
  %i47 = load i32, i32* @ECacheHits, align 4
  %conv75 = uitofp i32 %i47 to float
  %i48 = load i32, i32* @ECacheProbes, align 4
  %conv76 = uitofp i32 %i48 to float
  %add = fadd float %conv76, 1.000000e+00
  %div77 = fdiv float %conv75, %add
  %mul78 = fmul float %div77, 1.000000e+02
  %conv79 = fpext float %mul78 to double
  %call80 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.2.282, i64 0, i64 0), i32 %i45, i32 %i46, double %conv79)
  %i49 = load i32, i32* @TTStores, align 4
  %i50 = load i32, i32* @TTProbes, align 4
  %i51 = load i32, i32* @TTHits, align 4
  %i52 = load i32, i32* @TTHits, align 4
  %conv81 = uitofp i32 %i52 to float
  %i53 = load i32, i32* @TTProbes, align 4
  %conv82 = uitofp i32 %i53 to float
  %add83 = fadd float %conv82, 1.000000e+00
  %div84 = fdiv float %conv81, %add83
  %mul85 = fmul float %div84, 1.000000e+02
  %conv86 = fpext float %mul85 to double
  %call87 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([60 x i8], [60 x i8]* @.str.3.283, i64 0, i64 0), i32 %i49, i32 %i50, i32 %i51, double %conv86)
  %i54 = load i32, i32* @NTries, align 4
  %i55 = load i32, i32* @NCuts, align 4
  %i56 = load i32, i32* @NCuts, align 4
  %conv88 = uitofp i32 %i56 to float
  %mul89 = fmul float %conv88, 1.000000e+02
  %i57 = load i32, i32* @NTries, align 4
  %conv90 = uitofp i32 %i57 to float
  %add91 = fadd float %conv90, 1.000000e+00
  %div92 = fdiv float %mul89, %add91
  %conv93 = fpext float %div92 to double
  %i58 = load i32, i32* @TExt, align 4
  %call94 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.4.284, i64 0, i64 0), i32 %i54, i32 %i55, double %conv93, i32 %i58)
  %i59 = load i32, i32* @ext_check, align 4
  %i60 = load i32, i32* @razor_drop, align 4
  %i61 = load i32, i32* @razor_material, align 4
  %call95 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([61 x i8], [61 x i8]* @.str.5.285, i64 0, i64 0), i32 %i59, i32 %i60, i32 %i61)
  %i62 = load i32, i32* @FHF, align 4
  %conv96 = uitofp i32 %i62 to float
  %mul97 = fmul float %conv96, 1.000000e+02
  %i63 = load i32, i32* @FH, align 4
  %add98 = add i32 %i63, 1
  %conv99 = uitofp i32 %add98 to float
  %div100 = fdiv float %mul97, %conv99
  %conv101 = fpext float %div100 to double
  %call102 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([22 x i8], [22 x i8]* @.str.6.286, i64 0, i64 0), double %conv101)
  %i64 = load i32, i32* @Material, align 4
  %call103 = call i32 @eval(i32 -1000000, i32 1000000)
  %i65 = load i32, i32* @maxposdiff, align 4
  %i66 = load i32, i32* @white_hand_eval, align 4
  %i67 = load i32, i32* @black_hand_eval, align 4
  %call104 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([81 x i8], [81 x i8]* @.str.7.287, i64 0, i64 0), i32 %i64, i32 %call103, i32 %i65, i32 %i66, i32 %i67)
  %i68 = load i32, i32* @hash, align 4
  %i69 = load i32, i32* @hold_hash, align 4
  %call105 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.8.288, i64 0, i64 0), i32 %i68, i32 %i69)
  %i70 = load i32, i32* @result, align 4
  %tobool106 = icmp ne i32 %i70, 0
  br i1 %tobool106, label %if.else136, label %if.then107

if.then107:                                       ; preds = %if.end68
  %i71 = load i32, i32* @xb_mode, align 4
  %tobool108 = icmp ne i32 %i71, 0
  br i1 %tobool108, label %if.then109, label %if.else123

if.then109:                                       ; preds = %if.then107
  %from = getelementptr inbounds %struct.move_s, %struct.move_s* %comp_move, i32 0, i32 0
  %i72 = load i32, i32* %from, align 4
  %i73 = load i32, i32* getelementptr inbounds (%struct.move_s, %struct.move_s* @dummy, i32 0, i32 0), align 4
  %cmp110 = icmp ne i32 %i72, %i73
  br i1 %cmp110, label %if.then115, label %lor.lhs.false112

lor.lhs.false112:                                 ; preds = %if.then109
  %target = getelementptr inbounds %struct.move_s, %struct.move_s* %comp_move, i32 0, i32 1
  %i74 = load i32, i32* %target, align 4
  %i75 = load i32, i32* getelementptr inbounds (%struct.move_s, %struct.move_s* @dummy, i32 0, i32 1), align 4
  %cmp113 = icmp ne i32 %i74, %i75
  br i1 %cmp113, label %if.then115, label %if.end118

if.then115:                                       ; preds = %lor.lhs.false112, %if.then109
  %arraydecay116 = getelementptr inbounds [256 x i8], [256 x i8]* %output, i64 0, i64 0
  %call117 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.9.289, i64 0, i64 0), i8* %arraydecay116)
  br label %if.end118

if.end118:                                        ; preds = %if.then115, %lor.lhs.false112
  %i76 = load i32, i32* @Variant, align 4
  %cmp119 = icmp eq i32 %i76, 1
  br i1 %cmp119, label %if.then121, label %if.end122

if.then121:                                       ; preds = %if.end118
  call void @CheckBadFlow(i32 0)
  br label %if.end122

if.end122:                                        ; preds = %if.then121, %if.end118
  br label %if.end135

if.else123:                                       ; preds = %if.then107
  %from124 = getelementptr inbounds %struct.move_s, %struct.move_s* %comp_move, i32 0, i32 0
  %i77 = load i32, i32* %from124, align 4
  %i78 = load i32, i32* getelementptr inbounds (%struct.move_s, %struct.move_s* @dummy, i32 0, i32 0), align 4
  %cmp125 = icmp ne i32 %i77, %i78
  br i1 %cmp125, label %if.then131, label %lor.lhs.false127

lor.lhs.false127:                                 ; preds = %if.else123
  %target128 = getelementptr inbounds %struct.move_s, %struct.move_s* %comp_move, i32 0, i32 1
  %i79 = load i32, i32* %target128, align 4
  %i80 = load i32, i32* getelementptr inbounds (%struct.move_s, %struct.move_s* @dummy, i32 0, i32 1), align 4
  %cmp129 = icmp ne i32 %i79, %i80
  br i1 %cmp129, label %if.then131, label %if.end134

if.then131:                                       ; preds = %lor.lhs.false127, %if.else123
  %arraydecay132 = getelementptr inbounds [256 x i8], [256 x i8]* %output, i64 0, i64 0
  %call133 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.10.290, i64 0, i64 0), i8* %arraydecay132)
  br label %if.end134

if.end134:                                        ; preds = %if.then131, %lor.lhs.false127
  br label %if.end135

if.end135:                                        ; preds = %if.end134, %if.end122
  br label %if.end188

if.else136:                                       ; preds = %if.end68
  %i81 = load i32, i32* @xb_mode, align 4
  %tobool137 = icmp ne i32 %i81, 0
  br i1 %tobool137, label %if.then138, label %if.else150

if.then138:                                       ; preds = %if.else136
  %from139 = getelementptr inbounds %struct.move_s, %struct.move_s* %comp_move, i32 0, i32 0
  %i82 = load i32, i32* %from139, align 4
  %i83 = load i32, i32* getelementptr inbounds (%struct.move_s, %struct.move_s* @dummy, i32 0, i32 0), align 4
  %cmp140 = icmp ne i32 %i82, %i83
  br i1 %cmp140, label %if.then146, label %lor.lhs.false142

lor.lhs.false142:                                 ; preds = %if.then138
  %target143 = getelementptr inbounds %struct.move_s, %struct.move_s* %comp_move, i32 0, i32 1
  %i84 = load i32, i32* %target143, align 4
  %i85 = load i32, i32* getelementptr inbounds (%struct.move_s, %struct.move_s* @dummy, i32 0, i32 1), align 4
  %cmp144 = icmp ne i32 %i84, %i85
  br i1 %cmp144, label %if.then146, label %if.end149

if.then146:                                       ; preds = %lor.lhs.false142, %if.then138
  %arraydecay147 = getelementptr inbounds [256 x i8], [256 x i8]* %output, i64 0, i64 0
  %call148 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.9.289, i64 0, i64 0), i8* %arraydecay147)
  br label %if.end149

if.end149:                                        ; preds = %if.then146, %lor.lhs.false142
  br label %if.end162

if.else150:                                       ; preds = %if.else136
  %from151 = getelementptr inbounds %struct.move_s, %struct.move_s* %comp_move, i32 0, i32 0
  %i86 = load i32, i32* %from151, align 4
  %i87 = load i32, i32* getelementptr inbounds (%struct.move_s, %struct.move_s* @dummy, i32 0, i32 0), align 4
  %cmp152 = icmp ne i32 %i86, %i87
  br i1 %cmp152, label %if.then158, label %lor.lhs.false154

lor.lhs.false154:                                 ; preds = %if.else150
  %target155 = getelementptr inbounds %struct.move_s, %struct.move_s* %comp_move, i32 0, i32 1
  %i88 = load i32, i32* %target155, align 4
  %i89 = load i32, i32* getelementptr inbounds (%struct.move_s, %struct.move_s* @dummy, i32 0, i32 1), align 4
  %cmp156 = icmp ne i32 %i88, %i89
  br i1 %cmp156, label %if.then158, label %if.end161

if.then158:                                       ; preds = %lor.lhs.false154, %if.else150
  %arraydecay159 = getelementptr inbounds [256 x i8], [256 x i8]* %output, i64 0, i64 0
  %call160 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.10.290, i64 0, i64 0), i8* %arraydecay159)
  br label %if.end161

if.end161:                                        ; preds = %if.then158, %lor.lhs.false154
  br label %if.end162

if.end162:                                        ; preds = %if.end161, %if.end149
  %i90 = load i32, i32* @result, align 4
  %cmp163 = icmp eq i32 %i90, 2
  br i1 %cmp163, label %if.then165, label %if.else167

if.then165:                                       ; preds = %if.end162
  %call166 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.11.291, i64 0, i64 0))
  br label %if.end187

if.else167:                                       ; preds = %if.end162
  %i91 = load i32, i32* @result, align 4
  %cmp168 = icmp eq i32 %i91, 3
  br i1 %cmp168, label %if.then170, label %if.else172

if.then170:                                       ; preds = %if.else167
  %call171 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.12.292, i64 0, i64 0))
  br label %if.end186

if.else172:                                       ; preds = %if.else167
  %i92 = load i32, i32* @result, align 4
  %cmp173 = icmp eq i32 %i92, 4
  br i1 %cmp173, label %if.then175, label %if.else177

if.then175:                                       ; preds = %if.else172
  %call176 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.13.293, i64 0, i64 0))
  br label %if.end185

if.else177:                                       ; preds = %if.else172
  %i93 = load i32, i32* @result, align 4
  %cmp178 = icmp eq i32 %i93, 5
  br i1 %cmp178, label %if.then180, label %if.else182

if.then180:                                       ; preds = %if.else177
  %call181 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.14.294, i64 0, i64 0))
  br label %if.end184

if.else182:                                       ; preds = %if.else177
  %call183 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15.295, i64 0, i64 0))
  br label %if.end184

if.end184:                                        ; preds = %if.else182, %if.then180
  br label %if.end185

if.end185:                                        ; preds = %if.end184, %if.then175
  br label %if.end186

if.end186:                                        ; preds = %if.end185, %if.then170
  br label %if.end187

if.end187:                                        ; preds = %if.end186, %if.then165
  br label %if.end188

if.end188:                                        ; preds = %if.end187, %if.end135
  %automode.1 = phi i32 [ 0, %if.end187 ], [ %automode.0, %if.end135 ]
  br label %if.end215

if.else189:                                       ; preds = %land.lhs.true41, %land.lhs.true39, %land.lhs.true37, %land.lhs.true35, %lor.lhs.false33, %lor.lhs.false27
  %i94 = load i32, i32* @result, align 4
  %cmp190 = icmp eq i32 %i94, 2
  br i1 %cmp190, label %if.then192, label %if.else194

if.then192:                                       ; preds = %if.else189
  %call193 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.11.291, i64 0, i64 0))
  br label %if.end214

if.else194:                                       ; preds = %if.else189
  %i95 = load i32, i32* @result, align 4
  %cmp195 = icmp eq i32 %i95, 3
  br i1 %cmp195, label %if.then197, label %if.else199

if.then197:                                       ; preds = %if.else194
  %call198 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([19 x i8], [19 x i8]* @.str.12.292, i64 0, i64 0))
  br label %if.end213

if.else199:                                       ; preds = %if.else194
  %i96 = load i32, i32* @result, align 4
  %cmp200 = icmp eq i32 %i96, 4
  br i1 %cmp200, label %if.then202, label %if.else204

if.then202:                                       ; preds = %if.else199
  %call203 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.13.293, i64 0, i64 0))
  br label %if.end212

if.else204:                                       ; preds = %if.else199
  %i97 = load i32, i32* @result, align 4
  %cmp205 = icmp eq i32 %i97, 5
  br i1 %cmp205, label %if.then207, label %if.else209

if.then207:                                       ; preds = %if.else204
  %call208 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.14.294, i64 0, i64 0))
  br label %if.end211

if.else209:                                       ; preds = %if.else204
  %call210 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([16 x i8], [16 x i8]* @.str.15.295, i64 0, i64 0))
  br label %if.end211

if.end211:                                        ; preds = %if.else209, %if.then207
  br label %if.end212

if.end212:                                        ; preds = %if.end211, %if.then202
  br label %if.end213

if.end213:                                        ; preds = %if.end212, %if.then197
  br label %if.end214

if.end214:                                        ; preds = %if.end213, %if.then192
  br label %if.end215

if.end215:                                        ; preds = %if.end214, %if.end188
  %automode.2 = phi i32 [ %automode.1, %if.end188 ], [ 0, %if.end214 ]
  br label %if.end216

if.end216:                                        ; preds = %if.end215, %lor.lhs.false13
  %automode.3 = phi i32 [ %automode.2, %if.end215 ], [ %automode.0, %lor.lhs.false13 ]
  br label %if.end217

if.end217:                                        ; preds = %if.end216, %land.lhs.true9, %land.lhs.true7, %land.lhs.true5, %lor.lhs.false, %while.body
  %automode.4 = phi i32 [ %automode.0, %while.body ], [ %automode.0, %land.lhs.true5 ], [ %automode.0, %land.lhs.true7 ], [ %automode.0, %land.lhs.true9 ], [ %automode.3, %if.end216 ], [ %automode.0, %lor.lhs.false ]
  %i98 = load i32, i32* @xb_mode, align 4
  %tobool218 = icmp ne i32 %i98, 0
  br i1 %tobool218, label %if.else229, label %if.then219

if.then219:                                       ; preds = %if.end217
  %i99 = load i32, i32* %show_board, align 4
  %tobool220 = icmp ne i32 %i99, 0
  br i1 %tobool220, label %if.then221, label %if.end223

if.then221:                                       ; preds = %if.then219
  %call222 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.16.296, i64 0, i64 0))
  %i100 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %i101 = load i32, i32* @comp_color, align 4
  %sub = sub nsw i32 1, %i101
  call void @display_board(%struct._IO_FILE* %i100, i32 %sub)
  br label %if.end223

if.end223:                                        ; preds = %if.then221, %if.then219
  %tobool224 = icmp ne i32 %automode.4, 0
  br i1 %tobool224, label %if.end228, label %if.then225

if.then225:                                       ; preds = %if.end223
  %call226 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.17.297, i64 0, i64 0))
  %arraydecay227 = getelementptr inbounds [256 x i8], [256 x i8]* %input, i64 0, i64 0
  %i102 = load %struct._IO_FILE*, %struct._IO_FILE** @stdin, align 8
  call void @rinput(i8* %arraydecay227, i32 256, %struct._IO_FILE* %i102)
  br label %if.end228

if.end228:                                        ; preds = %if.then225, %if.end223
  br label %if.end253

if.else229:                                       ; preds = %if.end217
  %i103 = load i32, i32* @must_sit, align 4
  %tobool230 = icmp ne i32 %i103, 0
  br i1 %tobool230, label %land.lhs.true242, label %lor.lhs.false231

lor.lhs.false231:                                 ; preds = %if.else229
  %i104 = load i32, i32* @allow_pondering, align 4
  %tobool232 = icmp ne i32 %i104, 0
  br i1 %tobool232, label %land.lhs.true233, label %lor.lhs.false240

land.lhs.true233:                                 ; preds = %lor.lhs.false231
  %tobool234 = icmp ne i32 %is_edit_mode.0, 0
  br i1 %tobool234, label %lor.lhs.false240, label %land.lhs.true235

land.lhs.true235:                                 ; preds = %land.lhs.true233
  %tobool236 = icmp ne i32 %force_mode.0, 0
  br i1 %tobool236, label %lor.lhs.false240, label %land.lhs.true237

land.lhs.true237:                                 ; preds = %land.lhs.true235
  %i105 = load i32, i32* @move_number, align 4
  %cmp238 = icmp ne i32 %i105, 0
  br i1 %cmp238, label %land.lhs.true242, label %lor.lhs.false240

lor.lhs.false240:                                 ; preds = %land.lhs.true237, %land.lhs.true235, %land.lhs.true233, %lor.lhs.false231
  %i106 = load i32, i32* @is_analyzing, align 4
  %tobool241 = icmp ne i32 %i106, 0
  br i1 %tobool241, label %land.lhs.true242, label %if.end248

land.lhs.true242:                                 ; preds = %lor.lhs.false240, %land.lhs.true237, %if.else229
  %i107 = load i32, i32* @result, align 4
  %tobool243 = icmp ne i32 %i107, 0
  br i1 %tobool243, label %if.end248, label %land.lhs.true244

land.lhs.true244:                                 ; preds = %land.lhs.true242
  %tobool245 = icmp ne i32 %automode.4, 0
  br i1 %tobool245, label %if.end248, label %if.then246

if.then246:                                       ; preds = %land.lhs.true244
  store i32 1, i32* @is_pondering, align 4
  call void @think(%struct.move_s* sret(%struct.move_s) align 4 %tmp247)
  store i32 0, i32* @is_pondering, align 4
  store i32 0, i32* @ply, align 4
  br label %if.end248

if.end248:                                        ; preds = %if.then246, %land.lhs.true244, %land.lhs.true242, %lor.lhs.false240
  %tobool249 = icmp ne i32 %automode.4, 0
  br i1 %tobool249, label %if.end252, label %if.then250

if.then250:                                       ; preds = %if.end248
  %arraydecay251 = getelementptr inbounds [256 x i8], [256 x i8]* %input, i64 0, i64 0
  %i108 = load %struct._IO_FILE*, %struct._IO_FILE** @stdin, align 8
  call void @rinput(i8* %arraydecay251, i32 256, %struct._IO_FILE* %i108)
  br label %if.end252

if.end252:                                        ; preds = %if.then250, %if.end248
  br label %if.end253

if.end253:                                        ; preds = %if.end252, %if.end228
  %tobool254 = icmp ne i32 %is_edit_mode.0, 0
  br i1 %tobool254, label %if.else294, label %land.lhs.true255

land.lhs.true255:                                 ; preds = %if.end253
  %arrayidx256 = getelementptr inbounds [256 x i8], [256 x i8]* %input, i64 0, i64 0
  %call257 = call i32 @is_move(i8* %arrayidx256)
  %tobool258 = icmp ne i32 %call257, 0
  br i1 %tobool258, label %if.then259, label %if.else294

if.then259:                                       ; preds = %land.lhs.true255
  %arraydecay260 = getelementptr inbounds [256 x i8], [256 x i8]* %input, i64 0, i64 0
  %call261 = call i32 @verify_coord(i8* %arraydecay260, %struct.move_s* %move)
  %tobool262 = icmp ne i32 %call261, 0
  br i1 %tobool262, label %if.then263, label %if.else290

if.then263:                                       ; preds = %if.then259
  %i109 = load i32, i32* @move_number, align 4
  %idxprom264 = sext i32 %i109 to i64
  %arrayidx265 = getelementptr inbounds [600 x %struct.move_s], [600 x %struct.move_s]* %game_history, i64 0, i64 %idxprom264
  %i110 = bitcast %struct.move_s* %arrayidx265 to i8*
  %i111 = bitcast %struct.move_s* %move to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %i110, i8* align 4 %i111, i64 24, i1 false)
  %i112 = load i32, i32* @hash, align 4
  %i113 = load i32, i32* @move_number, align 4
  %idxprom266 = sext i32 %i113 to i64
  %arrayidx267 = getelementptr inbounds [600 x i32], [600 x i32]* @hash_history, i64 0, i64 %idxprom266
  store i32 %i112, i32* %arrayidx267, align 4
  call void @make(%struct.move_s* %move, i32 0)
  %i114 = load i32, i32* @move_number, align 4
  %inc268 = add nsw i32 %i114, 1
  store i32 %inc268, i32* @move_number, align 4
  %idxprom269 = sext i32 %i114 to i64
  %arrayidx270 = getelementptr inbounds [600 x %struct.move_x], [600 x %struct.move_x]* %game_history_x, i64 0, i64 %idxprom269
  %i115 = bitcast %struct.move_x* %arrayidx270 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %i115, i8* align 16 bitcast ([300 x %struct.move_x]* @path_x to i8*), i64 16, i1 false)
  call void @reset_piece_square()
  %i116 = load i32, i32* @root_to_move, align 4
  %xor271 = xor i32 %i116, 1
  store i32 %xor271, i32* @root_to_move, align 4
  %i117 = load i32, i32* @book_ply, align 4
  %cmp272 = icmp slt i32 %i117, 40
  br i1 %cmp272, label %if.then274, label %if.end283

if.then274:                                       ; preds = %if.then263
  %i118 = load i32, i32* @book_ply, align 4
  %tobool275 = icmp ne i32 %i118, 0
  br i1 %tobool275, label %if.else279, label %if.then276

if.then276:                                       ; preds = %if.then274
  %arraydecay277 = getelementptr inbounds [256 x i8], [256 x i8]* %input, i64 0, i64 0
  %call278 = call i8* @strcpy(i8* getelementptr inbounds ([256 x i8], [256 x i8]* @opening_history, i64 0, i64 0), i8* %arraydecay277) #8
  br label %if.end282

if.else279:                                       ; preds = %if.then274
  %arraydecay280 = getelementptr inbounds [256 x i8], [256 x i8]* %input, i64 0, i64 0
  %call281 = call i8* @strcat(i8* getelementptr inbounds ([256 x i8], [256 x i8]* @opening_history, i64 0, i64 0), i8* %arraydecay280) #8
  br label %if.end282

if.end282:                                        ; preds = %if.else279, %if.then276
  br label %if.end283

if.end283:                                        ; preds = %if.end282, %if.then263
  %i119 = load i32, i32* @book_ply, align 4
  %inc284 = add nsw i32 %i119, 1
  store i32 %inc284, i32* @book_ply, align 4
  %i120 = load i32, i32* %show_board, align 4
  %tobool285 = icmp ne i32 %i120, 0
  br i1 %tobool285, label %if.then286, label %if.end289

if.then286:                                       ; preds = %if.end283
  %call287 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.16.296, i64 0, i64 0))
  %i121 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  %i122 = load i32, i32* @comp_color, align 4
  %sub288 = sub nsw i32 1, %i122
  call void @display_board(%struct._IO_FILE* %i121, i32 %sub288)
  br label %if.end289

if.end289:                                        ; preds = %if.then286, %if.end283
  br label %if.end293

if.else290:                                       ; preds = %if.then259
  %arraydecay291 = getelementptr inbounds [256 x i8], [256 x i8]* %input, i64 0, i64 0
  %call292 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.18.298, i64 0, i64 0), i8* %arraydecay291)
  br label %if.end293

if.end293:                                        ; preds = %if.else290, %if.end289
  br label %if.end858

if.else294:                                       ; preds = %land.lhs.true255, %if.end253
  %arraydecay295 = getelementptr inbounds [256 x i8], [256 x i8]* %input, i64 0, i64 0
  %call296 = call i8* @strstr(i8* %arraydecay295, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.19.299, i64 0, i64 0)) #11
  %tobool297 = icmp ne i8* %call296, null
  br i1 %tobool297, label %if.end304, label %if.then298

if.then298:                                       ; preds = %if.else294
  %arraydecay299 = getelementptr inbounds [256 x i8], [256 x i8]* %input, i64 0, i64 0
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then298
  %p.0 = phi i8* [ %arraydecay299, %if.then298 ], [ %incdec.ptr, %for.inc ]
  %i123 = load i8, i8* %p.0, align 1
  %tobool300 = icmp ne i8 %i123, 0
  br i1 %tobool300, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %i124 = load i8, i8* %p.0, align 1
  %conv301 = sext i8 %i124 to i32
  %call302 = call i32 @tolower(i32 %conv301) #11
  %conv303 = trunc i32 %call302 to i8
  store i8 %conv303, i8* %p.0, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %incdec.ptr = getelementptr inbounds i8, i8* %p.0, i32 1
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %if.end304

if.end304:                                        ; preds = %for.end, %if.else294
  %arraydecay305 = getelementptr inbounds [256 x i8], [256 x i8]* %input, i64 0, i64 0
  %call306 = call i32 @strcmp(i8* %arraydecay305, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.20.300, i64 0, i64 0)) #11
  %tobool307 = icmp ne i32 %call306, 0
  br i1 %tobool307, label %if.else309, label %if.then308

if.then308:                                       ; preds = %if.end304
  call void @free_hash()
  call void @free_ecache()
  call void @exit(i32 0) #9
  unreachable

if.else309:                                       ; preds = %if.end304
  %arraydecay310 = getelementptr inbounds [256 x i8], [256 x i8]* %input, i64 0, i64 0
  %call311 = call i32 @strcmp(i8* %arraydecay310, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.21.301, i64 0, i64 0)) #11
  %tobool312 = icmp ne i32 %call311, 0
  br i1 %tobool312, label %if.else318, label %if.then313

if.then313:                                       ; preds = %if.else309
  %i125 = load i32, i32* @is_analyzing, align 4
  %tobool314 = icmp ne i32 %i125, 0
  br i1 %tobool314, label %if.then315, label %if.else316

if.then315:                                       ; preds = %if.then313
  store i32 0, i32* @is_analyzing, align 4
  store i32 0, i32* @is_pondering, align 4
  store i32 0, i32* @time_for_move, align 4
  br label %if.end317

if.else316:                                       ; preds = %if.then313
  call void @free_hash()
  call void @free_ecache()
  call void @exit(i32 0) #9
  unreachable

if.end317:                                        ; preds = %if.then315
  br label %if.end856

if.else318:                                       ; preds = %if.else309
  %arraydecay319 = getelementptr inbounds [256 x i8], [256 x i8]* %input, i64 0, i64 0
  %call320 = call i32 @strcmp(i8* %arraydecay319, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.22.302, i64 0, i64 0)) #11
  %tobool321 = icmp ne i32 %call320, 0
  br i1 %tobool321, label %lor.lhs.false322, label %if.then326

lor.lhs.false322:                                 ; preds = %if.else318
  %arraydecay323 = getelementptr inbounds [256 x i8], [256 x i8]* %input, i64 0, i64 0
  %call324 = call i32 @strcmp(i8* %arraydecay323, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.23.303, i64 0, i64 0)) #11
  %tobool325 = icmp ne i32 %call324, 0
  br i1 %tobool325, label %if.else327, label %if.then326

if.then326:                                       ; preds = %lor.lhs.false322, %if.else318
  call void @toggle_bool(i32* %show_board)
  br label %if.end855

if.else327:                                       ; preds = %lor.lhs.false322
  %arraydecay328 = getelementptr inbounds [256 x i8], [256 x i8]* %input, i64 0, i64 0
  %call329 = call i32 @strncmp(i8* %arraydecay328, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.24.304, i64 0, i64 0), i64 5) #11
  %tobool330 = icmp ne i32 %call329, 0
  br i1 %tobool330, label %if.else342, label %if.then331

if.then331:                                       ; preds = %if.else327
  %arraydecay332 = getelementptr inbounds [256 x i8], [256 x i8]* %input, i64 0, i64 0
  %add.ptr = getelementptr inbounds i8, i8* %arraydecay332, i64 6
  %call333 = call i32 (i8*, i8*, ...) @__isoc99_sscanf(i8* %add.ptr, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.25.305, i64 0, i64 0), i32* %depth) #8
  store i32 0, i32* @raw_nodes, align 4
  %call334 = call i64 @rtime()
  %i126 = load i32, i32* %depth, align 4
  call void @perft(i32 %i126)
  %i127 = load i32, i32* %depth, align 4
  %i128 = load i32, i32* @raw_nodes, align 4
  %call335 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.26.306, i64 0, i64 0), i32 %i127, i32 %i128)
  %call336 = call i64 @rtime()
  %call337 = call i32 @rdifftime(i64 %call336, i64 %call334)
  %conv338 = sitofp i32 %call337 to float
  %conv339 = fpext float %conv338 to double
  %div340 = fdiv double %conv339, 1.000000e+02
  %call341 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([13 x i8], [13 x i8]* @.str.27.307, i64 0, i64 0), double %div340)
  br label %if.end854

if.else342:                                       ; preds = %if.else327
  %arraydecay343 = getelementptr inbounds [256 x i8], [256 x i8]* %input, i64 0, i64 0
  %call344 = call i32 @strcmp(i8* %arraydecay343, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.28.308, i64 0, i64 0)) #11
  %tobool345 = icmp ne i32 %call344, 0
  br i1 %tobool345, label %if.else360, label %if.then346

if.then346:                                       ; preds = %if.else342
  %i129 = load i32, i32* @xb_mode, align 4
  %tobool347 = icmp ne i32 %i129, 0
  br i1 %tobool347, label %if.then348, label %if.end350

if.then348:                                       ; preds = %if.then346
  %call349 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.29.309, i64 0, i64 0), i8* getelementptr inbounds ([30 x i8], [30 x i8]* @setcode, i64 0, i64 0))
  br label %if.end350

if.end350:                                        ; preds = %if.then348, %if.then346
  %i130 = load i32, i32* @is_analyzing, align 4
  %tobool351 = icmp ne i32 %i130, 0
  br i1 %tobool351, label %if.else358, label %if.then352

if.then352:                                       ; preds = %if.end350
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 bitcast ([14 x i32]* @material to i8*), i8* align 16 bitcast ([14 x i32]* @std_material to i8*), i64 56, i1 false)
  store i32 2, i32* @Variant, align 4
  call void @init_game()
  call void @initialize_hash()
  %tobool353 = icmp ne i32 %braindeadinterface.0, 0
  br i1 %tobool353, label %if.end355, label %if.then354

if.then354:                                       ; preds = %if.then352
  call void @clear_tt()
  call void @reset_ecache()
  br label %if.end355

if.end355:                                        ; preds = %if.then354, %if.then352
  store i32 0, i32* @must_sit, align 4
  store i32 0, i32* @go_fast, align 4
  store i32 0, i32* @piecedead, align 4
  store i32 0, i32* @partnerdead, align 4
  store i32 0, i32* @kibitzed, align 4
  store i32 0, i32* @fixed_time, align 4
  store i32 0, i32* @root_to_move, align 4
  store i32 0, i32* @comp_color, align 4
  store i32 0, i32* @move_number, align 4
  %i131 = load i32, i32* @move_number, align 4
  %idxprom356 = sext i32 %i131 to i64
  %arrayidx357 = getelementptr inbounds [600 x i32], [600 x i32]* @hash_history, i64 0, i64 %idxprom356
  store i32 0, i32* %arrayidx357, align 4
  store i32 0, i32* @bookidx, align 4
  store i32 2000, i32* @opp_rating, align 4
  store i32 2000, i32* @my_rating, align 4
  store i32 0, i32* @must_go, align 4
  store i32 1, i32* @tradefreely, align 4
  call void @CheckBadFlow(i32 1)
  call void @ResetHandValue()
  br label %if.end359

if.else358:                                       ; preds = %if.end350
  call void @init_game()
  store i32 0, i32* @move_number, align 4
  br label %if.end359

if.end359:                                        ; preds = %if.else358, %if.end355
  %force_mode.1 = phi i32 [ %force_mode.0, %if.else358 ], [ 0, %if.end355 ]
  %automode.5 = phi i32 [ %automode.4, %if.else358 ], [ 0, %if.end355 ]
  br label %if.end853

if.else360:                                       ; preds = %if.else342
  %arraydecay361 = getelementptr inbounds [256 x i8], [256 x i8]* %input, i64 0, i64 0
  %call362 = call i32 @strcmp(i8* %arraydecay361, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.30.310, i64 0, i64 0)) #11
  %tobool363 = icmp ne i32 %call362, 0
  br i1 %tobool363, label %if.else368, label %if.then364

if.then364:                                       ; preds = %if.else360
  store i32 1, i32* @xb_mode, align 4
  call void @toggle_bool(i32* %show_board)
  %call365 = call void (i32)* @signal(i32 2, void (i32)* inttoptr (i64 1 to void (i32)*)) #8
  %call366 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.16.296, i64 0, i64 0))
  %call367 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.31.311, i64 0, i64 0))
  call void @BegForPartner()
  br label %if.end852

if.else368:                                       ; preds = %if.else360
  %arraydecay369 = getelementptr inbounds [256 x i8], [256 x i8]* %input, i64 0, i64 0
  %call370 = call i32 @strcmp(i8* %arraydecay369, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.32.312, i64 0, i64 0)) #11
  %tobool371 = icmp ne i32 %call370, 0
  br i1 %tobool371, label %if.else381, label %if.then372

if.then372:                                       ; preds = %if.else368
  %i132 = load i32, i32* @nodes, align 4
  %i133 = load i32, i32* @qnodes, align 4
  %conv373 = sitofp i32 %i133 to float
  %i134 = load i32, i32* @nodes, align 4
  %conv374 = sitofp i32 %i134 to float
  %div375 = fdiv float %conv373, %conv374
  %conv376 = fpext float %div375 to double
  %mul377 = fmul double %conv376, 1.000000e+02
  %conv378 = fptrunc double %mul377 to float
  %conv379 = fpext float %conv378 to double
  %call380 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.33.313, i64 0, i64 0), i32 %i132, double %conv379)
  br label %if.end851

if.else381:                                       ; preds = %if.else368
  %arraydecay382 = getelementptr inbounds [256 x i8], [256 x i8]* %input, i64 0, i64 0
  %call383 = call i32 @strcmp(i8* %arraydecay382, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.34.314, i64 0, i64 0)) #11
  %tobool384 = icmp ne i32 %call383, 0
  br i1 %tobool384, label %if.else389, label %if.then385

if.then385:                                       ; preds = %if.else381
  call void @toggle_bool(i32* @post)
  %i135 = load i32, i32* @xb_mode, align 4
  %tobool386 = icmp ne i32 %i135, 0
  br i1 %tobool386, label %if.then387, label %if.end388

if.then387:                                       ; preds = %if.then385
  store i32 1, i32* @post, align 4
  br label %if.end388

if.end388:                                        ; preds = %if.then387, %if.then385
  br label %if.end850

if.else389:                                       ; preds = %if.else381
  %arraydecay390 = getelementptr inbounds [256 x i8], [256 x i8]* %input, i64 0, i64 0
  %call391 = call i32 @strcmp(i8* %arraydecay390, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.35.315, i64 0, i64 0)) #11
  %tobool392 = icmp ne i32 %call391, 0
  br i1 %tobool392, label %if.else394, label %if.then393

if.then393:                                       ; preds = %if.else389
  store i32 0, i32* @post, align 4
  br label %if.end849

if.else394:                                       ; preds = %if.else389
  %arraydecay395 = getelementptr inbounds [256 x i8], [256 x i8]* %input, i64 0, i64 0
  %call396 = call i32 @strcmp(i8* %arraydecay395, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.36.316, i64 0, i64 0)) #11
  %tobool397 = icmp ne i32 %call396, 0
  br i1 %tobool397, label %if.else399, label %if.then398

if.then398:                                       ; preds = %if.else394
  br label %while.body

if.else399:                                       ; preds = %if.else394
  %arraydecay400 = getelementptr inbounds [256 x i8], [256 x i8]* %input, i64 0, i64 0
  %call401 = call i32 @strcmp(i8* %arraydecay400, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.37.317, i64 0, i64 0)) #11
  %tobool402 = icmp ne i32 %call401, 0
  br i1 %tobool402, label %if.else404, label %if.then403

if.then403:                                       ; preds = %if.else399
  store i32 1, i32* @allow_pondering, align 4
  br label %while.body

if.else404:                                       ; preds = %if.else399
  %arraydecay405 = getelementptr inbounds [256 x i8], [256 x i8]* %input, i64 0, i64 0
  %call406 = call i32 @strcmp(i8* %arraydecay405, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.38.318, i64 0, i64 0)) #11
  %tobool407 = icmp ne i32 %call406, 0
  br i1 %tobool407, label %if.else409, label %if.then408

if.then408:                                       ; preds = %if.else404
  store i32 0, i32* @allow_pondering, align 4
  br label %while.body

if.else409:                                       ; preds = %if.else404
  %arraydecay410 = getelementptr inbounds [256 x i8], [256 x i8]* %input, i64 0, i64 0
  %call411 = call i32 @strcmp(i8* %arraydecay410, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.39.319, i64 0, i64 0)) #11
  %tobool412 = icmp ne i32 %call411, 0
  br i1 %tobool412, label %if.else414, label %if.then413

if.then413:                                       ; preds = %if.else409
  br label %while.body

if.else414:                                       ; preds = %if.else409
  %arraydecay415 = getelementptr inbounds [256 x i8], [256 x i8]* %input, i64 0, i64 0
  %call416 = call i32 @strcmp(i8* %arraydecay415, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.40.320, i64 0, i64 0)) #11
  %tobool417 = icmp ne i32 %call416, 0
  br i1 %tobool417, label %if.else419, label %if.then418

if.then418:                                       ; preds = %if.else414
  store i32 1, i32* @white_to_move, align 4
  store i32 0, i32* @root_to_move, align 4
  store i32 0, i32* @comp_color, align 4
  br label %if.end844

if.else419:                                       ; preds = %if.else414
  %arraydecay420 = getelementptr inbounds [256 x i8], [256 x i8]* %input, i64 0, i64 0
  %call421 = call i32 @strcmp(i8* %arraydecay420, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.41.321, i64 0, i64 0)) #11
  %tobool422 = icmp ne i32 %call421, 0
  br i1 %tobool422, label %if.else424, label %if.then423

if.then423:                                       ; preds = %if.else419
  store i32 0, i32* @white_to_move, align 4
  store i32 1, i32* @root_to_move, align 4
  store i32 1, i32* @comp_color, align 4
  br label %if.end843

if.else424:                                       ; preds = %if.else419
  %arraydecay425 = getelementptr inbounds [256 x i8], [256 x i8]* %input, i64 0, i64 0
  %call426 = call i32 @strcmp(i8* %arraydecay425, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.42.322, i64 0, i64 0)) #11
  %tobool427 = icmp ne i32 %call426, 0
  br i1 %tobool427, label %if.else429, label %if.then428

if.then428:                                       ; preds = %if.else424
  br label %if.end842

if.else429:                                       ; preds = %if.else424
  %arraydecay430 = getelementptr inbounds [256 x i8], [256 x i8]* %input, i64 0, i64 0
  %call431 = call i32 @strcmp(i8* %arraydecay430, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.43.323, i64 0, i64 0)) #11
  %tobool432 = icmp ne i32 %call431, 0
  br i1 %tobool432, label %if.else436, label %if.then433

if.then433:                                       ; preds = %if.else429
  call void @check_phase()
  %call434 = call i32 @eval(i32 -1000000, i32 1000000)
  %call435 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.44.324, i64 0, i64 0), i32 %call434)
  br label %if.end841

if.else436:                                       ; preds = %if.else429
  %arraydecay437 = getelementptr inbounds [256 x i8], [256 x i8]* %input, i64 0, i64 0
  %call438 = call i32 @strcmp(i8* %arraydecay437, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.45.325, i64 0, i64 0)) #11
  %tobool439 = icmp ne i32 %call438, 0
  br i1 %tobool439, label %if.else441, label %if.then440

if.then440:                                       ; preds = %if.else436
  %i136 = load i32, i32* @white_to_move, align 4
  store i32 %i136, i32* @comp_color, align 4
  br label %if.end840

if.else441:                                       ; preds = %if.else436
  %arraydecay442 = getelementptr inbounds [256 x i8], [256 x i8]* %input, i64 0, i64 0
  %call443 = call i32 @strncmp(i8* %arraydecay442, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.46.326, i64 0, i64 0), i64 4) #11
  %tobool444 = icmp ne i32 %call443, 0
  br i1 %tobool444, label %if.else449, label %if.then445

if.then445:                                       ; preds = %if.else441
  %arraydecay446 = getelementptr inbounds [256 x i8], [256 x i8]* %input, i64 0, i64 0
  %add.ptr447 = getelementptr inbounds i8, i8* %arraydecay446, i64 5
  %call448 = call i32 (i8*, i8*, ...) @__isoc99_sscanf(i8* %add.ptr447, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.47.327, i64 0, i64 0), i32* @time_left) #8
  br label %if.end839

if.else449:                                       ; preds = %if.else441
  %arraydecay450 = getelementptr inbounds [256 x i8], [256 x i8]* %input, i64 0, i64 0
  %call451 = call i32 @strncmp(i8* %arraydecay450, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.48.328, i64 0, i64 0), i64 4) #11
  %tobool452 = icmp ne i32 %call451, 0
  br i1 %tobool452, label %if.else457, label %if.then453

if.then453:                                       ; preds = %if.else449
  %arraydecay454 = getelementptr inbounds [256 x i8], [256 x i8]* %input, i64 0, i64 0
  %add.ptr455 = getelementptr inbounds i8, i8* %arraydecay454, i64 5
  %call456 = call i32 (i8*, i8*, ...) @__isoc99_sscanf(i8* %add.ptr455, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.47.327, i64 0, i64 0), i32* @opp_time) #8
  br label %if.end838

if.else457:                                       ; preds = %if.else449
  %arraydecay458 = getelementptr inbounds [256 x i8], [256 x i8]* %input, i64 0, i64 0
  %call459 = call i32 @strncmp(i8* %arraydecay458, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.49.329, i64 0, i64 0), i64 5) #11
  %tobool460 = icmp ne i32 %call459, 0
  br i1 %tobool460, label %if.else479, label %if.then461

if.then461:                                       ; preds = %if.else457
  %arraydecay462 = getelementptr inbounds [256 x i8], [256 x i8]* %input, i64 0, i64 0
  %add.ptr463 = getelementptr inbounds i8, i8* %arraydecay462, i64 6
  %call464 = call i8* @strstr(i8* %add.ptr463, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.50.330, i64 0, i64 0)) #11
  %tobool465 = icmp ne i8* %call464, null
  br i1 %tobool465, label %if.then466, label %if.else473

if.then466:                                       ; preds = %if.then461
  %arraydecay467 = getelementptr inbounds [256 x i8], [256 x i8]* %input, i64 0, i64 0
  %add.ptr468 = getelementptr inbounds i8, i8* %arraydecay467, i64 6
  %call469 = call i32 (i8*, i8*, ...) @__isoc99_sscanf(i8* %add.ptr468, i8* getelementptr inbounds ([12 x i8], [12 x i8]* @.str.51.331, i64 0, i64 0), i32* @moves_to_tc, i32* @min_per_game, i32* @sec_per_game, i32* @inc) #8
  %i137 = load i32, i32* @min_per_game, align 4
  %mul470 = mul nsw i32 %i137, 6000
  %i138 = load i32, i32* @sec_per_game, align 4
  %mul471 = mul nsw i32 %i138, 100
  %add472 = add nsw i32 %mul470, %mul471
  store i32 %add472, i32* @time_left, align 4
  %i139 = load i32, i32* @time_left, align 4
  store i32 %i139, i32* @opp_time, align 4
  br label %if.end478

if.else473:                                       ; preds = %if.then461
  %arraydecay474 = getelementptr inbounds [256 x i8], [256 x i8]* %input, i64 0, i64 0
  %add.ptr475 = getelementptr inbounds i8, i8* %arraydecay474, i64 6
  %call476 = call i32 (i8*, i8*, ...) @__isoc99_sscanf(i8* %add.ptr475, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.52.332, i64 0, i64 0), i32* @moves_to_tc, i32* @min_per_game, i32* @inc) #8
  %i140 = load i32, i32* @min_per_game, align 4
  %mul477 = mul nsw i32 %i140, 6000
  store i32 %mul477, i32* @time_left, align 4
  %i141 = load i32, i32* @time_left, align 4
  store i32 %i141, i32* @opp_time, align 4
  br label %if.end478

if.end478:                                        ; preds = %if.else473, %if.then466
  store i32 0, i32* @fixed_time, align 4
  store i32 0, i32* @time_cushion, align 4
  br label %if.end837

if.else479:                                       ; preds = %if.else457
  %arraydecay480 = getelementptr inbounds [256 x i8], [256 x i8]* %input, i64 0, i64 0
  %call481 = call i32 @strncmp(i8* %arraydecay480, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.53.333, i64 0, i64 0), i64 6) #11
  %tobool482 = icmp ne i32 %call481, 0
  br i1 %tobool482, label %if.else495, label %if.then483

if.then483:                                       ; preds = %if.else479
  %arraydecay484 = getelementptr inbounds [256 x i8], [256 x i8]* %input, i64 0, i64 0
  %add.ptr485 = getelementptr inbounds i8, i8* %arraydecay484, i64 7
  %call486 = call i32 (i8*, i8*, ...) @__isoc99_sscanf(i8* %add.ptr485, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.54.334, i64 0, i64 0), i32* @my_rating, i32* @opp_rating) #8
  %i142 = load i32, i32* @my_rating, align 4
  %cmp487 = icmp eq i32 %i142, 0
  br i1 %cmp487, label %if.then489, label %if.end490

if.then489:                                       ; preds = %if.then483
  store i32 2000, i32* @my_rating, align 4
  br label %if.end490

if.end490:                                        ; preds = %if.then489, %if.then483
  %i143 = load i32, i32* @opp_rating, align 4
  %cmp491 = icmp eq i32 %i143, 0
  br i1 %cmp491, label %if.then493, label %if.end494

if.then493:                                       ; preds = %if.end490
  store i32 2000, i32* @opp_rating, align 4
  br label %if.end494

if.end494:                                        ; preds = %if.then493, %if.end490
  br label %if.end836

if.else495:                                       ; preds = %if.else479
  %arraydecay496 = getelementptr inbounds [256 x i8], [256 x i8]* %input, i64 0, i64 0
  %call497 = call i32 @strncmp(i8* %arraydecay496, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.55.335, i64 0, i64 0), i64 7) #11
  %tobool498 = icmp ne i32 %call497, 0
  br i1 %tobool498, label %if.else501, label %if.then499

if.then499:                                       ; preds = %if.else495
  %arraydecay500 = getelementptr inbounds [256 x i8], [256 x i8]* %input, i64 0, i64 0
  call void @ProcessHoldings(i8* %arraydecay500)
  br label %if.end835

if.else501:                                       ; preds = %if.else495
  %arraydecay502 = getelementptr inbounds [256 x i8], [256 x i8]* %input, i64 0, i64 0
  %call503 = call i32 @strncmp(i8* %arraydecay502, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.56.336, i64 0, i64 0), i64 7) #11
  %tobool504 = icmp ne i32 %call503, 0
  br i1 %tobool504, label %if.else541, label %if.then505

if.then505:                                       ; preds = %if.else501
  %arraydecay506 = getelementptr inbounds [256 x i8], [256 x i8]* %input, i64 0, i64 0
  %call507 = call i8* @strstr(i8* %arraydecay506, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.57.337, i64 0, i64 0)) #11
  %tobool508 = icmp ne i8* %call507, null
  br i1 %tobool508, label %if.then509, label %if.else510

if.then509:                                       ; preds = %if.then505
  store i32 2, i32* @Variant, align 4
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 bitcast ([14 x i32]* @material to i8*), i8* align 16 bitcast ([14 x i32]* @std_material to i8*), i64 56, i1 false)
  br label %if.end540

if.else510:                                       ; preds = %if.then505
  %arraydecay511 = getelementptr inbounds [256 x i8], [256 x i8]* %input, i64 0, i64 0
  %call512 = call i8* @strstr(i8* %arraydecay511, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.58.338, i64 0, i64 0)) #11
  %tobool513 = icmp ne i8* %call512, null
  br i1 %tobool513, label %if.then514, label %if.else515

if.then514:                                       ; preds = %if.else510
  store i32 0, i32* @Variant, align 4
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 bitcast ([14 x i32]* @material to i8*), i8* align 16 bitcast ([14 x i32]* @zh_material to i8*), i64 56, i1 false)
  br label %if.end539

if.else515:                                       ; preds = %if.else510
  %arraydecay516 = getelementptr inbounds [256 x i8], [256 x i8]* %input, i64 0, i64 0
  %call517 = call i8* @strstr(i8* %arraydecay516, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.59.339, i64 0, i64 0)) #11
  %tobool518 = icmp ne i8* %call517, null
  br i1 %tobool518, label %if.then519, label %if.else520

if.then519:                                       ; preds = %if.else515
  store i32 1, i32* @Variant, align 4
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 bitcast ([14 x i32]* @material to i8*), i8* align 16 bitcast ([14 x i32]* @zh_material to i8*), i64 56, i1 false)
  br label %if.end538

if.else520:                                       ; preds = %if.else515
  %arraydecay521 = getelementptr inbounds [256 x i8], [256 x i8]* %input, i64 0, i64 0
  %call522 = call i8* @strstr(i8* %arraydecay521, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.60.340, i64 0, i64 0)) #11
  %tobool523 = icmp ne i8* %call522, null
  br i1 %tobool523, label %if.then524, label %if.else525

if.then524:                                       ; preds = %if.else520
  store i32 3, i32* @Variant, align 4
  store i32 0, i32* @Giveaway, align 4
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 bitcast ([14 x i32]* @material to i8*), i8* align 16 bitcast ([14 x i32]* @suicide_material to i8*), i64 56, i1 false)
  br label %if.end537

if.else525:                                       ; preds = %if.else520
  %arraydecay526 = getelementptr inbounds [256 x i8], [256 x i8]* %input, i64 0, i64 0
  %call527 = call i8* @strstr(i8* %arraydecay526, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.61.341, i64 0, i64 0)) #11
  %tobool528 = icmp ne i8* %call527, null
  br i1 %tobool528, label %if.then529, label %if.else530

if.then529:                                       ; preds = %if.else525
  store i32 3, i32* @Variant, align 4
  store i32 1, i32* @Giveaway, align 4
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 bitcast ([14 x i32]* @material to i8*), i8* align 16 bitcast ([14 x i32]* @suicide_material to i8*), i64 56, i1 false)
  br label %if.end536

if.else530:                                       ; preds = %if.else525
  %arraydecay531 = getelementptr inbounds [256 x i8], [256 x i8]* %input, i64 0, i64 0
  %call532 = call i8* @strstr(i8* %arraydecay531, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.62.342, i64 0, i64 0)) #11
  %tobool533 = icmp ne i8* %call532, null
  br i1 %tobool533, label %if.then534, label %if.end535

if.then534:                                       ; preds = %if.else530
  store i32 4, i32* @Variant, align 4
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 bitcast ([14 x i32]* @material to i8*), i8* align 16 bitcast ([14 x i32]* @losers_material to i8*), i64 56, i1 false)
  br label %if.end535

if.end535:                                        ; preds = %if.then534, %if.else530
  br label %if.end536

if.end536:                                        ; preds = %if.end535, %if.then529
  br label %if.end537

if.end537:                                        ; preds = %if.end536, %if.then524
  br label %if.end538

if.end538:                                        ; preds = %if.end537, %if.then519
  br label %if.end539

if.end539:                                        ; preds = %if.end538, %if.then514
  br label %if.end540

if.end540:                                        ; preds = %if.end539, %if.then509
  call void @initialize_hash()
  call void @clear_tt()
  call void @reset_ecache()
  br label %if.end834

if.else541:                                       ; preds = %if.else501
  %arraydecay542 = getelementptr inbounds [256 x i8], [256 x i8]* %input, i64 0, i64 0
  %call543 = call i32 @strncmp(i8* %arraydecay542, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.63.343, i64 0, i64 0), i64 7) #11
  %tobool544 = icmp ne i32 %call543, 0
  br i1 %tobool544, label %if.else547, label %if.then545

if.then545:                                       ; preds = %if.else541
  store i32 1, i32* @is_analyzing, align 4
  store i32 1, i32* @is_pondering, align 4
  call void @think(%struct.move_s* sret(%struct.move_s) align 4 %tmp546)
  store i32 0, i32* @ply, align 4
  br label %if.end833

if.else547:                                       ; preds = %if.else541
  %arraydecay548 = getelementptr inbounds [256 x i8], [256 x i8]* %input, i64 0, i64 0
  %call549 = call i32 @strncmp(i8* %arraydecay548, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.64.344, i64 0, i64 0), i64 4) #11
  %tobool550 = icmp ne i32 %call549, 0
  br i1 %tobool550, label %if.else563, label %if.then551

if.then551:                                       ; preds = %if.else547
  %i144 = load i32, i32* @move_number, align 4
  %call552 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.65.345, i64 0, i64 0), i32 %i144)
  %i145 = load i32, i32* @move_number, align 4
  %cmp553 = icmp sgt i32 %i145, 0
  br i1 %cmp553, label %if.then555, label %if.end562

if.then555:                                       ; preds = %if.then551
  %i146 = load i32, i32* @move_number, align 4
  %dec556 = add nsw i32 %i146, -1
  store i32 %dec556, i32* @move_number, align 4
  %idxprom557 = sext i32 %dec556 to i64
  %arrayidx558 = getelementptr inbounds [600 x %struct.move_x], [600 x %struct.move_x]* %game_history_x, i64 0, i64 %idxprom557
  %i147 = bitcast %struct.move_x* %arrayidx558 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 bitcast ([300 x %struct.move_x]* @path_x to i8*), i8* align 16 %i147, i64 16, i1 false)
  %i148 = load i32, i32* @move_number, align 4
  %idxprom559 = sext i32 %i148 to i64
  %arrayidx560 = getelementptr inbounds [600 x %struct.move_s], [600 x %struct.move_s]* %game_history, i64 0, i64 %idxprom559
  call void @unmake(%struct.move_s* %arrayidx560, i32 0)
  call void @reset_piece_square()
  %i149 = load i32, i32* @root_to_move, align 4
  %xor561 = xor i32 %i149, 1
  store i32 %xor561, i32* @root_to_move, align 4
  br label %if.end562

if.end562:                                        ; preds = %if.then555, %if.then551
  br label %if.end832

if.else563:                                       ; preds = %if.else547
  %arraydecay564 = getelementptr inbounds [256 x i8], [256 x i8]* %input, i64 0, i64 0
  %call565 = call i32 @strncmp(i8* %arraydecay564, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.66.346, i64 0, i64 0), i64 5) #11
  %tobool566 = icmp ne i32 %call565, 0
  br i1 %tobool566, label %if.else582, label %if.then567

if.then567:                                       ; preds = %if.else563
  %i150 = load i32, i32* @move_number, align 4
  %cmp568 = icmp sgt i32 %i150, 1
  br i1 %cmp568, label %if.then570, label %if.end581

if.then570:                                       ; preds = %if.then567
  %i151 = load i32, i32* @move_number, align 4
  %dec571 = add nsw i32 %i151, -1
  store i32 %dec571, i32* @move_number, align 4
  %idxprom572 = sext i32 %dec571 to i64
  %arrayidx573 = getelementptr inbounds [600 x %struct.move_x], [600 x %struct.move_x]* %game_history_x, i64 0, i64 %idxprom572
  %i152 = bitcast %struct.move_x* %arrayidx573 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 bitcast ([300 x %struct.move_x]* @path_x to i8*), i8* align 16 %i152, i64 16, i1 false)
  %i153 = load i32, i32* @move_number, align 4
  %idxprom574 = sext i32 %i153 to i64
  %arrayidx575 = getelementptr inbounds [600 x %struct.move_s], [600 x %struct.move_s]* %game_history, i64 0, i64 %idxprom574
  call void @unmake(%struct.move_s* %arrayidx575, i32 0)
  call void @reset_piece_square()
  %i154 = load i32, i32* @move_number, align 4
  %dec576 = add nsw i32 %i154, -1
  store i32 %dec576, i32* @move_number, align 4
  %idxprom577 = sext i32 %dec576 to i64
  %arrayidx578 = getelementptr inbounds [600 x %struct.move_x], [600 x %struct.move_x]* %game_history_x, i64 0, i64 %idxprom577
  %i155 = bitcast %struct.move_x* %arrayidx578 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 bitcast ([300 x %struct.move_x]* @path_x to i8*), i8* align 16 %i155, i64 16, i1 false)
  %i156 = load i32, i32* @move_number, align 4
  %idxprom579 = sext i32 %i156 to i64
  %arrayidx580 = getelementptr inbounds [600 x %struct.move_s], [600 x %struct.move_s]* %game_history, i64 0, i64 %idxprom579
  call void @unmake(%struct.move_s* %arrayidx580, i32 0)
  call void @reset_piece_square()
  br label %if.end581

if.end581:                                        ; preds = %if.then570, %if.then567
  br label %if.end831

if.else582:                                       ; preds = %if.else563
  %arraydecay583 = getelementptr inbounds [256 x i8], [256 x i8]* %input, i64 0, i64 0
  %call584 = call i32 @strncmp(i8* %arraydecay583, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.67.347, i64 0, i64 0), i64 4) #11
  %tobool585 = icmp ne i32 %call584, 0
  br i1 %tobool585, label %if.else587, label %if.then586

if.then586:                                       ; preds = %if.else582
  br label %if.end830

if.else587:                                       ; preds = %if.else582
  %arraydecay588 = getelementptr inbounds [256 x i8], [256 x i8]* %input, i64 0, i64 0
  %call589 = call i32 @strncmp(i8* %arraydecay588, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.68.348, i64 0, i64 0), i64 1) #11
  %tobool590 = icmp ne i32 %call589, 0
  br i1 %tobool590, label %if.else602, label %land.lhs.true591

land.lhs.true591:                                 ; preds = %if.else587
  %tobool592 = icmp ne i32 %is_edit_mode.0, 0
  br i1 %tobool592, label %if.then593, label %if.else602

if.then593:                                       ; preds = %land.lhs.true591
  %i157 = load i32, i32* @wking_loc, align 4
  %cmp594 = icmp eq i32 %i157, 30
  br i1 %cmp594, label %if.then596, label %if.end597

if.then596:                                       ; preds = %if.then593
  store i32 0, i32* @white_castled, align 4
  br label %if.end597

if.end597:                                        ; preds = %if.then596, %if.then593
  %i158 = load i32, i32* @bking_loc, align 4
  %cmp598 = icmp eq i32 %i158, 114
  br i1 %cmp598, label %if.then600, label %if.end601

if.then600:                                       ; preds = %if.end597
  store i32 0, i32* @black_castled, align 4
  br label %if.end601

if.end601:                                        ; preds = %if.then600, %if.end597
  store i32 50, i32* @book_ply, align 4
  store i32 0, i32* @ep_square, align 4
  store i32 0, i32* @move_number, align 4
  call void @llvm.memset.p0i8.i64(i8* align 16 getelementptr inbounds ([256 x i8], [256 x i8]* @opening_history, i64 0, i64 0), i8 0, i64 256, i1 false)
  call void @clear_tt()
  call void @initialize_hash()
  call void @reset_piece_square()
  br label %if.end829

if.else602:                                       ; preds = %land.lhs.true591, %if.else587
  %tobool603 = icmp ne i32 %is_edit_mode.0, 0
  br i1 %tobool603, label %land.lhs.true604, label %if.else614

land.lhs.true604:                                 ; preds = %if.else602
  %arraydecay605 = getelementptr inbounds [256 x i8], [256 x i8]* %input, i64 0, i64 0
  %call606 = call i32 @strncmp(i8* %arraydecay605, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.69.349, i64 0, i64 0), i64 1) #11
  %tobool607 = icmp ne i32 %call606, 0
  br i1 %tobool607, label %if.else614, label %if.then608

if.then608:                                       ; preds = %land.lhs.true604
  %cmp609 = icmp eq i32 %edit_color.0, 0
  br i1 %cmp609, label %if.then611, label %if.else612

if.then611:                                       ; preds = %if.then608
  br label %if.end613

if.else612:                                       ; preds = %if.then608
  br label %if.end613

if.end613:                                        ; preds = %if.else612, %if.then611
  %edit_color.1 = phi i32 [ 1, %if.then611 ], [ 0, %if.else612 ]
  br label %if.end828

if.else614:                                       ; preds = %land.lhs.true604, %if.else602
  %tobool615 = icmp ne i32 %is_edit_mode.0, 0
  br i1 %tobool615, label %land.lhs.true616, label %if.else621

land.lhs.true616:                                 ; preds = %if.else614
  %arraydecay617 = getelementptr inbounds [256 x i8], [256 x i8]* %input, i64 0, i64 0
  %call618 = call i32 @strncmp(i8* %arraydecay617, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.70.350, i64 0, i64 0), i64 1) #11
  %tobool619 = icmp ne i32 %call618, 0
  br i1 %tobool619, label %if.else621, label %if.then620

if.then620:                                       ; preds = %land.lhs.true616
  call void @reset_board()
  store i32 0, i32* @move_number, align 4
  br label %if.end827

if.else621:                                       ; preds = %land.lhs.true616, %if.else614
  %tobool622 = icmp ne i32 %is_edit_mode.0, 0
  br i1 %tobool622, label %land.lhs.true623, label %if.else654

land.lhs.true623:                                 ; preds = %if.else621
  %call624 = call i16** @__ctype_b_loc() #10
  %i159 = load i16*, i16** %call624, align 8
  %arrayidx625 = getelementptr inbounds [256 x i8], [256 x i8]* %input, i64 0, i64 0
  %i160 = load i8, i8* %arrayidx625, align 16
  %conv626 = sext i8 %i160 to i32
  %idxprom627 = sext i32 %conv626 to i64
  %arrayidx628 = getelementptr inbounds i16, i16* %i159, i64 %idxprom627
  %i161 = load i16, i16* %arrayidx628, align 2
  %conv629 = zext i16 %i161 to i32
  %and = and i32 %conv629, 1024
  %tobool630 = icmp ne i32 %and, 0
  br i1 %tobool630, label %land.lhs.true631, label %if.else654

land.lhs.true631:                                 ; preds = %land.lhs.true623
  %call632 = call i16** @__ctype_b_loc() #10
  %i162 = load i16*, i16** %call632, align 8
  %arrayidx633 = getelementptr inbounds [256 x i8], [256 x i8]* %input, i64 0, i64 1
  %i163 = load i8, i8* %arrayidx633, align 1
  %conv634 = sext i8 %i163 to i32
  %idxprom635 = sext i32 %conv634 to i64
  %arrayidx636 = getelementptr inbounds i16, i16* %i162, i64 %idxprom635
  %i164 = load i16, i16* %arrayidx636, align 2
  %conv637 = zext i16 %i164 to i32
  %and638 = and i32 %conv637, 1024
  %tobool639 = icmp ne i32 %and638, 0
  br i1 %tobool639, label %land.lhs.true640, label %if.else654

land.lhs.true640:                                 ; preds = %land.lhs.true631
  %call641 = call i16** @__ctype_b_loc() #10
  %i165 = load i16*, i16** %call641, align 8
  %arrayidx642 = getelementptr inbounds [256 x i8], [256 x i8]* %input, i64 0, i64 2
  %i166 = load i8, i8* %arrayidx642, align 2
  %conv643 = sext i8 %i166 to i32
  %idxprom644 = sext i32 %conv643 to i64
  %arrayidx645 = getelementptr inbounds i16, i16* %i165, i64 %idxprom644
  %i167 = load i16, i16* %arrayidx645, align 2
  %conv646 = zext i16 %i167 to i32
  %and647 = and i32 %conv646, 2048
  %tobool648 = icmp ne i32 %and647, 0
  br i1 %tobool648, label %if.then649, label %if.else654

if.then649:                                       ; preds = %land.lhs.true640
  %arrayidx650 = getelementptr inbounds [256 x i8], [256 x i8]* %input, i64 0, i64 0
  %i168 = load i8, i8* %arrayidx650, align 16
  %arrayidx651 = getelementptr inbounds [256 x i8], [256 x i8]* %input, i64 0, i64 1
  %i169 = load i8, i8* %arrayidx651, align 1
  %arrayidx652 = getelementptr inbounds [256 x i8], [256 x i8]* %input, i64 0, i64 2
  %i170 = load i8, i8* %arrayidx652, align 2
  %conv653 = sext i8 %i170 to i32
  call void @PutPiece(i32 %edit_color.0, i8 signext %i168, i8 signext %i169, i32 %conv653)
  br label %if.end826

if.else654:                                       ; preds = %land.lhs.true640, %land.lhs.true631, %land.lhs.true623, %if.else621
  %arraydecay655 = getelementptr inbounds [256 x i8], [256 x i8]* %input, i64 0, i64 0
  %call656 = call i32 @strncmp(i8* %arraydecay655, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.71.351, i64 0, i64 0), i64 7) #11
  %tobool657 = icmp ne i32 %call656, 0
  br i1 %tobool657, label %if.else661, label %if.then658

if.then658:                                       ; preds = %if.else654
  %arraydecay659 = getelementptr inbounds [256 x i8], [256 x i8]* %input, i64 0, i64 0
  %add.ptr660 = getelementptr inbounds i8, i8* %arraydecay659, i64 7
  call void @HandlePartner(i8* %add.ptr660)
  br label %if.end825

if.else661:                                       ; preds = %if.else654
  %arraydecay662 = getelementptr inbounds [256 x i8], [256 x i8]* %input, i64 0, i64 0
  %call663 = call i32 @strncmp(i8* %arraydecay662, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.72.352, i64 0, i64 0), i64 8) #11
  %tobool664 = icmp ne i32 %call663, 0
  br i1 %tobool664, label %if.else668, label %if.then665

if.then665:                                       ; preds = %if.else661
  %arraydecay666 = getelementptr inbounds [256 x i8], [256 x i8]* %input, i64 0, i64 0
  %add.ptr667 = getelementptr inbounds i8, i8* %arraydecay666, i64 8
  call void @HandlePartner(i8* %add.ptr667)
  br label %if.end824

if.else668:                                       ; preds = %if.else661
  %arraydecay669 = getelementptr inbounds [256 x i8], [256 x i8]* %input, i64 0, i64 0
  %call670 = call i32 @strncmp(i8* %arraydecay669, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.73.353, i64 0, i64 0), i64 5) #11
  %tobool671 = icmp ne i32 %call670, 0
  br i1 %tobool671, label %if.else674, label %if.then672

if.then672:                                       ; preds = %if.else668
  %arraydecay673 = getelementptr inbounds [256 x i8], [256 x i8]* %input, i64 0, i64 0
  call void @HandlePtell(i8* %arraydecay673)
  br label %if.end823

if.else674:                                       ; preds = %if.else668
  %arraydecay675 = getelementptr inbounds [256 x i8], [256 x i8]* %input, i64 0, i64 0
  %call676 = call i32 @strncmp(i8* %arraydecay675, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.74.354, i64 0, i64 0), i64 4) #11
  %tobool677 = icmp ne i32 %call676, 0
  br i1 %tobool677, label %if.else679, label %if.then678

if.then678:                                       ; preds = %if.else674
  call void @run_epd_testsuite()
  br label %if.end822

if.else679:                                       ; preds = %if.else674
  %arraydecay680 = getelementptr inbounds [256 x i8], [256 x i8]* %input, i64 0, i64 0
  %call681 = call i32 @strncmp(i8* %arraydecay680, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.75.355, i64 0, i64 0), i64 2) #11
  %tobool682 = icmp ne i32 %call681, 0
  br i1 %tobool682, label %if.else688, label %if.then683

if.then683:                                       ; preds = %if.else679
  %arraydecay684 = getelementptr inbounds [256 x i8], [256 x i8]* %input, i64 0, i64 0
  %add.ptr685 = getelementptr inbounds i8, i8* %arraydecay684, i64 3
  %call686 = call i32 (i8*, i8*, ...) @__isoc99_sscanf(i8* %add.ptr685, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.25.305, i64 0, i64 0), i32* @fixed_time) #8
  %i171 = load i32, i32* @fixed_time, align 4
  %mul687 = mul nsw i32 %i171, 100
  store i32 %mul687, i32* @fixed_time, align 4
  br label %if.end821

if.else688:                                       ; preds = %if.else679
  %arraydecay689 = getelementptr inbounds [256 x i8], [256 x i8]* %input, i64 0, i64 0
  %call690 = call i32 @strncmp(i8* %arraydecay689, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.76.356, i64 0, i64 0), i64 6) #11
  %tobool691 = icmp ne i32 %call690, 0
  br i1 %tobool691, label %if.else693, label %if.then692

if.then692:                                       ; preds = %if.else688
  br label %if.end820

if.else693:                                       ; preds = %if.else688
  %arraydecay694 = getelementptr inbounds [256 x i8], [256 x i8]* %input, i64 0, i64 0
  %call695 = call i32 @strncmp(i8* %arraydecay694, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.77.357, i64 0, i64 0), i64 5) #11
  %tobool696 = icmp ne i32 %call695, 0
  br i1 %tobool696, label %if.else706, label %if.then697

if.then697:                                       ; preds = %if.else693
  %call698 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.78.358, i64 0, i64 0))
  %call699 = call i64 @rtime()
  store i64 %call699, i64* @start_time, align 8
  %arraydecay700 = getelementptr inbounds [256 x i8], [256 x i8]* %readbuff, i64 0, i64 0
  %i172 = load %struct._IO_FILE*, %struct._IO_FILE** @stdin, align 8
  call void @rinput(i8* %arraydecay700, i32 256, %struct._IO_FILE* %i172)
  %arraydecay701 = getelementptr inbounds [256 x i8], [256 x i8]* %readbuff, i64 0, i64 0
  %call702 = call i64 @atol(i8* %arraydecay701) #11
  %mul703 = mul nsw i64 %call702, 100
  %conv704 = trunc i64 %mul703 to i32
  store i32 %conv704, i32* @pn_time, align 4
  %call705 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.16.296, i64 0, i64 0))
  call void @proofnumbersearch()
  br label %if.end819

if.else706:                                       ; preds = %if.else693
  %arraydecay707 = getelementptr inbounds [256 x i8], [256 x i8]* %input, i64 0, i64 0
  %call708 = call i32 @strncmp(i8* %arraydecay707, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.79.359, i64 0, i64 0), i64 4) #11
  %tobool709 = icmp ne i32 %call708, 0
  br i1 %tobool709, label %if.else715, label %if.then710

if.then710:                                       ; preds = %if.else706
  %arraydecay711 = getelementptr inbounds [256 x i8], [256 x i8]* %input, i64 0, i64 0
  %add.ptr712 = getelementptr inbounds i8, i8* %arraydecay711, i64 5
  %call713 = call i32 (i8*, i8*, ...) @__isoc99_sscanf(i8* %add.ptr712, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.25.305, i64 0, i64 0), i32* %pingnum) #8
  %i173 = load i32, i32* %pingnum, align 4
  %call714 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.80.360, i64 0, i64 0), i32 %i173)
  br label %if.end818

if.else715:                                       ; preds = %if.else706
  %arraydecay716 = getelementptr inbounds [256 x i8], [256 x i8]* %input, i64 0, i64 0
  %call717 = call i32 @strncmp(i8* %arraydecay716, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.81.361, i64 0, i64 0), i64 5) #11
  %tobool718 = icmp ne i32 %call717, 0
  br i1 %tobool718, label %if.else720, label %if.then719

if.then719:                                       ; preds = %if.else715
  br label %if.end817

if.else720:                                       ; preds = %if.else715
  %arraydecay721 = getelementptr inbounds [256 x i8], [256 x i8]* %input, i64 0, i64 0
  %call722 = call i32 @strncmp(i8* %arraydecay721, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.82.362, i64 0, i64 0), i64 5) #11
  %tobool723 = icmp ne i32 %call722, 0
  br i1 %tobool723, label %if.else725, label %if.then724

if.then724:                                       ; preds = %if.else720
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 bitcast ([14 x i32]* @material to i8*), i8* align 16 bitcast ([14 x i32]* @std_material to i8*), i64 56, i1 false)
  store i32 2, i32* @Variant, align 4
  call void @init_game()
  call void @initialize_hash()
  call void @clear_tt()
  call void @reset_ecache()
  store i32 0, i32* @fixed_time, align 4
  store i32 0, i32* @root_to_move, align 4
  store i32 0, i32* @comp_color, align 4
  store i32 0, i32* @move_number, align 4
  store i32 0, i32* @bookidx, align 4
  store i32 2000, i32* @opp_rating, align 4
  store i32 2000, i32* @my_rating, align 4
  br label %if.end816

if.else725:                                       ; preds = %if.else720
  %arraydecay726 = getelementptr inbounds [256 x i8], [256 x i8]* %input, i64 0, i64 0
  %call727 = call i32 @strncmp(i8* %arraydecay726, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.19.299, i64 0, i64 0), i64 8) #11
  %tobool728 = icmp ne i32 %call727, 0
  br i1 %tobool728, label %if.else732, label %if.then729

if.then729:                                       ; preds = %if.else725
  %arraydecay730 = getelementptr inbounds [256 x i8], [256 x i8]* %input, i64 0, i64 0
  %add.ptr731 = getelementptr inbounds i8, i8* %arraydecay730, i64 9
  call void @setup_epd_line(i8* %add.ptr731)
  br label %if.end815

if.else732:                                       ; preds = %if.else725
  %arraydecay733 = getelementptr inbounds [256 x i8], [256 x i8]* %input, i64 0, i64 0
  %call734 = call i32 @strncmp(i8* %arraydecay733, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.68.348, i64 0, i64 0), i64 1) #11
  %tobool735 = icmp ne i32 %call734, 0
  br i1 %tobool735, label %if.else737, label %if.then736

if.then736:                                       ; preds = %if.else732
  br label %while.body

if.else737:                                       ; preds = %if.else732
  %arraydecay738 = getelementptr inbounds [256 x i8], [256 x i8]* %input, i64 0, i64 0
  %call739 = call i32 @strncmp(i8* %arraydecay738, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.83.363, i64 0, i64 0), i64 2) #11
  %tobool740 = icmp ne i32 %call739, 0
  br i1 %tobool740, label %if.else746, label %if.then741

if.then741:                                       ; preds = %if.else737
  %arraydecay742 = getelementptr inbounds [256 x i8], [256 x i8]* %input, i64 0, i64 0
  %add.ptr743 = getelementptr inbounds i8, i8* %arraydecay742, i64 3
  %call744 = call i32 (i8*, i8*, ...) @__isoc99_sscanf(i8* %add.ptr743, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.25.305, i64 0, i64 0), i32* @maxdepth) #8
  %i174 = load i32, i32* @maxdepth, align 4
  %call745 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.84.364, i64 0, i64 0), i32 %i174)
  br label %while.body

if.else746:                                       ; preds = %if.else737
  %arraydecay747 = getelementptr inbounds [256 x i8], [256 x i8]* %input, i64 0, i64 0
  %call748 = call i32 @strncmp(i8* %arraydecay747, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.85, i64 0, i64 0), i64 4) #11
  %tobool749 = icmp ne i32 %call748, 0
  br i1 %tobool749, label %if.else751, label %if.then750

if.then750:                                       ; preds = %if.else746
  br label %while.body

if.else751:                                       ; preds = %if.else746
  %arraydecay752 = getelementptr inbounds [256 x i8], [256 x i8]* %input, i64 0, i64 0
  %call753 = call i32 @strncmp(i8* %arraydecay752, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.86, i64 0, i64 0), i64 8) #11
  %tobool754 = icmp ne i32 %call753, 0
  br i1 %tobool754, label %if.else761, label %if.then755

if.then755:                                       ; preds = %if.else751
  %call756 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([63 x i8], [63 x i8]* @.str.87, i64 0, i64 0))
  %call757 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([53 x i8], [53 x i8]* @.str.88, i64 0, i64 0))
  %call758 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([33 x i8], [33 x i8]* @.str.89, i64 0, i64 0))
  %call759 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([71 x i8], [71 x i8]* @.str.90, i64 0, i64 0))
  %call760 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([46 x i8], [46 x i8]* @.str.91, i64 0, i64 0))
  store i32 2, i32* @xb_mode, align 4
  br label %if.end811

if.else761:                                       ; preds = %if.else751
  %arraydecay762 = getelementptr inbounds [256 x i8], [256 x i8]* %input, i64 0, i64 0
  %call763 = call i32 @strncmp(i8* %arraydecay762, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.92, i64 0, i64 0), i64 8) #11
  %tobool764 = icmp ne i32 %call763, 0
  br i1 %tobool764, label %if.else766, label %if.then765

if.then765:                                       ; preds = %if.else761
  br label %if.end810

if.else766:                                       ; preds = %if.else761
  %arraydecay767 = getelementptr inbounds [256 x i8], [256 x i8]* %input, i64 0, i64 0
  %call768 = call i32 @strncmp(i8* %arraydecay767, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.93, i64 0, i64 0), i64 8) #11
  %tobool769 = icmp ne i32 %call768, 0
  br i1 %tobool769, label %if.else772, label %if.then770

if.then770:                                       ; preds = %if.else766
  %call771 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([65 x i8], [65 x i8]* @.str.94, i64 0, i64 0))
  br label %if.end809

if.else772:                                       ; preds = %if.else766
  %arraydecay773 = getelementptr inbounds [256 x i8], [256 x i8]* %input, i64 0, i64 0
  %call774 = call i32 @strcmp(i8* %arraydecay773, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.95, i64 0, i64 0)) #11
  %tobool775 = icmp ne i32 %call774, 0
  br i1 %tobool775, label %if.else802, label %if.then776

if.then776:                                       ; preds = %if.else772
  %call777 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.96, i64 0, i64 0), i8* getelementptr inbounds ([50 x i8], [50 x i8]* @divider, i64 0, i64 0))
  %call778 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([41 x i8], [41 x i8]* @.str.97, i64 0, i64 0))
  %call779 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.98, i64 0, i64 0))
  %call780 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.99, i64 0, i64 0))
  %call781 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.100, i64 0, i64 0))
  %call782 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.101, i64 0, i64 0))
  %call783 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.102, i64 0, i64 0))
  %call784 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([49 x i8], [49 x i8]* @.str.103, i64 0, i64 0))
  %call785 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([25 x i8], [25 x i8]* @.str.104, i64 0, i64 0))
  %call786 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.105, i64 0, i64 0))
  %call787 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([55 x i8], [55 x i8]* @.str.106, i64 0, i64 0))
  %call788 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.107, i64 0, i64 0))
  %call789 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.108, i64 0, i64 0))
  %call790 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.109, i64 0, i64 0))
  %call791 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.110, i64 0, i64 0))
  %call792 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([52 x i8], [52 x i8]* @.str.111, i64 0, i64 0))
  %call793 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([59 x i8], [59 x i8]* @.str.112.365, i64 0, i64 0))
  %call794 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.113, i64 0, i64 0))
  %call795 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.114, i64 0, i64 0))
  %call796 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.115, i64 0, i64 0))
  %call797 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.116, i64 0, i64 0))
  %call798 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.117, i64 0, i64 0))
  %call799 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.118, i64 0, i64 0))
  %call800 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([44 x i8], [44 x i8]* @.str.119, i64 0, i64 0))
  %call801 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.96, i64 0, i64 0), i8* getelementptr inbounds ([50 x i8], [50 x i8]* @divider, i64 0, i64 0))
  store i32 0, i32* %show_board, align 4
  br label %if.end808

if.else802:                                       ; preds = %if.else772
  %i175 = load i32, i32* @xb_mode, align 4
  %tobool803 = icmp ne i32 %i175, 0
  br i1 %tobool803, label %if.end807, label %if.then804

if.then804:                                       ; preds = %if.else802
  %arraydecay805 = getelementptr inbounds [256 x i8], [256 x i8]* %input, i64 0, i64 0
  %call806 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.18.298, i64 0, i64 0), i8* %arraydecay805)
  br label %if.end807

if.end807:                                        ; preds = %if.then804, %if.else802
  br label %if.end808

if.end808:                                        ; preds = %if.end807, %if.then776
  br label %if.end809

if.end809:                                        ; preds = %if.end808, %if.then770
  br label %if.end810

if.end810:                                        ; preds = %if.end809, %if.then765
  br label %if.end811

if.end811:                                        ; preds = %if.end810, %if.then755
  br label %if.end812

if.end812:                                        ; preds = %if.end811
  br label %if.end813

if.end813:                                        ; preds = %if.end812
  br label %if.end814

if.end814:                                        ; preds = %if.end813
  br label %if.end815

if.end815:                                        ; preds = %if.end814, %if.then729
  br label %if.end816

if.end816:                                        ; preds = %if.end815, %if.then724
  %force_mode.2 = phi i32 [ %force_mode.0, %if.end815 ], [ 0, %if.then724 ]
  br label %if.end817

if.end817:                                        ; preds = %if.end816, %if.then719
  %force_mode.3 = phi i32 [ %force_mode.2, %if.end816 ], [ %force_mode.0, %if.then719 ]
  %braindeadinterface.1 = phi i32 [ %braindeadinterface.0, %if.end816 ], [ 1, %if.then719 ]
  br label %if.end818

if.end818:                                        ; preds = %if.end817, %if.then710
  %force_mode.4 = phi i32 [ %force_mode.3, %if.end817 ], [ %force_mode.0, %if.then710 ]
  %braindeadinterface.2 = phi i32 [ %braindeadinterface.1, %if.end817 ], [ %braindeadinterface.0, %if.then710 ]
  br label %if.end819

if.end819:                                        ; preds = %if.end818, %if.then697
  %force_mode.5 = phi i32 [ %force_mode.4, %if.end818 ], [ %force_mode.0, %if.then697 ]
  %braindeadinterface.3 = phi i32 [ %braindeadinterface.2, %if.end818 ], [ %braindeadinterface.0, %if.then697 ]
  br label %if.end820

if.end820:                                        ; preds = %if.end819, %if.then692
  %force_mode.6 = phi i32 [ %force_mode.5, %if.end819 ], [ %force_mode.0, %if.then692 ]
  %braindeadinterface.4 = phi i32 [ %braindeadinterface.3, %if.end819 ], [ %braindeadinterface.0, %if.then692 ]
  br label %if.end821

if.end821:                                        ; preds = %if.end820, %if.then683
  %force_mode.7 = phi i32 [ %force_mode.6, %if.end820 ], [ %force_mode.0, %if.then683 ]
  %braindeadinterface.5 = phi i32 [ %braindeadinterface.4, %if.end820 ], [ %braindeadinterface.0, %if.then683 ]
  br label %if.end822

if.end822:                                        ; preds = %if.end821, %if.then678
  %force_mode.8 = phi i32 [ %force_mode.7, %if.end821 ], [ %force_mode.0, %if.then678 ]
  %braindeadinterface.6 = phi i32 [ %braindeadinterface.5, %if.end821 ], [ %braindeadinterface.0, %if.then678 ]
  br label %if.end823

if.end823:                                        ; preds = %if.end822, %if.then672
  %force_mode.9 = phi i32 [ %force_mode.8, %if.end822 ], [ %force_mode.0, %if.then672 ]
  %braindeadinterface.7 = phi i32 [ %braindeadinterface.6, %if.end822 ], [ %braindeadinterface.0, %if.then672 ]
  br label %if.end824

if.end824:                                        ; preds = %if.end823, %if.then665
  %force_mode.10 = phi i32 [ %force_mode.9, %if.end823 ], [ %force_mode.0, %if.then665 ]
  %braindeadinterface.8 = phi i32 [ %braindeadinterface.7, %if.end823 ], [ %braindeadinterface.0, %if.then665 ]
  br label %if.end825

if.end825:                                        ; preds = %if.end824, %if.then658
  %force_mode.11 = phi i32 [ %force_mode.10, %if.end824 ], [ %force_mode.0, %if.then658 ]
  %braindeadinterface.9 = phi i32 [ %braindeadinterface.8, %if.end824 ], [ %braindeadinterface.0, %if.then658 ]
  br label %if.end826

if.end826:                                        ; preds = %if.end825, %if.then649
  %force_mode.12 = phi i32 [ %force_mode.0, %if.then649 ], [ %force_mode.11, %if.end825 ]
  %braindeadinterface.10 = phi i32 [ %braindeadinterface.0, %if.then649 ], [ %braindeadinterface.9, %if.end825 ]
  br label %if.end827

if.end827:                                        ; preds = %if.end826, %if.then620
  %force_mode.13 = phi i32 [ %force_mode.12, %if.end826 ], [ %force_mode.0, %if.then620 ]
  %braindeadinterface.11 = phi i32 [ %braindeadinterface.10, %if.end826 ], [ %braindeadinterface.0, %if.then620 ]
  br label %if.end828

if.end828:                                        ; preds = %if.end827, %if.end613
  %force_mode.14 = phi i32 [ %force_mode.13, %if.end827 ], [ %force_mode.0, %if.end613 ]
  %edit_color.2 = phi i32 [ %edit_color.0, %if.end827 ], [ %edit_color.1, %if.end613 ]
  %braindeadinterface.12 = phi i32 [ %braindeadinterface.11, %if.end827 ], [ %braindeadinterface.0, %if.end613 ]
  br label %if.end829

if.end829:                                        ; preds = %if.end828, %if.end601
  %is_edit_mode.1 = phi i32 [ %is_edit_mode.0, %if.end828 ], [ 0, %if.end601 ]
  %force_mode.15 = phi i32 [ %force_mode.14, %if.end828 ], [ %force_mode.0, %if.end601 ]
  %edit_color.3 = phi i32 [ %edit_color.2, %if.end828 ], [ %edit_color.0, %if.end601 ]
  %braindeadinterface.13 = phi i32 [ %braindeadinterface.12, %if.end828 ], [ %braindeadinterface.0, %if.end601 ]
  br label %if.end830

if.end830:                                        ; preds = %if.end829, %if.then586
  %is_edit_mode.2 = phi i32 [ %is_edit_mode.1, %if.end829 ], [ 1, %if.then586 ]
  %force_mode.16 = phi i32 [ %force_mode.15, %if.end829 ], [ %force_mode.0, %if.then586 ]
  %edit_color.4 = phi i32 [ %edit_color.3, %if.end829 ], [ 0, %if.then586 ]
  %braindeadinterface.14 = phi i32 [ %braindeadinterface.13, %if.end829 ], [ %braindeadinterface.0, %if.then586 ]
  br label %if.end831

if.end831:                                        ; preds = %if.end830, %if.end581
  %is_edit_mode.3 = phi i32 [ %is_edit_mode.2, %if.end830 ], [ %is_edit_mode.0, %if.end581 ]
  %force_mode.17 = phi i32 [ %force_mode.16, %if.end830 ], [ %force_mode.0, %if.end581 ]
  %edit_color.5 = phi i32 [ %edit_color.4, %if.end830 ], [ %edit_color.0, %if.end581 ]
  %braindeadinterface.15 = phi i32 [ %braindeadinterface.14, %if.end830 ], [ %braindeadinterface.0, %if.end581 ]
  br label %if.end832

if.end832:                                        ; preds = %if.end831, %if.end562
  %is_edit_mode.4 = phi i32 [ %is_edit_mode.3, %if.end831 ], [ %is_edit_mode.0, %if.end562 ]
  %force_mode.18 = phi i32 [ %force_mode.17, %if.end831 ], [ %force_mode.0, %if.end562 ]
  %edit_color.6 = phi i32 [ %edit_color.5, %if.end831 ], [ %edit_color.0, %if.end562 ]
  %braindeadinterface.16 = phi i32 [ %braindeadinterface.15, %if.end831 ], [ %braindeadinterface.0, %if.end562 ]
  br label %if.end833

if.end833:                                        ; preds = %if.end832, %if.then545
  %is_edit_mode.5 = phi i32 [ %is_edit_mode.4, %if.end832 ], [ %is_edit_mode.0, %if.then545 ]
  %force_mode.19 = phi i32 [ %force_mode.18, %if.end832 ], [ %force_mode.0, %if.then545 ]
  %edit_color.7 = phi i32 [ %edit_color.6, %if.end832 ], [ %edit_color.0, %if.then545 ]
  %braindeadinterface.17 = phi i32 [ %braindeadinterface.16, %if.end832 ], [ %braindeadinterface.0, %if.then545 ]
  br label %if.end834

if.end834:                                        ; preds = %if.end833, %if.end540
  %is_edit_mode.6 = phi i32 [ %is_edit_mode.5, %if.end833 ], [ %is_edit_mode.0, %if.end540 ]
  %force_mode.20 = phi i32 [ %force_mode.19, %if.end833 ], [ %force_mode.0, %if.end540 ]
  %edit_color.8 = phi i32 [ %edit_color.7, %if.end833 ], [ %edit_color.0, %if.end540 ]
  %braindeadinterface.18 = phi i32 [ %braindeadinterface.17, %if.end833 ], [ %braindeadinterface.0, %if.end540 ]
  br label %if.end835

if.end835:                                        ; preds = %if.end834, %if.then499
  %is_edit_mode.7 = phi i32 [ %is_edit_mode.6, %if.end834 ], [ %is_edit_mode.0, %if.then499 ]
  %force_mode.21 = phi i32 [ %force_mode.20, %if.end834 ], [ %force_mode.0, %if.then499 ]
  %edit_color.9 = phi i32 [ %edit_color.8, %if.end834 ], [ %edit_color.0, %if.then499 ]
  %braindeadinterface.19 = phi i32 [ %braindeadinterface.18, %if.end834 ], [ %braindeadinterface.0, %if.then499 ]
  br label %if.end836

if.end836:                                        ; preds = %if.end835, %if.end494
  %is_edit_mode.8 = phi i32 [ %is_edit_mode.7, %if.end835 ], [ %is_edit_mode.0, %if.end494 ]
  %force_mode.22 = phi i32 [ %force_mode.21, %if.end835 ], [ %force_mode.0, %if.end494 ]
  %edit_color.10 = phi i32 [ %edit_color.9, %if.end835 ], [ %edit_color.0, %if.end494 ]
  %braindeadinterface.20 = phi i32 [ %braindeadinterface.19, %if.end835 ], [ %braindeadinterface.0, %if.end494 ]
  br label %if.end837

if.end837:                                        ; preds = %if.end836, %if.end478
  %is_edit_mode.9 = phi i32 [ %is_edit_mode.8, %if.end836 ], [ %is_edit_mode.0, %if.end478 ]
  %force_mode.23 = phi i32 [ %force_mode.22, %if.end836 ], [ %force_mode.0, %if.end478 ]
  %edit_color.11 = phi i32 [ %edit_color.10, %if.end836 ], [ %edit_color.0, %if.end478 ]
  %braindeadinterface.21 = phi i32 [ %braindeadinterface.20, %if.end836 ], [ %braindeadinterface.0, %if.end478 ]
  br label %if.end838

if.end838:                                        ; preds = %if.end837, %if.then453
  %is_edit_mode.10 = phi i32 [ %is_edit_mode.9, %if.end837 ], [ %is_edit_mode.0, %if.then453 ]
  %force_mode.24 = phi i32 [ %force_mode.23, %if.end837 ], [ %force_mode.0, %if.then453 ]
  %edit_color.12 = phi i32 [ %edit_color.11, %if.end837 ], [ %edit_color.0, %if.then453 ]
  %braindeadinterface.22 = phi i32 [ %braindeadinterface.21, %if.end837 ], [ %braindeadinterface.0, %if.then453 ]
  br label %if.end839

if.end839:                                        ; preds = %if.end838, %if.then445
  %is_edit_mode.11 = phi i32 [ %is_edit_mode.10, %if.end838 ], [ %is_edit_mode.0, %if.then445 ]
  %force_mode.25 = phi i32 [ %force_mode.24, %if.end838 ], [ %force_mode.0, %if.then445 ]
  %edit_color.13 = phi i32 [ %edit_color.12, %if.end838 ], [ %edit_color.0, %if.then445 ]
  %braindeadinterface.23 = phi i32 [ %braindeadinterface.22, %if.end838 ], [ %braindeadinterface.0, %if.then445 ]
  br label %if.end840

if.end840:                                        ; preds = %if.end839, %if.then440
  %is_edit_mode.12 = phi i32 [ %is_edit_mode.11, %if.end839 ], [ %is_edit_mode.0, %if.then440 ]
  %force_mode.26 = phi i32 [ %force_mode.25, %if.end839 ], [ 0, %if.then440 ]
  %edit_color.14 = phi i32 [ %edit_color.13, %if.end839 ], [ %edit_color.0, %if.then440 ]
  %braindeadinterface.24 = phi i32 [ %braindeadinterface.23, %if.end839 ], [ %braindeadinterface.0, %if.then440 ]
  br label %if.end841

if.end841:                                        ; preds = %if.end840, %if.then433
  %is_edit_mode.13 = phi i32 [ %is_edit_mode.12, %if.end840 ], [ %is_edit_mode.0, %if.then433 ]
  %force_mode.27 = phi i32 [ %force_mode.26, %if.end840 ], [ %force_mode.0, %if.then433 ]
  %edit_color.15 = phi i32 [ %edit_color.14, %if.end840 ], [ %edit_color.0, %if.then433 ]
  %braindeadinterface.25 = phi i32 [ %braindeadinterface.24, %if.end840 ], [ %braindeadinterface.0, %if.then433 ]
  br label %if.end842

if.end842:                                        ; preds = %if.end841, %if.then428
  %is_edit_mode.14 = phi i32 [ %is_edit_mode.13, %if.end841 ], [ %is_edit_mode.0, %if.then428 ]
  %force_mode.28 = phi i32 [ %force_mode.27, %if.end841 ], [ 1, %if.then428 ]
  %edit_color.16 = phi i32 [ %edit_color.15, %if.end841 ], [ %edit_color.0, %if.then428 ]
  %braindeadinterface.26 = phi i32 [ %braindeadinterface.25, %if.end841 ], [ %braindeadinterface.0, %if.then428 ]
  br label %if.end843

if.end843:                                        ; preds = %if.end842, %if.then423
  %is_edit_mode.15 = phi i32 [ %is_edit_mode.14, %if.end842 ], [ %is_edit_mode.0, %if.then423 ]
  %force_mode.29 = phi i32 [ %force_mode.28, %if.end842 ], [ %force_mode.0, %if.then423 ]
  %edit_color.17 = phi i32 [ %edit_color.16, %if.end842 ], [ %edit_color.0, %if.then423 ]
  %braindeadinterface.27 = phi i32 [ %braindeadinterface.26, %if.end842 ], [ %braindeadinterface.0, %if.then423 ]
  br label %if.end844

if.end844:                                        ; preds = %if.end843, %if.then418
  %is_edit_mode.16 = phi i32 [ %is_edit_mode.15, %if.end843 ], [ %is_edit_mode.0, %if.then418 ]
  %force_mode.30 = phi i32 [ %force_mode.29, %if.end843 ], [ %force_mode.0, %if.then418 ]
  %edit_color.18 = phi i32 [ %edit_color.17, %if.end843 ], [ %edit_color.0, %if.then418 ]
  %braindeadinterface.28 = phi i32 [ %braindeadinterface.27, %if.end843 ], [ %braindeadinterface.0, %if.then418 ]
  br label %if.end845

if.end845:                                        ; preds = %if.end844
  br label %if.end846

if.end846:                                        ; preds = %if.end845
  br label %if.end847

if.end847:                                        ; preds = %if.end846
  br label %if.end848

if.end848:                                        ; preds = %if.end847
  br label %if.end849

if.end849:                                        ; preds = %if.end848, %if.then393
  %is_edit_mode.17 = phi i32 [ %is_edit_mode.16, %if.end848 ], [ %is_edit_mode.0, %if.then393 ]
  %force_mode.31 = phi i32 [ %force_mode.30, %if.end848 ], [ %force_mode.0, %if.then393 ]
  %edit_color.19 = phi i32 [ %edit_color.18, %if.end848 ], [ %edit_color.0, %if.then393 ]
  %braindeadinterface.29 = phi i32 [ %braindeadinterface.28, %if.end848 ], [ %braindeadinterface.0, %if.then393 ]
  br label %if.end850

if.end850:                                        ; preds = %if.end849, %if.end388
  %is_edit_mode.18 = phi i32 [ %is_edit_mode.17, %if.end849 ], [ %is_edit_mode.0, %if.end388 ]
  %force_mode.32 = phi i32 [ %force_mode.31, %if.end849 ], [ %force_mode.0, %if.end388 ]
  %edit_color.20 = phi i32 [ %edit_color.19, %if.end849 ], [ %edit_color.0, %if.end388 ]
  %braindeadinterface.30 = phi i32 [ %braindeadinterface.29, %if.end849 ], [ %braindeadinterface.0, %if.end388 ]
  br label %if.end851

if.end851:                                        ; preds = %if.end850, %if.then372
  %is_edit_mode.19 = phi i32 [ %is_edit_mode.18, %if.end850 ], [ %is_edit_mode.0, %if.then372 ]
  %force_mode.33 = phi i32 [ %force_mode.32, %if.end850 ], [ %force_mode.0, %if.then372 ]
  %edit_color.21 = phi i32 [ %edit_color.20, %if.end850 ], [ %edit_color.0, %if.then372 ]
  %braindeadinterface.31 = phi i32 [ %braindeadinterface.30, %if.end850 ], [ %braindeadinterface.0, %if.then372 ]
  br label %if.end852

if.end852:                                        ; preds = %if.end851, %if.then364
  %is_edit_mode.20 = phi i32 [ %is_edit_mode.19, %if.end851 ], [ %is_edit_mode.0, %if.then364 ]
  %force_mode.34 = phi i32 [ %force_mode.33, %if.end851 ], [ %force_mode.0, %if.then364 ]
  %edit_color.22 = phi i32 [ %edit_color.21, %if.end851 ], [ %edit_color.0, %if.then364 ]
  %braindeadinterface.32 = phi i32 [ %braindeadinterface.31, %if.end851 ], [ %braindeadinterface.0, %if.then364 ]
  br label %if.end853

if.end853:                                        ; preds = %if.end852, %if.end359
  %is_edit_mode.21 = phi i32 [ %is_edit_mode.20, %if.end852 ], [ %is_edit_mode.0, %if.end359 ]
  %force_mode.35 = phi i32 [ %force_mode.34, %if.end852 ], [ %force_mode.1, %if.end359 ]
  %edit_color.23 = phi i32 [ %edit_color.22, %if.end852 ], [ %edit_color.0, %if.end359 ]
  %braindeadinterface.33 = phi i32 [ %braindeadinterface.32, %if.end852 ], [ %braindeadinterface.0, %if.end359 ]
  %automode.6 = phi i32 [ %automode.4, %if.end852 ], [ %automode.5, %if.end359 ]
  br label %if.end854

if.end854:                                        ; preds = %if.end853, %if.then331
  %is_edit_mode.22 = phi i32 [ %is_edit_mode.21, %if.end853 ], [ %is_edit_mode.0, %if.then331 ]
  %force_mode.36 = phi i32 [ %force_mode.35, %if.end853 ], [ %force_mode.0, %if.then331 ]
  %edit_color.24 = phi i32 [ %edit_color.23, %if.end853 ], [ %edit_color.0, %if.then331 ]
  %braindeadinterface.34 = phi i32 [ %braindeadinterface.33, %if.end853 ], [ %braindeadinterface.0, %if.then331 ]
  %automode.7 = phi i32 [ %automode.6, %if.end853 ], [ %automode.4, %if.then331 ]
  br label %if.end855

if.end855:                                        ; preds = %if.end854, %if.then326
  %is_edit_mode.23 = phi i32 [ %is_edit_mode.22, %if.end854 ], [ %is_edit_mode.0, %if.then326 ]
  %force_mode.37 = phi i32 [ %force_mode.36, %if.end854 ], [ %force_mode.0, %if.then326 ]
  %edit_color.25 = phi i32 [ %edit_color.24, %if.end854 ], [ %edit_color.0, %if.then326 ]
  %braindeadinterface.35 = phi i32 [ %braindeadinterface.34, %if.end854 ], [ %braindeadinterface.0, %if.then326 ]
  %automode.8 = phi i32 [ %automode.7, %if.end854 ], [ %automode.4, %if.then326 ]
  br label %if.end856

if.end856:                                        ; preds = %if.end855, %if.end317
  %is_edit_mode.24 = phi i32 [ %is_edit_mode.23, %if.end855 ], [ %is_edit_mode.0, %if.end317 ]
  %force_mode.38 = phi i32 [ %force_mode.37, %if.end855 ], [ %force_mode.0, %if.end317 ]
  %edit_color.26 = phi i32 [ %edit_color.25, %if.end855 ], [ %edit_color.0, %if.end317 ]
  %braindeadinterface.36 = phi i32 [ %braindeadinterface.35, %if.end855 ], [ %braindeadinterface.0, %if.end317 ]
  %automode.9 = phi i32 [ %automode.8, %if.end855 ], [ %automode.4, %if.end317 ]
  br label %if.end857

if.end857:                                        ; preds = %if.end856
  br label %if.end858

if.end858:                                        ; preds = %if.end857, %if.end293
  %is_edit_mode.25 = phi i32 [ %is_edit_mode.24, %if.end857 ], [ %is_edit_mode.0, %if.end293 ]
  %force_mode.39 = phi i32 [ %force_mode.38, %if.end857 ], [ %force_mode.0, %if.end293 ]
  %edit_color.27 = phi i32 [ %edit_color.26, %if.end857 ], [ %edit_color.0, %if.end293 ]
  %braindeadinterface.37 = phi i32 [ %braindeadinterface.36, %if.end857 ], [ %braindeadinterface.0, %if.end293 ]
  %automode.10 = phi i32 [ %automode.9, %if.end857 ], [ %automode.4, %if.end293 ]
  br label %while.body
}

; Function Attrs: nounwind
declare dso_local void @setbuf(%struct._IO_FILE*, i8*) #3

; Function Attrs: nounwind readonly willreturn
declare dso_local i32 @tolower(i32) #7

; Function Attrs: nounwind readonly willreturn
declare dso_local i32 @strcmp(i8*, i8*) #7

; Function Attrs: nounwind
declare dso_local void (i32)* @signal(i32, void (i32)*) #3

; Function Attrs: noinline nounwind uwtable
define dso_local void @clear_tt() #0 {
entry:
  %i = load %struct.TType*, %struct.TType** @DP_TTable, align 8
  %i1 = bitcast %struct.TType* %i to i8*
  %i2 = load i32, i32* @TTSize, align 4
  %conv = sext i32 %i2 to i64
  %mul = mul i64 20, %conv
  call void @llvm.memset.p0i8.i64(i8* align 4 %i1, i8 0, i64 %mul, i1 false)
  %i3 = load %struct.TType*, %struct.TType** @AS_TTable, align 8
  %i4 = bitcast %struct.TType* %i3 to i8*
  %i5 = load i32, i32* @TTSize, align 4
  %conv1 = sext i32 %i5 to i64
  %mul2 = mul i64 20, %conv1
  call void @llvm.memset.p0i8.i64(i8* align 4 %i4, i8 0, i64 %mul2, i1 false)
  %i6 = load %struct.QTType*, %struct.QTType** @QS_TTable, align 8
  %i7 = bitcast %struct.QTType* %i6 to i8*
  %i8 = load i32, i32* @TTSize, align 4
  %conv3 = sext i32 %i8 to i64
  %mul4 = mul i64 16, %conv3
  call void @llvm.memset.p0i8.i64(i8* align 4 %i7, i8 0, i64 %mul4, i1 false)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @clear_dp_tt() #0 {
entry:
  %i = load %struct.TType*, %struct.TType** @DP_TTable, align 8
  %i1 = bitcast %struct.TType* %i to i8*
  %i2 = load i32, i32* @TTSize, align 4
  %conv = sext i32 %i2 to i64
  %mul = mul i64 20, %conv
  call void @llvm.memset.p0i8.i64(i8* align 4 %i1, i8 0, i64 %mul, i1 false)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @initialize_zobrist() #0 {
entry:
  call void @seedMT(i32 31657)
  br label %for.cond

for.cond:                                         ; preds = %for.inc6, %entry
  %p.0 = phi i32 [ 0, %entry ], [ %inc7, %for.inc6 ]
  %cmp = icmp slt i32 %p.0, 14
  br i1 %cmp, label %for.body, label %for.end8

for.body:                                         ; preds = %for.cond
  br label %for.cond1

for.cond1:                                        ; preds = %for.inc, %for.body
  %q.0 = phi i32 [ 0, %for.body ], [ %inc, %for.inc ]
  %cmp2 = icmp slt i32 %q.0, 144
  br i1 %cmp2, label %for.body3, label %for.end

for.body3:                                        ; preds = %for.cond1
  %call = call i32 @randomMT()
  %idxprom = sext i32 %p.0 to i64
  %arrayidx = getelementptr inbounds [14 x [144 x i32]], [14 x [144 x i32]]* @zobrist, i64 0, i64 %idxprom
  %idxprom4 = sext i32 %q.0 to i64
  %arrayidx5 = getelementptr inbounds [144 x i32], [144 x i32]* %arrayidx, i64 0, i64 %idxprom4
  store i32 %call, i32* %arrayidx5, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body3
  %inc = add nsw i32 %q.0, 1
  br label %for.cond1

for.end:                                          ; preds = %for.cond1
  br label %for.inc6

for.inc6:                                         ; preds = %for.end
  %inc7 = add nsw i32 %p.0, 1
  br label %for.cond

for.end8:                                         ; preds = %for.cond
  store i32 -559038737, i32* @hash, align 4
  store i32 -1056969216, i32* @hold_hash, align 4
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @initialize_hash() #0 {
entry:
  store i32 -559038737, i32* @hash, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %p.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ]
  %cmp = icmp slt i32 %p.0, 144
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %idxprom = sext i32 %p.0 to i64
  %arrayidx = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom
  %i = load i32, i32* %arrayidx, align 4
  %cmp1 = icmp ne i32 %i, 13
  br i1 %cmp1, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %for.body
  %idxprom2 = sext i32 %p.0 to i64
  %arrayidx3 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom2
  %i1 = load i32, i32* %arrayidx3, align 4
  %cmp4 = icmp ne i32 %i1, 0
  br i1 %cmp4, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %i2 = load i32, i32* @hash, align 4
  %idxprom5 = sext i32 %p.0 to i64
  %arrayidx6 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom5
  %i3 = load i32, i32* %arrayidx6, align 4
  %idxprom7 = sext i32 %i3 to i64
  %arrayidx8 = getelementptr inbounds [14 x [144 x i32]], [14 x [144 x i32]]* @zobrist, i64 0, i64 %idxprom7
  %idxprom9 = sext i32 %p.0 to i64
  %arrayidx10 = getelementptr inbounds [144 x i32], [144 x i32]* %arrayidx8, i64 0, i64 %idxprom9
  %i4 = load i32, i32* %arrayidx10, align 4
  %xor = xor i32 %i2, %i4
  store i32 %xor, i32* @hash, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %inc = add nsw i32 %p.0, 1
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 -1056969216, i32* @hold_hash, align 4
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @QStoreTT(i32 %score, i32 %alpha, i32 %beta, i32 %best) #0 {
entry:
  %i = load i32, i32* @TTStores, align 4
  %inc = add i32 %i, 1
  store i32 %inc, i32* @TTStores, align 4
  %i1 = load i32, i32* @hash, align 4
  %i2 = load i32, i32* @TTSize, align 4
  %rem = urem i32 %i1, %i2
  %cmp = icmp sle i32 %score, %alpha
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %i3 = load %struct.QTType*, %struct.QTType** @QS_TTable, align 8
  %idxprom = zext i32 %rem to i64
  %arrayidx = getelementptr inbounds %struct.QTType, %struct.QTType* %i3, i64 %idxprom
  %Type = getelementptr inbounds %struct.QTType, %struct.QTType* %arrayidx, i32 0, i32 1
  store i8 1, i8* %Type, align 1
  br label %if.end10

if.else:                                          ; preds = %entry
  %cmp1 = icmp sge i32 %score, %beta
  br i1 %cmp1, label %if.then2, label %if.else6

if.then2:                                         ; preds = %if.else
  %i4 = load %struct.QTType*, %struct.QTType** @QS_TTable, align 8
  %idxprom3 = zext i32 %rem to i64
  %arrayidx4 = getelementptr inbounds %struct.QTType, %struct.QTType* %i4, i64 %idxprom3
  %Type5 = getelementptr inbounds %struct.QTType, %struct.QTType* %arrayidx4, i32 0, i32 1
  store i8 2, i8* %Type5, align 1
  br label %if.end

if.else6:                                         ; preds = %if.else
  %i5 = load %struct.QTType*, %struct.QTType** @QS_TTable, align 8
  %idxprom7 = zext i32 %rem to i64
  %arrayidx8 = getelementptr inbounds %struct.QTType, %struct.QTType* %i5, i64 %idxprom7
  %Type9 = getelementptr inbounds %struct.QTType, %struct.QTType* %arrayidx8, i32 0, i32 1
  store i8 3, i8* %Type9, align 1
  br label %if.end

if.end:                                           ; preds = %if.else6, %if.then2
  br label %if.end10

if.end10:                                         ; preds = %if.end, %if.then
  %i6 = load i32, i32* @hash, align 4
  %i7 = load %struct.QTType*, %struct.QTType** @QS_TTable, align 8
  %idxprom11 = zext i32 %rem to i64
  %arrayidx12 = getelementptr inbounds %struct.QTType, %struct.QTType* %i7, i64 %idxprom11
  %HashKey = getelementptr inbounds %struct.QTType, %struct.QTType* %arrayidx12, i32 0, i32 3
  store i32 %i6, i32* %HashKey, align 4
  %i8 = load i32, i32* @hold_hash, align 4
  %i9 = load %struct.QTType*, %struct.QTType** @QS_TTable, align 8
  %idxprom13 = zext i32 %rem to i64
  %arrayidx14 = getelementptr inbounds %struct.QTType, %struct.QTType* %i9, i64 %idxprom13
  %Hold_hash = getelementptr inbounds %struct.QTType, %struct.QTType* %arrayidx14, i32 0, i32 4
  store i32 %i8, i32* %Hold_hash, align 4
  %conv = trunc i32 %best to i16
  %i10 = load %struct.QTType*, %struct.QTType** @QS_TTable, align 8
  %idxprom15 = zext i32 %rem to i64
  %arrayidx16 = getelementptr inbounds %struct.QTType, %struct.QTType* %i10, i64 %idxprom15
  %Bestmove = getelementptr inbounds %struct.QTType, %struct.QTType* %arrayidx16, i32 0, i32 2
  store i16 %conv, i16* %Bestmove, align 2
  %i11 = load %struct.QTType*, %struct.QTType** @QS_TTable, align 8
  %idxprom17 = zext i32 %rem to i64
  %arrayidx18 = getelementptr inbounds %struct.QTType, %struct.QTType* %i11, i64 %idxprom17
  %Bound = getelementptr inbounds %struct.QTType, %struct.QTType* %arrayidx18, i32 0, i32 5
  store i32 %score, i32* %Bound, align 4
  %i12 = load i32, i32* @white_to_move, align 4
  %tobool = icmp ne i32 %i12, 0
  %i13 = zext i1 %tobool to i64
  %cond = select i1 %tobool, i32 0, i32 1
  %conv19 = trunc i32 %cond to i8
  %i14 = load %struct.QTType*, %struct.QTType** @QS_TTable, align 8
  %idxprom20 = zext i32 %rem to i64
  %arrayidx21 = getelementptr inbounds %struct.QTType, %struct.QTType* %i14, i64 %idxprom20
  %OnMove = getelementptr inbounds %struct.QTType, %struct.QTType* %arrayidx21, i32 0, i32 0
  store i8 %conv19, i8* %OnMove, align 4
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @StoreTT(i32 %score, i32 %alpha, i32 %beta, i32 %best, i32 %threat, i32 %depth) #0 {
entry:
  %i = load i32, i32* @TTStores, align 4
  %inc = add i32 %i, 1
  store i32 %inc, i32* @TTStores, align 4
  %i1 = load i32, i32* @hash, align 4
  %i2 = load i32, i32* @TTSize, align 4
  %rem = urem i32 %i1, %i2
  %i3 = load %struct.TType*, %struct.TType** @DP_TTable, align 8
  %idxprom = zext i32 %rem to i64
  %arrayidx = getelementptr inbounds %struct.TType, %struct.TType* %i3, i64 %idxprom
  %Depth = getelementptr inbounds %struct.TType, %struct.TType* %arrayidx, i32 0, i32 0
  %i4 = load i8, i8* %Depth, align 4
  %conv = sext i8 %i4 to i32
  %cmp = icmp slt i32 %conv, %depth
  br i1 %cmp, label %land.lhs.true22, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %i5 = load %struct.TType*, %struct.TType** @DP_TTable, align 8
  %idxprom2 = zext i32 %rem to i64
  %arrayidx3 = getelementptr inbounds %struct.TType, %struct.TType* %i5, i64 %idxprom2
  %Depth4 = getelementptr inbounds %struct.TType, %struct.TType* %arrayidx3, i32 0, i32 0
  %i6 = load i8, i8* %Depth4, align 4
  %conv5 = sext i8 %i6 to i32
  %cmp6 = icmp eq i32 %conv5, %depth
  br i1 %cmp6, label %land.lhs.true, label %if.else77

land.lhs.true:                                    ; preds = %lor.lhs.false
  %i7 = load %struct.TType*, %struct.TType** @DP_TTable, align 8
  %idxprom8 = zext i32 %rem to i64
  %arrayidx9 = getelementptr inbounds %struct.TType, %struct.TType* %i7, i64 %idxprom8
  %Type = getelementptr inbounds %struct.TType, %struct.TType* %arrayidx9, i32 0, i32 3
  %i8 = load i8, i8* %Type, align 1
  %conv10 = sext i8 %i8 to i32
  %cmp11 = icmp eq i32 %conv10, 1
  br i1 %cmp11, label %land.lhs.true13, label %lor.lhs.false16

land.lhs.true13:                                  ; preds = %land.lhs.true
  %cmp14 = icmp sgt i32 %score, %alpha
  br i1 %cmp14, label %land.lhs.true22, label %lor.lhs.false16

lor.lhs.false16:                                  ; preds = %land.lhs.true13, %land.lhs.true
  %cmp17 = icmp sgt i32 %score, %alpha
  br i1 %cmp17, label %land.lhs.true19, label %if.else77

land.lhs.true19:                                  ; preds = %lor.lhs.false16
  %cmp20 = icmp slt i32 %score, %beta
  br i1 %cmp20, label %land.lhs.true22, label %if.else77

land.lhs.true22:                                  ; preds = %land.lhs.true19, %land.lhs.true13, %entry
  %i9 = load i32, i32* @is_pondering, align 4
  %tobool = icmp ne i32 %i9, 0
  br i1 %tobool, label %if.else77, label %if.then

if.then:                                          ; preds = %land.lhs.true22
  %cmp23 = icmp sle i32 %score, %alpha
  br i1 %cmp23, label %if.then25, label %if.else

if.then25:                                        ; preds = %if.then
  %i10 = load %struct.TType*, %struct.TType** @DP_TTable, align 8
  %idxprom26 = zext i32 %rem to i64
  %arrayidx27 = getelementptr inbounds %struct.TType, %struct.TType* %i10, i64 %idxprom26
  %Type28 = getelementptr inbounds %struct.TType, %struct.TType* %arrayidx27, i32 0, i32 3
  store i8 1, i8* %Type28, align 1
  %cmp29 = icmp slt i32 %score, -999500
  br i1 %cmp29, label %if.then31, label %if.end

if.then31:                                        ; preds = %if.then25
  br label %if.end

if.end:                                           ; preds = %if.then31, %if.then25
  %score.addr.0 = phi i32 [ -999500, %if.then31 ], [ %score, %if.then25 ]
  br label %if.end56

if.else:                                          ; preds = %if.then
  %cmp32 = icmp sge i32 %score, %beta
  br i1 %cmp32, label %if.then34, label %if.else42

if.then34:                                        ; preds = %if.else
  %i11 = load %struct.TType*, %struct.TType** @DP_TTable, align 8
  %idxprom35 = zext i32 %rem to i64
  %arrayidx36 = getelementptr inbounds %struct.TType, %struct.TType* %i11, i64 %idxprom35
  %Type37 = getelementptr inbounds %struct.TType, %struct.TType* %arrayidx36, i32 0, i32 3
  store i8 2, i8* %Type37, align 1
  %cmp38 = icmp sgt i32 %score, 999500
  br i1 %cmp38, label %if.then40, label %if.end41

if.then40:                                        ; preds = %if.then34
  br label %if.end41

if.end41:                                         ; preds = %if.then40, %if.then34
  %score.addr.1 = phi i32 [ 999500, %if.then40 ], [ %score, %if.then34 ]
  br label %if.end55

if.else42:                                        ; preds = %if.else
  %i12 = load %struct.TType*, %struct.TType** @DP_TTable, align 8
  %idxprom43 = zext i32 %rem to i64
  %arrayidx44 = getelementptr inbounds %struct.TType, %struct.TType* %i12, i64 %idxprom43
  %Type45 = getelementptr inbounds %struct.TType, %struct.TType* %arrayidx44, i32 0, i32 3
  store i8 3, i8* %Type45, align 1
  %cmp46 = icmp sgt i32 %score, 999500
  br i1 %cmp46, label %if.then48, label %if.else49

if.then48:                                        ; preds = %if.else42
  %i13 = load i32, i32* @ply, align 4
  %add = add nsw i32 %score, %i13
  br label %if.end54

if.else49:                                        ; preds = %if.else42
  %cmp50 = icmp slt i32 %score, -999500
  br i1 %cmp50, label %if.then52, label %if.end53

if.then52:                                        ; preds = %if.else49
  %i14 = load i32, i32* @ply, align 4
  %sub = sub nsw i32 %score, %i14
  br label %if.end53

if.end53:                                         ; preds = %if.then52, %if.else49
  %score.addr.2 = phi i32 [ %sub, %if.then52 ], [ %score, %if.else49 ]
  br label %if.end54

if.end54:                                         ; preds = %if.end53, %if.then48
  %score.addr.3 = phi i32 [ %add, %if.then48 ], [ %score.addr.2, %if.end53 ]
  br label %if.end55

if.end55:                                         ; preds = %if.end54, %if.end41
  %score.addr.4 = phi i32 [ %score.addr.1, %if.end41 ], [ %score.addr.3, %if.end54 ]
  br label %if.end56

if.end56:                                         ; preds = %if.end55, %if.end
  %score.addr.5 = phi i32 [ %score.addr.0, %if.end ], [ %score.addr.4, %if.end55 ]
  %i15 = load i32, i32* @hash, align 4
  %i16 = load %struct.TType*, %struct.TType** @DP_TTable, align 8
  %idxprom57 = zext i32 %rem to i64
  %arrayidx58 = getelementptr inbounds %struct.TType, %struct.TType* %i16, i64 %idxprom57
  %HashKey = getelementptr inbounds %struct.TType, %struct.TType* %arrayidx58, i32 0, i32 5
  store i32 %i15, i32* %HashKey, align 4
  %i17 = load i32, i32* @hold_hash, align 4
  %i18 = load %struct.TType*, %struct.TType** @DP_TTable, align 8
  %idxprom59 = zext i32 %rem to i64
  %arrayidx60 = getelementptr inbounds %struct.TType, %struct.TType* %i18, i64 %idxprom59
  %Hold_hash = getelementptr inbounds %struct.TType, %struct.TType* %arrayidx60, i32 0, i32 6
  store i32 %i17, i32* %Hold_hash, align 4
  %conv61 = trunc i32 %depth to i8
  %i19 = load %struct.TType*, %struct.TType** @DP_TTable, align 8
  %idxprom62 = zext i32 %rem to i64
  %arrayidx63 = getelementptr inbounds %struct.TType, %struct.TType* %i19, i64 %idxprom62
  %Depth64 = getelementptr inbounds %struct.TType, %struct.TType* %arrayidx63, i32 0, i32 0
  store i8 %conv61, i8* %Depth64, align 4
  %conv65 = trunc i32 %best to i16
  %i20 = load %struct.TType*, %struct.TType** @DP_TTable, align 8
  %idxprom66 = zext i32 %rem to i64
  %arrayidx67 = getelementptr inbounds %struct.TType, %struct.TType* %i20, i64 %idxprom66
  %Bestmove = getelementptr inbounds %struct.TType, %struct.TType* %arrayidx67, i32 0, i32 4
  store i16 %conv65, i16* %Bestmove, align 4
  %i21 = load %struct.TType*, %struct.TType** @DP_TTable, align 8
  %idxprom68 = zext i32 %rem to i64
  %arrayidx69 = getelementptr inbounds %struct.TType, %struct.TType* %i21, i64 %idxprom68
  %Bound = getelementptr inbounds %struct.TType, %struct.TType* %arrayidx69, i32 0, i32 7
  store i32 %score.addr.5, i32* %Bound, align 4
  %i22 = load i32, i32* @white_to_move, align 4
  %tobool70 = icmp ne i32 %i22, 0
  %i23 = zext i1 %tobool70 to i64
  %cond = select i1 %tobool70, i32 0, i32 1
  %conv71 = trunc i32 %cond to i8
  %i24 = load %struct.TType*, %struct.TType** @DP_TTable, align 8
  %idxprom72 = zext i32 %rem to i64
  %arrayidx73 = getelementptr inbounds %struct.TType, %struct.TType* %i24, i64 %idxprom72
  %OnMove = getelementptr inbounds %struct.TType, %struct.TType* %arrayidx73, i32 0, i32 1
  store i8 %conv71, i8* %OnMove, align 1
  %conv74 = trunc i32 %threat to i8
  %i25 = load %struct.TType*, %struct.TType** @DP_TTable, align 8
  %idxprom75 = zext i32 %rem to i64
  %arrayidx76 = getelementptr inbounds %struct.TType, %struct.TType* %i25, i64 %idxprom75
  %Threat = getelementptr inbounds %struct.TType, %struct.TType* %arrayidx76, i32 0, i32 2
  store i8 %conv74, i8* %Threat, align 2
  br label %if.end143

if.else77:                                        ; preds = %land.lhs.true22, %land.lhs.true19, %lor.lhs.false16, %lor.lhs.false
  %cmp78 = icmp sle i32 %score, %alpha
  br i1 %cmp78, label %if.then80, label %if.else88

if.then80:                                        ; preds = %if.else77
  %i26 = load %struct.TType*, %struct.TType** @AS_TTable, align 8
  %idxprom81 = zext i32 %rem to i64
  %arrayidx82 = getelementptr inbounds %struct.TType, %struct.TType* %i26, i64 %idxprom81
  %Type83 = getelementptr inbounds %struct.TType, %struct.TType* %arrayidx82, i32 0, i32 3
  store i8 1, i8* %Type83, align 1
  %cmp84 = icmp slt i32 %score, -999500
  br i1 %cmp84, label %if.then86, label %if.end87

if.then86:                                        ; preds = %if.then80
  br label %if.end87

if.end87:                                         ; preds = %if.then86, %if.then80
  %score.addr.6 = phi i32 [ -999500, %if.then86 ], [ %score, %if.then80 ]
  br label %if.end115

if.else88:                                        ; preds = %if.else77
  %cmp89 = icmp sge i32 %score, %beta
  br i1 %cmp89, label %if.then91, label %if.else99

if.then91:                                        ; preds = %if.else88
  %i27 = load %struct.TType*, %struct.TType** @AS_TTable, align 8
  %idxprom92 = zext i32 %rem to i64
  %arrayidx93 = getelementptr inbounds %struct.TType, %struct.TType* %i27, i64 %idxprom92
  %Type94 = getelementptr inbounds %struct.TType, %struct.TType* %arrayidx93, i32 0, i32 3
  store i8 2, i8* %Type94, align 1
  %cmp95 = icmp sgt i32 %score, 999500
  br i1 %cmp95, label %if.then97, label %if.end98

if.then97:                                        ; preds = %if.then91
  br label %if.end98

if.end98:                                         ; preds = %if.then97, %if.then91
  %score.addr.7 = phi i32 [ 999500, %if.then97 ], [ %score, %if.then91 ]
  br label %if.end114

if.else99:                                        ; preds = %if.else88
  %i28 = load %struct.TType*, %struct.TType** @AS_TTable, align 8
  %idxprom100 = zext i32 %rem to i64
  %arrayidx101 = getelementptr inbounds %struct.TType, %struct.TType* %i28, i64 %idxprom100
  %Type102 = getelementptr inbounds %struct.TType, %struct.TType* %arrayidx101, i32 0, i32 3
  store i8 3, i8* %Type102, align 1
  %cmp103 = icmp sgt i32 %score, 999500
  br i1 %cmp103, label %if.then105, label %if.else107

if.then105:                                       ; preds = %if.else99
  %i29 = load i32, i32* @ply, align 4
  %add106 = add nsw i32 %score, %i29
  br label %if.end113

if.else107:                                       ; preds = %if.else99
  %cmp108 = icmp slt i32 %score, -999500
  br i1 %cmp108, label %if.then110, label %if.end112

if.then110:                                       ; preds = %if.else107
  %i30 = load i32, i32* @ply, align 4
  %sub111 = sub nsw i32 %score, %i30
  br label %if.end112

if.end112:                                        ; preds = %if.then110, %if.else107
  %score.addr.8 = phi i32 [ %sub111, %if.then110 ], [ %score, %if.else107 ]
  br label %if.end113

if.end113:                                        ; preds = %if.end112, %if.then105
  %score.addr.9 = phi i32 [ %add106, %if.then105 ], [ %score.addr.8, %if.end112 ]
  br label %if.end114

if.end114:                                        ; preds = %if.end113, %if.end98
  %score.addr.10 = phi i32 [ %score.addr.7, %if.end98 ], [ %score.addr.9, %if.end113 ]
  br label %if.end115

if.end115:                                        ; preds = %if.end114, %if.end87
  %score.addr.11 = phi i32 [ %score.addr.6, %if.end87 ], [ %score.addr.10, %if.end114 ]
  %i31 = load i32, i32* @hash, align 4
  %i32 = load %struct.TType*, %struct.TType** @AS_TTable, align 8
  %idxprom116 = zext i32 %rem to i64
  %arrayidx117 = getelementptr inbounds %struct.TType, %struct.TType* %i32, i64 %idxprom116
  %HashKey118 = getelementptr inbounds %struct.TType, %struct.TType* %arrayidx117, i32 0, i32 5
  store i32 %i31, i32* %HashKey118, align 4
  %i33 = load i32, i32* @hold_hash, align 4
  %i34 = load %struct.TType*, %struct.TType** @AS_TTable, align 8
  %idxprom119 = zext i32 %rem to i64
  %arrayidx120 = getelementptr inbounds %struct.TType, %struct.TType* %i34, i64 %idxprom119
  %Hold_hash121 = getelementptr inbounds %struct.TType, %struct.TType* %arrayidx120, i32 0, i32 6
  store i32 %i33, i32* %Hold_hash121, align 4
  %conv122 = trunc i32 %depth to i8
  %i35 = load %struct.TType*, %struct.TType** @AS_TTable, align 8
  %idxprom123 = zext i32 %rem to i64
  %arrayidx124 = getelementptr inbounds %struct.TType, %struct.TType* %i35, i64 %idxprom123
  %Depth125 = getelementptr inbounds %struct.TType, %struct.TType* %arrayidx124, i32 0, i32 0
  store i8 %conv122, i8* %Depth125, align 4
  %conv126 = trunc i32 %best to i16
  %i36 = load %struct.TType*, %struct.TType** @AS_TTable, align 8
  %idxprom127 = zext i32 %rem to i64
  %arrayidx128 = getelementptr inbounds %struct.TType, %struct.TType* %i36, i64 %idxprom127
  %Bestmove129 = getelementptr inbounds %struct.TType, %struct.TType* %arrayidx128, i32 0, i32 4
  store i16 %conv126, i16* %Bestmove129, align 4
  %i37 = load %struct.TType*, %struct.TType** @AS_TTable, align 8
  %idxprom130 = zext i32 %rem to i64
  %arrayidx131 = getelementptr inbounds %struct.TType, %struct.TType* %i37, i64 %idxprom130
  %Bound132 = getelementptr inbounds %struct.TType, %struct.TType* %arrayidx131, i32 0, i32 7
  store i32 %score.addr.11, i32* %Bound132, align 4
  %i38 = load i32, i32* @white_to_move, align 4
  %tobool133 = icmp ne i32 %i38, 0
  %i39 = zext i1 %tobool133 to i64
  %cond134 = select i1 %tobool133, i32 0, i32 1
  %conv135 = trunc i32 %cond134 to i8
  %i40 = load %struct.TType*, %struct.TType** @AS_TTable, align 8
  %idxprom136 = zext i32 %rem to i64
  %arrayidx137 = getelementptr inbounds %struct.TType, %struct.TType* %i40, i64 %idxprom136
  %OnMove138 = getelementptr inbounds %struct.TType, %struct.TType* %arrayidx137, i32 0, i32 1
  store i8 %conv135, i8* %OnMove138, align 1
  %conv139 = trunc i32 %threat to i8
  %i41 = load %struct.TType*, %struct.TType** @AS_TTable, align 8
  %idxprom140 = zext i32 %rem to i64
  %arrayidx141 = getelementptr inbounds %struct.TType, %struct.TType* %i41, i64 %idxprom140
  %Threat142 = getelementptr inbounds %struct.TType, %struct.TType* %arrayidx141, i32 0, i32 2
  store i8 %conv139, i8* %Threat142, align 2
  br label %if.end143

if.end143:                                        ; preds = %if.end115, %if.end56
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @LearnStoreTT(i32 %score, i32 %nhash, i32 %hhash, i32 %tomove, i32 %best, i32 %depth) #0 {
entry:
  %i = load i32, i32* @TTSize, align 4
  %rem = urem i32 %nhash, %i
  %conv = trunc i32 %depth to i8
  %i1 = load %struct.TType*, %struct.TType** @AS_TTable, align 8
  %idxprom = zext i32 %rem to i64
  %arrayidx = getelementptr inbounds %struct.TType, %struct.TType* %i1, i64 %idxprom
  %Depth = getelementptr inbounds %struct.TType, %struct.TType* %arrayidx, i32 0, i32 0
  store i8 %conv, i8* %Depth, align 4
  %i2 = load i32, i32* @Variant, align 4
  %cmp = icmp ne i32 %i2, 3
  br i1 %cmp, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %entry
  %i3 = load i32, i32* @Variant, align 4
  %cmp2 = icmp ne i32 %i3, 4
  br i1 %cmp2, label %if.then, label %if.else

if.then:                                          ; preds = %land.lhs.true
  %i4 = load %struct.TType*, %struct.TType** @AS_TTable, align 8
  %idxprom4 = zext i32 %rem to i64
  %arrayidx5 = getelementptr inbounds %struct.TType, %struct.TType* %i4, i64 %idxprom4
  %Type = getelementptr inbounds %struct.TType, %struct.TType* %arrayidx5, i32 0, i32 3
  store i8 3, i8* %Type, align 1
  br label %if.end

if.else:                                          ; preds = %land.lhs.true, %entry
  %i5 = load %struct.TType*, %struct.TType** @AS_TTable, align 8
  %idxprom6 = zext i32 %rem to i64
  %arrayidx7 = getelementptr inbounds %struct.TType, %struct.TType* %i5, i64 %idxprom6
  %Type8 = getelementptr inbounds %struct.TType, %struct.TType* %arrayidx7, i32 0, i32 3
  store i8 1, i8* %Type8, align 1
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %i6 = load %struct.TType*, %struct.TType** @AS_TTable, align 8
  %idxprom9 = zext i32 %rem to i64
  %arrayidx10 = getelementptr inbounds %struct.TType, %struct.TType* %i6, i64 %idxprom9
  %HashKey = getelementptr inbounds %struct.TType, %struct.TType* %arrayidx10, i32 0, i32 5
  store i32 %nhash, i32* %HashKey, align 4
  %i7 = load %struct.TType*, %struct.TType** @AS_TTable, align 8
  %idxprom11 = zext i32 %rem to i64
  %arrayidx12 = getelementptr inbounds %struct.TType, %struct.TType* %i7, i64 %idxprom11
  %Hold_hash = getelementptr inbounds %struct.TType, %struct.TType* %arrayidx12, i32 0, i32 6
  store i32 %hhash, i32* %Hold_hash, align 4
  %conv13 = trunc i32 %best to i16
  %i8 = load %struct.TType*, %struct.TType** @AS_TTable, align 8
  %idxprom14 = zext i32 %rem to i64
  %arrayidx15 = getelementptr inbounds %struct.TType, %struct.TType* %i8, i64 %idxprom14
  %Bestmove = getelementptr inbounds %struct.TType, %struct.TType* %arrayidx15, i32 0, i32 4
  store i16 %conv13, i16* %Bestmove, align 4
  %i9 = load %struct.TType*, %struct.TType** @AS_TTable, align 8
  %idxprom16 = zext i32 %rem to i64
  %arrayidx17 = getelementptr inbounds %struct.TType, %struct.TType* %i9, i64 %idxprom16
  %Bound = getelementptr inbounds %struct.TType, %struct.TType* %arrayidx17, i32 0, i32 7
  store i32 %score, i32* %Bound, align 4
  %conv18 = trunc i32 %tomove to i8
  %i10 = load %struct.TType*, %struct.TType** @AS_TTable, align 8
  %idxprom19 = zext i32 %rem to i64
  %arrayidx20 = getelementptr inbounds %struct.TType, %struct.TType* %i10, i64 %idxprom19
  %OnMove = getelementptr inbounds %struct.TType, %struct.TType* %arrayidx20, i32 0, i32 1
  store i8 %conv18, i8* %OnMove, align 1
  %i11 = load %struct.TType*, %struct.TType** @AS_TTable, align 8
  %idxprom21 = zext i32 %rem to i64
  %arrayidx22 = getelementptr inbounds %struct.TType, %struct.TType* %i11, i64 %idxprom21
  %Threat = getelementptr inbounds %struct.TType, %struct.TType* %arrayidx22, i32 0, i32 2
  store i8 0, i8* %Threat, align 2
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @ProbeTT(i32* %score, i32 %beta, i32* %best, i32* %threat, i32* %donull, i32 %depth) #0 {
entry:
  store i32 1, i32* %donull, align 4
  %i = load i32, i32* @TTProbes, align 4
  %inc = add i32 %i, 1
  store i32 %inc, i32* @TTProbes, align 4
  %i1 = load i32, i32* @hash, align 4
  %i2 = load i32, i32* @TTSize, align 4
  %rem = urem i32 %i1, %i2
  %i3 = load %struct.TType*, %struct.TType** @DP_TTable, align 8
  %idxprom = zext i32 %rem to i64
  %arrayidx = getelementptr inbounds %struct.TType, %struct.TType* %i3, i64 %idxprom
  %HashKey = getelementptr inbounds %struct.TType, %struct.TType* %arrayidx, i32 0, i32 5
  %i4 = load i32, i32* %HashKey, align 4
  %i5 = load i32, i32* @hash, align 4
  %cmp = icmp eq i32 %i4, %i5
  br i1 %cmp, label %land.lhs.true, label %if.else75

land.lhs.true:                                    ; preds = %entry
  %i6 = load %struct.TType*, %struct.TType** @DP_TTable, align 8
  %idxprom1 = zext i32 %rem to i64
  %arrayidx2 = getelementptr inbounds %struct.TType, %struct.TType* %i6, i64 %idxprom1
  %Hold_hash = getelementptr inbounds %struct.TType, %struct.TType* %arrayidx2, i32 0, i32 6
  %i7 = load i32, i32* %Hold_hash, align 4
  %i8 = load i32, i32* @hold_hash, align 4
  %cmp3 = icmp eq i32 %i7, %i8
  br i1 %cmp3, label %land.lhs.true4, label %if.else75

land.lhs.true4:                                   ; preds = %land.lhs.true
  %i9 = load %struct.TType*, %struct.TType** @DP_TTable, align 8
  %idxprom5 = zext i32 %rem to i64
  %arrayidx6 = getelementptr inbounds %struct.TType, %struct.TType* %i9, i64 %idxprom5
  %OnMove = getelementptr inbounds %struct.TType, %struct.TType* %arrayidx6, i32 0, i32 1
  %i10 = load i8, i8* %OnMove, align 1
  %conv = sext i8 %i10 to i32
  %i11 = load i32, i32* @white_to_move, align 4
  %tobool = icmp ne i32 %i11, 0
  %i12 = zext i1 %tobool to i64
  %cond = select i1 %tobool, i32 0, i32 1
  %conv7 = trunc i32 %cond to i8
  %conv8 = sext i8 %conv7 to i32
  %cmp9 = icmp eq i32 %conv, %conv8
  br i1 %cmp9, label %if.then, label %if.else75

if.then:                                          ; preds = %land.lhs.true4
  %i13 = load i32, i32* @TTHits, align 4
  %inc11 = add i32 %i13, 1
  store i32 %inc11, i32* @TTHits, align 4
  %i14 = load %struct.TType*, %struct.TType** @DP_TTable, align 8
  %idxprom12 = zext i32 %rem to i64
  %arrayidx13 = getelementptr inbounds %struct.TType, %struct.TType* %i14, i64 %idxprom12
  %Type = getelementptr inbounds %struct.TType, %struct.TType* %arrayidx13, i32 0, i32 3
  %i15 = load i8, i8* %Type, align 1
  %conv14 = sext i8 %i15 to i32
  %cmp15 = icmp eq i32 %conv14, 1
  br i1 %cmp15, label %land.lhs.true17, label %if.end

land.lhs.true17:                                  ; preds = %if.then
  %sub = sub nsw i32 %depth, 2
  %sub18 = sub nsw i32 %sub, 1
  %i16 = load %struct.TType*, %struct.TType** @DP_TTable, align 8
  %idxprom19 = zext i32 %rem to i64
  %arrayidx20 = getelementptr inbounds %struct.TType, %struct.TType* %i16, i64 %idxprom19
  %Depth = getelementptr inbounds %struct.TType, %struct.TType* %arrayidx20, i32 0, i32 0
  %i17 = load i8, i8* %Depth, align 4
  %conv21 = sext i8 %i17 to i32
  %cmp22 = icmp sle i32 %sub18, %conv21
  br i1 %cmp22, label %land.lhs.true24, label %if.end

land.lhs.true24:                                  ; preds = %land.lhs.true17
  %i18 = load %struct.TType*, %struct.TType** @DP_TTable, align 8
  %idxprom25 = zext i32 %rem to i64
  %arrayidx26 = getelementptr inbounds %struct.TType, %struct.TType* %i18, i64 %idxprom25
  %Bound = getelementptr inbounds %struct.TType, %struct.TType* %arrayidx26, i32 0, i32 7
  %i19 = load i32, i32* %Bound, align 4
  %cmp27 = icmp slt i32 %i19, %beta
  br i1 %cmp27, label %if.then29, label %if.end

if.then29:                                        ; preds = %land.lhs.true24
  store i32 0, i32* %donull, align 4
  br label %if.end

if.end:                                           ; preds = %if.then29, %land.lhs.true24, %land.lhs.true17, %if.then
  %i20 = load %struct.TType*, %struct.TType** @DP_TTable, align 8
  %idxprom30 = zext i32 %rem to i64
  %arrayidx31 = getelementptr inbounds %struct.TType, %struct.TType* %i20, i64 %idxprom30
  %Threat = getelementptr inbounds %struct.TType, %struct.TType* %arrayidx31, i32 0, i32 2
  %i21 = load i8, i8* %Threat, align 2
  %tobool32 = icmp ne i8 %i21, 0
  br i1 %tobool32, label %if.then33, label %if.end35

if.then33:                                        ; preds = %if.end
  %inc34 = add nsw i32 %depth, 1
  br label %if.end35

if.end35:                                         ; preds = %if.then33, %if.end
  %depth.addr.0 = phi i32 [ %inc34, %if.then33 ], [ %depth, %if.end ]
  %i22 = load %struct.TType*, %struct.TType** @DP_TTable, align 8
  %idxprom36 = zext i32 %rem to i64
  %arrayidx37 = getelementptr inbounds %struct.TType, %struct.TType* %i22, i64 %idxprom36
  %Depth38 = getelementptr inbounds %struct.TType, %struct.TType* %arrayidx37, i32 0, i32 0
  %i23 = load i8, i8* %Depth38, align 4
  %conv39 = sext i8 %i23 to i32
  %cmp40 = icmp sge i32 %conv39, %depth.addr.0
  br i1 %cmp40, label %if.then42, label %if.else66

if.then42:                                        ; preds = %if.end35
  %i24 = load %struct.TType*, %struct.TType** @DP_TTable, align 8
  %idxprom43 = zext i32 %rem to i64
  %arrayidx44 = getelementptr inbounds %struct.TType, %struct.TType* %i24, i64 %idxprom43
  %Bound45 = getelementptr inbounds %struct.TType, %struct.TType* %arrayidx44, i32 0, i32 7
  %i25 = load i32, i32* %Bound45, align 4
  store i32 %i25, i32* %score, align 4
  %i26 = load i32, i32* %score, align 4
  %cmp46 = icmp sgt i32 %i26, 999500
  br i1 %cmp46, label %if.then48, label %if.else

if.then48:                                        ; preds = %if.then42
  %i27 = load i32, i32* @ply, align 4
  %i28 = load i32, i32* %score, align 4
  %sub49 = sub nsw i32 %i28, %i27
  store i32 %sub49, i32* %score, align 4
  br label %if.end54

if.else:                                          ; preds = %if.then42
  %i29 = load i32, i32* %score, align 4
  %cmp50 = icmp slt i32 %i29, -999500
  br i1 %cmp50, label %if.then52, label %if.end53

if.then52:                                        ; preds = %if.else
  %i30 = load i32, i32* @ply, align 4
  %i31 = load i32, i32* %score, align 4
  %add = add nsw i32 %i31, %i30
  store i32 %add, i32* %score, align 4
  br label %if.end53

if.end53:                                         ; preds = %if.then52, %if.else
  br label %if.end54

if.end54:                                         ; preds = %if.end53, %if.then48
  %i32 = load %struct.TType*, %struct.TType** @DP_TTable, align 8
  %idxprom55 = zext i32 %rem to i64
  %arrayidx56 = getelementptr inbounds %struct.TType, %struct.TType* %i32, i64 %idxprom55
  %Bestmove = getelementptr inbounds %struct.TType, %struct.TType* %arrayidx56, i32 0, i32 4
  %i33 = load i16, i16* %Bestmove, align 4
  %conv57 = zext i16 %i33 to i32
  store i32 %conv57, i32* %best, align 4
  %i34 = load %struct.TType*, %struct.TType** @DP_TTable, align 8
  %idxprom58 = zext i32 %rem to i64
  %arrayidx59 = getelementptr inbounds %struct.TType, %struct.TType* %i34, i64 %idxprom58
  %Threat60 = getelementptr inbounds %struct.TType, %struct.TType* %arrayidx59, i32 0, i32 2
  %i35 = load i8, i8* %Threat60, align 2
  %conv61 = sext i8 %i35 to i32
  store i32 %conv61, i32* %threat, align 4
  %i36 = load %struct.TType*, %struct.TType** @DP_TTable, align 8
  %idxprom62 = zext i32 %rem to i64
  %arrayidx63 = getelementptr inbounds %struct.TType, %struct.TType* %i36, i64 %idxprom62
  %Type64 = getelementptr inbounds %struct.TType, %struct.TType* %arrayidx63, i32 0, i32 3
  %i37 = load i8, i8* %Type64, align 1
  %conv65 = sext i8 %i37 to i32
  br label %return

if.else66:                                        ; preds = %if.end35
  %i38 = load %struct.TType*, %struct.TType** @DP_TTable, align 8
  %idxprom67 = zext i32 %rem to i64
  %arrayidx68 = getelementptr inbounds %struct.TType, %struct.TType* %i38, i64 %idxprom67
  %Bestmove69 = getelementptr inbounds %struct.TType, %struct.TType* %arrayidx68, i32 0, i32 4
  %i39 = load i16, i16* %Bestmove69, align 4
  %conv70 = zext i16 %i39 to i32
  store i32 %conv70, i32* %best, align 4
  %i40 = load %struct.TType*, %struct.TType** @DP_TTable, align 8
  %idxprom71 = zext i32 %rem to i64
  %arrayidx72 = getelementptr inbounds %struct.TType, %struct.TType* %i40, i64 %idxprom71
  %Threat73 = getelementptr inbounds %struct.TType, %struct.TType* %arrayidx72, i32 0, i32 2
  %i41 = load i8, i8* %Threat73, align 2
  %conv74 = sext i8 %i41 to i32
  store i32 %conv74, i32* %threat, align 4
  br label %return

if.else75:                                        ; preds = %land.lhs.true4, %land.lhs.true, %entry
  %i42 = load %struct.TType*, %struct.TType** @AS_TTable, align 8
  %idxprom76 = zext i32 %rem to i64
  %arrayidx77 = getelementptr inbounds %struct.TType, %struct.TType* %i42, i64 %idxprom76
  %HashKey78 = getelementptr inbounds %struct.TType, %struct.TType* %arrayidx77, i32 0, i32 5
  %i43 = load i32, i32* %HashKey78, align 4
  %i44 = load i32, i32* @hash, align 4
  %cmp79 = icmp eq i32 %i43, %i44
  br i1 %cmp79, label %land.lhs.true81, label %if.else172

land.lhs.true81:                                  ; preds = %if.else75
  %i45 = load %struct.TType*, %struct.TType** @AS_TTable, align 8
  %idxprom82 = zext i32 %rem to i64
  %arrayidx83 = getelementptr inbounds %struct.TType, %struct.TType* %i45, i64 %idxprom82
  %Hold_hash84 = getelementptr inbounds %struct.TType, %struct.TType* %arrayidx83, i32 0, i32 6
  %i46 = load i32, i32* %Hold_hash84, align 4
  %i47 = load i32, i32* @hold_hash, align 4
  %cmp85 = icmp eq i32 %i46, %i47
  br i1 %cmp85, label %land.lhs.true87, label %if.else172

land.lhs.true87:                                  ; preds = %land.lhs.true81
  %i48 = load %struct.TType*, %struct.TType** @AS_TTable, align 8
  %idxprom88 = zext i32 %rem to i64
  %arrayidx89 = getelementptr inbounds %struct.TType, %struct.TType* %i48, i64 %idxprom88
  %OnMove90 = getelementptr inbounds %struct.TType, %struct.TType* %arrayidx89, i32 0, i32 1
  %i49 = load i8, i8* %OnMove90, align 1
  %conv91 = sext i8 %i49 to i32
  %i50 = load i32, i32* @white_to_move, align 4
  %tobool92 = icmp ne i32 %i50, 0
  %i51 = zext i1 %tobool92 to i64
  %cond93 = select i1 %tobool92, i32 0, i32 1
  %conv94 = trunc i32 %cond93 to i8
  %conv95 = sext i8 %conv94 to i32
  %cmp96 = icmp eq i32 %conv91, %conv95
  br i1 %cmp96, label %if.then98, label %if.else172

if.then98:                                        ; preds = %land.lhs.true87
  %i52 = load i32, i32* @TTHits, align 4
  %inc99 = add i32 %i52, 1
  store i32 %inc99, i32* @TTHits, align 4
  %i53 = load %struct.TType*, %struct.TType** @AS_TTable, align 8
  %idxprom100 = zext i32 %rem to i64
  %arrayidx101 = getelementptr inbounds %struct.TType, %struct.TType* %i53, i64 %idxprom100
  %Type102 = getelementptr inbounds %struct.TType, %struct.TType* %arrayidx101, i32 0, i32 3
  %i54 = load i8, i8* %Type102, align 1
  %conv103 = sext i8 %i54 to i32
  %cmp104 = icmp eq i32 %conv103, 1
  br i1 %cmp104, label %land.lhs.true106, label %if.end122

land.lhs.true106:                                 ; preds = %if.then98
  %sub107 = sub nsw i32 %depth, 2
  %sub108 = sub nsw i32 %sub107, 1
  %i55 = load %struct.TType*, %struct.TType** @AS_TTable, align 8
  %idxprom109 = zext i32 %rem to i64
  %arrayidx110 = getelementptr inbounds %struct.TType, %struct.TType* %i55, i64 %idxprom109
  %Depth111 = getelementptr inbounds %struct.TType, %struct.TType* %arrayidx110, i32 0, i32 0
  %i56 = load i8, i8* %Depth111, align 4
  %conv112 = sext i8 %i56 to i32
  %cmp113 = icmp sle i32 %sub108, %conv112
  br i1 %cmp113, label %land.lhs.true115, label %if.end122

land.lhs.true115:                                 ; preds = %land.lhs.true106
  %i57 = load %struct.TType*, %struct.TType** @AS_TTable, align 8
  %idxprom116 = zext i32 %rem to i64
  %arrayidx117 = getelementptr inbounds %struct.TType, %struct.TType* %i57, i64 %idxprom116
  %Bound118 = getelementptr inbounds %struct.TType, %struct.TType* %arrayidx117, i32 0, i32 7
  %i58 = load i32, i32* %Bound118, align 4
  %cmp119 = icmp slt i32 %i58, %beta
  br i1 %cmp119, label %if.then121, label %if.end122

if.then121:                                       ; preds = %land.lhs.true115
  store i32 0, i32* %donull, align 4
  br label %if.end122

if.end122:                                        ; preds = %if.then121, %land.lhs.true115, %land.lhs.true106, %if.then98
  %i59 = load %struct.TType*, %struct.TType** @AS_TTable, align 8
  %idxprom123 = zext i32 %rem to i64
  %arrayidx124 = getelementptr inbounds %struct.TType, %struct.TType* %i59, i64 %idxprom123
  %Threat125 = getelementptr inbounds %struct.TType, %struct.TType* %arrayidx124, i32 0, i32 2
  %i60 = load i8, i8* %Threat125, align 2
  %tobool126 = icmp ne i8 %i60, 0
  br i1 %tobool126, label %if.then127, label %if.end129

if.then127:                                       ; preds = %if.end122
  %inc128 = add nsw i32 %depth, 1
  br label %if.end129

if.end129:                                        ; preds = %if.then127, %if.end122
  %depth.addr.1 = phi i32 [ %inc128, %if.then127 ], [ %depth, %if.end122 ]
  %i61 = load %struct.TType*, %struct.TType** @AS_TTable, align 8
  %idxprom130 = zext i32 %rem to i64
  %arrayidx131 = getelementptr inbounds %struct.TType, %struct.TType* %i61, i64 %idxprom130
  %Depth132 = getelementptr inbounds %struct.TType, %struct.TType* %arrayidx131, i32 0, i32 0
  %i62 = load i8, i8* %Depth132, align 4
  %conv133 = sext i8 %i62 to i32
  %cmp134 = icmp sge i32 %conv133, %depth.addr.1
  br i1 %cmp134, label %if.then136, label %if.else163

if.then136:                                       ; preds = %if.end129
  %i63 = load %struct.TType*, %struct.TType** @AS_TTable, align 8
  %idxprom137 = zext i32 %rem to i64
  %arrayidx138 = getelementptr inbounds %struct.TType, %struct.TType* %i63, i64 %idxprom137
  %Bound139 = getelementptr inbounds %struct.TType, %struct.TType* %arrayidx138, i32 0, i32 7
  %i64 = load i32, i32* %Bound139, align 4
  store i32 %i64, i32* %score, align 4
  %i65 = load i32, i32* %score, align 4
  %cmp140 = icmp sgt i32 %i65, 999500
  br i1 %cmp140, label %if.then142, label %if.else144

if.then142:                                       ; preds = %if.then136
  %i66 = load i32, i32* @ply, align 4
  %i67 = load i32, i32* %score, align 4
  %sub143 = sub nsw i32 %i67, %i66
  store i32 %sub143, i32* %score, align 4
  br label %if.end150

if.else144:                                       ; preds = %if.then136
  %i68 = load i32, i32* %score, align 4
  %cmp145 = icmp slt i32 %i68, -999500
  br i1 %cmp145, label %if.then147, label %if.end149

if.then147:                                       ; preds = %if.else144
  %i69 = load i32, i32* @ply, align 4
  %i70 = load i32, i32* %score, align 4
  %add148 = add nsw i32 %i70, %i69
  store i32 %add148, i32* %score, align 4
  br label %if.end149

if.end149:                                        ; preds = %if.then147, %if.else144
  br label %if.end150

if.end150:                                        ; preds = %if.end149, %if.then142
  %i71 = load %struct.TType*, %struct.TType** @AS_TTable, align 8
  %idxprom151 = zext i32 %rem to i64
  %arrayidx152 = getelementptr inbounds %struct.TType, %struct.TType* %i71, i64 %idxprom151
  %Bestmove153 = getelementptr inbounds %struct.TType, %struct.TType* %arrayidx152, i32 0, i32 4
  %i72 = load i16, i16* %Bestmove153, align 4
  %conv154 = zext i16 %i72 to i32
  store i32 %conv154, i32* %best, align 4
  %i73 = load %struct.TType*, %struct.TType** @AS_TTable, align 8
  %idxprom155 = zext i32 %rem to i64
  %arrayidx156 = getelementptr inbounds %struct.TType, %struct.TType* %i73, i64 %idxprom155
  %Threat157 = getelementptr inbounds %struct.TType, %struct.TType* %arrayidx156, i32 0, i32 2
  %i74 = load i8, i8* %Threat157, align 2
  %conv158 = sext i8 %i74 to i32
  store i32 %conv158, i32* %threat, align 4
  %i75 = load %struct.TType*, %struct.TType** @AS_TTable, align 8
  %idxprom159 = zext i32 %rem to i64
  %arrayidx160 = getelementptr inbounds %struct.TType, %struct.TType* %i75, i64 %idxprom159
  %Type161 = getelementptr inbounds %struct.TType, %struct.TType* %arrayidx160, i32 0, i32 3
  %i76 = load i8, i8* %Type161, align 1
  %conv162 = sext i8 %i76 to i32
  br label %return

if.else163:                                       ; preds = %if.end129
  %i77 = load %struct.TType*, %struct.TType** @AS_TTable, align 8
  %idxprom164 = zext i32 %rem to i64
  %arrayidx165 = getelementptr inbounds %struct.TType, %struct.TType* %i77, i64 %idxprom164
  %Bestmove166 = getelementptr inbounds %struct.TType, %struct.TType* %arrayidx165, i32 0, i32 4
  %i78 = load i16, i16* %Bestmove166, align 4
  %conv167 = zext i16 %i78 to i32
  store i32 %conv167, i32* %best, align 4
  %i79 = load %struct.TType*, %struct.TType** @AS_TTable, align 8
  %idxprom168 = zext i32 %rem to i64
  %arrayidx169 = getelementptr inbounds %struct.TType, %struct.TType* %i79, i64 %idxprom168
  %Threat170 = getelementptr inbounds %struct.TType, %struct.TType* %arrayidx169, i32 0, i32 2
  %i80 = load i8, i8* %Threat170, align 2
  %conv171 = sext i8 %i80 to i32
  store i32 %conv171, i32* %threat, align 4
  br label %return

if.else172:                                       ; preds = %land.lhs.true87, %land.lhs.true81, %if.else75
  br label %return

return:                                           ; preds = %if.else172, %if.else163, %if.end150, %if.else66, %if.end54
  %retval.0 = phi i32 [ %conv65, %if.end54 ], [ 0, %if.else66 ], [ %conv162, %if.end150 ], [ 0, %if.else163 ], [ 4, %if.else172 ]
  ret i32 %retval.0
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @QProbeTT(i32* %score, i32* %best) #0 {
entry:
  %i = load i32, i32* @TTProbes, align 4
  %inc = add i32 %i, 1
  store i32 %inc, i32* @TTProbes, align 4
  %i1 = load i32, i32* @hash, align 4
  %i2 = load i32, i32* @TTSize, align 4
  %rem = urem i32 %i1, %i2
  %i3 = load %struct.QTType*, %struct.QTType** @QS_TTable, align 8
  %idxprom = zext i32 %rem to i64
  %arrayidx = getelementptr inbounds %struct.QTType, %struct.QTType* %i3, i64 %idxprom
  %HashKey = getelementptr inbounds %struct.QTType, %struct.QTType* %arrayidx, i32 0, i32 3
  %i4 = load i32, i32* %HashKey, align 4
  %i5 = load i32, i32* @hash, align 4
  %cmp = icmp eq i32 %i4, %i5
  br i1 %cmp, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %entry
  %i6 = load %struct.QTType*, %struct.QTType** @QS_TTable, align 8
  %idxprom1 = zext i32 %rem to i64
  %arrayidx2 = getelementptr inbounds %struct.QTType, %struct.QTType* %i6, i64 %idxprom1
  %Hold_hash = getelementptr inbounds %struct.QTType, %struct.QTType* %arrayidx2, i32 0, i32 4
  %i7 = load i32, i32* %Hold_hash, align 4
  %i8 = load i32, i32* @hold_hash, align 4
  %cmp3 = icmp eq i32 %i7, %i8
  br i1 %cmp3, label %land.lhs.true4, label %if.else

land.lhs.true4:                                   ; preds = %land.lhs.true
  %i9 = load %struct.QTType*, %struct.QTType** @QS_TTable, align 8
  %idxprom5 = zext i32 %rem to i64
  %arrayidx6 = getelementptr inbounds %struct.QTType, %struct.QTType* %i9, i64 %idxprom5
  %OnMove = getelementptr inbounds %struct.QTType, %struct.QTType* %arrayidx6, i32 0, i32 0
  %i10 = load i8, i8* %OnMove, align 4
  %conv = sext i8 %i10 to i32
  %i11 = load i32, i32* @white_to_move, align 4
  %tobool = icmp ne i32 %i11, 0
  %i12 = zext i1 %tobool to i64
  %cond = select i1 %tobool, i32 0, i32 1
  %conv7 = trunc i32 %cond to i8
  %conv8 = sext i8 %conv7 to i32
  %cmp9 = icmp eq i32 %conv, %conv8
  br i1 %cmp9, label %if.then, label %if.else

if.then:                                          ; preds = %land.lhs.true4
  %i13 = load i32, i32* @TTHits, align 4
  %inc11 = add i32 %i13, 1
  store i32 %inc11, i32* @TTHits, align 4
  %i14 = load %struct.QTType*, %struct.QTType** @QS_TTable, align 8
  %idxprom12 = zext i32 %rem to i64
  %arrayidx13 = getelementptr inbounds %struct.QTType, %struct.QTType* %i14, i64 %idxprom12
  %Bound = getelementptr inbounds %struct.QTType, %struct.QTType* %arrayidx13, i32 0, i32 5
  %i15 = load i32, i32* %Bound, align 4
  store i32 %i15, i32* %score, align 4
  %i16 = load %struct.QTType*, %struct.QTType** @QS_TTable, align 8
  %idxprom14 = zext i32 %rem to i64
  %arrayidx15 = getelementptr inbounds %struct.QTType, %struct.QTType* %i16, i64 %idxprom14
  %Bestmove = getelementptr inbounds %struct.QTType, %struct.QTType* %arrayidx15, i32 0, i32 2
  %i17 = load i16, i16* %Bestmove, align 2
  %conv16 = zext i16 %i17 to i32
  store i32 %conv16, i32* %best, align 4
  %i18 = load %struct.QTType*, %struct.QTType** @QS_TTable, align 8
  %idxprom17 = zext i32 %rem to i64
  %arrayidx18 = getelementptr inbounds %struct.QTType, %struct.QTType* %i18, i64 %idxprom17
  %Type = getelementptr inbounds %struct.QTType, %struct.QTType* %arrayidx18, i32 0, i32 1
  %i19 = load i8, i8* %Type, align 1
  %conv19 = sext i8 %i19 to i32
  br label %return

if.else:                                          ; preds = %land.lhs.true4, %land.lhs.true, %entry
  br label %return

return:                                           ; preds = %if.else, %if.then
  %retval.0 = phi i32 [ %conv19, %if.then ], [ 4, %if.else ]
  ret i32 %retval.0
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @alloc_hash() #0 {
entry:
  %i = load i32, i32* @TTSize, align 4
  %conv = sext i32 %i to i64
  %mul = mul i64 20, %conv
  %call = call noalias i8* @malloc(i64 %mul) #8
  %i1 = bitcast i8* %call to %struct.TType*
  store %struct.TType* %i1, %struct.TType** @AS_TTable, align 8
  %i2 = load i32, i32* @TTSize, align 4
  %conv1 = sext i32 %i2 to i64
  %mul2 = mul i64 20, %conv1
  %call3 = call noalias i8* @malloc(i64 %mul2) #8
  %i3 = bitcast i8* %call3 to %struct.TType*
  store %struct.TType* %i3, %struct.TType** @DP_TTable, align 8
  %i4 = load i32, i32* @TTSize, align 4
  %conv4 = sext i32 %i4 to i64
  %mul5 = mul i64 16, %conv4
  %call6 = call noalias i8* @malloc(i64 %mul5) #8
  %i5 = bitcast i8* %call6 to %struct.QTType*
  store %struct.QTType* %i5, %struct.QTType** @QS_TTable, align 8
  %i6 = load %struct.TType*, %struct.TType** @AS_TTable, align 8
  %cmp = icmp eq %struct.TType* %i6, null
  br i1 %cmp, label %if.then, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %entry
  %i7 = load %struct.TType*, %struct.TType** @DP_TTable, align 8
  %cmp8 = icmp eq %struct.TType* %i7, null
  br i1 %cmp8, label %if.then, label %lor.lhs.false10

lor.lhs.false10:                                  ; preds = %lor.lhs.false
  %i8 = load %struct.QTType*, %struct.QTType** @QS_TTable, align 8
  %cmp11 = icmp eq %struct.QTType* %i8, null
  br i1 %cmp11, label %if.then, label %if.end

if.then:                                          ; preds = %lor.lhs.false10, %lor.lhs.false, %entry
  %call13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([38 x i8], [38 x i8]* @.str.392, i64 0, i64 0))
  call void @exit(i32 1) #9
  unreachable

if.end:                                           ; preds = %lor.lhs.false10
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @free_hash() #0 {
entry:
  %i = load %struct.TType*, %struct.TType** @AS_TTable, align 8
  %i1 = bitcast %struct.TType* %i to i8*
  call void @free(i8* %i1) #8
  %i2 = load %struct.TType*, %struct.TType** @DP_TTable, align 8
  %i3 = bitcast %struct.TType* %i2 to i8*
  call void @free(i8* %i3) #8
  %i4 = load %struct.QTType*, %struct.QTType** @QS_TTable, align 8
  %i5 = bitcast %struct.QTType* %i4 to i8*
  call void @free(i8* %i5) #8
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @allocate_time() #0 {
entry:
  %i = load i32, i32* @moves_to_tc, align 4
  %tobool = icmp ne i32 %i, 0
  br i1 %tobool, label %if.else110, label %if.then

if.then:                                          ; preds = %entry
  %i1 = load i32, i32* @min_per_game, align 4
  %cmp = icmp slt i32 %i1, 6
  br i1 %cmp, label %land.lhs.true, label %lor.lhs.false

land.lhs.true:                                    ; preds = %if.then
  %i2 = load i32, i32* @inc, align 4
  %tobool1 = icmp ne i32 %i2, 0
  br i1 %tobool1, label %lor.lhs.false, label %if.then7

lor.lhs.false:                                    ; preds = %land.lhs.true, %if.then
  %i3 = load i32, i32* @time_left, align 4
  %conv = sitofp i32 %i3 to double
  %i4 = load i32, i32* @min_per_game, align 4
  %mul = mul nsw i32 %i4, 6000
  %i5 = load i32, i32* @sec_per_game, align 4
  %mul2 = mul nsw i32 %i5, 100
  %add = add nsw i32 %mul, %mul2
  %conv3 = sitofp i32 %add to double
  %mul4 = fmul double %conv3, 4.000000e+00
  %div = fdiv double %mul4, 5.000000e+00
  %cmp5 = fcmp olt double %conv, %div
  br i1 %cmp5, label %if.then7, label %if.end37

if.then7:                                         ; preds = %lor.lhs.false, %land.lhs.true
  %i6 = load i32, i32* @opp_time, align 4
  %i7 = load i32, i32* @time_left, align 4
  %sub = sub nsw i32 %i6, %i7
  %conv8 = sitofp i32 %sub to double
  %i8 = load i32, i32* @opp_time, align 4
  %conv9 = sitofp i32 %i8 to double
  %div10 = fdiv double %conv9, 5.000000e+00
  %cmp11 = fcmp ogt double %conv8, %div10
  br i1 %cmp11, label %land.lhs.true13, label %if.else

land.lhs.true13:                                  ; preds = %if.then7
  %i9 = load i32, i32* @xb_mode, align 4
  %tobool14 = icmp ne i32 %i9, 0
  br i1 %tobool14, label %if.then15, label %if.else

if.then15:                                        ; preds = %land.lhs.true13
  br label %if.end36

if.else:                                          ; preds = %land.lhs.true13, %if.then7
  %i10 = load i32, i32* @opp_time, align 4
  %i11 = load i32, i32* @time_left, align 4
  %sub16 = sub nsw i32 %i10, %i11
  %conv17 = sitofp i32 %sub16 to double
  %i12 = load i32, i32* @opp_time, align 4
  %conv18 = sitofp i32 %i12 to double
  %div19 = fdiv double %conv18, 1.000000e+01
  %cmp20 = fcmp ogt double %conv17, %div19
  br i1 %cmp20, label %land.lhs.true22, label %if.else25

land.lhs.true22:                                  ; preds = %if.else
  %i13 = load i32, i32* @xb_mode, align 4
  %tobool23 = icmp ne i32 %i13, 0
  br i1 %tobool23, label %if.then24, label %if.else25

if.then24:                                        ; preds = %land.lhs.true22
  br label %if.end35

if.else25:                                        ; preds = %land.lhs.true22, %if.else
  %i14 = load i32, i32* @opp_time, align 4
  %i15 = load i32, i32* @time_left, align 4
  %sub26 = sub nsw i32 %i14, %i15
  %conv27 = sitofp i32 %sub26 to double
  %i16 = load i32, i32* @opp_time, align 4
  %conv28 = sitofp i32 %i16 to double
  %div29 = fdiv double %conv28, 2.000000e+01
  %cmp30 = fcmp ogt double %conv27, %div29
  br i1 %cmp30, label %land.lhs.true32, label %if.end

land.lhs.true32:                                  ; preds = %if.else25
  %i17 = load i32, i32* @xb_mode, align 4
  %tobool33 = icmp ne i32 %i17, 0
  br i1 %tobool33, label %if.then34, label %if.end

if.then34:                                        ; preds = %land.lhs.true32
  br label %if.end

if.end:                                           ; preds = %if.then34, %land.lhs.true32, %if.else25
  %move_speed.0 = phi double [ 2.500000e+01, %if.then34 ], [ 2.000000e+01, %land.lhs.true32 ], [ 2.000000e+01, %if.else25 ]
  br label %if.end35

if.end35:                                         ; preds = %if.end, %if.then24
  %move_speed.1 = phi double [ 3.000000e+01, %if.then24 ], [ %move_speed.0, %if.end ]
  br label %if.end36

if.end36:                                         ; preds = %if.end35, %if.then15
  %move_speed.2 = phi double [ 4.000000e+01, %if.then15 ], [ %move_speed.1, %if.end35 ]
  br label %if.end37

if.end37:                                         ; preds = %if.end36, %lor.lhs.false
  %move_speed.3 = phi double [ %move_speed.2, %if.end36 ], [ 2.000000e+01, %lor.lhs.false ]
  %i18 = load i32, i32* @Variant, align 4
  %cmp38 = icmp ne i32 %i18, 3
  br i1 %cmp38, label %land.lhs.true40, label %if.else67

land.lhs.true40:                                  ; preds = %if.end37
  %i19 = load i32, i32* @Variant, align 4
  %cmp41 = icmp ne i32 %i19, 4
  br i1 %cmp41, label %if.then43, label %if.else67

if.then43:                                        ; preds = %land.lhs.true40
  %i20 = load i32, i32* @time_left, align 4
  %i21 = load i32, i32* @opp_time, align 4
  %sub44 = sub nsw i32 %i20, %i21
  %conv45 = sitofp i32 %sub44 to double
  %i22 = load i32, i32* @time_left, align 4
  %conv46 = sitofp i32 %i22 to double
  %div47 = fdiv double %conv46, 5.000000e+00
  %cmp48 = fcmp ogt double %conv45, %div47
  br i1 %cmp48, label %land.lhs.true50, label %if.else54

land.lhs.true50:                                  ; preds = %if.then43
  %i23 = load i32, i32* @xb_mode, align 4
  %tobool51 = icmp ne i32 %i23, 0
  br i1 %tobool51, label %if.then52, label %if.else54

if.then52:                                        ; preds = %land.lhs.true50
  %sub53 = fsub double %move_speed.3, 1.000000e+01
  br label %if.end66

if.else54:                                        ; preds = %land.lhs.true50, %if.then43
  %i24 = load i32, i32* @time_left, align 4
  %i25 = load i32, i32* @opp_time, align 4
  %sub55 = sub nsw i32 %i24, %i25
  %conv56 = sitofp i32 %sub55 to double
  %i26 = load i32, i32* @time_left, align 4
  %conv57 = sitofp i32 %i26 to double
  %div58 = fdiv double %conv57, 1.000000e+01
  %cmp59 = fcmp ogt double %conv56, %div58
  br i1 %cmp59, label %land.lhs.true61, label %if.end65

land.lhs.true61:                                  ; preds = %if.else54
  %i27 = load i32, i32* @xb_mode, align 4
  %tobool62 = icmp ne i32 %i27, 0
  br i1 %tobool62, label %if.then63, label %if.end65

if.then63:                                        ; preds = %land.lhs.true61
  %sub64 = fsub double %move_speed.3, 5.000000e+00
  br label %if.end65

if.end65:                                         ; preds = %if.then63, %land.lhs.true61, %if.else54
  %move_speed.4 = phi double [ %sub64, %if.then63 ], [ %move_speed.3, %land.lhs.true61 ], [ %move_speed.3, %if.else54 ]
  br label %if.end66

if.end66:                                         ; preds = %if.end65, %if.then52
  %move_speed.5 = phi double [ %sub53, %if.then52 ], [ %move_speed.4, %if.end65 ]
  br label %if.end79

if.else67:                                        ; preds = %land.lhs.true40, %if.end37
  %i28 = load i32, i32* @Variant, align 4
  %cmp68 = icmp eq i32 %i28, 3
  br i1 %cmp68, label %if.then70, label %if.else72

if.then70:                                        ; preds = %if.else67
  %sub71 = fsub double %move_speed.3, 1.000000e+01
  br label %if.end78

if.else72:                                        ; preds = %if.else67
  %i29 = load i32, i32* @Variant, align 4
  %cmp73 = icmp eq i32 %i29, 4
  br i1 %cmp73, label %if.then75, label %if.end77

if.then75:                                        ; preds = %if.else72
  %sub76 = fsub double %move_speed.3, 5.000000e+00
  br label %if.end77

if.end77:                                         ; preds = %if.then75, %if.else72
  %move_speed.6 = phi double [ %sub76, %if.then75 ], [ %move_speed.3, %if.else72 ]
  br label %if.end78

if.end78:                                         ; preds = %if.end77, %if.then70
  %move_speed.7 = phi double [ %sub71, %if.then70 ], [ %move_speed.6, %if.end77 ]
  br label %if.end79

if.end79:                                         ; preds = %if.end78, %if.end66
  %move_speed.8 = phi double [ %move_speed.5, %if.end66 ], [ %move_speed.7, %if.end78 ]
  %i30 = load i32, i32* @time_left, align 4
  %conv80 = sitofp i32 %i30 to double
  %div81 = fdiv double %conv80, %move_speed.8
  %i31 = load i32, i32* @inc, align 4
  %tobool82 = icmp ne i32 %i31, 0
  br i1 %tobool82, label %if.then83, label %if.end109

if.then83:                                        ; preds = %if.end79
  %i32 = load i32, i32* @time_left, align 4
  %conv84 = sitofp i32 %i32 to double
  %sub85 = fsub double %conv84, %div81
  %i33 = load i32, i32* @inc, align 4
  %conv86 = sitofp i32 %i33 to double
  %sub87 = fsub double %sub85, %conv86
  %cmp88 = fcmp ogt double %sub87, 5.000000e+02
  br i1 %cmp88, label %if.then90, label %if.else93

if.then90:                                        ; preds = %if.then83
  %i34 = load i32, i32* @inc, align 4
  %conv91 = sitofp i32 %i34 to double
  %add92 = fadd double %div81, %conv91
  br label %if.end108

if.else93:                                        ; preds = %if.then83
  %i35 = load i32, i32* @time_left, align 4
  %conv94 = sitofp i32 %i35 to double
  %sub95 = fsub double %conv94, %div81
  %i36 = load i32, i32* @inc, align 4
  %conv96 = sitofp i32 %i36 to double
  %mul97 = fmul double %conv96, 2.000000e+00
  %div98 = fdiv double %mul97, 3.000000e+00
  %sub99 = fsub double %sub95, %div98
  %cmp100 = fcmp ogt double %sub99, 1.000000e+02
  br i1 %cmp100, label %if.then102, label %if.end107

if.then102:                                       ; preds = %if.else93
  %i37 = load i32, i32* @inc, align 4
  %conv103 = sitofp i32 %i37 to double
  %mul104 = fmul double %conv103, 2.000000e+00
  %div105 = fdiv double %mul104, 3.000000e+00
  %add106 = fadd double %div81, %div105
  br label %if.end107

if.end107:                                        ; preds = %if.then102, %if.else93
  %allocated_time.0 = phi double [ %add106, %if.then102 ], [ %div81, %if.else93 ]
  br label %if.end108

if.end108:                                        ; preds = %if.end107, %if.then90
  %allocated_time.1 = phi double [ %add92, %if.then90 ], [ %allocated_time.0, %if.end107 ]
  br label %if.end109

if.end109:                                        ; preds = %if.end108, %if.end79
  %allocated_time.2 = phi double [ %allocated_time.1, %if.end108 ], [ %div81, %if.end79 ]
  br label %if.end134

if.else110:                                       ; preds = %entry
  %i38 = load i32, i32* @min_per_game, align 4
  %conv111 = sitofp i32 %i38 to float
  %conv112 = fpext float %conv111 to double
  %mul113 = fmul double %conv112, 6.000000e+03
  %i39 = load i32, i32* @sec_per_game, align 4
  %conv114 = sitofp i32 %i39 to float
  %conv115 = fpext float %conv114 to double
  %mul116 = fmul double %conv115, 1.000000e+02
  %add117 = fadd double %mul113, %mul116
  %i40 = load i32, i32* @moves_to_tc, align 4
  %conv118 = sitofp i32 %i40 to float
  %conv119 = fpext float %conv118 to double
  %div120 = fdiv double %add117, %conv119
  %sub121 = fsub double %div120, 1.000000e+02
  %i41 = load i32, i32* @time_cushion, align 4
  %tobool122 = icmp ne i32 %i41, 0
  br i1 %tobool122, label %if.then123, label %if.end133

if.then123:                                       ; preds = %if.else110
  %i42 = load i32, i32* @time_cushion, align 4
  %conv124 = sitofp i32 %i42 to double
  %mul125 = fmul double %conv124, 2.100000e+00
  %div126 = fdiv double %mul125, 3.000000e+00
  %add127 = fadd double %sub121, %div126
  %i43 = load i32, i32* @time_cushion, align 4
  %conv128 = sitofp i32 %i43 to double
  %mul129 = fmul double %conv128, 2.100000e+00
  %div130 = fdiv double %mul129, 3.000000e+00
  %conv131 = fptosi double %div130 to i32
  %i44 = load i32, i32* @time_cushion, align 4
  %sub132 = sub nsw i32 %i44, %conv131
  store i32 %sub132, i32* @time_cushion, align 4
  br label %if.end133

if.end133:                                        ; preds = %if.then123, %if.else110
  %allocated_time.3 = phi double [ %add127, %if.then123 ], [ %sub121, %if.else110 ]
  br label %if.end134

if.end134:                                        ; preds = %if.end133, %if.end109
  %allocated_time.4 = phi double [ %allocated_time.3, %if.end133 ], [ %allocated_time.2, %if.end109 ]
  %i45 = load i32, i32* @Variant, align 4
  %cmp135 = icmp eq i32 %i45, 1
  br i1 %cmp135, label %if.then137, label %if.end147

if.then137:                                       ; preds = %if.end134
  %mul138 = fmul double %allocated_time.4, 2.500000e-01
  %i46 = load i32, i32* @opp_time, align 4
  %i47 = load i32, i32* @time_left, align 4
  %cmp139 = icmp sgt i32 %i46, %i47
  br i1 %cmp139, label %if.then144, label %lor.lhs.false141

lor.lhs.false141:                                 ; preds = %if.then137
  %i48 = load i32, i32* @opp_time, align 4
  %cmp142 = icmp slt i32 %i48, 1500
  br i1 %cmp142, label %if.then144, label %if.end146

if.then144:                                       ; preds = %lor.lhs.false141, %if.then137
  %mul145 = fmul double %mul138, 5.000000e-01
  br label %if.end146

if.end146:                                        ; preds = %if.then144, %lor.lhs.false141
  %allocated_time.5 = phi double [ %mul145, %if.then144 ], [ %mul138, %lor.lhs.false141 ]
  br label %if.end147

if.end147:                                        ; preds = %if.end146, %if.end134
  %allocated_time.6 = phi double [ %allocated_time.5, %if.end146 ], [ %allocated_time.4, %if.end134 ]
  %conv148 = fptosi double %allocated_time.6 to i32
  ret i32 %conv148
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @comp_to_san(%struct.move_s* byval(%struct.move_s) align 8 %move, i8* %str) #0 {
entry:
  %moves = alloca [512 x %struct.move_s], align 16
  %evade_moves = alloca [512 x %struct.move_s], align 16
  %type_to_char = alloca [14 x i32], align 16
  %i = bitcast [14 x i32]* %type_to_char to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %i, i8* align 16 bitcast ([14 x i32]* @__const.comp_to_san.type_to_char to i8*), i64 56, i1 false)
  %from = getelementptr inbounds %struct.move_s, %struct.move_s* %move, i32 0, i32 0
  %i1 = load i32, i32* %from, align 8
  %idxprom = sext i32 %i1 to i64
  %arrayidx = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xrank to [144 x i32]*), i64 0, i64 %idxprom
  %i2 = load i32, i32* %arrayidx, align 4
  %target = getelementptr inbounds %struct.move_s, %struct.move_s* %move, i32 0, i32 1
  %i3 = load i32, i32* %target, align 4
  %idxprom1 = sext i32 %i3 to i64
  %arrayidx2 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xrank to [144 x i32]*), i64 0, i64 %idxprom1
  %i4 = load i32, i32* %arrayidx2, align 4
  %from3 = getelementptr inbounds %struct.move_s, %struct.move_s* %move, i32 0, i32 0
  %i5 = load i32, i32* %from3, align 8
  %idxprom4 = sext i32 %i5 to i64
  %arrayidx5 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xfile to [144 x i32]*), i64 0, i64 %idxprom4
  %i6 = load i32, i32* %arrayidx5, align 4
  %add = add nsw i32 %i6, 97
  %sub = sub nsw i32 %add, 1
  %conv = trunc i32 %sub to i8
  %target6 = getelementptr inbounds %struct.move_s, %struct.move_s* %move, i32 0, i32 1
  %i7 = load i32, i32* %target6, align 4
  %idxprom7 = sext i32 %i7 to i64
  %arrayidx8 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xfile to [144 x i32]*), i64 0, i64 %idxprom7
  %i8 = load i32, i32* %arrayidx8, align 4
  %add9 = add nsw i32 %i8, 97
  %sub10 = sub nsw i32 %add9, 1
  %conv11 = trunc i32 %sub10 to i8
  %from12 = getelementptr inbounds %struct.move_s, %struct.move_s* %move, i32 0, i32 0
  %i9 = load i32, i32* %from12, align 8
  %cmp = icmp eq i32 %i9, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %promoted = getelementptr inbounds %struct.move_s, %struct.move_s* %move, i32 0, i32 3
  %i10 = load i32, i32* %promoted, align 4
  %idxprom14 = sext i32 %i10 to i64
  %arrayidx15 = getelementptr inbounds [14 x i32], [14 x i32]* %type_to_char, i64 0, i64 %idxprom14
  %i11 = load i32, i32* %arrayidx15, align 4
  %conv16 = sext i8 %conv11 to i32
  %call = call i32 (i8*, i8*, ...) @sprintf(i8* %str, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.399, i64 0, i64 0), i32 %i11, i32 %conv16, i32 %i4) #8
  br label %if.end209

if.else:                                          ; preds = %entry
  %from17 = getelementptr inbounds %struct.move_s, %struct.move_s* %move, i32 0, i32 0
  %i12 = load i32, i32* %from17, align 8
  %idxprom18 = sext i32 %i12 to i64
  %arrayidx19 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom18
  %i13 = load i32, i32* %arrayidx19, align 4
  %cmp20 = icmp eq i32 %i13, 1
  br i1 %cmp20, label %if.then27, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.else
  %from22 = getelementptr inbounds %struct.move_s, %struct.move_s* %move, i32 0, i32 0
  %i14 = load i32, i32* %from22, align 8
  %idxprom23 = sext i32 %i14 to i64
  %arrayidx24 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom23
  %i15 = load i32, i32* %arrayidx24, align 4
  %cmp25 = icmp eq i32 %i15, 2
  br i1 %cmp25, label %if.then27, label %if.else61

if.then27:                                        ; preds = %lor.lhs.false, %if.else
  %target28 = getelementptr inbounds %struct.move_s, %struct.move_s* %move, i32 0, i32 1
  %i16 = load i32, i32* %target28, align 4
  %idxprom29 = sext i32 %i16 to i64
  %arrayidx30 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom29
  %i17 = load i32, i32* %arrayidx30, align 4
  %cmp31 = icmp eq i32 %i17, 13
  br i1 %cmp31, label %land.lhs.true, label %if.else45

land.lhs.true:                                    ; preds = %if.then27
  %ep = getelementptr inbounds %struct.move_s, %struct.move_s* %move, i32 0, i32 5
  %i18 = load i32, i32* %ep, align 4
  %tobool = icmp ne i32 %i18, 0
  br i1 %tobool, label %if.else45, label %if.then33

if.then33:                                        ; preds = %land.lhs.true
  %promoted34 = getelementptr inbounds %struct.move_s, %struct.move_s* %move, i32 0, i32 3
  %i19 = load i32, i32* %promoted34, align 4
  %tobool35 = icmp ne i32 %i19, 0
  br i1 %tobool35, label %if.else39, label %if.then36

if.then36:                                        ; preds = %if.then33
  %conv37 = sext i8 %conv11 to i32
  %call38 = call i32 (i8*, i8*, ...) @sprintf(i8* %str, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.1.400, i64 0, i64 0), i32 %conv37, i32 %i4) #8
  br label %if.end

if.else39:                                        ; preds = %if.then33
  %conv40 = sext i8 %conv11 to i32
  %promoted41 = getelementptr inbounds %struct.move_s, %struct.move_s* %move, i32 0, i32 3
  %i20 = load i32, i32* %promoted41, align 4
  %idxprom42 = sext i32 %i20 to i64
  %arrayidx43 = getelementptr inbounds [14 x i32], [14 x i32]* %type_to_char, i64 0, i64 %idxprom42
  %i21 = load i32, i32* %arrayidx43, align 4
  %call44 = call i32 (i8*, i8*, ...) @sprintf(i8* %str, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.2.401, i64 0, i64 0), i32 %conv40, i32 %i4, i32 %i21) #8
  br label %if.end

if.end:                                           ; preds = %if.else39, %if.then36
  br label %if.end60

if.else45:                                        ; preds = %land.lhs.true, %if.then27
  %promoted46 = getelementptr inbounds %struct.move_s, %struct.move_s* %move, i32 0, i32 3
  %i22 = load i32, i32* %promoted46, align 4
  %tobool47 = icmp ne i32 %i22, 0
  br i1 %tobool47, label %if.else52, label %if.then48

if.then48:                                        ; preds = %if.else45
  %conv49 = sext i8 %conv to i32
  %conv50 = sext i8 %conv11 to i32
  %call51 = call i32 (i8*, i8*, ...) @sprintf(i8* %str, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.3.402, i64 0, i64 0), i32 %conv49, i32 %conv50, i32 %i4) #8
  br label %if.end59

if.else52:                                        ; preds = %if.else45
  %conv53 = sext i8 %conv to i32
  %conv54 = sext i8 %conv11 to i32
  %promoted55 = getelementptr inbounds %struct.move_s, %struct.move_s* %move, i32 0, i32 3
  %i23 = load i32, i32* %promoted55, align 4
  %idxprom56 = sext i32 %i23 to i64
  %arrayidx57 = getelementptr inbounds [14 x i32], [14 x i32]* %type_to_char, i64 0, i64 %idxprom56
  %i24 = load i32, i32* %arrayidx57, align 4
  %call58 = call i32 (i8*, i8*, ...) @sprintf(i8* %str, i8* getelementptr inbounds ([11 x i8], [11 x i8]* @.str.4.403, i64 0, i64 0), i32 %conv53, i32 %conv54, i32 %i4, i32 %i24) #8
  br label %if.end59

if.end59:                                         ; preds = %if.else52, %if.then48
  br label %if.end60

if.end60:                                         ; preds = %if.end59, %if.end
  br label %if.end208

if.else61:                                        ; preds = %lor.lhs.false
  %castled = getelementptr inbounds %struct.move_s, %struct.move_s* %move, i32 0, i32 4
  %i25 = load i32, i32* %castled, align 8
  %cmp62 = icmp ne i32 %i25, 0
  br i1 %cmp62, label %if.then64, label %if.else77

if.then64:                                        ; preds = %if.else61
  %castled65 = getelementptr inbounds %struct.move_s, %struct.move_s* %move, i32 0, i32 4
  %i26 = load i32, i32* %castled65, align 8
  %cmp66 = icmp eq i32 %i26, 1
  br i1 %cmp66, label %if.then72, label %lor.lhs.false68

lor.lhs.false68:                                  ; preds = %if.then64
  %castled69 = getelementptr inbounds %struct.move_s, %struct.move_s* %move, i32 0, i32 4
  %i27 = load i32, i32* %castled69, align 8
  %cmp70 = icmp eq i32 %i27, 3
  br i1 %cmp70, label %if.then72, label %if.else74

if.then72:                                        ; preds = %lor.lhs.false68, %if.then64
  %call73 = call i32 (i8*, i8*, ...) @sprintf(i8* %str, i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.5.404, i64 0, i64 0)) #8
  br label %if.end76

if.else74:                                        ; preds = %lor.lhs.false68
  %call75 = call i32 (i8*, i8*, ...) @sprintf(i8* %str, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.6.405, i64 0, i64 0)) #8
  br label %if.end76

if.end76:                                         ; preds = %if.else74, %if.then72
  br label %if.end207

if.else77:                                        ; preds = %if.else61
  %arrayidx78 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %moves, i64 0, i64 0
  call void @gen(%struct.move_s* %arrayidx78)
  %i28 = load i32, i32* @numb_moves, align 4
  %call79 = call i32 @in_check()
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.else77
  %i.0 = phi i32 [ 0, %if.else77 ], [ %inc, %for.inc ]
  %cmp80 = icmp slt i32 %i.0, %i28
  br i1 %cmp80, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %idxprom82 = sext i32 %i.0 to i64
  %arrayidx83 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %moves, i64 0, i64 %idxprom82
  %target84 = getelementptr inbounds %struct.move_s, %struct.move_s* %arrayidx83, i32 0, i32 1
  %i29 = load i32, i32* %target84, align 4
  %target85 = getelementptr inbounds %struct.move_s, %struct.move_s* %move, i32 0, i32 1
  %i30 = load i32, i32* %target85, align 4
  %cmp86 = icmp eq i32 %i29, %i30
  br i1 %cmp86, label %land.lhs.true88, label %if.end115

land.lhs.true88:                                  ; preds = %for.body
  %idxprom89 = sext i32 %i.0 to i64
  %arrayidx90 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %moves, i64 0, i64 %idxprom89
  %from91 = getelementptr inbounds %struct.move_s, %struct.move_s* %arrayidx90, i32 0, i32 0
  %i31 = load i32, i32* %from91, align 8
  %idxprom92 = sext i32 %i31 to i64
  %arrayidx93 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom92
  %i32 = load i32, i32* %arrayidx93, align 4
  %from94 = getelementptr inbounds %struct.move_s, %struct.move_s* %move, i32 0, i32 0
  %i33 = load i32, i32* %from94, align 8
  %idxprom95 = sext i32 %i33 to i64
  %arrayidx96 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom95
  %i34 = load i32, i32* %arrayidx96, align 4
  %cmp97 = icmp eq i32 %i32, %i34
  br i1 %cmp97, label %land.lhs.true99, label %if.end115

land.lhs.true99:                                  ; preds = %land.lhs.true88
  %idxprom100 = sext i32 %i.0 to i64
  %arrayidx101 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %moves, i64 0, i64 %idxprom100
  %from102 = getelementptr inbounds %struct.move_s, %struct.move_s* %arrayidx101, i32 0, i32 0
  %i35 = load i32, i32* %from102, align 8
  %from103 = getelementptr inbounds %struct.move_s, %struct.move_s* %move, i32 0, i32 0
  %i36 = load i32, i32* %from103, align 8
  %cmp104 = icmp ne i32 %i35, %i36
  br i1 %cmp104, label %if.then106, label %if.end115

if.then106:                                       ; preds = %land.lhs.true99
  %arrayidx107 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %moves, i64 0, i64 0
  call void @make(%struct.move_s* %arrayidx107, i32 %i.0)
  %arrayidx108 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %moves, i64 0, i64 0
  %call109 = call i32 @check_legal(%struct.move_s* %arrayidx108, i32 %i.0, i32 %call79)
  %tobool110 = icmp ne i32 %call109, 0
  br i1 %tobool110, label %if.then111, label %if.end113

if.then111:                                       ; preds = %if.then106
  %arrayidx112 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %moves, i64 0, i64 0
  call void @unmake(%struct.move_s* %arrayidx112, i32 %i.0)
  br label %for.end

if.end113:                                        ; preds = %if.then106
  %arrayidx114 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %moves, i64 0, i64 0
  call void @unmake(%struct.move_s* %arrayidx114, i32 %i.0)
  br label %if.end115

if.end115:                                        ; preds = %if.end113, %land.lhs.true99, %land.lhs.true88, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end115
  %inc = add nsw i32 %i.0, 1
  br label %for.cond

for.end:                                          ; preds = %if.then111, %for.cond
  %ambig.0 = phi i32 [ %i.0, %if.then111 ], [ -1, %for.cond ]
  %cmp116 = icmp ne i32 %ambig.0, -1
  br i1 %cmp116, label %if.then118, label %if.else183

if.then118:                                       ; preds = %for.end
  %target119 = getelementptr inbounds %struct.move_s, %struct.move_s* %move, i32 0, i32 1
  %i37 = load i32, i32* %target119, align 4
  %idxprom120 = sext i32 %i37 to i64
  %arrayidx121 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom120
  %i38 = load i32, i32* %arrayidx121, align 4
  %cmp122 = icmp eq i32 %i38, 13
  br i1 %cmp122, label %if.then124, label %if.else153

if.then124:                                       ; preds = %if.then118
  %idxprom125 = sext i32 %ambig.0 to i64
  %arrayidx126 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %moves, i64 0, i64 %idxprom125
  %from127 = getelementptr inbounds %struct.move_s, %struct.move_s* %arrayidx126, i32 0, i32 0
  %i39 = load i32, i32* %from127, align 8
  %idxprom128 = sext i32 %i39 to i64
  %arrayidx129 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xfile to [144 x i32]*), i64 0, i64 %idxprom128
  %i40 = load i32, i32* %arrayidx129, align 4
  %from130 = getelementptr inbounds %struct.move_s, %struct.move_s* %move, i32 0, i32 0
  %i41 = load i32, i32* %from130, align 8
  %idxprom131 = sext i32 %i41 to i64
  %arrayidx132 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xfile to [144 x i32]*), i64 0, i64 %idxprom131
  %i42 = load i32, i32* %arrayidx132, align 4
  %cmp133 = icmp ne i32 %i40, %i42
  br i1 %cmp133, label %if.then135, label %if.else144

if.then135:                                       ; preds = %if.then124
  %from136 = getelementptr inbounds %struct.move_s, %struct.move_s* %move, i32 0, i32 0
  %i43 = load i32, i32* %from136, align 8
  %idxprom137 = sext i32 %i43 to i64
  %arrayidx138 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom137
  %i44 = load i32, i32* %arrayidx138, align 4
  %idxprom139 = sext i32 %i44 to i64
  %arrayidx140 = getelementptr inbounds [14 x i32], [14 x i32]* %type_to_char, i64 0, i64 %idxprom139
  %i45 = load i32, i32* %arrayidx140, align 4
  %conv141 = sext i8 %conv to i32
  %conv142 = sext i8 %conv11 to i32
  %call143 = call i32 (i8*, i8*, ...) @sprintf(i8* %str, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.7.406, i64 0, i64 0), i32 %i45, i32 %conv141, i32 %conv142, i32 %i4) #8
  br label %if.end152

if.else144:                                       ; preds = %if.then124
  %from145 = getelementptr inbounds %struct.move_s, %struct.move_s* %move, i32 0, i32 0
  %i46 = load i32, i32* %from145, align 8
  %idxprom146 = sext i32 %i46 to i64
  %arrayidx147 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom146
  %i47 = load i32, i32* %arrayidx147, align 4
  %idxprom148 = sext i32 %i47 to i64
  %arrayidx149 = getelementptr inbounds [14 x i32], [14 x i32]* %type_to_char, i64 0, i64 %idxprom148
  %i48 = load i32, i32* %arrayidx149, align 4
  %conv150 = sext i8 %conv11 to i32
  %call151 = call i32 (i8*, i8*, ...) @sprintf(i8* %str, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.8.407, i64 0, i64 0), i32 %i48, i32 %i2, i32 %conv150, i32 %i4) #8
  br label %if.end152

if.end152:                                        ; preds = %if.else144, %if.then135
  br label %if.end182

if.else153:                                       ; preds = %if.then118
  %idxprom154 = sext i32 %ambig.0 to i64
  %arrayidx155 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %moves, i64 0, i64 %idxprom154
  %from156 = getelementptr inbounds %struct.move_s, %struct.move_s* %arrayidx155, i32 0, i32 0
  %i49 = load i32, i32* %from156, align 8
  %idxprom157 = sext i32 %i49 to i64
  %arrayidx158 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xfile to [144 x i32]*), i64 0, i64 %idxprom157
  %i50 = load i32, i32* %arrayidx158, align 4
  %from159 = getelementptr inbounds %struct.move_s, %struct.move_s* %move, i32 0, i32 0
  %i51 = load i32, i32* %from159, align 8
  %idxprom160 = sext i32 %i51 to i64
  %arrayidx161 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xfile to [144 x i32]*), i64 0, i64 %idxprom160
  %i52 = load i32, i32* %arrayidx161, align 4
  %cmp162 = icmp ne i32 %i50, %i52
  br i1 %cmp162, label %if.then164, label %if.else173

if.then164:                                       ; preds = %if.else153
  %from165 = getelementptr inbounds %struct.move_s, %struct.move_s* %move, i32 0, i32 0
  %i53 = load i32, i32* %from165, align 8
  %idxprom166 = sext i32 %i53 to i64
  %arrayidx167 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom166
  %i54 = load i32, i32* %arrayidx167, align 4
  %idxprom168 = sext i32 %i54 to i64
  %arrayidx169 = getelementptr inbounds [14 x i32], [14 x i32]* %type_to_char, i64 0, i64 %idxprom168
  %i55 = load i32, i32* %arrayidx169, align 4
  %conv170 = sext i8 %conv to i32
  %conv171 = sext i8 %conv11 to i32
  %call172 = call i32 (i8*, i8*, ...) @sprintf(i8* %str, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.9.408, i64 0, i64 0), i32 %i55, i32 %conv170, i32 %conv171, i32 %i4) #8
  br label %if.end181

if.else173:                                       ; preds = %if.else153
  %from174 = getelementptr inbounds %struct.move_s, %struct.move_s* %move, i32 0, i32 0
  %i56 = load i32, i32* %from174, align 8
  %idxprom175 = sext i32 %i56 to i64
  %arrayidx176 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom175
  %i57 = load i32, i32* %arrayidx176, align 4
  %idxprom177 = sext i32 %i57 to i64
  %arrayidx178 = getelementptr inbounds [14 x i32], [14 x i32]* %type_to_char, i64 0, i64 %idxprom177
  %i58 = load i32, i32* %arrayidx178, align 4
  %conv179 = sext i8 %conv11 to i32
  %call180 = call i32 (i8*, i8*, ...) @sprintf(i8* %str, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.10.409, i64 0, i64 0), i32 %i58, i32 %i2, i32 %conv179, i32 %i4) #8
  br label %if.end181

if.end181:                                        ; preds = %if.else173, %if.then164
  br label %if.end182

if.end182:                                        ; preds = %if.end181, %if.end152
  br label %if.end206

if.else183:                                       ; preds = %for.end
  %target184 = getelementptr inbounds %struct.move_s, %struct.move_s* %move, i32 0, i32 1
  %i59 = load i32, i32* %target184, align 4
  %idxprom185 = sext i32 %i59 to i64
  %arrayidx186 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom185
  %i60 = load i32, i32* %arrayidx186, align 4
  %cmp187 = icmp eq i32 %i60, 13
  br i1 %cmp187, label %if.then189, label %if.else197

if.then189:                                       ; preds = %if.else183
  %from190 = getelementptr inbounds %struct.move_s, %struct.move_s* %move, i32 0, i32 0
  %i61 = load i32, i32* %from190, align 8
  %idxprom191 = sext i32 %i61 to i64
  %arrayidx192 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom191
  %i62 = load i32, i32* %arrayidx192, align 4
  %idxprom193 = sext i32 %i62 to i64
  %arrayidx194 = getelementptr inbounds [14 x i32], [14 x i32]* %type_to_char, i64 0, i64 %idxprom193
  %i63 = load i32, i32* %arrayidx194, align 4
  %conv195 = sext i8 %conv11 to i32
  %call196 = call i32 (i8*, i8*, ...) @sprintf(i8* %str, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.11.410, i64 0, i64 0), i32 %i63, i32 %conv195, i32 %i4) #8
  br label %if.end205

if.else197:                                       ; preds = %if.else183
  %from198 = getelementptr inbounds %struct.move_s, %struct.move_s* %move, i32 0, i32 0
  %i64 = load i32, i32* %from198, align 8
  %idxprom199 = sext i32 %i64 to i64
  %arrayidx200 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom199
  %i65 = load i32, i32* %arrayidx200, align 4
  %idxprom201 = sext i32 %i65 to i64
  %arrayidx202 = getelementptr inbounds [14 x i32], [14 x i32]* %type_to_char, i64 0, i64 %idxprom201
  %i66 = load i32, i32* %arrayidx202, align 4
  %conv203 = sext i8 %conv11 to i32
  %call204 = call i32 (i8*, i8*, ...) @sprintf(i8* %str, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.3.402, i64 0, i64 0), i32 %i66, i32 %conv203, i32 %i4) #8
  br label %if.end205

if.end205:                                        ; preds = %if.else197, %if.then189
  br label %if.end206

if.end206:                                        ; preds = %if.end205, %if.end182
  br label %if.end207

if.end207:                                        ; preds = %if.end206, %if.end76
  br label %if.end208

if.end208:                                        ; preds = %if.end207, %if.end60
  br label %if.end209

if.end209:                                        ; preds = %if.end208, %if.then
  call void @make(%struct.move_s* %move, i32 0)
  %call210 = call i32 @check_legal(%struct.move_s* %move, i32 0, i32 1)
  %tobool211 = icmp ne i32 %call210, 0
  br i1 %tobool211, label %if.end214, label %if.then212

if.then212:                                       ; preds = %if.end209
  %call213 = call i8* @strcpy(i8* %str, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.12.411, i64 0, i64 0)) #8
  call void @unmake(%struct.move_s* %move, i32 0)
  br label %return

if.end214:                                        ; preds = %if.end209
  %call215 = call i32 @in_check()
  %tobool216 = icmp ne i32 %call215, 0
  br i1 %tobool216, label %if.then217, label %if.end241

if.then217:                                       ; preds = %if.end214
  %arrayidx218 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %evade_moves, i64 0, i64 0
  call void @gen(%struct.move_s* %arrayidx218)
  %i67 = load i32, i32* @numb_moves, align 4
  br label %for.cond219

for.cond219:                                      ; preds = %for.inc231, %if.then217
  %i.1 = phi i32 [ 0, %if.then217 ], [ %inc232, %for.inc231 ]
  %cmp220 = icmp slt i32 %i.1, %i67
  br i1 %cmp220, label %for.body222, label %for.end233

for.body222:                                      ; preds = %for.cond219
  %arrayidx223 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %evade_moves, i64 0, i64 0
  call void @make(%struct.move_s* %arrayidx223, i32 %i.1)
  %arrayidx224 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %evade_moves, i64 0, i64 0
  %call225 = call i32 @check_legal(%struct.move_s* %arrayidx224, i32 %i.1, i32 1)
  %tobool226 = icmp ne i32 %call225, 0
  br i1 %tobool226, label %if.then227, label %if.end229

if.then227:                                       ; preds = %for.body222
  %arrayidx228 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %evade_moves, i64 0, i64 0
  call void @unmake(%struct.move_s* %arrayidx228, i32 %i.1)
  br label %for.end233

if.end229:                                        ; preds = %for.body222
  %arrayidx230 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %evade_moves, i64 0, i64 0
  call void @unmake(%struct.move_s* %arrayidx230, i32 %i.1)
  br label %for.inc231

for.inc231:                                       ; preds = %if.end229
  %inc232 = add nsw i32 %i.1, 1
  br label %for.cond219

for.end233:                                       ; preds = %if.then227, %for.cond219
  %mate.0 = phi i32 [ 0, %if.then227 ], [ 1, %for.cond219 ]
  %cmp234 = icmp eq i32 %mate.0, 1
  br i1 %cmp234, label %if.then236, label %if.else238

if.then236:                                       ; preds = %for.end233
  %call237 = call i8* @strcat(i8* %str, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.13.412, i64 0, i64 0)) #8
  br label %if.end240

if.else238:                                       ; preds = %for.end233
  %call239 = call i8* @strcat(i8* %str, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.14.413, i64 0, i64 0)) #8
  br label %if.end240

if.end240:                                        ; preds = %if.else238, %if.then236
  br label %if.end241

if.end241:                                        ; preds = %if.end240, %if.end214
  call void @unmake(%struct.move_s* %move, i32 0)
  br label %return

return:                                           ; preds = %if.end241, %if.then212
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @comp_to_coord(%struct.move_s* byval(%struct.move_s) align 8 %move, i8* %str) #0 {
entry:
  %type_to_char = alloca [14 x i32], align 16
  %i = bitcast [14 x i32]* %type_to_char to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %i, i8* align 16 bitcast ([14 x i32]* @__const.comp_to_coord.type_to_char to i8*), i64 56, i1 false)
  %promoted = getelementptr inbounds %struct.move_s, %struct.move_s* %move, i32 0, i32 3
  %i1 = load i32, i32* %promoted, align 4
  %from1 = getelementptr inbounds %struct.move_s, %struct.move_s* %move, i32 0, i32 0
  %i2 = load i32, i32* %from1, align 8
  %target2 = getelementptr inbounds %struct.move_s, %struct.move_s* %move, i32 0, i32 1
  %i3 = load i32, i32* %target2, align 4
  %idxprom = sext i32 %i2 to i64
  %arrayidx = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xrank to [144 x i32]*), i64 0, i64 %idxprom
  %i4 = load i32, i32* %arrayidx, align 4
  %idxprom3 = sext i32 %i3 to i64
  %arrayidx4 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xrank to [144 x i32]*), i64 0, i64 %idxprom3
  %i5 = load i32, i32* %arrayidx4, align 4
  %idxprom5 = sext i32 %i2 to i64
  %arrayidx6 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xfile to [144 x i32]*), i64 0, i64 %idxprom5
  %i6 = load i32, i32* %arrayidx6, align 4
  %add = add nsw i32 %i6, 97
  %sub = sub nsw i32 %add, 1
  %conv = trunc i32 %sub to i8
  %idxprom7 = sext i32 %i3 to i64
  %arrayidx8 = getelementptr inbounds [144 x i32], [144 x i32]* bitcast (<{ [118 x i32], [26 x i32] }>* @Xfile to [144 x i32]*), i64 0, i64 %idxprom7
  %i7 = load i32, i32* %arrayidx8, align 4
  %add9 = add nsw i32 %i7, 97
  %sub10 = sub nsw i32 %add9, 1
  %conv11 = trunc i32 %sub10 to i8
  %cmp = icmp eq i32 %i2, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %idxprom13 = sext i32 %i1 to i64
  %arrayidx14 = getelementptr inbounds [14 x i32], [14 x i32]* %type_to_char, i64 0, i64 %idxprom13
  %i8 = load i32, i32* %arrayidx14, align 4
  %conv15 = sext i8 %conv11 to i32
  %call = call i32 (i8*, i8*, ...) @sprintf(i8* %str, i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.399, i64 0, i64 0), i32 %i8, i32 %conv15, i32 %i5) #8
  br label %if.end67

if.else:                                          ; preds = %entry
  %tobool = icmp ne i32 %i1, 0
  br i1 %tobool, label %if.else20, label %if.then16

if.then16:                                        ; preds = %if.else
  %conv17 = sext i8 %conv to i32
  %conv18 = sext i8 %conv11 to i32
  %call19 = call i32 (i8*, i8*, ...) @sprintf(i8* %str, i8* getelementptr inbounds ([9 x i8], [9 x i8]* @.str.8.407, i64 0, i64 0), i32 %conv17, i32 %i4, i32 %conv18, i32 %i5) #8
  br label %if.end66

if.else20:                                        ; preds = %if.else
  %cmp21 = icmp eq i32 %i1, 3
  br i1 %cmp21, label %if.then25, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %if.else20
  %cmp23 = icmp eq i32 %i1, 4
  br i1 %cmp23, label %if.then25, label %if.else29

if.then25:                                        ; preds = %lor.lhs.false, %if.else20
  %conv26 = sext i8 %conv to i32
  %conv27 = sext i8 %conv11 to i32
  %call28 = call i32 (i8*, i8*, ...) @sprintf(i8* %str, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.15.416, i64 0, i64 0), i32 %conv26, i32 %i4, i32 %conv27, i32 %i5) #8
  br label %if.end65

if.else29:                                        ; preds = %lor.lhs.false
  %cmp30 = icmp eq i32 %i1, 7
  br i1 %cmp30, label %if.then35, label %lor.lhs.false32

lor.lhs.false32:                                  ; preds = %if.else29
  %cmp33 = icmp eq i32 %i1, 8
  br i1 %cmp33, label %if.then35, label %if.else39

if.then35:                                        ; preds = %lor.lhs.false32, %if.else29
  %conv36 = sext i8 %conv to i32
  %conv37 = sext i8 %conv11 to i32
  %call38 = call i32 (i8*, i8*, ...) @sprintf(i8* %str, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.16.417, i64 0, i64 0), i32 %conv36, i32 %i4, i32 %conv37, i32 %i5) #8
  br label %if.end64

if.else39:                                        ; preds = %lor.lhs.false32
  %cmp40 = icmp eq i32 %i1, 11
  br i1 %cmp40, label %if.then45, label %lor.lhs.false42

lor.lhs.false42:                                  ; preds = %if.else39
  %cmp43 = icmp eq i32 %i1, 12
  br i1 %cmp43, label %if.then45, label %if.else49

if.then45:                                        ; preds = %lor.lhs.false42, %if.else39
  %conv46 = sext i8 %conv to i32
  %conv47 = sext i8 %conv11 to i32
  %call48 = call i32 (i8*, i8*, ...) @sprintf(i8* %str, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.17.418, i64 0, i64 0), i32 %conv46, i32 %i4, i32 %conv47, i32 %i5) #8
  br label %if.end63

if.else49:                                        ; preds = %lor.lhs.false42
  %cmp50 = icmp eq i32 %i1, 5
  br i1 %cmp50, label %if.then55, label %lor.lhs.false52

lor.lhs.false52:                                  ; preds = %if.else49
  %cmp53 = icmp eq i32 %i1, 6
  br i1 %cmp53, label %if.then55, label %if.else59

if.then55:                                        ; preds = %lor.lhs.false52, %if.else49
  %conv56 = sext i8 %conv to i32
  %conv57 = sext i8 %conv11 to i32
  %call58 = call i32 (i8*, i8*, ...) @sprintf(i8* %str, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.18.419, i64 0, i64 0), i32 %conv56, i32 %i4, i32 %conv57, i32 %i5) #8
  br label %if.end

if.else59:                                        ; preds = %lor.lhs.false52
  %conv60 = sext i8 %conv to i32
  %conv61 = sext i8 %conv11 to i32
  %call62 = call i32 (i8*, i8*, ...) @sprintf(i8* %str, i8* getelementptr inbounds ([10 x i8], [10 x i8]* @.str.19.420, i64 0, i64 0), i32 %conv60, i32 %i4, i32 %conv61, i32 %i5) #8
  br label %if.end

if.end:                                           ; preds = %if.else59, %if.then55
  br label %if.end63

if.end63:                                         ; preds = %if.end, %if.then45
  br label %if.end64

if.end64:                                         ; preds = %if.end63, %if.then35
  br label %if.end65

if.end65:                                         ; preds = %if.end64, %if.then25
  br label %if.end66

if.end66:                                         ; preds = %if.end65, %if.then16
  br label %if.end67

if.end67:                                         ; preds = %if.end66, %if.then
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @display_board(%struct._IO_FILE* %stream, i32 %color) #0 {
entry:
  %piece_rep = alloca [14 x i8*], align 16
  %i = bitcast [14 x i8*]* %piece_rep to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %i, i8* align 16 bitcast ([14 x i8*]* @__const.display_board.piece_rep to i8*), i64 112, i1 false)
  %rem = srem i32 %color, 2
  %tobool = icmp ne i32 %rem, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %stream, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.35.424, i64 0, i64 0), i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.20.423, i64 0, i64 0))
  br label %for.cond

for.cond:                                         ; preds = %for.inc14, %if.then
  %a.0 = phi i32 [ 1, %if.then ], [ %inc15, %for.inc14 ]
  %cmp = icmp sle i32 %a.0, 8
  br i1 %cmp, label %for.body, label %for.end16

for.body:                                         ; preds = %for.cond
  %sub = sub nsw i32 9, %a.0
  %call1 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %stream, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.36.425, i64 0, i64 0), i32 %sub)
  br label %for.cond2

for.cond2:                                        ; preds = %for.inc, %for.body
  %b.0 = phi i32 [ 0, %for.body ], [ %inc, %for.inc ]
  %cmp3 = icmp sle i32 %b.0, 11
  br i1 %cmp3, label %for.body4, label %for.end

for.body4:                                        ; preds = %for.cond2
  %mul = mul nsw i32 %a.0, 12
  %sub5 = sub nsw i32 120, %mul
  %add = add nsw i32 %sub5, %b.0
  %idxprom = sext i32 %add to i64
  %arrayidx = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom
  %i1 = load i32, i32* %arrayidx, align 4
  %cmp6 = icmp ne i32 %i1, 0
  br i1 %cmp6, label %if.then7, label %if.end

if.then7:                                         ; preds = %for.body4
  %idxprom8 = sext i32 %add to i64
  %arrayidx9 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom8
  %i2 = load i32, i32* %arrayidx9, align 4
  %idxprom10 = sext i32 %i2 to i64
  %arrayidx11 = getelementptr inbounds [14 x i8*], [14 x i8*]* %piece_rep, i64 0, i64 %idxprom10
  %i3 = load i8*, i8** %arrayidx11, align 8
  %call12 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %stream, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.37.426, i64 0, i64 0), i8* %i3)
  br label %if.end

if.end:                                           ; preds = %if.then7, %for.body4
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %inc = add nsw i32 %b.0, 1
  br label %for.cond2

for.end:                                          ; preds = %for.cond2
  %call13 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %stream, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.38.427, i64 0, i64 0), i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.20.423, i64 0, i64 0))
  br label %for.inc14

for.inc14:                                        ; preds = %for.end
  %inc15 = add nsw i32 %a.0, 1
  br label %for.cond

for.end16:                                        ; preds = %for.cond
  %call17 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %stream, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.39.428, i64 0, i64 0))
  br label %if.end47

if.else:                                          ; preds = %entry
  %call18 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %stream, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.35.424, i64 0, i64 0), i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.20.423, i64 0, i64 0))
  br label %for.cond19

for.cond19:                                       ; preds = %for.inc43, %if.else
  %a.1 = phi i32 [ 1, %if.else ], [ %inc44, %for.inc43 ]
  %cmp20 = icmp sle i32 %a.1, 8
  br i1 %cmp20, label %for.body21, label %for.end45

for.body21:                                       ; preds = %for.cond19
  %call22 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %stream, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.36.425, i64 0, i64 0), i32 %a.1)
  br label %for.cond23

for.cond23:                                       ; preds = %for.inc39, %for.body21
  %b.1 = phi i32 [ 0, %for.body21 ], [ %inc40, %for.inc39 ]
  %cmp24 = icmp sle i32 %b.1, 11
  br i1 %cmp24, label %for.body25, label %for.end41

for.body25:                                       ; preds = %for.cond23
  %mul26 = mul nsw i32 %a.1, 12
  %add27 = add nsw i32 24, %mul26
  %sub28 = sub nsw i32 %add27, %b.1
  %idxprom29 = sext i32 %sub28 to i64
  %arrayidx30 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom29
  %i4 = load i32, i32* %arrayidx30, align 4
  %cmp31 = icmp ne i32 %i4, 0
  br i1 %cmp31, label %if.then32, label %if.end38

if.then32:                                        ; preds = %for.body25
  %idxprom33 = sext i32 %sub28 to i64
  %arrayidx34 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom33
  %i5 = load i32, i32* %arrayidx34, align 4
  %idxprom35 = sext i32 %i5 to i64
  %arrayidx36 = getelementptr inbounds [14 x i8*], [14 x i8*]* %piece_rep, i64 0, i64 %idxprom35
  %i6 = load i8*, i8** %arrayidx36, align 8
  %call37 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %stream, i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.37.426, i64 0, i64 0), i8* %i6)
  br label %if.end38

if.end38:                                         ; preds = %if.then32, %for.body25
  br label %for.inc39

for.inc39:                                        ; preds = %if.end38
  %inc40 = add nsw i32 %b.1, 1
  br label %for.cond23

for.end41:                                        ; preds = %for.cond23
  %call42 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %stream, i8* getelementptr inbounds ([7 x i8], [7 x i8]* @.str.38.427, i64 0, i64 0), i8* getelementptr inbounds ([42 x i8], [42 x i8]* @.str.20.423, i64 0, i64 0))
  br label %for.inc43

for.inc43:                                        ; preds = %for.end41
  %inc44 = add nsw i32 %a.1, 1
  br label %for.cond19

for.end45:                                        ; preds = %for.cond19
  %call46 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %stream, i8* getelementptr inbounds ([45 x i8], [45 x i8]* @.str.40.429, i64 0, i64 0))
  br label %if.end47

if.end47:                                         ; preds = %for.end45, %for.end16
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @init_game() #0 {
entry:
  %init_board = alloca [144 x i32], align 16
  %i = bitcast [144 x i32]* %init_board to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %i, i8* align 16 bitcast (<{ [118 x i32], [26 x i32] }>* @__const.init_game.init_board to i8*), i64 576, i1 false)
  %arraydecay = getelementptr inbounds [144 x i32], [144 x i32]* %init_board, i64 0, i64 0
  %i1 = bitcast i32* %arraydecay to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 bitcast ([144 x i32]* @board to i8*), i8* align 16 %i1, i64 576, i1 false)
  call void @llvm.memset.p0i8.i64(i8* align 16 bitcast ([144 x i32]* @moved to i8*), i8 0, i64 576, i1 false)
  store i32 1, i32* @white_to_move, align 4
  store i32 0, i32* @ep_square, align 4
  store i32 30, i32* @wking_loc, align 4
  store i32 114, i32* @bking_loc, align 4
  store i32 0, i32* @white_castled, align 4
  store i32 0, i32* @black_castled, align 4
  store i32 0, i32* @result, align 4
  store i32 0, i32* @captures, align 4
  store i32 32, i32* @piece_count, align 4
  store i32 0, i32* @Material, align 4
  call void @llvm.memset.p0i8.i64(i8* align 16 bitcast ([62 x i32]* @is_promoted to i8*), i8 0, i64 248, i1 false)
  call void @llvm.memset.p0i8.i64(i8* align 16 bitcast ([2 x [16 x i32]]* @holding to i8*), i8 0, i64 128, i1 false)
  store i32 0, i32* @white_hand_eval, align 4
  store i32 0, i32* @black_hand_eval, align 4
  call void @reset_piece_square()
  store i32 0, i32* @bookidx, align 4
  store i32 0, i32* @book_ply, align 4
  store i32 0, i32* @fifty, align 4
  store i32 0, i32* @ply, align 4
  store i32 0, i32* @phase, align 4
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @reset_piece_square() #0 {
entry:
  %promoted_board = alloca [144 x i32], align 16
  %arraydecay = getelementptr inbounds [144 x i32], [144 x i32]* %promoted_board, i64 0, i64 0
  %i = bitcast i32* %arraydecay to i8*
  call void @llvm.memset.p0i8.i64(i8* align 16 %i, i8 0, i64 576, i1 false)
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %i.0 = phi i32 [ 1, %entry ], [ %inc, %for.inc ]
  %i1 = load i32, i32* @piece_count, align 4
  %cmp = icmp sle i32 %i.0, %i1
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %idxprom = sext i32 %i.0 to i64
  %arrayidx = getelementptr inbounds [62 x i32], [62 x i32]* @is_promoted, i64 0, i64 %idxprom
  %i2 = load i32, i32* %arrayidx, align 4
  %tobool = icmp ne i32 %i2, 0
  br i1 %tobool, label %if.then, label %if.end

if.then:                                          ; preds = %for.body
  %idxprom1 = sext i32 %i.0 to i64
  %arrayidx2 = getelementptr inbounds [62 x i32], [62 x i32]* @pieces, i64 0, i64 %idxprom1
  %i3 = load i32, i32* %arrayidx2, align 4
  %idxprom3 = sext i32 %i3 to i64
  %arrayidx4 = getelementptr inbounds [144 x i32], [144 x i32]* %promoted_board, i64 0, i64 %idxprom3
  store i32 1, i32* %arrayidx4, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %for.body
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %inc = add nsw i32 %i.0, 1
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* @Material, align 4
  store i32 0, i32* @piece_count, align 4
  call void @llvm.memset.p0i8.i64(i8* align 16 bitcast ([62 x i32]* @pieces to i8*), i8 0, i64 248, i1 false)
  call void @llvm.memset.p0i8.i64(i8* align 16 bitcast ([62 x i32]* @is_promoted to i8*), i8 0, i64 248, i1 false)
  store i32 0, i32* getelementptr inbounds ([62 x i32], [62 x i32]* @pieces, i64 0, i64 0), align 16
  br label %for.cond5

for.cond5:                                        ; preds = %for.inc34, %for.end
  %i.1 = phi i32 [ 26, %for.end ], [ %inc35, %for.inc34 ]
  %cmp6 = icmp slt i32 %i.1, 118
  br i1 %cmp6, label %for.body7, label %for.end36

for.body7:                                        ; preds = %for.cond5
  %idxprom8 = sext i32 %i.1 to i64
  %arrayidx9 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom8
  %i4 = load i32, i32* %arrayidx9, align 4
  %tobool10 = icmp ne i32 %i4, 0
  br i1 %tobool10, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %for.body7
  %idxprom11 = sext i32 %i.1 to i64
  %arrayidx12 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom11
  %i5 = load i32, i32* %arrayidx12, align 4
  %cmp13 = icmp slt i32 %i5, 13
  br i1 %cmp13, label %if.then14, label %if.else

if.then14:                                        ; preds = %land.lhs.true
  %idxprom15 = sext i32 %i.1 to i64
  %arrayidx16 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom15
  %i6 = load i32, i32* %arrayidx16, align 4
  %idxprom17 = sext i32 %i6 to i64
  %arrayidx18 = getelementptr inbounds [14 x i32], [14 x i32]* @material, i64 0, i64 %idxprom17
  %i7 = load i32, i32* %arrayidx18, align 4
  %i8 = load i32, i32* @Material, align 4
  %add = add nsw i32 %i8, %i7
  store i32 %add, i32* @Material, align 4
  %i9 = load i32, i32* @piece_count, align 4
  %add19 = add nsw i32 %i9, 1
  store i32 %add19, i32* @piece_count, align 4
  %i10 = load i32, i32* @piece_count, align 4
  %idxprom20 = sext i32 %i10 to i64
  %arrayidx21 = getelementptr inbounds [62 x i32], [62 x i32]* @pieces, i64 0, i64 %idxprom20
  store i32 %i.1, i32* %arrayidx21, align 4
  %i11 = load i32, i32* @piece_count, align 4
  %idxprom22 = sext i32 %i.1 to i64
  %arrayidx23 = getelementptr inbounds [144 x i32], [144 x i32]* @squares, i64 0, i64 %idxprom22
  store i32 %i11, i32* %arrayidx23, align 4
  %idxprom24 = sext i32 %i.1 to i64
  %arrayidx25 = getelementptr inbounds [144 x i32], [144 x i32]* %promoted_board, i64 0, i64 %idxprom24
  %i12 = load i32, i32* %arrayidx25, align 4
  %tobool26 = icmp ne i32 %i12, 0
  br i1 %tobool26, label %if.then27, label %if.end30

if.then27:                                        ; preds = %if.then14
  %i13 = load i32, i32* @piece_count, align 4
  %idxprom28 = sext i32 %i13 to i64
  %arrayidx29 = getelementptr inbounds [62 x i32], [62 x i32]* @is_promoted, i64 0, i64 %idxprom28
  store i32 1, i32* %arrayidx29, align 4
  br label %if.end30

if.end30:                                         ; preds = %if.then27, %if.then14
  br label %if.end33

if.else:                                          ; preds = %land.lhs.true, %for.body7
  %idxprom31 = sext i32 %i.1 to i64
  %arrayidx32 = getelementptr inbounds [144 x i32], [144 x i32]* @squares, i64 0, i64 %idxprom31
  store i32 0, i32* %arrayidx32, align 4
  br label %if.end33

if.end33:                                         ; preds = %if.else, %if.end30
  br label %for.inc34

for.inc34:                                        ; preds = %if.end33
  %inc35 = add nsw i32 %i.1, 1
  br label %for.cond5

for.end36:                                        ; preds = %for.cond5
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @is_move(i8* %str) #0 {
entry:
  %call = call i16** @__ctype_b_loc() #10
  %i = load i16*, i16** %call, align 8
  %arrayidx = getelementptr inbounds i8, i8* %str, i64 0
  %i1 = load i8, i8* %arrayidx, align 1
  %conv = sext i8 %i1 to i32
  %idxprom = sext i32 %conv to i64
  %arrayidx1 = getelementptr inbounds i16, i16* %i, i64 %idxprom
  %i2 = load i16, i16* %arrayidx1, align 2
  %conv2 = zext i16 %i2 to i32
  %and = and i32 %conv2, 1024
  %tobool = icmp ne i32 %and, 0
  br i1 %tobool, label %land.lhs.true, label %if.else

land.lhs.true:                                    ; preds = %entry
  %call3 = call i16** @__ctype_b_loc() #10
  %i3 = load i16*, i16** %call3, align 8
  %arrayidx4 = getelementptr inbounds i8, i8* %str, i64 1
  %i4 = load i8, i8* %arrayidx4, align 1
  %conv5 = sext i8 %i4 to i32
  %idxprom6 = sext i32 %conv5 to i64
  %arrayidx7 = getelementptr inbounds i16, i16* %i3, i64 %idxprom6
  %i5 = load i16, i16* %arrayidx7, align 2
  %conv8 = zext i16 %i5 to i32
  %and9 = and i32 %conv8, 2048
  %tobool10 = icmp ne i32 %and9, 0
  br i1 %tobool10, label %land.lhs.true11, label %if.else

land.lhs.true11:                                  ; preds = %land.lhs.true
  %call12 = call i16** @__ctype_b_loc() #10
  %i6 = load i16*, i16** %call12, align 8
  %arrayidx13 = getelementptr inbounds i8, i8* %str, i64 2
  %i7 = load i8, i8* %arrayidx13, align 1
  %conv14 = sext i8 %i7 to i32
  %idxprom15 = sext i32 %conv14 to i64
  %arrayidx16 = getelementptr inbounds i16, i16* %i6, i64 %idxprom15
  %i8 = load i16, i16* %arrayidx16, align 2
  %conv17 = zext i16 %i8 to i32
  %and18 = and i32 %conv17, 1024
  %tobool19 = icmp ne i32 %and18, 0
  br i1 %tobool19, label %land.lhs.true20, label %if.else

land.lhs.true20:                                  ; preds = %land.lhs.true11
  %call21 = call i16** @__ctype_b_loc() #10
  %i9 = load i16*, i16** %call21, align 8
  %arrayidx22 = getelementptr inbounds i8, i8* %str, i64 3
  %i10 = load i8, i8* %arrayidx22, align 1
  %conv23 = sext i8 %i10 to i32
  %idxprom24 = sext i32 %conv23 to i64
  %arrayidx25 = getelementptr inbounds i16, i16* %i9, i64 %idxprom24
  %i11 = load i16, i16* %arrayidx25, align 2
  %conv26 = zext i16 %i11 to i32
  %and27 = and i32 %conv26, 2048
  %tobool28 = icmp ne i32 %and27, 0
  br i1 %tobool28, label %if.then, label %if.else

if.then:                                          ; preds = %land.lhs.true20
  br label %return

if.else:                                          ; preds = %land.lhs.true20, %land.lhs.true11, %land.lhs.true, %entry
  %call29 = call i16** @__ctype_b_loc() #10
  %i12 = load i16*, i16** %call29, align 8
  %arrayidx30 = getelementptr inbounds i8, i8* %str, i64 0
  %i13 = load i8, i8* %arrayidx30, align 1
  %conv31 = sext i8 %i13 to i32
  %idxprom32 = sext i32 %conv31 to i64
  %arrayidx33 = getelementptr inbounds i16, i16* %i12, i64 %idxprom32
  %i14 = load i16, i16* %arrayidx33, align 2
  %conv34 = zext i16 %i14 to i32
  %and35 = and i32 %conv34, 1024
  %tobool36 = icmp ne i32 %and35, 0
  br i1 %tobool36, label %land.lhs.true37, label %if.else60

land.lhs.true37:                                  ; preds = %if.else
  %arrayidx38 = getelementptr inbounds i8, i8* %str, i64 1
  %i15 = load i8, i8* %arrayidx38, align 1
  %conv39 = sext i8 %i15 to i32
  %cmp = icmp eq i32 %conv39, 64
  br i1 %cmp, label %land.lhs.true41, label %if.else60

land.lhs.true41:                                  ; preds = %land.lhs.true37
  %call42 = call i16** @__ctype_b_loc() #10
  %i16 = load i16*, i16** %call42, align 8
  %arrayidx43 = getelementptr inbounds i8, i8* %str, i64 2
  %i17 = load i8, i8* %arrayidx43, align 1
  %conv44 = sext i8 %i17 to i32
  %idxprom45 = sext i32 %conv44 to i64
  %arrayidx46 = getelementptr inbounds i16, i16* %i16, i64 %idxprom45
  %i18 = load i16, i16* %arrayidx46, align 2
  %conv47 = zext i16 %i18 to i32
  %and48 = and i32 %conv47, 1024
  %tobool49 = icmp ne i32 %and48, 0
  br i1 %tobool49, label %land.lhs.true50, label %if.else60

land.lhs.true50:                                  ; preds = %land.lhs.true41
  %call51 = call i16** @__ctype_b_loc() #10
  %i19 = load i16*, i16** %call51, align 8
  %arrayidx52 = getelementptr inbounds i8, i8* %str, i64 3
  %i20 = load i8, i8* %arrayidx52, align 1
  %conv53 = sext i8 %i20 to i32
  %idxprom54 = sext i32 %conv53 to i64
  %arrayidx55 = getelementptr inbounds i16, i16* %i19, i64 %idxprom54
  %i21 = load i16, i16* %arrayidx55, align 2
  %conv56 = zext i16 %i21 to i32
  %and57 = and i32 %conv56, 2048
  %tobool58 = icmp ne i32 %and57, 0
  br i1 %tobool58, label %if.then59, label %if.else60

if.then59:                                        ; preds = %land.lhs.true50
  br label %return

if.else60:                                        ; preds = %land.lhs.true50, %land.lhs.true41, %land.lhs.true37, %if.else
  br label %return

return:                                           ; preds = %if.else60, %if.then59, %if.then
  %retval.0 = phi i32 [ 1, %if.then ], [ 1, %if.then59 ], [ 0, %if.else60 ]
  ret i32 %retval.0
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @perft_debug() #0 {
entry:
  %input = alloca [256 x i8], align 16
  %move = alloca %struct.move_s, align 4
  call void @init_game()
  br label %while.body

while.body:                                       ; preds = %if.end43, %entry
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([47 x i8], [47 x i8]* @.str.41.450, i64 0, i64 0))
  %arraydecay = getelementptr inbounds [256 x i8], [256 x i8]* %input, i64 0, i64 0
  %i = load %struct._IO_FILE*, %struct._IO_FILE** @stdin, align 8
  call void @rinput(i8* %arraydecay, i32 256, %struct._IO_FILE* %i)
  %arraydecay1 = getelementptr inbounds [256 x i8], [256 x i8]* %input, i64 0, i64 0
  %call2 = call i32 @atoi(i8* %arraydecay1) #11
  store i32 0, i32* @raw_nodes, align 4
  call void @perft(i32 %call2)
  %i1 = load i32, i32* @raw_nodes, align 4
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.42.453, i64 0, i64 0), i32 %call2, i32 %i1)
  %i2 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  call void @display_board(%struct._IO_FILE* %i2, i32 1)
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([31 x i8], [31 x i8]* @.str.43.454, i64 0, i64 0))
  %arraydecay5 = getelementptr inbounds [256 x i8], [256 x i8]* %input, i64 0, i64 0
  %i3 = load %struct._IO_FILE*, %struct._IO_FILE** @stdin, align 8
  call void @rinput(i8* %arraydecay5, i32 256, %struct._IO_FILE* %i3)
  %arraydecay6 = getelementptr inbounds [256 x i8], [256 x i8]* %input, i64 0, i64 0
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %while.body
  %p.0 = phi i8* [ %arraydecay6, %while.body ], [ %incdec.ptr, %for.inc ]
  %i4 = load i8, i8* %p.0, align 1
  %tobool = icmp ne i8 %i4, 0
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %i5 = load i8, i8* %p.0, align 1
  %conv = sext i8 %i5 to i32
  %call7 = call i32 @tolower(i32 %conv) #11
  %conv8 = trunc i32 %call7 to i8
  store i8 %conv8, i8* %p.0, align 1
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %incdec.ptr = getelementptr inbounds i8, i8* %p.0, i32 1
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %arraydecay9 = getelementptr inbounds [256 x i8], [256 x i8]* %input, i64 0, i64 0
  %call10 = call i32 @strcmp(i8* %arraydecay9, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.44.455, i64 0, i64 0)) #11
  %tobool11 = icmp ne i32 %call10, 0
  br i1 %tobool11, label %lor.lhs.false, label %if.then

lor.lhs.false:                                    ; preds = %for.end
  %arraydecay12 = getelementptr inbounds [256 x i8], [256 x i8]* %input, i64 0, i64 0
  %call13 = call i32 @strcmp(i8* %arraydecay12, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.45.456, i64 0, i64 0)) #11
  %tobool14 = icmp ne i32 %call13, 0
  br i1 %tobool14, label %if.end, label %if.then

if.then:                                          ; preds = %lor.lhs.false, %for.end
  call void @exit(i32 0) #9
  unreachable

if.end:                                           ; preds = %lor.lhs.false
  %arraydecay15 = getelementptr inbounds [256 x i8], [256 x i8]* %input, i64 0, i64 0
  %call16 = call i32 @verify_coord(i8* %arraydecay15, %struct.move_s* %move)
  %tobool17 = icmp ne i32 %call16, 0
  br i1 %tobool17, label %if.end43, label %if.then18

if.then18:                                        ; preds = %if.end
  br label %do.body

do.body:                                          ; preds = %do.cond, %if.then18
  %call19 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([58 x i8], [58 x i8]* @.str.46.459, i64 0, i64 0))
  %arraydecay20 = getelementptr inbounds [256 x i8], [256 x i8]* %input, i64 0, i64 0
  %i6 = load %struct._IO_FILE*, %struct._IO_FILE** @stdin, align 8
  call void @rinput(i8* %arraydecay20, i32 256, %struct._IO_FILE* %i6)
  %arraydecay21 = getelementptr inbounds [256 x i8], [256 x i8]* %input, i64 0, i64 0
  br label %for.cond22

for.cond22:                                       ; preds = %for.inc28, %do.body
  %p.1 = phi i8* [ %arraydecay21, %do.body ], [ %incdec.ptr29, %for.inc28 ]
  %i7 = load i8, i8* %p.1, align 1
  %tobool23 = icmp ne i8 %i7, 0
  br i1 %tobool23, label %for.body24, label %for.end30

for.body24:                                       ; preds = %for.cond22
  %i8 = load i8, i8* %p.1, align 1
  %conv25 = sext i8 %i8 to i32
  %call26 = call i32 @tolower(i32 %conv25) #11
  %conv27 = trunc i32 %call26 to i8
  store i8 %conv27, i8* %p.1, align 1
  br label %for.inc28

for.inc28:                                        ; preds = %for.body24
  %incdec.ptr29 = getelementptr inbounds i8, i8* %p.1, i32 1
  br label %for.cond22

for.end30:                                        ; preds = %for.cond22
  %arraydecay31 = getelementptr inbounds [256 x i8], [256 x i8]* %input, i64 0, i64 0
  %call32 = call i32 @strcmp(i8* %arraydecay31, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.44.455, i64 0, i64 0)) #11
  %tobool33 = icmp ne i32 %call32, 0
  br i1 %tobool33, label %lor.lhs.false34, label %if.then38

lor.lhs.false34:                                  ; preds = %for.end30
  %arraydecay35 = getelementptr inbounds [256 x i8], [256 x i8]* %input, i64 0, i64 0
  %call36 = call i32 @strcmp(i8* %arraydecay35, i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.45.456, i64 0, i64 0)) #11
  %tobool37 = icmp ne i32 %call36, 0
  br i1 %tobool37, label %if.end39, label %if.then38

if.then38:                                        ; preds = %lor.lhs.false34, %for.end30
  call void @exit(i32 0) #9
  unreachable

if.end39:                                         ; preds = %lor.lhs.false34
  br label %do.cond

do.cond:                                          ; preds = %if.end39
  %arraydecay40 = getelementptr inbounds [256 x i8], [256 x i8]* %input, i64 0, i64 0
  %call41 = call i32 @verify_coord(i8* %arraydecay40, %struct.move_s* %move)
  %tobool42 = icmp ne i32 %call41, 0
  %lnot = xor i1 %tobool42, true
  br i1 %lnot, label %do.body, label %do.end

do.end:                                           ; preds = %do.cond
  br label %if.end43

if.end43:                                         ; preds = %do.end, %if.end
  call void @make(%struct.move_s* %move, i32 0)
  br label %while.body
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @rinput(i8* %str, i32 %n, %struct._IO_FILE* %stream) #0 {
entry:
  br label %while.cond

while.cond:                                       ; preds = %if.end, %entry
  %i.0 = phi i32 [ 0, %entry ], [ %i.1, %if.end ]
  %call = call i32 @getc(%struct._IO_FILE* %stream)
  %cmp = icmp ne i32 %call, 10
  br i1 %cmp, label %land.rhs, label %land.end

land.rhs:                                         ; preds = %while.cond
  %cmp1 = icmp ne i32 %call, -1
  br label %land.end

land.end:                                         ; preds = %land.rhs, %while.cond
  %i = phi i1 [ false, %while.cond ], [ %cmp1, %land.rhs ]
  br i1 %i, label %while.body, label %while.end

while.body:                                       ; preds = %land.end
  %sub = sub nsw i32 %n, 1
  %cmp2 = icmp slt i32 %i.0, %sub
  br i1 %cmp2, label %if.then, label %if.end

if.then:                                          ; preds = %while.body
  %conv = trunc i32 %call to i8
  %inc = add nsw i32 %i.0, 1
  %idxprom = sext i32 %i.0 to i64
  %arrayidx = getelementptr inbounds i8, i8* %str, i64 %idxprom
  store i8 %conv, i8* %arrayidx, align 1
  br label %if.end

if.end:                                           ; preds = %if.then, %while.body
  %i.1 = phi i32 [ %inc, %if.then ], [ %i.0, %while.body ]
  br label %while.cond

while.end:                                        ; preds = %land.end
  %idxprom3 = sext i32 %i.0 to i64
  %arrayidx4 = getelementptr inbounds i8, i8* %str, i64 %idxprom3
  store i8 0, i8* %arrayidx4, align 1
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @verify_coord(i8* %input, %struct.move_s* %move) #0 {
entry:
  %moves = alloca [512 x %struct.move_s], align 16
  %comp_move = alloca [6 x i8], align 1
  %i = load i32, i32* @Variant, align 4
  %cmp = icmp eq i32 %i, 4
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store i32 1, i32* @captures, align 4
  %arrayidx = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %moves, i64 0, i64 0
  call void @gen(%struct.move_s* %arrayidx)
  %i1 = load i32, i32* @numb_moves, align 4
  store i32 0, i32* @captures, align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.then
  %i.0 = phi i32 [ 0, %if.then ], [ %inc, %for.inc ]
  %cmp1 = icmp slt i32 %i.0, %i1
  br i1 %cmp1, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %arrayidx2 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %moves, i64 0, i64 0
  call void @make(%struct.move_s* %arrayidx2, i32 %i.0)
  %arrayidx3 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %moves, i64 0, i64 0
  %call = call i32 @check_legal(%struct.move_s* %arrayidx3, i32 %i.0, i32 1)
  %tobool = icmp ne i32 %call, 0
  br i1 %tobool, label %if.then4, label %if.end

if.then4:                                         ; preds = %for.body
  %arrayidx5 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %moves, i64 0, i64 0
  call void @unmake(%struct.move_s* %arrayidx5, i32 %i.0)
  br label %for.end

if.end:                                           ; preds = %for.body
  %arrayidx6 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %moves, i64 0, i64 0
  call void @unmake(%struct.move_s* %arrayidx6, i32 %i.0)
  br label %for.inc

for.inc:                                          ; preds = %if.end
  %inc = add nsw i32 %i.0, 1
  br label %for.cond

for.end:                                          ; preds = %if.then4, %for.cond
  %mate.0 = phi i32 [ 0, %if.then4 ], [ 1, %for.cond ]
  %cmp7 = icmp eq i32 %mate.0, 1
  br i1 %cmp7, label %if.then8, label %if.end10

if.then8:                                         ; preds = %for.end
  store i32 0, i32* @captures, align 4
  %arrayidx9 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %moves, i64 0, i64 0
  call void @gen(%struct.move_s* %arrayidx9)
  %i2 = load i32, i32* @numb_moves, align 4
  br label %if.end10

if.end10:                                         ; preds = %if.then8, %for.end
  %num_moves.0 = phi i32 [ %i2, %if.then8 ], [ %i1, %for.end ]
  br label %if.end12

if.else:                                          ; preds = %entry
  %arrayidx11 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %moves, i64 0, i64 0
  call void @gen(%struct.move_s* %arrayidx11)
  %i3 = load i32, i32* @numb_moves, align 4
  br label %if.end12

if.end12:                                         ; preds = %if.else, %if.end10
  %num_moves.1 = phi i32 [ %num_moves.0, %if.end10 ], [ %i3, %if.else ]
  br label %for.cond13

for.cond13:                                       ; preds = %for.inc31, %if.end12
  %i.1 = phi i32 [ 0, %if.end12 ], [ %inc32, %for.inc31 ]
  %legal.0 = phi i32 [ 0, %if.end12 ], [ %legal.2, %for.inc31 ]
  %cmp14 = icmp slt i32 %i.1, %num_moves.1
  br i1 %cmp14, label %for.body15, label %for.end33

for.body15:                                       ; preds = %for.cond13
  %idxprom = sext i32 %i.1 to i64
  %arrayidx16 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %moves, i64 0, i64 %idxprom
  %arraydecay = getelementptr inbounds [6 x i8], [6 x i8]* %comp_move, i64 0, i64 0
  call void @comp_to_coord(%struct.move_s* byval(%struct.move_s) align 8 %arrayidx16, i8* %arraydecay)
  %arraydecay17 = getelementptr inbounds [6 x i8], [6 x i8]* %comp_move, i64 0, i64 0
  %call18 = call i32 @strcmp(i8* %input, i8* %arraydecay17) #11
  %tobool19 = icmp ne i32 %call18, 0
  br i1 %tobool19, label %if.end30, label %if.then20

if.then20:                                        ; preds = %for.body15
  %arrayidx21 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %moves, i64 0, i64 0
  call void @make(%struct.move_s* %arrayidx21, i32 %i.1)
  %arrayidx22 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %moves, i64 0, i64 0
  %call23 = call i32 @check_legal(%struct.move_s* %arrayidx22, i32 %i.1, i32 1)
  %tobool24 = icmp ne i32 %call23, 0
  br i1 %tobool24, label %if.then25, label %if.end28

if.then25:                                        ; preds = %if.then20
  %idxprom26 = sext i32 %i.1 to i64
  %arrayidx27 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %moves, i64 0, i64 %idxprom26
  %i4 = bitcast %struct.move_s* %move to i8*
  %i5 = bitcast %struct.move_s* %arrayidx27 to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 4 %i4, i8* align 8 %i5, i64 24, i1 false)
  br label %if.end28

if.end28:                                         ; preds = %if.then25, %if.then20
  %legal.1 = phi i32 [ 1, %if.then25 ], [ %legal.0, %if.then20 ]
  %arrayidx29 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %moves, i64 0, i64 0
  call void @unmake(%struct.move_s* %arrayidx29, i32 %i.1)
  br label %if.end30

if.end30:                                         ; preds = %if.end28, %for.body15
  %legal.2 = phi i32 [ %legal.0, %for.body15 ], [ %legal.1, %if.end28 ]
  br label %for.inc31

for.inc31:                                        ; preds = %if.end30
  %inc32 = add nsw i32 %i.1, 1
  br label %for.cond13

for.end33:                                        ; preds = %for.cond13
  ret i32 %legal.0
}

declare dso_local i32 @getc(%struct._IO_FILE*) #4

; Function Attrs: noinline nounwind uwtable
define dso_local void @hash_extract_pv(i32 %level, i8* %str) #0 {
entry:
  %xdummy = alloca i32, align 4
  %bm = alloca i32, align 4
  %moves = alloca [512 x %struct.move_s], align 16
  %output = alloca [256 x i8], align 16
  %dec = add nsw i32 %level, -1
  %tobool = icmp ne i32 %dec, 0
  br i1 %tobool, label %if.end, label %if.then

if.then:                                          ; preds = %entry
  br label %if.end18

if.end:                                           ; preds = %entry
  %call = call i32 @ProbeTT(i32* %xdummy, i32 0, i32* %bm, i32* %xdummy, i32* %xdummy, i32 0)
  %cmp = icmp ne i32 %call, 4
  br i1 %cmp, label %if.then1, label %if.end18

if.then1:                                         ; preds = %if.end
  %arrayidx = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %moves, i64 0, i64 0
  call void @gen(%struct.move_s* %arrayidx)
  %i = load i32, i32* @numb_moves, align 4
  %i1 = load i32, i32* %bm, align 4
  %cmp2 = icmp sge i32 %i1, 0
  br i1 %cmp2, label %land.lhs.true, label %if.end17

land.lhs.true:                                    ; preds = %if.then1
  %i2 = load i32, i32* %bm, align 4
  %cmp3 = icmp slt i32 %i2, %i
  br i1 %cmp3, label %if.then4, label %if.end17

if.then4:                                         ; preds = %land.lhs.true
  %i3 = load i32, i32* %bm, align 4
  %idxprom = sext i32 %i3 to i64
  %arrayidx5 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %moves, i64 0, i64 %idxprom
  %arraydecay = getelementptr inbounds [256 x i8], [256 x i8]* %output, i64 0, i64 0
  call void @comp_to_san(%struct.move_s* byval(%struct.move_s) align 8 %arrayidx5, i8* %arraydecay)
  %arrayidx6 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %moves, i64 0, i64 0
  %i4 = load i32, i32* %bm, align 4
  call void @make(%struct.move_s* %arrayidx6, i32 %i4)
  %arrayidx7 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %moves, i64 0, i64 0
  %i5 = load i32, i32* %bm, align 4
  %call8 = call i32 @check_legal(%struct.move_s* %arrayidx7, i32 %i5, i32 1)
  %tobool9 = icmp ne i32 %call8, 0
  br i1 %tobool9, label %if.then10, label %if.end15

if.then10:                                        ; preds = %if.then4
  %call11 = call i8* @strcat(i8* %str, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.47.460, i64 0, i64 0)) #8
  %arraydecay12 = getelementptr inbounds [256 x i8], [256 x i8]* %output, i64 0, i64 0
  %call13 = call i8* @strcat(i8* %str, i8* %arraydecay12) #8
  %call14 = call i8* @strcat(i8* %str, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.48.461, i64 0, i64 0)) #8
  call void @hash_extract_pv(i32 %dec, i8* %str)
  br label %if.end15

if.end15:                                         ; preds = %if.then10, %if.then4
  %arrayidx16 = getelementptr inbounds [512 x %struct.move_s], [512 x %struct.move_s]* %moves, i64 0, i64 0
  %i6 = load i32, i32* %bm, align 4
  call void @unmake(%struct.move_s* %arrayidx16, i32 %i6)
  br label %if.end17

if.end17:                                         ; preds = %if.end15, %land.lhs.true, %if.then1
  br label %if.end18

if.end18:                                         ; preds = %if.end17, %if.end, %if.then
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @stringize_pv(i8* %str) #0 {
entry:
  %output = alloca [256 x i8], align 16
  call void @llvm.memset.p0i8.i64(i8* align 1 %str, i8 0, i64 256, i1 false)
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %i.0 = phi i32 [ 1, %entry ], [ %inc, %for.inc ]
  %i = load i32, i32* getelementptr inbounds ([300 x i32], [300 x i32]* @pv_length, i64 0, i64 1), align 4
  %cmp = icmp slt i32 %i.0, %i
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %idxprom = sext i32 %i.0 to i64
  %arrayidx = getelementptr inbounds [300 x %struct.move_s], [300 x %struct.move_s]* getelementptr inbounds ([300 x [300 x %struct.move_s]], [300 x [300 x %struct.move_s]]* @pv, i64 0, i64 1), i64 0, i64 %idxprom
  %arraydecay = getelementptr inbounds [256 x i8], [256 x i8]* %output, i64 0, i64 0
  call void @comp_to_san(%struct.move_s* byval(%struct.move_s) align 8 %arrayidx, i8* %arraydecay)
  %idxprom1 = sext i32 %i.0 to i64
  %arrayidx2 = getelementptr inbounds [300 x %struct.move_s], [300 x %struct.move_s]* getelementptr inbounds ([300 x [300 x %struct.move_s]], [300 x [300 x %struct.move_s]]* @pv, i64 0, i64 1), i64 0, i64 %idxprom1
  call void @make(%struct.move_s* %arrayidx2, i32 0)
  %arraydecay3 = getelementptr inbounds [256 x i8], [256 x i8]* %output, i64 0, i64 0
  %call = call i8* @strcat(i8* %str, i8* %arraydecay3) #8
  %call4 = call i8* @strcat(i8* %str, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.49.464, i64 0, i64 0)) #8
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %inc = add nsw i32 %i.0, 1
  br label %for.cond

for.end:                                          ; preds = %for.cond
  call void @hash_extract_pv(i32 7, i8* %str)
  %i1 = load i32, i32* getelementptr inbounds ([300 x i32], [300 x i32]* @pv_length, i64 0, i64 1), align 4
  %sub = sub nsw i32 %i1, 1
  br label %for.cond5

for.cond5:                                        ; preds = %for.inc10, %for.end
  %i.1 = phi i32 [ %sub, %for.end ], [ %dec, %for.inc10 ]
  %cmp6 = icmp sgt i32 %i.1, 0
  br i1 %cmp6, label %for.body7, label %for.end11

for.body7:                                        ; preds = %for.cond5
  %idxprom8 = sext i32 %i.1 to i64
  %arrayidx9 = getelementptr inbounds [300 x %struct.move_s], [300 x %struct.move_s]* getelementptr inbounds ([300 x [300 x %struct.move_s]], [300 x [300 x %struct.move_s]]* @pv, i64 0, i64 1), i64 0, i64 %idxprom8
  call void @unmake(%struct.move_s* %arrayidx9, i32 0)
  br label %for.inc10

for.inc10:                                        ; preds = %for.body7
  %dec = add nsw i32 %i.1, -1
  br label %for.cond5

for.end11:                                        ; preds = %for.cond5
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @post_thinking(i32 %score) #0 {
entry:
  %output = alloca [256 x i8], align 16
  %hashpv = alloca [256 x i8], align 16
  %call = call i64 @rtime()
  %i = load i64, i64* @start_time, align 8
  %call1 = call i32 @rdifftime(i64 %call, i64 %i)
  %cmp = icmp sgt i32 %call1, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %i1 = load i32, i32* @nodes, align 4
  %conv = sitofp i32 %i1 to double
  %mul = fmul double 1.000000e+02, %conv
  %conv2 = sitofp i32 %call1 to double
  %div = fdiv double %mul, %conv2
  %conv3 = fptosi double %div to i32
  br label %if.end

if.else:                                          ; preds = %entry
  %i2 = load i32, i32* @nodes, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %i3 = load i32, i32* @xb_mode, align 4
  %tobool = icmp ne i32 %i3, 0
  br i1 %tobool, label %if.then4, label %if.else6

if.then4:                                         ; preds = %if.end
  %i4 = load i32, i32* @i_depth, align 4
  %i5 = load i32, i32* @nodes, align 4
  %call5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.50.471, i64 0, i64 0), i32 %i4, i32 %score, i32 %call1, i32 %i5)
  br label %if.end13

if.else6:                                         ; preds = %if.end
  %i6 = load i32, i32* @i_depth, align 4
  %cmp7 = icmp slt i32 %score, 0
  %i7 = zext i1 %cmp7 to i64
  %cond = select i1 %cmp7, i32 45, i32 32
  %div9 = sdiv i32 %score, 100
  %call10 = call i32 @abs(i32 %div9) #10
  %rem = srem i32 %score, 100
  %call11 = call i32 @abs(i32 %rem) #10
  %i8 = load i32, i32* @nodes, align 4
  %call12 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.51.472, i64 0, i64 0), i32 %i6, i32 %cond, i32 %call10, i32 %call11, i32 %i8)
  br label %if.end13

if.end13:                                         ; preds = %if.else6, %if.then4
  %i9 = load i32, i32* getelementptr inbounds ([300 x [300 x %struct.move_s]], [300 x [300 x %struct.move_s]]* @pv, i64 0, i64 1, i64 1, i32 0), align 8
  %cmp14 = icmp ne i32 %i9, 0
  br i1 %cmp14, label %land.lhs.true, label %lor.lhs.false

land.lhs.true:                                    ; preds = %if.end13
  %i10 = load i32, i32* getelementptr inbounds ([300 x [300 x %struct.move_s]], [300 x [300 x %struct.move_s]]* @pv, i64 0, i64 1, i64 1, i32 0), align 8
  %idxprom = sext i32 %i10 to i64
  %arrayidx = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom
  %i11 = load i32, i32* %arrayidx, align 4
  %cmp16 = icmp eq i32 %i11, 13
  br i1 %cmp16, label %if.then25, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %land.lhs.true, %if.end13
  %i12 = load i32, i32* getelementptr inbounds ([300 x [300 x %struct.move_s]], [300 x [300 x %struct.move_s]]* @pv, i64 0, i64 1, i64 1, i32 0), align 8
  %cmp18 = icmp eq i32 %i12, 0
  br i1 %cmp18, label %land.lhs.true20, label %if.end26

land.lhs.true20:                                  ; preds = %lor.lhs.false
  %i13 = load i32, i32* getelementptr inbounds ([300 x [300 x %struct.move_s]], [300 x [300 x %struct.move_s]]* @pv, i64 0, i64 1, i64 1, i32 1), align 4
  %idxprom21 = sext i32 %i13 to i64
  %arrayidx22 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom21
  %i14 = load i32, i32* %arrayidx22, align 4
  %cmp23 = icmp ne i32 %i14, 13
  br i1 %cmp23, label %if.then25, label %if.end26

if.then25:                                        ; preds = %land.lhs.true20, %land.lhs.true
  call void @unmake(%struct.move_s* getelementptr inbounds ([300 x [300 x %struct.move_s]], [300 x [300 x %struct.move_s]]* @pv, i64 0, i64 1, i64 1), i32 0)
  br label %if.end26

if.end26:                                         ; preds = %if.then25, %land.lhs.true20, %lor.lhs.false
  %remake.0 = phi i32 [ 1, %if.then25 ], [ 0, %land.lhs.true20 ], [ 0, %lor.lhs.false ]
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end26
  %i.0 = phi i32 [ 1, %if.end26 ], [ %inc, %for.inc ]
  %i15 = load i32, i32* getelementptr inbounds ([300 x i32], [300 x i32]* @pv_length, i64 0, i64 1), align 4
  %cmp27 = icmp slt i32 %i.0, %i15
  br i1 %cmp27, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %idxprom29 = sext i32 %i.0 to i64
  %arrayidx30 = getelementptr inbounds [300 x %struct.move_s], [300 x %struct.move_s]* getelementptr inbounds ([300 x [300 x %struct.move_s]], [300 x [300 x %struct.move_s]]* @pv, i64 0, i64 1), i64 0, i64 %idxprom29
  %arraydecay = getelementptr inbounds [256 x i8], [256 x i8]* %output, i64 0, i64 0
  call void @comp_to_san(%struct.move_s* byval(%struct.move_s) align 8 %arrayidx30, i8* %arraydecay)
  %idxprom31 = sext i32 %i.0 to i64
  %arrayidx32 = getelementptr inbounds [300 x %struct.move_s], [300 x %struct.move_s]* getelementptr inbounds ([300 x [300 x %struct.move_s]], [300 x [300 x %struct.move_s]]* @pv, i64 0, i64 1), i64 0, i64 %idxprom31
  call void @make(%struct.move_s* %arrayidx32, i32 0)
  %arraydecay33 = getelementptr inbounds [256 x i8], [256 x i8]* %output, i64 0, i64 0
  %call34 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @.str.52.473, i64 0, i64 0), i8* %arraydecay33)
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %inc = add nsw i32 %i.0, 1
  br label %for.cond

for.end:                                          ; preds = %for.cond
  %arraydecay35 = getelementptr inbounds [256 x i8], [256 x i8]* %hashpv, i64 0, i64 0
  call void @llvm.memset.p0i8.i64(i8* align 16 %arraydecay35, i8 0, i64 256, i1 false)
  %arraydecay36 = getelementptr inbounds [256 x i8], [256 x i8]* %hashpv, i64 0, i64 0
  call void @hash_extract_pv(i32 7, i8* %arraydecay36)
  %arraydecay37 = getelementptr inbounds [256 x i8], [256 x i8]* %hashpv, i64 0, i64 0
  %call38 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.53.474, i64 0, i64 0), i8* %arraydecay37)
  %i16 = load i32, i32* getelementptr inbounds ([300 x i32], [300 x i32]* @pv_length, i64 0, i64 1), align 4
  %sub = sub nsw i32 %i16, 1
  br label %for.cond39

for.cond39:                                       ; preds = %for.inc45, %for.end
  %i.1 = phi i32 [ %sub, %for.end ], [ %dec, %for.inc45 ]
  %cmp40 = icmp sgt i32 %i.1, 0
  br i1 %cmp40, label %for.body42, label %for.end46

for.body42:                                       ; preds = %for.cond39
  %idxprom43 = sext i32 %i.1 to i64
  %arrayidx44 = getelementptr inbounds [300 x %struct.move_s], [300 x %struct.move_s]* getelementptr inbounds ([300 x [300 x %struct.move_s]], [300 x [300 x %struct.move_s]]* @pv, i64 0, i64 1), i64 0, i64 %idxprom43
  call void @unmake(%struct.move_s* %arrayidx44, i32 0)
  br label %for.inc45

for.inc45:                                        ; preds = %for.body42
  %dec = add nsw i32 %i.1, -1
  br label %for.cond39

for.end46:                                        ; preds = %for.cond39
  %tobool47 = icmp ne i32 %remake.0, 0
  br i1 %tobool47, label %if.then48, label %if.end49

if.then48:                                        ; preds = %for.end46
  call void @make(%struct.move_s* getelementptr inbounds ([300 x [300 x %struct.move_s]], [300 x [300 x %struct.move_s]]* @pv, i64 0, i64 1, i64 1), i32 0)
  br label %if.end49

if.end49:                                         ; preds = %if.then48, %for.end46
  %call50 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.54.475, i64 0, i64 0))
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local i64 @rtime() #0 {
entry:
  ret i64 0
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @rdifftime(i64 %end, i64 %start) #0 {
entry:
  %call = call double @difftime(i64 %end, i64 %start) #10
  %conv = fptosi double %call to i32
  %mul = mul nsw i32 100, %conv
  ret i32 %mul
}

; Function Attrs: nounwind readnone willreturn
declare dso_local double @difftime(i64, i64) #6

; Function Attrs: noinline nounwind uwtable
define dso_local void @post_fail_thinking(i32 %score, %struct.move_s* %failmove) #0 {
entry:
  %output = alloca [256 x i8], align 16
  %byval-temp = alloca %struct.move_s, align 8
  %call = call i64 @rtime()
  %i = load i64, i64* @start_time, align 8
  %call1 = call i32 @rdifftime(i64 %call, i64 %i)
  %cmp = icmp sgt i32 %call1, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %i1 = load i32, i32* @nodes, align 4
  %conv = sitofp i32 %i1 to double
  %mul = fmul double 1.000000e+02, %conv
  %conv2 = sitofp i32 %call1 to double
  %div = fdiv double %mul, %conv2
  %conv3 = fptosi double %div to i32
  br label %if.end

if.else:                                          ; preds = %entry
  %i2 = load i32, i32* @nodes, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %i3 = load i32, i32* @xb_mode, align 4
  %tobool = icmp ne i32 %i3, 0
  br i1 %tobool, label %if.then4, label %if.else6

if.then4:                                         ; preds = %if.end
  %i4 = load i32, i32* @i_depth, align 4
  %i5 = load i32, i32* @nodes, align 4
  %call5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.50.471, i64 0, i64 0), i32 %i4, i32 %score, i32 %call1, i32 %i5)
  br label %if.end13

if.else6:                                         ; preds = %if.end
  %i6 = load i32, i32* @i_depth, align 4
  %cmp7 = icmp slt i32 %score, 0
  %i7 = zext i1 %cmp7 to i64
  %cond = select i1 %cmp7, i32 45, i32 32
  %div9 = sdiv i32 %score, 100
  %call10 = call i32 @abs(i32 %div9) #10
  %rem = srem i32 %score, 100
  %call11 = call i32 @abs(i32 %rem) #10
  %i8 = load i32, i32* @nodes, align 4
  %call12 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.51.472, i64 0, i64 0), i32 %i6, i32 %cond, i32 %call10, i32 %call11, i32 %i8)
  br label %if.end13

if.end13:                                         ; preds = %if.else6, %if.then4
  call void @unmake(%struct.move_s* %failmove, i32 0)
  %arraydecay = getelementptr inbounds [256 x i8], [256 x i8]* %output, i64 0, i64 0
  %i9 = bitcast %struct.move_s* %byval-temp to i8*
  %i10 = bitcast %struct.move_s* %failmove to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %i9, i8* align 4 %i10, i64 24, i1 false)
  call void @comp_to_san(%struct.move_s* byval(%struct.move_s) align 8 %byval-temp, i8* %arraydecay)
  call void @make(%struct.move_s* %failmove, i32 0)
  %arraydecay14 = getelementptr inbounds [256 x i8], [256 x i8]* %output, i64 0, i64 0
  %call15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.55.478, i64 0, i64 0), i8* %arraydecay14)
  %call16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.54.475, i64 0, i64 0))
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @post_fh_thinking(i32 %score, %struct.move_s* %failmove) #0 {
entry:
  %output = alloca [256 x i8], align 16
  %byval-temp = alloca %struct.move_s, align 8
  %call = call i64 @rtime()
  %i = load i64, i64* @start_time, align 8
  %call1 = call i32 @rdifftime(i64 %call, i64 %i)
  %cmp = icmp sgt i32 %call1, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %i1 = load i32, i32* @nodes, align 4
  %conv = sitofp i32 %i1 to double
  %mul = fmul double 1.000000e+02, %conv
  %conv2 = sitofp i32 %call1 to double
  %div = fdiv double %mul, %conv2
  %conv3 = fptosi double %div to i32
  br label %if.end

if.else:                                          ; preds = %entry
  %i2 = load i32, i32* @nodes, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %i3 = load i32, i32* @xb_mode, align 4
  %tobool = icmp ne i32 %i3, 0
  br i1 %tobool, label %if.then4, label %if.else6

if.then4:                                         ; preds = %if.end
  %i4 = load i32, i32* @i_depth, align 4
  %i5 = load i32, i32* @nodes, align 4
  %call5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.50.471, i64 0, i64 0), i32 %i4, i32 %score, i32 %call1, i32 %i5)
  br label %if.end13

if.else6:                                         ; preds = %if.end
  %i6 = load i32, i32* @i_depth, align 4
  %cmp7 = icmp slt i32 %score, 0
  %i7 = zext i1 %cmp7 to i64
  %cond = select i1 %cmp7, i32 45, i32 32
  %div9 = sdiv i32 %score, 100
  %call10 = call i32 @abs(i32 %div9) #10
  %rem = srem i32 %score, 100
  %call11 = call i32 @abs(i32 %rem) #10
  %i8 = load i32, i32* @nodes, align 4
  %call12 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.51.472, i64 0, i64 0), i32 %i6, i32 %cond, i32 %call10, i32 %call11, i32 %i8)
  br label %if.end13

if.end13:                                         ; preds = %if.else6, %if.then4
  call void @unmake(%struct.move_s* %failmove, i32 0)
  %arraydecay = getelementptr inbounds [256 x i8], [256 x i8]* %output, i64 0, i64 0
  %i9 = bitcast %struct.move_s* %byval-temp to i8*
  %i10 = bitcast %struct.move_s* %failmove to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %i9, i8* align 4 %i10, i64 24, i1 false)
  call void @comp_to_san(%struct.move_s* byval(%struct.move_s) align 8 %byval-temp, i8* %arraydecay)
  call void @make(%struct.move_s* %failmove, i32 0)
  %arraydecay14 = getelementptr inbounds [256 x i8], [256 x i8]* %output, i64 0, i64 0
  %call15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.56.481, i64 0, i64 0), i8* %arraydecay14)
  %call16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.54.475, i64 0, i64 0))
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @post_fl_thinking(i32 %score, %struct.move_s* %failmove) #0 {
entry:
  %output = alloca [256 x i8], align 16
  %byval-temp = alloca %struct.move_s, align 8
  %call = call i64 @rtime()
  %i = load i64, i64* @start_time, align 8
  %call1 = call i32 @rdifftime(i64 %call, i64 %i)
  %cmp = icmp sgt i32 %call1, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %i1 = load i32, i32* @nodes, align 4
  %conv = sitofp i32 %i1 to double
  %mul = fmul double 1.000000e+02, %conv
  %conv2 = sitofp i32 %call1 to double
  %div = fdiv double %mul, %conv2
  %conv3 = fptosi double %div to i32
  br label %if.end

if.else:                                          ; preds = %entry
  %i2 = load i32, i32* @nodes, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  %i3 = load i32, i32* @xb_mode, align 4
  %tobool = icmp ne i32 %i3, 0
  br i1 %tobool, label %if.then4, label %if.else6

if.then4:                                         ; preds = %if.end
  %i4 = load i32, i32* @i_depth, align 4
  %i5 = load i32, i32* @nodes, align 4
  %call5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([18 x i8], [18 x i8]* @.str.50.471, i64 0, i64 0), i32 %i4, i32 %score, i32 %call1, i32 %i5)
  br label %if.end13

if.else6:                                         ; preds = %if.end
  %i6 = load i32, i32* @i_depth, align 4
  %cmp7 = icmp slt i32 %score, 0
  %i7 = zext i1 %cmp7 to i64
  %cond = select i1 %cmp7, i32 45, i32 32
  %div9 = sdiv i32 %score, 100
  %call10 = call i32 @abs(i32 %div9) #10
  %rem = srem i32 %score, 100
  %call11 = call i32 @abs(i32 %rem) #10
  %i8 = load i32, i32* @nodes, align 4
  %call12 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([20 x i8], [20 x i8]* @.str.51.472, i64 0, i64 0), i32 %i6, i32 %cond, i32 %call10, i32 %call11, i32 %i8)
  br label %if.end13

if.end13:                                         ; preds = %if.else6, %if.then4
  call void @unmake(%struct.move_s* %failmove, i32 0)
  %arraydecay = getelementptr inbounds [256 x i8], [256 x i8]* %output, i64 0, i64 0
  %i9 = bitcast %struct.move_s* %byval-temp to i8*
  %i10 = bitcast %struct.move_s* %failmove to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %i9, i8* align 4 %i10, i64 24, i1 false)
  call void @comp_to_san(%struct.move_s* byval(%struct.move_s) align 8 %byval-temp, i8* %arraydecay)
  call void @make(%struct.move_s* %failmove, i32 0)
  %arraydecay14 = getelementptr inbounds [256 x i8], [256 x i8]* %output, i64 0, i64 0
  %call15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.57.484, i64 0, i64 0), i8* %arraydecay14)
  %call16 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.54.475, i64 0, i64 0))
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @post_stat_thinking() #0 {
entry:
  %call = call i64 @rtime()
  %i = load i64, i64* @start_time, align 8
  %call1 = call i32 @rdifftime(i64 %call, i64 %i)
  %i1 = load i32, i32* @xb_mode, align 4
  %cmp = icmp eq i32 %i1, 1
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %i2 = load i32, i32* @nodes, align 4
  %i3 = load i32, i32* @i_depth, align 4
  %i4 = load i32, i32* @moveleft, align 4
  %i5 = load i32, i32* @movetotal, align 4
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([24 x i8], [24 x i8]* @.str.58.485, i64 0, i64 0), i32 %call1, i32 %i2, i32 %i3, i32 %i4, i32 %i5)
  br label %if.end6

if.else:                                          ; preds = %entry
  %i6 = load i32, i32* @xb_mode, align 4
  %cmp3 = icmp eq i32 %i6, 2
  br i1 %cmp3, label %if.then4, label %if.end

if.then4:                                         ; preds = %if.else
  %i7 = load i32, i32* @nodes, align 4
  %i8 = load i32, i32* @i_depth, align 4
  %i9 = load i32, i32* @moveleft, align 4
  %i10 = load i32, i32* @movetotal, align 4
  %call5 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([27 x i8], [27 x i8]* @.str.59.486, i64 0, i64 0), i32 %call1, i32 %i7, i32 %i8, i32 %i9, i32 %i10, i8* getelementptr inbounds ([20 x i8], [20 x i8]* @searching_move, i64 0, i64 0))
  br label %if.end

if.end:                                           ; preds = %if.then4, %if.else
  br label %if.end6

if.end6:                                          ; preds = %if.end, %if.then
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @print_move(%struct.move_s* %moves, i32 %m, %struct._IO_FILE* %stream) #0 {
entry:
  %move = alloca [256 x i8], align 16
  %byval-temp = alloca %struct.move_s, align 8
  %idxprom = sext i32 %m to i64
  %arrayidx = getelementptr inbounds %struct.move_s, %struct.move_s* %moves, i64 %idxprom
  %arraydecay = getelementptr inbounds [256 x i8], [256 x i8]* %move, i64 0, i64 0
  %i = bitcast %struct.move_s* %byval-temp to i8*
  %i1 = bitcast %struct.move_s* %arrayidx to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 8 %i, i8* align 4 %i1, i64 24, i1 false)
  call void @comp_to_san(%struct.move_s* byval(%struct.move_s) align 8 %byval-temp, i8* %arraydecay)
  %arraydecay1 = getelementptr inbounds [256 x i8], [256 x i8]* %move, i64 0, i64 0
  %call = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %stream, i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.53.474, i64 0, i64 0), i8* %arraydecay1)
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @rdelay(i32 %time_in_s) #0 {
entry:
  %call = call i64 @rtime()
  br label %while.cond

while.cond:                                       ; preds = %while.body, %entry
  %timer.0 = phi i32 [ 0, %entry ], [ %call2, %while.body ]
  %div = sdiv i32 %timer.0, 100
  %cmp = icmp slt i32 %div, %time_in_s
  br i1 %cmp, label %while.body, label %while.end

while.body:                                       ; preds = %while.cond
  %call1 = call i64 @rtime()
  %call2 = call i32 @rdifftime(i64 %call1, i64 %call)
  br label %while.cond

while.end:                                        ; preds = %while.cond
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @check_piece_square() #0 {
entry:
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %i.0 = phi i32 [ 1, %entry ], [ %inc, %for.inc ]
  %i = load i32, i32* @piece_count, align 4
  %cmp = icmp sle i32 %i.0, %i
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %idxprom = sext i32 %i.0 to i64
  %arrayidx = getelementptr inbounds [62 x i32], [62 x i32]* @pieces, i64 0, i64 %idxprom
  %i1 = load i32, i32* %arrayidx, align 4
  %idxprom1 = sext i32 %i1 to i64
  %arrayidx2 = getelementptr inbounds [144 x i32], [144 x i32]* @squares, i64 0, i64 %idxprom1
  %i2 = load i32, i32* %arrayidx2, align 4
  %cmp3 = icmp ne i32 %i2, %i.0
  br i1 %cmp3, label %land.lhs.true, label %if.end

land.lhs.true:                                    ; preds = %for.body
  %idxprom4 = sext i32 %i.0 to i64
  %arrayidx5 = getelementptr inbounds [62 x i32], [62 x i32]* @pieces, i64 0, i64 %idxprom4
  %i3 = load i32, i32* %arrayidx5, align 4
  %cmp6 = icmp ne i32 %i3, 0
  br i1 %cmp6, label %if.then, label %if.end

if.then:                                          ; preds = %land.lhs.true
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([36 x i8], [36 x i8]* @.str.60.489, i64 0, i64 0))
  %i4 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  call void @display_board(%struct._IO_FILE* %i4, i32 0)
  store i32 0, i32* null, align 4
  br label %if.end

if.end:                                           ; preds = %if.then, %land.lhs.true, %for.body
  %idxprom7 = sext i32 %i.0 to i64
  %arrayidx8 = getelementptr inbounds [62 x i32], [62 x i32]* @pieces, i64 0, i64 %idxprom7
  %i5 = load i32, i32* %arrayidx8, align 4
  %idxprom9 = sext i32 %i5 to i64
  %arrayidx10 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom9
  %i6 = load i32, i32* %arrayidx10, align 4
  %cmp11 = icmp eq i32 %i6, 13
  br i1 %cmp11, label %land.lhs.true12, label %if.end18

land.lhs.true12:                                  ; preds = %if.end
  %idxprom13 = sext i32 %i.0 to i64
  %arrayidx14 = getelementptr inbounds [62 x i32], [62 x i32]* @pieces, i64 0, i64 %idxprom13
  %i7 = load i32, i32* %arrayidx14, align 4
  %cmp15 = icmp ne i32 %i7, 0
  br i1 %cmp15, label %if.then16, label %if.end18

if.then16:                                        ; preds = %land.lhs.true12
  %call17 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([35 x i8], [35 x i8]* @.str.61.490, i64 0, i64 0))
  %i8 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  call void @display_board(%struct._IO_FILE* %i8, i32 0)
  store i32 0, i32* null, align 4
  br label %if.end18

if.end18:                                         ; preds = %if.then16, %land.lhs.true12, %if.end
  %idxprom19 = sext i32 %i.0 to i64
  %arrayidx20 = getelementptr inbounds [62 x i32], [62 x i32]* @pieces, i64 0, i64 %idxprom19
  %i9 = load i32, i32* %arrayidx20, align 4
  %cmp21 = icmp eq i32 %i9, 0
  br i1 %cmp21, label %land.lhs.true22, label %if.end30

land.lhs.true22:                                  ; preds = %if.end18
  %idxprom23 = sext i32 %i.0 to i64
  %arrayidx24 = getelementptr inbounds [62 x i32], [62 x i32]* @pieces, i64 0, i64 %idxprom23
  %i10 = load i32, i32* %arrayidx24, align 4
  %idxprom25 = sext i32 %i10 to i64
  %arrayidx26 = getelementptr inbounds [144 x i32], [144 x i32]* @squares, i64 0, i64 %idxprom25
  %i11 = load i32, i32* %arrayidx26, align 4
  %cmp27 = icmp ne i32 %i11, 0
  br i1 %cmp27, label %if.then28, label %if.end30

if.then28:                                        ; preds = %land.lhs.true22
  %call29 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @.str.62.491, i64 0, i64 0))
  %i12 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  call void @display_board(%struct._IO_FILE* %i12, i32 0)
  store i32 0, i32* null, align 4
  br label %if.end30

if.end30:                                         ; preds = %if.then28, %land.lhs.true22, %if.end18
  br label %for.inc

for.inc:                                          ; preds = %if.end30
  %inc = add nsw i32 %i.0, 1
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %for.cond31

for.cond31:                                       ; preds = %for.inc73, %for.end
  %i.1 = phi i32 [ 0, %for.end ], [ %inc74, %for.inc73 ]
  %cmp32 = icmp slt i32 %i.1, 144
  br i1 %cmp32, label %for.body33, label %for.end75

for.body33:                                       ; preds = %for.cond31
  %idxprom34 = sext i32 %i.1 to i64
  %arrayidx35 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom34
  %i13 = load i32, i32* %arrayidx35, align 4
  %cmp36 = icmp eq i32 %i13, 13
  br i1 %cmp36, label %land.lhs.true40, label %lor.lhs.false

lor.lhs.false:                                    ; preds = %for.body33
  %idxprom37 = sext i32 %i.1 to i64
  %arrayidx38 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom37
  %i14 = load i32, i32* %arrayidx38, align 4
  %cmp39 = icmp eq i32 %i14, 0
  br i1 %cmp39, label %land.lhs.true40, label %if.end46

land.lhs.true40:                                  ; preds = %lor.lhs.false, %for.body33
  %idxprom41 = sext i32 %i.1 to i64
  %arrayidx42 = getelementptr inbounds [144 x i32], [144 x i32]* @squares, i64 0, i64 %idxprom41
  %i15 = load i32, i32* %arrayidx42, align 4
  %cmp43 = icmp ne i32 %i15, 0
  br i1 %cmp43, label %if.then44, label %if.end46

if.then44:                                        ; preds = %land.lhs.true40
  %call45 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([32 x i8], [32 x i8]* @.str.63.492, i64 0, i64 0))
  %i16 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  call void @display_board(%struct._IO_FILE* %i16, i32 0)
  store i32 0, i32* null, align 4
  br label %if.end46

if.end46:                                         ; preds = %if.then44, %land.lhs.true40, %lor.lhs.false
  %idxprom47 = sext i32 %i.1 to i64
  %arrayidx48 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom47
  %i17 = load i32, i32* %arrayidx48, align 4
  %cmp49 = icmp ne i32 %i17, 13
  br i1 %cmp49, label %land.lhs.true50, label %if.end60

land.lhs.true50:                                  ; preds = %if.end46
  %idxprom51 = sext i32 %i.1 to i64
  %arrayidx52 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom51
  %i18 = load i32, i32* %arrayidx52, align 4
  %cmp53 = icmp ne i32 %i18, 0
  br i1 %cmp53, label %land.lhs.true54, label %if.end60

land.lhs.true54:                                  ; preds = %land.lhs.true50
  %idxprom55 = sext i32 %i.1 to i64
  %arrayidx56 = getelementptr inbounds [144 x i32], [144 x i32]* @squares, i64 0, i64 %idxprom55
  %i19 = load i32, i32* %arrayidx56, align 4
  %cmp57 = icmp eq i32 %i19, 0
  br i1 %cmp57, label %if.then58, label %if.end60

if.then58:                                        ; preds = %land.lhs.true54
  %call59 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([39 x i8], [39 x i8]* @.str.64.493, i64 0, i64 0), i32 %i.1)
  %i20 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  call void @display_board(%struct._IO_FILE* %i20, i32 0)
  store i32 0, i32* null, align 4
  br label %if.end60

if.end60:                                         ; preds = %if.then58, %land.lhs.true54, %land.lhs.true50, %if.end46
  %idxprom61 = sext i32 %i.1 to i64
  %arrayidx62 = getelementptr inbounds [144 x i32], [144 x i32]* @squares, i64 0, i64 %idxprom61
  %i21 = load i32, i32* %arrayidx62, align 4
  %idxprom63 = sext i32 %i21 to i64
  %arrayidx64 = getelementptr inbounds [62 x i32], [62 x i32]* @pieces, i64 0, i64 %idxprom63
  %i22 = load i32, i32* %arrayidx64, align 4
  %cmp65 = icmp ne i32 %i22, %i.1
  br i1 %cmp65, label %land.lhs.true66, label %if.end72

land.lhs.true66:                                  ; preds = %if.end60
  %idxprom67 = sext i32 %i.1 to i64
  %arrayidx68 = getelementptr inbounds [144 x i32], [144 x i32]* @squares, i64 0, i64 %idxprom67
  %i23 = load i32, i32* %arrayidx68, align 4
  %cmp69 = icmp ne i32 %i23, 0
  br i1 %cmp69, label %if.then70, label %if.end72

if.then70:                                        ; preds = %land.lhs.true66
  %call71 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.65.494, i64 0, i64 0))
  %i24 = load %struct._IO_FILE*, %struct._IO_FILE** @stdout, align 8
  call void @display_board(%struct._IO_FILE* %i24, i32 0)
  store i32 0, i32* null, align 4
  br label %if.end72

if.end72:                                         ; preds = %if.then70, %land.lhs.true66, %if.end60
  br label %for.inc73

for.inc73:                                        ; preds = %if.end72
  %inc74 = add nsw i32 %i.1, 1
  br label %for.cond31

for.end75:                                        ; preds = %for.cond31
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @start_up() #0 {
entry:
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([71 x i8], [71 x i8]* @.str.66.497, i64 0, i64 0))
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @toggle_bool(i32* %var) #0 {
entry:
  %i = load i32, i32* %var, align 4
  %tobool = icmp ne i32 %i, 0
  br i1 %tobool, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  store i32 0, i32* %var, align 4
  br label %if.end

if.else:                                          ; preds = %entry
  store i32 1, i32* %var, align 4
  br label %if.end

if.end:                                           ; preds = %if.else, %if.then
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @tree_debug() #0 {
entry:
  %input = alloca [256 x i8], align 16
  call void @init_game()
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([34 x i8], [34 x i8]* @.str.67.500, i64 0, i64 0))
  %arraydecay = getelementptr inbounds [256 x i8], [256 x i8]* %input, i64 0, i64 0
  %i = load %struct._IO_FILE*, %struct._IO_FILE** @stdin, align 8
  call void @rinput(i8* %arraydecay, i32 256, %struct._IO_FILE* %i)
  %arraydecay1 = getelementptr inbounds [256 x i8], [256 x i8]* %input, i64 0, i64 0
  %call2 = call i32 @atoi(i8* %arraydecay1) #11
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.68.501, i64 0, i64 0))
  %arraydecay4 = getelementptr inbounds [256 x i8], [256 x i8]* %input, i64 0, i64 0
  %i1 = load %struct._IO_FILE*, %struct._IO_FILE** @stdin, align 8
  call void @rinput(i8* %arraydecay4, i32 256, %struct._IO_FILE* %i1)
  %arrayidx = getelementptr inbounds [256 x i8], [256 x i8]* %input, i64 0, i64 0
  %i2 = load i8, i8* %arrayidx, align 16
  %conv = sext i8 %i2 to i32
  %cmp = icmp eq i32 %conv, 121
  br i1 %cmp, label %if.then, label %if.end18

if.then:                                          ; preds = %entry
  %call6 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([56 x i8], [56 x i8]* @.str.69.502, i64 0, i64 0))
  %arraydecay7 = getelementptr inbounds [256 x i8], [256 x i8]* %input, i64 0, i64 0
  %i3 = load %struct._IO_FILE*, %struct._IO_FILE** @stdin, align 8
  call void @rinput(i8* %arraydecay7, i32 256, %struct._IO_FILE* %i3)
  %arraydecay8 = getelementptr inbounds [256 x i8], [256 x i8]* %input, i64 0, i64 0
  %call9 = call noalias %struct._IO_FILE* @fopen(i8* %arraydecay8, i8* getelementptr inbounds ([2 x i8], [2 x i8]* @.str.70.503, i64 0, i64 0))
  %cmp10 = icmp eq %struct._IO_FILE* %call9, null
  br i1 %cmp10, label %if.then12, label %if.end

if.then12:                                        ; preds = %if.then
  %i4 = load %struct._IO_FILE*, %struct._IO_FILE** @stderr, align 8
  %arraydecay13 = getelementptr inbounds [256 x i8], [256 x i8]* %input, i64 0, i64 0
  %call14 = call i32 (%struct._IO_FILE*, i8*, ...) @fprintf(%struct._IO_FILE* %i4, i8* getelementptr inbounds ([23 x i8], [23 x i8]* @.str.71.504, i64 0, i64 0), i8* %arraydecay13)
  br label %if.end

if.end:                                           ; preds = %if.then12, %if.then
  %call15 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([40 x i8], [40 x i8]* @.str.72.505, i64 0, i64 0))
  %arraydecay16 = getelementptr inbounds [256 x i8], [256 x i8]* %input, i64 0, i64 0
  %i5 = load %struct._IO_FILE*, %struct._IO_FILE** @stdin, align 8
  call void @rinput(i8* %arraydecay16, i32 256, %struct._IO_FILE* %i5)
  %arraydecay17 = getelementptr inbounds [256 x i8], [256 x i8]* %input, i64 0, i64 0
  call void @tree(i32 %call2, i32 0, %struct._IO_FILE* %call9, i8* %arraydecay17)
  br label %if.end18

if.end18:                                         ; preds = %if.end, %entry
  store i32 0, i32* @raw_nodes, align 4
  call void @perft(i32 %call2)
  %i6 = load i32, i32* @raw_nodes, align 4
  %call19 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([37 x i8], [37 x i8]* @.str.73.506, i64 0, i64 0), i8* getelementptr inbounds ([50 x i8], [50 x i8]* @divider, i64 0, i64 0), i32 %call2, i32 %i6, i8* getelementptr inbounds ([50 x i8], [50 x i8]* @divider, i64 0, i64 0))
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @interrupt() #0 {
entry:
  ret i32 0
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @PutPiece(i32 %color, i8 signext %piece, i8 signext %pfile, i32 %prank) #0 {
entry:
  %conv = sext i8 %pfile to i32
  %sub = sub nsw i32 %conv, 97
  %sub1 = sub nsw i32 %prank, 49
  %mul = mul nsw i32 %sub1, 12
  %add = add nsw i32 %mul, 26
  %add2 = add nsw i32 %add, %sub
  %cmp = icmp eq i32 %color, 0
  br i1 %cmp, label %if.then, label %if.else

if.then:                                          ; preds = %entry
  %conv4 = sext i8 %piece to i32
  switch i32 %conv4, label %sw.epilog [
    i32 112, label %sw.bb
    i32 110, label %sw.bb5
    i32 98, label %sw.bb8
    i32 114, label %sw.bb11
    i32 113, label %sw.bb14
    i32 107, label %sw.bb17
    i32 120, label %sw.bb20
  ]

sw.bb:                                            ; preds = %if.then
  %idxprom = sext i32 %add2 to i64
  %arrayidx = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom
  store i32 1, i32* %arrayidx, align 4
  br label %sw.epilog

sw.bb5:                                           ; preds = %if.then
  %idxprom6 = sext i32 %add2 to i64
  %arrayidx7 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom6
  store i32 3, i32* %arrayidx7, align 4
  br label %sw.epilog

sw.bb8:                                           ; preds = %if.then
  %idxprom9 = sext i32 %add2 to i64
  %arrayidx10 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom9
  store i32 11, i32* %arrayidx10, align 4
  br label %sw.epilog

sw.bb11:                                          ; preds = %if.then
  %idxprom12 = sext i32 %add2 to i64
  %arrayidx13 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom12
  store i32 7, i32* %arrayidx13, align 4
  br label %sw.epilog

sw.bb14:                                          ; preds = %if.then
  %idxprom15 = sext i32 %add2 to i64
  %arrayidx16 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom15
  store i32 9, i32* %arrayidx16, align 4
  br label %sw.epilog

sw.bb17:                                          ; preds = %if.then
  %idxprom18 = sext i32 %add2 to i64
  %arrayidx19 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom18
  store i32 5, i32* %arrayidx19, align 4
  br label %sw.epilog

sw.bb20:                                          ; preds = %if.then
  %idxprom21 = sext i32 %add2 to i64
  %arrayidx22 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom21
  store i32 13, i32* %arrayidx22, align 4
  br label %sw.epilog

sw.epilog:                                        ; preds = %sw.bb20, %sw.bb17, %sw.bb14, %sw.bb11, %sw.bb8, %sw.bb5, %sw.bb, %if.then
  br label %if.end49

if.else:                                          ; preds = %entry
  %cmp23 = icmp eq i32 %color, 1
  br i1 %cmp23, label %if.then25, label %if.end

if.then25:                                        ; preds = %if.else
  %conv26 = sext i8 %piece to i32
  switch i32 %conv26, label %sw.epilog48 [
    i32 112, label %sw.bb27
    i32 110, label %sw.bb30
    i32 98, label %sw.bb33
    i32 114, label %sw.bb36
    i32 113, label %sw.bb39
    i32 107, label %sw.bb42
    i32 120, label %sw.bb45
  ]

sw.bb27:                                          ; preds = %if.then25
  %idxprom28 = sext i32 %add2 to i64
  %arrayidx29 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom28
  store i32 2, i32* %arrayidx29, align 4
  br label %sw.epilog48

sw.bb30:                                          ; preds = %if.then25
  %idxprom31 = sext i32 %add2 to i64
  %arrayidx32 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom31
  store i32 4, i32* %arrayidx32, align 4
  br label %sw.epilog48

sw.bb33:                                          ; preds = %if.then25
  %idxprom34 = sext i32 %add2 to i64
  %arrayidx35 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom34
  store i32 12, i32* %arrayidx35, align 4
  br label %sw.epilog48

sw.bb36:                                          ; preds = %if.then25
  %idxprom37 = sext i32 %add2 to i64
  %arrayidx38 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom37
  store i32 8, i32* %arrayidx38, align 4
  br label %sw.epilog48

sw.bb39:                                          ; preds = %if.then25
  %idxprom40 = sext i32 %add2 to i64
  %arrayidx41 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom40
  store i32 10, i32* %arrayidx41, align 4
  br label %sw.epilog48

sw.bb42:                                          ; preds = %if.then25
  %idxprom43 = sext i32 %add2 to i64
  %arrayidx44 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom43
  store i32 6, i32* %arrayidx44, align 4
  br label %sw.epilog48

sw.bb45:                                          ; preds = %if.then25
  %idxprom46 = sext i32 %add2 to i64
  %arrayidx47 = getelementptr inbounds [144 x i32], [144 x i32]* @board, i64 0, i64 %idxprom46
  store i32 13, i32* %arrayidx47, align 4
  br label %sw.epilog48

sw.epilog48:                                      ; preds = %sw.bb45, %sw.bb42, %sw.bb39, %sw.bb36, %sw.bb33, %sw.bb30, %sw.bb27, %if.then25
  br label %if.end

if.end:                                           ; preds = %sw.epilog48, %if.else
  br label %if.end49

if.end49:                                         ; preds = %if.end, %sw.epilog
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @reset_board() #0 {
entry:
  %init_board = alloca [144 x i32], align 16
  %i = bitcast [144 x i32]* %init_board to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 %i, i8* align 16 bitcast (<{ [118 x i32], [26 x i32] }>* @__const.reset_board.init_board to i8*), i64 576, i1 false)
  %arraydecay = getelementptr inbounds [144 x i32], [144 x i32]* %init_board, i64 0, i64 0
  %i1 = bitcast i32* %arraydecay to i8*
  call void @llvm.memcpy.p0i8.p0i8.i64(i8* align 16 bitcast ([144 x i32]* @board to i8*), i8* align 16 %i1, i64 576, i1 false)
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %i.0 = phi i32 [ 0, %entry ], [ %inc, %for.inc ]
  %cmp = icmp sle i32 %i.0, 143
  br i1 %cmp, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %idxprom = sext i32 %i.0 to i64
  %arrayidx = getelementptr inbounds [144 x i32], [144 x i32]* @moved, i64 0, i64 %idxprom
  store i32 0, i32* %arrayidx, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %inc = add nsw i32 %i.0, 1
  br label %for.cond

for.end:                                          ; preds = %for.cond
  store i32 0, i32* @ep_square, align 4
  store i32 0, i32* @piece_count, align 4
  store i32 0, i32* @Material, align 4
  call void @llvm.memset.p0i8.i64(i8* align 16 bitcast ([62 x i32]* @is_promoted to i8*), i8 0, i64 248, i1 false)
  call void @llvm.memset.p0i8.i64(i8* align 16 bitcast ([2 x [16 x i32]]* @holding to i8*), i8 0, i64 128, i1 false)
  store i32 0, i32* @white_hand_eval, align 4
  store i32 0, i32* @black_hand_eval, align 4
  store i32 0, i32* @bookidx, align 4
  store i32 0, i32* @fifty, align 4
  call void @reset_piece_square()
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local void @seedMT(i32 %seed) #0 {
entry:
  %or = or i32 %seed, 1
  store i32 0, i32* @left, align 4
  %incdec.ptr = getelementptr inbounds i32, i32* getelementptr inbounds ([625 x i32], [625 x i32]* @state, i64 0, i64 0), i32 1
  store i32 %or, i32* getelementptr inbounds ([625 x i32], [625 x i32]* @state, i64 0, i64 0), align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %entry
  %s.0 = phi i32* [ %incdec.ptr, %entry ], [ %incdec.ptr1, %for.inc ]
  %x.0 = phi i32 [ %or, %entry ], [ %mul, %for.inc ]
  %j.0 = phi i32 [ 624, %entry ], [ %dec, %for.inc ]
  %dec = add nsw i32 %j.0, -1
  %tobool = icmp ne i32 %dec, 0
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %mul = mul i32 %x.0, 69069
  %incdec.ptr1 = getelementptr inbounds i32, i32* %s.0, i32 1
  store i32 %mul, i32* %s.0, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  ret void
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @reloadMT() #0 {
entry:
  %i = load i32, i32* @left, align 4
  %cmp = icmp slt i32 %i, -1
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  call void @seedMT(i32 4357)
  br label %if.end

if.end:                                           ; preds = %if.then, %entry
  store i32 623, i32* @left, align 4
  store i32* getelementptr inbounds ([625 x i32], [625 x i32]* @state, i64 0, i64 1), i32** @next, align 8
  %i1 = load i32, i32* getelementptr inbounds ([625 x i32], [625 x i32]* @state, i64 0, i64 0), align 16
  %i2 = load i32, i32* getelementptr inbounds ([625 x i32], [625 x i32]* @state, i64 0, i64 1), align 4
  br label %for.cond

for.cond:                                         ; preds = %for.inc, %if.end
  %j.0 = phi i32 [ 228, %if.end ], [ %dec, %for.inc ]
  %s1.0 = phi i32 [ %i2, %if.end ], [ %i5, %for.inc ]
  %s0.0 = phi i32 [ %i1, %if.end ], [ %s1.0, %for.inc ]
  %pM.0 = phi i32* [ getelementptr inbounds ([625 x i32], [625 x i32]* @state, i64 0, i64 397), %if.end ], [ %incdec.ptr, %for.inc ]
  %p2.0 = phi i32* [ getelementptr inbounds ([625 x i32], [625 x i32]* @state, i64 0, i64 2), %if.end ], [ %incdec.ptr6, %for.inc ]
  %p0.0 = phi i32* [ getelementptr inbounds ([625 x i32], [625 x i32]* @state, i64 0, i64 0), %if.end ], [ %incdec.ptr5, %for.inc ]
  %dec = add nsw i32 %j.0, -1
  %tobool = icmp ne i32 %dec, 0
  br i1 %tobool, label %for.body, label %for.end

for.body:                                         ; preds = %for.cond
  %incdec.ptr = getelementptr inbounds i32, i32* %pM.0, i32 1
  %i3 = load i32, i32* %pM.0, align 4
  %and = and i32 %s0.0, -2147483648
  %and1 = and i32 %s1.0, 2147483647
  %or = or i32 %and, %and1
  %shr = lshr i32 %or, 1
  %xor = xor i32 %i3, %shr
  %and2 = and i32 %s1.0, 1
  %tobool3 = icmp ne i32 %and2, 0
  %i4 = zext i1 %tobool3 to i64
  %cond = select i1 %tobool3, i32 -1727483681, i32 0
  %xor4 = xor i32 %xor, %cond
  %incdec.ptr5 = getelementptr inbounds i32, i32* %p0.0, i32 1
  store i32 %xor4, i32* %p0.0, align 4
  br label %for.inc

for.inc:                                          ; preds = %for.body
  %incdec.ptr6 = getelementptr inbounds i32, i32* %p2.0, i32 1
  %i5 = load i32, i32* %p2.0, align 4
  br label %for.cond

for.end:                                          ; preds = %for.cond
  br label %for.cond7

for.cond7:                                        ; preds = %for.inc22, %for.end
  %j.1 = phi i32 [ 397, %for.end ], [ %dec8, %for.inc22 ]
  %s1.1 = phi i32 [ %s1.0, %for.end ], [ %i8, %for.inc22 ]
  %s0.1 = phi i32 [ %s0.0, %for.end ], [ %s1.1, %for.inc22 ]
  %pM.1 = phi i32* [ getelementptr inbounds ([625 x i32], [625 x i32]* @state, i64 0, i64 0), %for.end ], [ %incdec.ptr11, %for.inc22 ]
  %p2.1 = phi i32* [ %p2.0, %for.end ], [ %incdec.ptr23, %for.inc22 ]
  %p0.1 = phi i32* [ %p0.0, %for.end ], [ %incdec.ptr21, %for.inc22 ]
  %dec8 = add nsw i32 %j.1, -1
  %tobool9 = icmp ne i32 %dec8, 0
  br i1 %tobool9, label %for.body10, label %for.end24

for.body10:                                       ; preds = %for.cond7
  %incdec.ptr11 = getelementptr inbounds i32, i32* %pM.1, i32 1
  %i6 = load i32, i32* %pM.1, align 4
  %and12 = and i32 %s0.1, -2147483648
  %and13 = and i32 %s1.1, 2147483647
  %or14 = or i32 %and12, %and13
  %shr15 = lshr i32 %or14, 1
  %xor16 = xor i32 %i6, %shr15
  %and17 = and i32 %s1.1, 1
  %tobool18 = icmp ne i32 %and17, 0
  %i7 = zext i1 %tobool18 to i64
  %cond19 = select i1 %tobool18, i32 -1727483681, i32 0
  %xor20 = xor i32 %xor16, %cond19
  %incdec.ptr21 = getelementptr inbounds i32, i32* %p0.1, i32 1
  store i32 %xor20, i32* %p0.1, align 4
  br label %for.inc22

for.inc22:                                        ; preds = %for.body10
  %incdec.ptr23 = getelementptr inbounds i32, i32* %p2.1, i32 1
  %i8 = load i32, i32* %p2.1, align 4
  br label %for.cond7

for.end24:                                        ; preds = %for.cond7
  %i9 = load i32, i32* getelementptr inbounds ([625 x i32], [625 x i32]* @state, i64 0, i64 0), align 16
  %i10 = load i32, i32* %pM.1, align 4
  %and25 = and i32 %s0.1, -2147483648
  %and26 = and i32 %i9, 2147483647
  %or27 = or i32 %and25, %and26
  %shr28 = lshr i32 %or27, 1
  %xor29 = xor i32 %i10, %shr28
  %and30 = and i32 %i9, 1
  %tobool31 = icmp ne i32 %and30, 0
  %i11 = zext i1 %tobool31 to i64
  %cond32 = select i1 %tobool31, i32 -1727483681, i32 0
  %xor33 = xor i32 %xor29, %cond32
  store i32 %xor33, i32* %p0.1, align 4
  %shr34 = lshr i32 %i9, 11
  %xor35 = xor i32 %i9, %shr34
  %shl = shl i32 %xor35, 7
  %and36 = and i32 %shl, -1658038656
  %xor37 = xor i32 %xor35, %and36
  %shl38 = shl i32 %xor37, 15
  %and39 = and i32 %shl38, -272236544
  %xor40 = xor i32 %xor37, %and39
  %shr41 = lshr i32 %xor40, 18
  %xor42 = xor i32 %xor40, %shr41
  ret i32 %xor42
}

; Function Attrs: noinline nounwind uwtable
define dso_local i32 @randomMT() #0 {
entry:
  %i = load i32, i32* @left, align 4
  %dec = add nsw i32 %i, -1
  store i32 %dec, i32* @left, align 4
  %cmp = icmp slt i32 %dec, 0
  br i1 %cmp, label %if.then, label %if.end

if.then:                                          ; preds = %entry
  %call = call i32 @reloadMT()
  br label %return

if.end:                                           ; preds = %entry
  %i1 = load i32*, i32** @next, align 8
  %incdec.ptr = getelementptr inbounds i32, i32* %i1, i32 1
  store i32* %incdec.ptr, i32** @next, align 8
  %i2 = load i32, i32* %i1, align 4
  %shr = lshr i32 %i2, 11
  %xor = xor i32 %i2, %shr
  %shl = shl i32 %xor, 7
  %and = and i32 %shl, -1658038656
  %xor1 = xor i32 %xor, %and
  %shl2 = shl i32 %xor1, 15
  %and3 = and i32 %shl2, -272236544
  %xor4 = xor i32 %xor1, %and3
  %shr5 = lshr i32 %xor4, 18
  %xor6 = xor i32 %xor4, %shr5
  br label %return

return:                                           ; preds = %if.end, %if.then
  %retval.0 = phi i32 [ %call, %if.then ], [ %xor6, %if.end ]
  ret i32 %retval.0
}

attributes #0 = { noinline nounwind uwtable "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "min-legal-vector-width"="0" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { argmemonly nofree nosync nounwind willreturn }
attributes #2 = { argmemonly nofree nosync nounwind willreturn writeonly }
attributes #3 = { nounwind "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #4 = { "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #5 = { noreturn nounwind "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #6 = { nounwind readnone willreturn "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #7 = { nounwind readonly willreturn "disable-tail-calls"="false" "frame-pointer"="all" "less-precise-fpmad"="false" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="x86-64" "target-features"="+cx8,+fxsr,+mmx,+sse,+sse2,+x87" "tune-cpu"="generic" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #8 = { nounwind }
attributes #9 = { noreturn nounwind }
attributes #10 = { nounwind readnone willreturn }
attributes #11 = { nounwind readonly willreturn }

!llvm.ident = !{!0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0, !0}
!llvm.module.flags = !{!1}

!0 = !{!"Ubuntu clang version 12.0.1-8build1"}
!1 = !{i32 1, !"wchar_size", i32 4}
